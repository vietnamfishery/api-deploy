{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./services/index.ts","webpack:///./common/index.ts","webpack:///./lib/index.ts","webpack:///external \"lodash\"","webpack:///external \"sequelize\"","webpack:///./models/objects/index.ts","webpack:///./services/base.services.ts","webpack:///./components/baseComponents.ts","webpack:///./models/objects/base.model.ts","webpack:///./routes/BaseRoute.ts","webpack:///./components/index.ts","webpack:///./helpers/login-helpers.ts","webpack:///../node_modules/uuid/v4.js","webpack:///./googleAPI/drive.google.ts","webpack:///./config/index.ts","webpack:///./helpers/db-helpers.ts","webpack:///./schemas/index.ts","webpack:///external \"fs\"","webpack:///external \"express\"","webpack:///external \"moment-timezone\"","webpack:///./lib/promise.ts","webpack:///external \"bluebird\"","webpack:///./models/ponduserroles.associate.ts","webpack:///./services/logger.ts","webpack:///./services/user.services.ts","webpack:///./components/district/index.ts","webpack:///./components/province/index.ts","webpack:///./components/ward/index.ts","webpack:///external \"jsonwebtoken\"","webpack:///./socketServer/BaseSocket.ts","webpack:///./index.ts","webpack:///./app.ts","webpack:///./bin/setEnvironment.ts","webpack:///external \"dotenv\"","webpack:///external \"body-parser\"","webpack:///external \"cookie-parser\"","webpack:///external \"http-errors\"","webpack:///external \"compression\"","webpack:///external \"errorhandler\"","webpack:///external \"cors\"","webpack:///external \"express-status-monitor\"","webpack:///external \"helmet\"","webpack:///external \"method-override\"","webpack:///external \"morgan\"","webpack:///external \"path\"","webpack:///external \"express-fileupload\"","webpack:///external \"socket.io\"","webpack:///external \"http\"","webpack:///external \"googleapis\"","webpack:///./common/constant.ts","webpack:///./lib/date-util.ts","webpack:///./lib/enscrypts.ts","webpack:///external \"bcryptjs\"","webpack:///./lib/stream.ts","webpack:///external \"stream\"","webpack:///external \"os\"","webpack:///./models/model-builder.ts","webpack:///./models/index.ts","webpack:///./models/boughtbreeddetails.associate.ts","webpack:///./models/boughtbreeds.associate.ts","webpack:///./models/breeds.associate.ts","webpack:///./models/ownerBreed.associate.ts","webpack:///./models/costs.associate.ts","webpack:///./models/coupon.associate.ts","webpack:///./models/diedfisherys.associate.ts","webpack:///./models/growths.associate.ts","webpack:///./models/harvestdetails.associate.ts","webpack:///./models/harvests.associate.ts","webpack:///./models/material.associate.ts","webpack:///./models/ponddiary.associate.ts","webpack:///./models/pondenvironments.associate.ts","webpack:///./models/pondprepare.associate.ts","webpack:///./models/pondpreparedetails.associate.ts","webpack:///./models/ponds.associate.ts","webpack:///./models/prices.associate.ts","webpack:///./models/season.associate.ts","webpack:///./models/seasonandpond.associate.ts","webpack:///./models/stocking.associate.ts","webpack:///./models/stockingdetails.associate.ts","webpack:///./models/storages.associate.ts","webpack:///./models/storageOwner.associate.ts","webpack:///./models/takecare.associate.ts","webpack:///./models/users.associate.ts","webpack:///./models/userRoles.associate.ts","webpack:///./models/usingfoods.associate.ts","webpack:///./models/usingveterinary.associate.ts","webpack:///./models/province.associate.ts","webpack:///./models/district.associate.ts","webpack:///./models/ward.associate.ts","webpack:///./models/incurreds.associate.ts","webpack:///./models/objects/boughtbreeddetails.ts","webpack:///./models/objects/boughtbreeds.ts","webpack:///./models/objects/breeds.ts","webpack:///./models/objects/costs.ts","webpack:///./models/objects/coupons.ts","webpack:///./models/objects/diedfisherys.ts","webpack:///./models/objects/district.ts","webpack:///./models/objects/growths.ts","webpack:///./models/objects/harvestdetails.ts","webpack:///./models/objects/harvests.ts","webpack:///./models/objects/material.ts","webpack:///./models/objects/ownerBreed.model.ts","webpack:///./models/objects/ponddiary.ts","webpack:///./models/objects/pondenvironments.ts","webpack:///./models/objects/pondprepare.ts","webpack:///./models/objects/pondpreparedetails.ts","webpack:///./models/objects/ponds.ts","webpack:///./models/objects/ponduserroles.ts","webpack:///./models/objects/prices.ts","webpack:///./models/objects/province.ts","webpack:///./models/objects/seasons.ts","webpack:///./models/objects/incurreds.model.ts","webpack:///./models/objects/seasonandpond.ts","webpack:///./models/objects/stocking.ts","webpack:///./models/objects/stockingdetails.ts","webpack:///./models/objects/storages.model.ts","webpack:///./models/objects/storageOwner.model.ts","webpack:///./models/objects/takecare.ts","webpack:///./models/objects/users.ts","webpack:///./models/objects/userRoles.ts","webpack:///./models/objects/usingfoods.ts","webpack:///./models/objects/usingveterinary.ts","webpack:///./models/objects/ward.ts","webpack:///./routes/index.ts","webpack:///external \"http-status-codes\"","webpack:///external \"is-my-json-valid\"","webpack:///./routes/users/index.ts","webpack:///./routes/users/users.route.ts","webpack:///external \"winston\"","webpack:///./services/upload.ts","webpack:///external \"del\"","webpack:///./components/boughtBreed/index.ts","webpack:///./components/boughtBreed/boughtBreed.ts","webpack:///./components/boughtBreedDetail/index.ts","webpack:///./components/boughtBreedDetail/boughtBreedDetail.ts","webpack:///./components/breed/index.ts","webpack:///./components/breed/breed.ts","webpack:///./components/breedOwner/index.ts","webpack:///./components/breedOwner/breedOwner.ts","webpack:///./components/cost/index.ts","webpack:///./components/cost/cost.ts","webpack:///./components/coupon/index.ts","webpack:///./components/coupon/coupon.ts","webpack:///./components/diedFishery/index.ts","webpack:///./components/diedFishery/diedFishery.ts","webpack:///./components/district/district.ts","webpack:///./components/growth/index.ts","webpack:///./components/growth/growth.ts","webpack:///./components/harvestDetail/index.ts","webpack:///./components/harvestDetail/harvestDetail.ts","webpack:///./components/harvest/index.ts","webpack:///./components/harvest/harvest.ts","webpack:///./components/material/index.ts","webpack:///./components/material/material.ts","webpack:///./components/pondEnvironment/index.ts","webpack:///./components/pondEnvironment/pondEnvironment.ts","webpack:///./components/pondUserRole/index.ts","webpack:///./components/pondUserRole/pondUserRole.ts","webpack:///./components/pondDiary/index.ts","webpack:///./components/pondDiary/pondDiary.ts","webpack:///./components/pondPrepare/index.ts","webpack:///./components/pondPrepare/pondPrepare.ts","webpack:///./components/pondPrepareDetails/index.ts","webpack:///./components/pondPrepareDetails/pondPrepareDetails.ts","webpack:///./components/pond/index.ts","webpack:///./components/pond/pond.ts","webpack:///./components/price/index.ts","webpack:///./components/price/price.ts","webpack:///./components/province/province.ts","webpack:///./components/season/index.ts","webpack:///./components/season/season.ts","webpack:///./components/seasonsAndPond/index.ts","webpack:///./components/seasonsAndPond/seasonsAndPond.ts","webpack:///./components/stocking/index.ts","webpack:///./components/stocking/stocking.ts","webpack:///./components/stockingDetail/index.ts","webpack:///./components/stockingDetail/stockingDetail.ts","webpack:///./components/storage/index.ts","webpack:///./components/storage/storage.ts","webpack:///./components/storageOwner/index.ts","webpack:///./components/storageOwner/storageOwner.ts","webpack:///./components/takeCare/index.ts","webpack:///./components/takeCare/takeCare.ts","webpack:///./components/userRole/index.ts","webpack:///./components/userRole/userRole.ts","webpack:///./components/user/index.ts","webpack:///./components/user/user.ts","webpack:///./components/usingFood/index.ts","webpack:///./components/usingFood/usingFood.ts","webpack:///./components/usingVeterinary/index.ts","webpack:///./components/usingVeterinary/usingVeterinary.ts","webpack:///./components/ward/ward.ts","webpack:///./components/incurreds/index.ts","webpack:///./components/incurreds/incurreds.ts","webpack:///./services/bought-breed-details.services.ts","webpack:///./services/bought-breeds.services.ts","webpack:///./services/breeds.services.ts","webpack:///./services/breedOwner.services.ts","webpack:///./services/costs.services.ts","webpack:///./services/coupon.services.ts","webpack:///./services/died-fisherys.services.ts","webpack:///./services/district.services.ts","webpack:///./services/growths.services.ts","webpack:///./services/harvest-details.services.ts","webpack:///./services/harvests.services.ts","webpack:///./services/material.services.ts","webpack:///./services/pond-diary.services.ts","webpack:///./services/pond-environments.services.ts","webpack:///./services/pond-prepare-details.services.ts","webpack:///./services/pond-prepare.services.ts","webpack:///./services/ponds.services.ts","webpack:///./services/prices.services.ts","webpack:///./services/province.services.ts","webpack:///./services/pondUserRoles.services.ts","webpack:///./services/season.services.ts","webpack:///./services/stocking-details.services.ts","webpack:///./services/stocking.services.ts","webpack:///./services/storages.services.ts","webpack:///./services/storagesOwner.services.ts","webpack:///./services/take-care.services.ts","webpack:///./services/usersRoles.services.ts","webpack:///./services/using-foods.services.ts","webpack:///./services/using-veterinary.services.ts","webpack:///./services/ward.services.ts","webpack:///./services/seasonAndPond.services.ts","webpack:///./services/incurreds.services.ts","webpack:///../node_modules/uuid/lib/rng.js","webpack:///external \"crypto\"","webpack:///../node_modules/uuid/lib/bytesToUuid.js","webpack:///./routes/upload/index.ts","webpack:///./routes/upload/upload.route.ts","webpack:///./routes/getFile/index.ts","webpack:///./routes/getFile/getFile.route.ts","webpack:///./routes/province/index.ts","webpack:///./routes/province/province.route.ts","webpack:///./routes/district/index.ts","webpack:///./routes/district/district.route.ts","webpack:///./routes/ward/index.ts","webpack:///./routes/ward/ward.route.ts","webpack:///./routes/ponds/index.ts","webpack:///./routes/ponds/ponds.route.ts","webpack:///./schemas/pondPrepare.schema.ts","webpack:///./schemas/seasons.schema.ts","webpack:///./schemas/ponds.schema.ts","webpack:///./schemas/pondDiary.schema.ts","webpack:///./routes/seasons/index.ts","webpack:///./routes/seasons/seasons.route.ts","webpack:///./routes/pondPrepare/index.ts","webpack:///./routes/pondPrepare/pondPrepare.route.ts","webpack:///./routes/pondPrepareDetail/index.ts","webpack:///./routes/pondPrepareDetail/pondPrepareDetails.route.ts","webpack:///./routes/storages/index.ts","webpack:///./routes/storages/storages.route.ts","webpack:///./routes/breed/index.ts","webpack:///./routes/breed/breed.route.ts","webpack:///./routes/stocking/index.ts","webpack:///./routes/stocking/stocking.route.ts","webpack:///./routes/diedFishery/index.ts","webpack:///./routes/diedFishery/diedFishery.route.ts","webpack:///./routes/growths/index.ts","webpack:///./routes/growths/growths.route.ts","webpack:///./routes/harvest/index.ts","webpack:///./routes/harvest/harvest.route.ts","webpack:///./routes/userRoles/index.ts","webpack:///./routes/userRoles/userRoles.route.ts","webpack:///./routes/pondUserRoles/index.ts","webpack:///./routes/pondUserRoles/pondsUsersRoles.route.ts","webpack:///./routes/material/index.ts","webpack:///./routes/material/material.route.ts","webpack:///./routes/seasonAndPond/index.ts","webpack:///./routes/seasonAndPond/seasonAndPond.route.ts","webpack:///./routes/usingFood/index.ts","webpack:///./routes/usingFood/usingFood.route.ts","webpack:///./routes/pondDiary/index.ts","webpack:///./routes/pondDiary/pondDiary.route.ts","webpack:///./routes/takeCare/index.ts","webpack:///./routes/takeCare/takeCare.route.ts","webpack:///./routes/usingVeterinary/index.ts","webpack:///./routes/usingVeterinary/usingVeterinary.route.ts","webpack:///./routes/costs/index.ts","webpack:///./routes/costs/costs.route.ts","webpack:///./socketServer/index.ts","webpack:///./socketServer/task-scheduler.socket.ts","webpack:///external \"node-schedule\"","webpack:///external \"debug\"","webpack:///external \"greenlock-express\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","__export","require","Sequeliz","db_helpers_1","lib_1","BaseServices","optionsModel","tableName","attributes","options","this","Op","conn","default","getById","id","userId","_this","Promise","resolve","reject","models","findById","then","obj","dataValues","getAll","query","findAll","getQuery","catch","e","insert","data","record","update","md","where","primaryFieldName","primaryKeyField","res","findAndCountAll","criteria","BaseComponent","criteriaQuery","offset","pageIndex","Number","limit","pageSizes","__assign","getFields","that","undefined","match","services","gets","condition","gotOptions","baseModel","createdAt","updatedAt","deletedAt","defaultScope","isDeleted","scopes","deletedRecord","hooks","express_1","config_1","validator","BaseRoute","router","Router","connection","sequeliz","sequelize","logEndpoints","path","_i","_a","stack","length","endpoints","keys","route","methods","toLocaleUpperCase","console","log","method","colorCli","MAGENTA","post","YELLOW","put","CYAN","RED","RESET","host","port","countEndpoints","jwt","fs_1","lodash_1","Authentication","isLogin","request","response","next","token","headers","authorization","split","status","json","success","message","verify","cert","algorithms","err","isBoss","deToken","detoken","ownerId","createdBy","roles","bossId","isPondRole","find","isStorageRole","decode","readFileSync","process","cwd","rng","bytesToUuid","v4","buf","Array","rnds","random","ii","googleapis_1","common_1","GoogleDrive","drive","google","JSON","parse","env","GOOGLE_API_KEY","jwtToken","auth","JWT","client_email","private_key","authorize","GREEN","upload","image","files","images","requestBody","parents","folderDrive","uploadImageVNF","media","mediaType","mimetype","body","CustomStream","BufferToStream","file","fileId","delayGetFileById","alt","responseType","type","prefix","base64","toString","getFile","__awaiter","params","error","moment","os","environment","Dialect","trim","development","isProd","reg","RegExp","wifi","networkInterfaces","test","address","hostname","databaseName","PORT","pool","acquire","idle","max","min","authdb","password","username","replication","read","write","timezone","utc","format","configDB","dialect","mysql","operatorsAliases","config","rootEndpoint","APIVersion","config_2","model_builder_1","DBHelper","forEach","element","toModel","getDatabaseConnection","authenticate","modelName","model","deleteMode","define","modelBuilder","ModelBuilder","usersAssociate","boughtbreedsAssociate","boughtbreeddetailsAssociate","breedOwnerAssociate","provinceAssociate","districtAssociate","wardAssociate","breedsAssociate","costsAssociate","couponAssociate","diedfisherysAssociate","growthsAssociate","harvestdetailsAssociate","harvestsAssociate","materialAssociate","ponddiaryAssociate","pondenvironmentAssociate","pondprepareAssociate","pondpreparedetailsAssociate","incurredAssociate","pondsAssociate","pricesAssociate","ponduserrolesAssociate","userRolesAssociate","usingveterinaryAssociate","usingfoodsAssociate","takecareAssociate","storagesAssociate","storageOwnerAssociate","stockingdetailsAssociate","stockingAssociate","seasonAssociate","seasonAndPondAssociate","warnings","wForgottenReturn","ponduserrolesToPond","thatmodel","belongsTo","as","ActionAssociateDatabase","POND_USER_ROLE_2_POND","foreignKey","field","ponduserrolesToUser","POND_USER_ROLE_2_USER","fs","winston","PATHS","LOG","LOG_ERROR","LOG_INFO","existsSync","mkdirSync","logger","exitOnError","transports","File","colorize","filename","handleExceptions","level","maxFiles","maxsize","Console","base_services_1","objects_1","components_1","UserServives","_super","__extends","usersModel","register","entity","transaction","autocommit","user","userRoles","UserRole","setUserId","setRoles","userRolesServices","getUserByUsername","userCriteria","findOne","joinQuery","getUsername","registerChild","updateMyProfile","changePassword","enity","userQuery","include","province","USER_2_PRO","district","USER_2_DIS","ward","USER_2_WAR","getSeasonWithUser","seasons","USER_2_SEASON","order","userOptions","logger_1","BaseSocketServer","io","on","socket","socketConnection","info","reason","app_1","Debug","debug","greenlock","app","ServerExpress","bootstrap","version","server","email","agreeTos","approvedDomains","tyMember","telemetry","listen","setEnvironment_1","bodyParser","cookieParser","createError","compression","errorHandler","express","cors","expressStatusMonitor","helmet","methodOverride","morgan","fileUpload","SocketIO","http_1","drive_google_1","routes_1","services_1","index_1","handleErr","use","req","locals","render","routes","ApiRoutes","createServer","SocketBuild","static","join","__dirname","set","stream","urlencoded","extended","limits","fileSize","dotenv","setEnvironment","ContentType","Gzip","Json","JsonUtf8","apig","logLevel","metricsEnabled","origin","AccessExposeHeaders","IdDataTypes","Integer","UuidV1","UuidV4","defaultImage","isUUId4","DateUtil","getNow","toDate","getNowByTimeZone","timeZone","tz","getUTCDateTime","date","formatDate","isUTC","ignoreConvert","replace","str","refFormatDate","newFormat","diffDate","unitOfTime","diff","add","amount","subtract","endOf","startOf","bcryptjs","promise_1","Enscrypts","reCryptToken","tokenBCrypt","slice","Math","floor","extractToken","tokenCheck","getSalt","rounds","genSalt","getSaltSync","genSaltSync","hashing","text","salt","hash","hashingSync","hashSync","compare","candidate","compareSync","Stream","bluebird_1","buffer","Duplex","push","StreamToBuffer","buffers","Buffer","concat","associations","couponModel","breedsModel","boughtbreeddetailsToCoupon","boughtbreeddetailsToBreeds","seasonModel","boughtbreedsToSeason","boughtbreedsToUser","boughtBreedDetailsModel","stockingDetailsModel","breedOwnerModel","breedToBoughBreedDetails","breedsToStockingDetails","breedsToOwnerBreed","pondPrepareModel","costsToPondPrepare","materialModel","couponToMaterial","couponToBoughtBreedDetails","couponToUsers","couponToSeason","seasonAndPondModel","diedfisherysToSeasonAndPond","userModel","districtToUser","growthsToSeasonAndPond","harvestsModel","harvestdetailsToHarvests","harvestDetailModel","harvestsToHarvestDetails","harvestsToSeasonAndPond","incurredsToPondPrepare","incurredsToUser","storageModel","usingFoodModel","usingVeterinayModel","materialToCoupon","materialToPondPrepare","materialToStorages","materialToUsingFood","materialToUsingVeterinary","ponddiaryToSeasonAndPond","seasonAndModel","pondenvironmenToSeasonAndPond","costsModel","pondPrepareDetailModel","incurredModel","pondprepareToCosts","pondprepareToPondPrepareDetails","pondprepareToSeasonAndPond","pondprepareToIncurred","pondpreparedetailsToStorage","pondpreparedetailsToPondPrepare","pondUserRolesModel","pondsToPondUserRoles","pondsToSeasonAndPond","pondsToUser","pondsToUserEmployee","pondToSeason","pondsModel","pricesToSeason","provinceToUser","boughtBreedModel","priceModel","rolesUserModel","seasonToBoughtBreed","seasonToPrice","seasonToUser","seasonToSNP","seasonToPond","seasonToUserRoles","seasonToCoupon","diedFishModel","growthModel","harvestModel","pondDiary","pondEnvironmentModel","stockingModel","takeCareModel","withDiedFish","withGrowths","withHarvest","withPondDiary","withPondEnv","withPondPrepare","withPond","withSeason","withStocking","withTakeCare","stockingdetailsModel","stockingToSNP","stockingToStockingdetails","stockingdetailsToBreeds","stockingdetailsToStocking","materialsModel","storageOwnerModel","usingveterinaryModel","storagesToMaterial","storagesToOwner","storagesToPondPrePareDetail","storagesToUsingFood","storagesToUsingVeterinary","ownerToStorage","ownerToUser","breedModel","ownerBreedToBreed","ownerBreedToUser","usingfoodsModel","takecareToSNP","takecareToUsingfoods","takecareToUsingveterinary","userrolesToPondUserRoles","userrolesToUsers","userrolesToUsersBoss","userrolesToSeason","districtModel","boughtbreedsModel","provinceModel","wardModel","ownerStorageModel","userToDistrict","userToRolesUser","userToPond","userToPondRolesBelongMany","userToCoupon","userToBoughtBreeds","userToProvince","userToSeason","userToWard","userToRolesBoss","userToOwnerStorage","userToOwnerBreed","userToPondUserRoles","userToIncurred","takecareModel","usingfoodsToStorage","usingfoodsToTakecare","usingveterinaryToStorage","usingveterinaryToTakecare","wardToUser","BOUGHT_BREED_DETAIL_2_COUPON","BOUGHT_BREED_DETAIL_2_BREED","BOUGHT_BREED_2_SEASON","BOUGHT_BREED_2_USER","hasMany","BREED_2_BOUGHT_BREED_DETAIL","BREED_2_STOKING_DETAIL","BREED_2_OWNER_BREED","OWNER_BREED_TO_BREED","OWNER_BREED_TO_USER","COST_2_POND_PREPARE","COUPON_2_MATERIAL","COUPON_2_BOUGHT_BREED_DETAILS","COUPON_2_USER","COUPON_2_SEASON","DIED_FISHERY_2_SEASON_AND_POND","GROWTH_2_SEASON_AND_POND","HARVEST_DETAIL_2_HARVEST","HARVEST_2_HARVEST_DETAILS","HARVEST_2_SEASON_AND_POND","MATERIAL_2_COUPON","MATERIAL_2_POND_PREPARE","MATERIAL_2_STORAGE","MATERIAL_2_USING_FOOD","MATERIAL_2_USING_VETERINARY","POND_DIARY_2_SEASON_AND_POND","POND_ENVIRONMENT_2_SEASON_AND_POND","POND_PREPARE_2_COST","POND_PREPARE_2_SEASON_AND_POND","POND_PREPARE_2_POND_PREPARE_DETAILS","POND_PREPARE_2_INCURREDS","POND_PREPARE_DETAIL_2_STORAGE","POND_PREPARE_DETAIL_2_POND_PREPARE","POND_2_POND_USER_ROLE","POND_2_SEASON_AND_POND","POND_2_USER","belongsToMany","POND_2_EMPLOYEE_MAYNY_ROLES","through","otherKey","POND_2_SEASON","PRICE_2_SEASON","SEASON_2_BOUGHT_BREED","SEASON_2_PRICE","SEASON_2_USER","SEASON_2_USER_ROLES","SEASON_2_SEASON_AND_POND","SEASON_2_COUPON","SEASON_2_POND","SEASON_AND_POND_2_DIED_FISH","SEASON_AND_POND_2_GROWTH","SEASON_AND_POND_2_HARVEST","SEASON_AND_POND_2_POND_DIARY","SEASON_AND_POND_2_POND_ENV","SEASON_AND_POND_2_POND_PREPARE","SEASON_AND_POND_2_SEASON","SEASON_AND_POND_2_POND","SEASON_AND_POND_2_STOCKING","SEASON_AND_POND_2_TAKE_CARE","STOCKING_2_SEASON_AND_POND","hasOne","STOCKING_2_STOCKING_DETAILS","STOCKING_DETAILS_2_BREED","STOCKING_DETAILS_2_STOCKING","STORAGE_2_OWNER","STORAGE_2_MATERIAL","STORAGE_2_POND_PREPARE_DETAILS","STORAGE_2_USING_FOOD","STORAGE_2_USING_VETERINARY","OWNER_TO_STORAGE","OWNER_TO_USER","TAKE_CARE_2_SEASON_AND_POND","TAKE_CARE_2_USING_FOOD","TAKE_CARE_2_USING_VETERINARY","USER_2_BOUGHT_BREED","USER_2_ROLES_USER","USER_2_POND","USER_2_POND_MANY_ROLES","USER_2_COUPON","USER_2_ROLES_GET_EMPLOYEES","USER_2_POND_USER_ROLE","USER_2_OWNER_STORAGE","USER_2_OWNER_BREED","USER_2_INCURREDS","USER_ROLES_2_POND_USER_ROLE","USER_ROLES_2_USER","USER_ROLES_2_USER_BOSS","USER_ROLES_2_SEASON","USING_FOOD_2_STORAGE","USING_FOOD_2_TAKE_CARE","USING_VETERINARY_2_STORAGE","USING_VETERINARY_2_TAKE_CARE","PROVINCE_2_USER","DISTRICT_2_USER","WARD_2_USER","INCURREDS_TO_POND_PREPARE","INCURREDS_TO_USER","Sequelize","_","base_model_1","boughtbreeddetailsOptions","merge","boughtBreedDetailId","autoIncrement","BIGINT","primaryKey","boughtBreedDetailUUId","STRING","unique","allowNull","couponId","breedId","quantity","FLOAT","unit","INTEGER","unitPrice","soldAddress","testingAgency","descriptions","TEXT","defaultValue","cloneDeep","boughtbreedOptions","boughtBreedId","boughtBreedUUId","seasonId","createdDate","DATE","breedOptions","breedUUId","breedName","totalQuantity","loopOfBreed","tips","costsOptions","costId","costUUId","pondPrepareId","label","responsible","notes","updatedBy","updatedDate","couponOptions","diedfisherysOptions","diedFisheryId","diedFisheryUUId","seasonAndPondId","card","solutions","employee","districtOptions","districtid","location","provinceid","growthOptions","growthId","growthUUId","averageDensity","averageMass","speedOdGrowth","livingRatio","harvestdetailOptions","harvestDetailUUId","harvestId","harvestOptions","harvestUUId","harvestName","materialOptions","materialId","materialUUId","storageId","provider","providerAddress","DOUBLE","ownerBreedOptions","ponddiaryOptions","pondDiaryId","pondDiaryUUId","diaryName","fisheryQuantity","healthOfFishery","pondVolume","diedFishery","pondenvironmentsOptions","pondEnvironmentId","pondEnvironmentUUId","oxyMorning","oxyAfternoon","phMorning","phAfternoon","transparent","salinity","h2s","nh3","bazo","pondprepareOptions","pondPrepareUUId","pondprepareName","pondpreparedetailOptions","pondPrepareDetailId","pondPrepareDetailUUId","pondOptions","pondId","pondUUId","pondName","pondArea","pondDepth","createCost","pondCreatedDate","isFed","isDiary","pondLatitude","pondLongitude","ponduserrolesOptions","pondUserRolesId","pricesOptions","priceId","priceUUId","totalCost","totalProfit","provinceOptions","seasonOptions","seasonUUId","seasonName","incurredsOptions","incurredId","incurredUUId","incurredName","seasonAndPondOptions","stockingOptions","stockingId","stockingUUId","stockingdetailOptions","stockingDetailUUId","stockingQuantity","phFirst","salinityFirst","storagesOptions","storageUUId","productName","quantityStorages","storageOwnerOptions","storageOwnerId","takecareOptions","takeCareId","takeCareUUId","takeCareName","userUUId","firstname","lastname","birthday","addressContact","town","phone","userrolesOptions","rolesId","index","usingfoodOptions","usingFoodId","usingFoodUUId","massOfFishery","feedingRate","totalFood","usingveterinaryOptions","usingVeterinaryId","usingVeterinaryUUId","causesNSymptoms","averageSize","totalBiomass","result","latestHarvestDate","mentor","wardOptions","wardid","httpStatusCode","BaseRoute_1","users_1","upload_1","getFile_1","province_1","district_1","ward_1","ponds_1","seasons_1","pondPrepare_1","pondPrepareDetail_1","storages_1","breed_1","stocking_1","diedFishery_1","growths_1","harvest_1","userRoles_1","pondUserRoles_1","material_1","seasonAndPond_1","usingFood_1","pondDiary_1","takeCare_1","usingVeterinary_1","costs_1","init","instance","BreedRoute","CostsRoute","DiedFisheryRoute","DistrictRoute","GetFileRoute","GrowthsRoute","HarvestRoute","MaterialRoute","PondDiaryRoute","PondPrepareRoute","PondPrepareDetailRoute","PondRoute","PondUserRolesRoute","ProvinceRoute","SeasonAndPondRoute","SeasonRoute","StockingRoute","StorageRoute","TakeCareRoute","UploadRoute","UserRoleRoute","UserRoute","UsingFoodRoute","UsingVeterinaryRoute","WardRoute","OK","uuidv4","common_2","login_helpers_1","UserRolesServices","provinceServices","ProvinceServices","districtServives","DistrictServives","wardServices","WardServices","pondsServices","PondsServices","userServives","pondUserRolesServices","PondUserRolesServices","User","setUserUUId","setFirstname","setLastname","setUsername","hashPassword","setPassword","setImages","userImage","userServices","rollback","userCreated","sent","storageOwner","OwnerStorage","setOwnerStorages","breedOwner","OwnerBreed","setOwnerBreed","storegeOwnwerServices","sOwner","breedOwnwerServices","bOwner","commit","login","required","u","getPassword","isMatch","content","sign","algorithm","getUserInfo","decodeToken","user$","getUserInfoWithUpdate","updateUserProfile","decodetoken","setUser","isArray","updateUserPassword","oldPassword","newPassword","data$","regiterEmployee","setCreatedBy","setUserRoles","role","getEmployee","and","_b","ne","employees","getEmplyeeById","rolesid","insertOnlyRole","setBossId","upsert","updateEmployee","setRolesId","setIsDeleted","getEmployeesPondRole","getAllPondAndEmployees","getEmployeesWithoutIsDelete","vertify","vertifyBoss","vertifyPondRoles","or","$roles.roles$","vertifyStorageRoles","vertifyRolesOfPond","del","fileFilter","cb","originalname","Error","cleanFolder","folderPath","sync","baseComponents_1","BoughtBreed","boughtBreedServives","BoughtBreedServives","setBoughtBreeds","setBoughtBreedId","setBoughtBreedUUId","setSeasonId","setCreatedDate","BoughtBreedDetail","boughtBreedDetailsServives","BoughtBreedDetailsServives","setBoughtBreedDetails","setBoughtBreedDetailId","setBoughtBreedDetailUUId","setCouponId","setBreedId","setQuantity","setUnit","setUnitPrice","setSoldAddress","setTestingAgency","setDescriptions","Breed","breedServives","BreedServives","setBreed","setBreedUUId","setOwnerId","setBreedName","setTotalQuantity","setLoopOfBreed","setTips","BreedOwnwerServices","Cost","costsServives","CostsServives","setCost","setCostId","setCostUUId","setPondPrepareId","setLabel","setValue","setResponsible","setNotes","setUpdatedBy","setUpdatedDate","Coupon","couponServives","CouponServives","setCoupon","DiedFishery","diedFisherysServives","DiedFisherysServives","setDiedfisherys","setDiedFisheryId","setDiedFisheryUUId","setSeasonAndPondId","setCard","setSolutions","setEmployee","District","setDistrictid","setName","setType","setLocation","setProvinceid","getAllDistrict","getDistrictByProvinceId","proId","getByProviceId","Growth","growthsServives","GrowthsServives","setGrowths","setGrowthId","setGrowthUUId","setAverageDensity","setAverageMass","setSpeedOdGrowth","setLivingRatio","HarvestDetail","harvestDetailsServives","HarvestDetailsServives","harvestIdDetailUUId","setHarvestdetails","setHarvestIdDetailUUId","setHarvestId","Harvest","harvestsServives","HarvestsServives","setHarvests","setHarvestUUId","setHarvestName","Material","materialServives","MaterialServives","setMaterial","setMaterialId","setMaterialUUId","setStorageId","setProvider","setProviderAddress","PondEnvironment","pondEnvironmentsServices","PondEnvironmentsServices","setPondenvironments","setPondEnvironmentId","setPondEnvironmentUUId","setOxyMorning","setOxyAfternoon","setPhMorning","setPhAfternoon","setTransparent","setSalinity","setH2s","setNh3","setBazo","PondUserRole","setPondUserRoles","setPondUserRolesId","setPondId","PondDiary","pondDiaryServices","PondDiaryServices","setPonddiary","setPondDiaryId","setPondDiaryUUId","setDiaryName","setFisheryQuantity","setHealthOfFishery","setPondVolume","setDiedFishery","getPondDiaryId","PondPrepare","pondPrepareServices","PondPrepareServices","setPondprepare","setPondPrepareUUId","setPondprepareName","PondPrepareDetail","pondPrepareDetailsServices","PondPrepareDetailsServices","setPondpreparedetails","setPondPrepareDetailUUId","setPondPrepareDetailId","Pond","setPond","setPondUUId","setPondName","setPondArea","setPondDepth","setCreateCost","setStatus","setIsFed","setIsDiary","setPondLatitude","setPondLongitude","setPondCreatedDate","Price","pricesServices","PricesServices","setPrices","setPriceId","setPriceUUId","setTotalCost","setTotalProfit","Province","setProvince","getAllProvince","Season","seasonServices","SeasonServices","setSeason","setSeasonUUId","setSeasonName","SeasonsAndPond","seasonAndPondServices","SeasonAndPondServices","setSeasonsAndPond","Stocking","stockingServices","StockingServices","setStocking","setStockingId","setStockingUUId","StockingDetail","stockingDetailsServices","StockingDetailsServices","setStockingdetails","setStockingDetailUUId","setStockingQuantity","setPhFirst","setSalinityFirst","Storage","storegeServices","StoregeServices","setStorages","setStorageUUId","setProductName","setQuantityStorages","StoregeOwnwerServices","setStorageOwnerId","TakeCare","takeCareServices","TakeCareServices","setTakecare","setTakeCareId","setTakeCareUUId","setTakeType","setTakeCareName","lib_2","pass","primary","toLowerCase","setBirthday","setEmail","setPhone","setAddressContact","setTown","setDistrict","UsingFood","usingFoodsServices","UsingFoodsServices","setUsingFoods","setUsingFoodId","setUsingFoodUUId","setMassOfFishery","setFeedingRate","setTotalFood","UsingVeterinary","usingVeterinaryServices","UsingVeterinaryServices","setUsingveterinary","setUsingVeterinaryId","setUsingVeterinaryUUId","setCausesNSymptoms","setAverageSize","setTotalBiomass","setResult","setLatestHarvestDate","setMentor","Ward","getAllWard","getDistrictByDistrictId","disId","getByDistrictId","Incurred","incurredsServices","IncurredsServices","setIncurred","setIncurredId","setIncurredUUId","setIncurredName","boughtbreeddetailsModel","diedfisherysModel","growthsModel","harvestdetailsModel","ponddiaryModel","pondenvironmentsModel","pondpreparedetailsModel","pondprepareModel","_1","users","testAll","pond","pondUserRole","ponds","pondUserRoles","pricesModel","testpr","userroles","ponduserrolesModel","storagesModel","ownerStoragesModel","testUserAssociate","userRolesModel","usingVeterinaryModel","crypto","nodeRNG","randomBytes","byteToHex","substr","bth","schemas_1","addPond","validate","addPondSchema","dataCheck","Date","toJSON","validater","pond_1","deToken_1","pondName_1","pondCreatedDate_1","pondArea_1","pondDepth_1","createCost_1","pondLatitude_1","pondLongitude_1","status_1","pond$","pondImage","getEmployeePondRoles","getPonds","_k","all","seasonPresent","_l","Boolean","$ponduserroles.userId$","_c","_d","includes","notIn","_e","_f","_g","_h","_j","getPondOfBoss","getPondWithoutImages","getPondNotInSeasonAndPond","map","getPondByPondUUId","updatePondWithUUId","returning","getPondBySeasonUUId","getPostPondBySeasonUUId","getPondByOwnerSeason","getPondByOwnerSeasonWithImage","endData","res_1","getPondWithoutManager","employeeId","pondByManage","countPond","pondOwner","pondsQuantity","count","getPondAdvanceds","isnull","isnotnull","isupgrade","seasonid","notRoles","userid","seasonuuid","presentSeason","rule","requestSeason","countSeasonWithPond","getPondWithUserNotManage","addPondPrepareSchema","properties","pondPrepareName","detailsOfPrepare","items","minimum","additionalProperties","addSeasonSchema","updateSeasonsSchema","maximum","enum","maxlenght","pattern","updatePondDiariesSchema","addSeason","filter","filtered","userId_1","wasHarvest","resetStatus","onUpdate","season","getSeasons","present","ss","updateSeason","getSeasonByUUId","getPondPrepares","pondPrepares","getPondPrepareByPondPrePareUUId","pondPrepare","pondprepareid","getPondPrepareId","updatePondPrepare","end","addPrepare","seasonAndPond","storage","literal","pondPrepareDetail","addPrepareOldPond","snp_1","pp","successArr","detailsOfPrepare_1","detail","ppd","addNewPrepare","snp","detailsOfPrepare_2","addIncurred","incurred","updateIncurred","getIncurredByIncurredUUId","addDetail","material","quantityOld","quantityNew","addStorage","itemArr","boss","coupon","cp_1","item","product","position","sto","mat","this_1","sUpdate","itemArr_1","getStorages","$owner.userId$","$owner->user->employees.userId$","$owner->user->employees.roles$","storages","getStorageById","updateStorage","getCoupon","coupons","components_2","addBreed","breed","bre","boughtBreedDetail","boughtBre","getBreed","breeds","addStocking","stocking","st","stockingDetail","std","getStocking","$seasonAndPond->ponds.userId$","$seasonAndPond->ponds->users->ponduserroles.userId$","getStockingDetailsByStockingDetailsUUId","stockingDetails","updateStockingDetailsByStockingDetailsUUId","oldValue","ok","addDiedFishery","getDiedFishery","wastes","getDiedFisheryByDiedFisheryUUId","waste","updateDiedFisheryByDiedFisheryUUId","getGrowths","growths","addGrowth","growth","getGrowthByUUId","updateGrowth","addHarvest","harvest","hv","harvestDetail","getHarvest","harvests","getAllMyEmployee","userInfo","getRoleByRoleId","roleId","deleteRoles","destroy","upsertRoles","userRole","main","fields","changeRoles","addPondRoles","getUserManageWithPond","updateRoles","addSeasonAndPond","pondArr","pondIdArr","differenceWith","isEqual","pondArr_1","seasonsAndPond","updateSeasonAndPond","countPondWithSeason","ownerid","countSeasonOfPond","pondid","addUsingFood","takeCare","tk","usingFood","res$","getUsingFood","between","timeOut","addPondDiary","getPondDiaries","diaries","getPondDiariesByUUId","g","deletePondDiary","isDeleled","results","updatePondDiary","isValid","delete","getTakeCare","getType","$usingFoods.createdDate$","$usingVeterinary.createdDate$","$seasonAndPond->ponds->pondUserRoles.userId$","$seasonAndPond->ponds->pondUserRoles.pondId$","toLocaleDateString","toLocaleTimeString","start-of-date","end-of-date","start-of-week","end-of-week","start-of-month","end-of-month","add-day","add-months","subtract-day","subtract-months","addUsingVeterinary","usingVeterinary","getUsingVeterinary","getAllPrices","group","har","storageCost","tables","fn","col","charts","labels","uniqBy","getDate","getMonth","getFullYear","breedCost","dL","isDL","sum","sumBy","dS","isDS","harvestCalculator","charts_1","e$","details","BaseSocket_1","task_scheduler_socket_1","TaskScheduler","schedule","timeToUpdate","scheduleJob","sockets","emit"],"mappings":"aACA,IAAAA,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GAAA,CACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,IACAG,EAAAH,EACAI,EAAA,MACAH,YAIAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,EAAA,KAGA,OAAAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACA,IAAAZ,EAAAa,EAAAX,EAAAS,GAAA,CACAG,OAAAC,eAAAb,EAAAS,GAA0CK,WAAA,KAAAC,IAAAL,MAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,UAAAiB,SAAA,aAAAA,OAAAC,YAAA,CACAN,OAAAC,eAAAb,EAAAiB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,MAAA,QAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GACA,GAAAA,EAAA,EAAAF,EAAArB,EAAAqB,GACA,GAAAE,EAAA,SAAAF,EACA,GAAAE,EAAA,UAAAF,IAAA,UAAAA,KAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MACA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,WAAA,KAAAK,UACzC,GAAAE,EAAA,UAAAF,GAAA,iBAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,SAAAM,IAA2B,OAAA3B,EAAA,YAC3B,SAAA4B,IAAiC,OAAA5B,GACjCH,EAAAU,EAAAE,EAAA,IAAAA,GACA,OAAAA,GAIAZ,EAAAa,EAAA,SAAAmB,EAAAC,GAAsD,OAAAnB,OAAAoB,UAAAC,eAAA5B,KAAAyB,EAAAC,IAGtDjC,EAAAoC,EAAA,GAIA,OAAApC,IAAAqC,EAAA,sJClFAC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,IACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,sJCpCAsC,EAAAtC,EAAA,qJCAAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,oBCHAG,EAAAD,QAAAqC,QAAA,yBCAApC,EAAAD,QAAAqC,QAAA,6JCCAD,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EA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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 30);\n","export * from './logger';\r\nexport * from './base.services';\r\nexport * from './upload';\r\nexport * from './user.services';\r\nexport * from './bought-breed-details.services';\r\nexport * from './bought-breeds.services';\r\nexport * from './breeds.services';\r\nexport * from './breedOwner.services';\r\nexport * from './costs.services';\r\nexport * from './coupon.services';\r\nexport * from './died-fisherys.services';\r\nexport * from './district.services';\r\nexport * from './growths.services';\r\nexport * from './harvest-details.services';\r\nexport * from './harvests.services';\r\nexport * from './material.services';\r\nexport * from './pond-diary.services';\r\nexport * from './pond-environments.services';\r\nexport * from './pond-prepare-details.services';\r\nexport * from './pond-prepare.services';\r\nexport * from './ponds.services';\r\nexport * from './prices.services';\r\nexport * from './province.services';\r\nexport * from './pondUserRoles.services';\r\nexport * from './season.services';\r\nexport * from './stocking-details.services';\r\nexport * from './stocking.services';\r\nexport * from './storages.services';\r\nexport * from './storagesOwner.services';\r\nexport * from './take-care.services';\r\nexport * from './user.services';\r\nexport * from './usersRoles.services';\r\nexport * from './using-foods.services';\r\nexport * from './using-veterinary.services';\r\nexport * from './ward.services';\r\nexport * from './seasonAndPond.services';\r\nexport * from './incurreds.services';\r\n","export * from './constant';\r\n","export * from './date-util';\r\nexport * from './enscrypts';\r\nexport * from './promise';\r\nexport * from './stream';\r\n","module.exports = require(\"lodash\");","module.exports = require(\"sequelize\");","// export * from './base.model'; // always first\r\nexport * from './boughtbreeddetails';\r\nexport * from './boughtbreeds';\r\nexport * from './breeds';\r\nexport * from './costs';\r\nexport * from './coupons';\r\nexport * from './diedfisherys';\r\nexport * from './district';\r\nexport * from './growths';\r\nexport * from './harvestdetails';\r\nexport * from './harvests';\r\nexport * from './material';\r\nexport * from './ownerBreed.model';\r\nexport * from './ponddiary';\r\nexport * from './pondenvironments';\r\nexport * from './pondprepare';\r\nexport * from './pondpreparedetails';\r\nexport * from './ponds';\r\nexport * from './ponduserroles';\r\nexport * from './prices';\r\nexport * from './province';\r\nexport * from './seasons';\r\nexport * from './incurreds.model';\r\nexport * from './seasonandpond';\r\nexport * from './stocking';\r\nexport * from './stockingdetails';\r\nexport * from './storages.model';\r\nexport * from './storageOwner.model';\r\nexport * from './takecare';\r\nexport * from './users';\r\nexport * from './userRoles';\r\nexport * from './usingfoods';\r\nexport * from './usingveterinary';\r\nexport * from './ward';\r\n","import * as Sequeliz from 'sequelize';\r\nimport DBHelper from '../helpers/db-helpers';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { Promise } from '../lib';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport abstract class BaseServices {\r\n    public conn: DBHelper;\r\n    public models: Sequeliz.Model<{}, any>;\r\n    public Op: Sequeliz.Operators = Sequeliz.Op;\r\n    public fn: Sequeliz.fn;\r\n    constructor(protected optionsModel: IOptionsModelDB = {\r\n        tableName: '',\r\n        attributes: {},\r\n        options: {}\r\n    }) {\r\n        this.conn = new DBHelper(this.optionsModel);\r\n    }\r\n\r\n    public getById(id: any, userId?: number): Promise<{}> {\r\n        return new Promise((resolve, reject) => {\r\n            this.models.findById(id).then((obj: any) => {\r\n                if (obj) {\r\n                    resolve(obj.dataValues);\r\n                } else {\r\n                    resolve(obj);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    public getAll(query: Sequeliz.FindOptions<any>): Promise<any[]> {\r\n        if(query) {\r\n            return new Promise((resolve, reject) => {\r\n                this.models.findAll(this.getQuery(query)).then((obj: any[]) => {\r\n                    resolve(obj);\r\n                }).catch(e => {\r\n                    reject(e);\r\n                });\r\n            });\r\n        } else {\r\n            return new Promise((resolve, reject) => {\r\n                this.models.findAll().then((obj: any[]) => {\r\n                    resolve(obj);\r\n                }).catch(e => {\r\n                    reject(e);\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    public get(query: any): Promise<any[]> {\r\n        return this.models.findAll(query);\r\n    }\r\n\r\n    insert(data: any): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            this.models.create(data).then((record: any) => {\r\n                resolve(record);\r\n            });\r\n        });\r\n    }\r\n\r\n    update(value: any): Promise<any> {\r\n        const md: any = this.models;\r\n        const where: any = {};\r\n        return new Promise((resolve, reject) => {\r\n            const primaryFieldName: string = md.primaryKeyField;\r\n            where[primaryFieldName] = value[primaryFieldName];\r\n            this.models.update(value, {where}).then((res: any) => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n\r\n    findAndCountAll(query: any): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            if(query) {\r\n                this.models.findAndCountAll(query).then((res: any) => {\r\n                    resolve(res);\r\n                });\r\n            } else {\r\n                this.models.findAndCountAll().then((res: any) => {\r\n                    resolve(res);\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    getQuery(criteria: object): object {\r\n        return {\r\n            where: criteria\r\n        };\r\n    }\r\n}\r\n","import { ISearchOptions } from '../common';\r\nimport { Promise } from '../lib';\r\nimport { BaseServices } from '../services';\r\nimport { FindOptions } from 'sequelize';\r\n\r\nexport class BaseComponent {\r\n    protected services: BaseServices;\r\n    protected primary: object;\r\n    protected foreignKey: any;\r\n    public constructor() { }\r\n\r\n    protected criteriaQuery(options: ISearchOptions) {\r\n        const offset: any = options.pageIndex ? Number(options.pageIndex) - 1 : null;\r\n        const limit: any = options.pageSizes ? Number(options.pageSizes) : null;\r\n        // const order: any[] = options.orderBy && options.orderType ? [\r\n        //     [options.orderBy, options.orderType]\r\n        // ] : options.orderBy && !options.orderType ? [\r\n        //     [options.orderBy]\r\n        // ] : null;\r\n        return { ...offset, ...limit };\r\n    }\r\n\r\n    /**\r\n     * remove null and undefine field, usually use to update action\r\n     * @param obj\r\n     */\r\n    public getFields(obj?: any): string[] {\r\n        const that: any = this;\r\n        const object: any = {};\r\n        for (const key in that) {\r\n            if (that[key] !== null && that[key] !== undefined && typeof that[key] !== 'object' && typeof that[key] !== 'function' && !key.match(/^ge[t].+$/) || that[key] === 0) {\r\n                if (that[key] || that[key] === 0) {\r\n                    object[key] = that[key];\r\n                }\r\n            }\r\n        }\r\n        return object;\r\n    }\r\n\r\n    // upsert(action: any): Promise<any> {\r\n    //     const that: any = this;\r\n    //     if(action === ActionServer.UPDATE) {\r\n    //         const query = {};\r\n    //         // this.createQuery({\r\n    //         //     action,\r\n    //         //     primary: that.getPrimary,\r\n    //         //     data: this\r\n    //         // });\r\n    //         // return new Promise((resolve, reject) => {\r\n    //         //     this.services.update(this, query).then((res: any) => {\r\n    //         //         resolve(res);\r\n    //         //     });\r\n    //         // });\r\n    //     }\r\n    // }\r\n\r\n    insert(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            this.services.insert(this).then((res: any) => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n\r\n    update(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            this.services.update(this.getFields(this)).then(res => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n\r\n    gets(condition: FindOptions<any>, options?: ISearchOptions): Promise<any> {\r\n        const gotOptions = this.criteriaQuery(options);\r\n        return new Promise((resolve, reject) => {\r\n            this.services.getAll({\r\n                ...condition,\r\n                ...gotOptions\r\n            }).then(res => {\r\n                resolve(res);\r\n            }).catch(e => {\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    getById(id: number, userId?: number): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            this.services.getById(id, userId).then(res => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n}\r\n","export const baseModel: any = {\r\n    options: {\r\n        createdAt: false,\r\n        updatedAt: false,\r\n        deletedAt: false,\r\n        defaultScope: {\r\n            where: {\r\n                isDeleted: 0\r\n            }\r\n        },\r\n        scopes: {\r\n            deletedRecord: {\r\n                where: {\r\n                    isDeleted: 1\r\n                }\r\n            }\r\n        },\r\n        hooks: {}\r\n    }\r\n};\r\n","import { Router } from 'express';\r\nimport { Sequelize } from 'sequelize';\r\nimport DBHelper from '../helpers/db-helpers';\r\nimport { host, port, colorCli, method, APIVersion } from '../config';\r\nimport * as validator from 'is-my-json-valid';\r\n\r\nexport abstract class BaseRoute {\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @class BaseRoute\r\n     * @constructor\r\n     */\r\n    public static path = '/api/v1';\r\n    protected router = Router();\r\n    protected connection: any = {};\r\n    public static countEndpoints: number = 0;\r\n    protected sequeliz: Sequelize = DBHelper.sequelize;\r\n    protected validator: any = validator;\r\n\r\n    protected logEndpoints(router?: Router, path?: string) {\r\n        if(path) {\r\n            for(const stack of router.stack) {\r\n                const endpoints: string = Object.keys(stack.route.methods)[0].toLocaleUpperCase();\r\n                console.log(`[${\r\n                    endpoints === method.get ? colorCli.MAGENTA : endpoints === method.post ? colorCli.YELLOW : endpoints === method.put ? colorCli.CYAN : colorCli.RED\r\n                }${ endpoints }${ colorCli.RESET }]\\thttps://${ host }:${ port }${ BaseRoute.path }${ path }${ stack.route.path }`);\r\n                BaseRoute.countEndpoints++;\r\n            }\r\n            console.log('');\r\n        }\r\n    }\r\n}\r\n","export * from './boughtBreed';\r\nexport * from './boughtBreedDetail';\r\nexport * from './breed';\r\nexport * from './breedOwner';\r\nexport * from './cost';\r\nexport * from './coupon';\r\nexport * from './diedFishery';\r\nexport * from './district';\r\nexport * from './growth';\r\nexport * from './harvestDetail';\r\nexport * from './harvest';\r\nexport * from './material';\r\nexport * from './pondEnvironment';\r\nexport * from './pondUserRole';\r\nexport * from './pondDiary';\r\nexport * from './pondPrepare';\r\nexport * from './pondPrepareDetails';\r\nexport * from './pond';\r\nexport * from './price';\r\nexport * from './province';\r\nexport * from './season';\r\nexport * from './seasonsAndPond';\r\nexport * from './stocking';\r\nexport * from './stockingDetail';\r\nexport * from './storage';\r\nexport * from './storageOwner';\r\nexport * from './takeCare';\r\nexport * from './userRole';\r\nexport * from './user';\r\nexport * from './usingFood';\r\nexport * from './usingVeterinary';\r\nexport * from './ward';\r\nexport * from './incurreds';\r\n","import { NextFunction, Request, Response } from 'express';\r\nimport * as jwt from 'jsonwebtoken';\r\nimport { readFileSync } from 'fs';\r\nimport { find } from 'lodash';\r\n\r\nexport class Authentication {\r\n    static cert: Buffer = readFileSync(process.cwd() + '/authKey/jwtRS256.key.pub');\r\n    constructor() {}\r\n    static isLogin(request: Request, response: Response, next: NextFunction) {\r\n        const token: string = request.headers.authorization ? request.headers.authorization.split(' ')[1] : null;\r\n        if(!token) {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Dừng lại, truy cập là không được phép!'\r\n            });\r\n        } else {\r\n            jwt.verify(token, Authentication.cert, {\r\n                algorithms: ['RS512', 'RS256']\r\n            }, (err, data) => {\r\n                if(err) {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Bạn cần đăng nhập để tiếp tục.'\r\n                    });\r\n                } else {\r\n                    next();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    static isBoss(request: Request, response: Response, next: NextFunction) {\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        if(!isBoss) {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Bạn không có quyền truy cập.'\r\n            });\r\n        } else {\r\n            next();\r\n        }\r\n    }\r\n\r\n    static isPondRole(request: Request, response: Response, next: NextFunction) {\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        const isPondRole: boolean = !!find(deToken.roles, e => e.roles === 1) || !deToken.roles.length;\r\n        if(isPondRole || isBoss) {\r\n            next();\r\n        } else {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Bạn không có quyền truy cập.'\r\n            });\r\n        }\r\n    }\r\n\r\n    static isStorageRole(request: Request, response: Response, next: NextFunction) {\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        const isStorageRole: boolean = !!find(deToken.roles, e => e.roles === 2) || !deToken.roles.length;\r\n        if(isBoss && isStorageRole) {\r\n            next();\r\n        } else {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Bạn không có quyền truy cập.'\r\n            });\r\n        }\r\n    }\r\n\r\n    static detoken(token: string) {\r\n        return jwt.decode(token,{json: true});\r\n    }\r\n}\r\n/**\r\n * Phần authen có thể dùng cho MEAN Stack\r\n */\r\n// import * as passport from 'passport';\r\n// import * as localStrategy from 'passport-local';\r\n// const LocalStrategy = localStrategy.Strategy;\r\n// import * as jwtStrategy from 'passport-jwt';\r\n// const JwtStrategy = jwtStrategy.Strategy;\r\n// const ExtractJwt = jwtStrategy.ExtractJwt;\r\n// import { UserServives } from '../services';\r\n// import * as constants from '../common';\r\n// import { User } from '../components/users';\r\n\r\n// export class LoginHelper {\r\n//     private userServices: UserServives = new UserServives();\r\n//     public static token: string;\r\n//     constructor() {\r\n//         this.usingPassport();\r\n//         this.serializeUser();\r\n//         this.deserializeUser();\r\n//     }\r\n\r\n//     private usingPassport(): void {\r\n//         const opts: any = {};\r\n//         opts.jwtFromRequest = ExtractJwt.fromAuthHeaderWithScheme('jwt');\r\n//         opts.secretOrKey = constants.secret;\r\n//         passport.use(new JwtStrategy(opts, (jwtPayload, done) => {\r\n//             this.userServices.getUserByUsername(this.getQuery({username: jwtPayload.username})).then(user => {\r\n//                 done(null, user);\r\n//             }).catch(err => {\r\n//                 if(err) {\r\n//                     return done(err, false);\r\n//                 }\r\n//                 done(null, false);\r\n//             });\r\n//         }));\r\n//         /*\r\n//         passport.use(new LocalStrategy((username, password, done) => {\r\n//             this.userServices.getUserByUsername(this.getQuery({username})).then((result: any) => {\r\n//                 Enscrypts.compare(password, result.password).then((isMatch: boolean) => {\r\n//                     console.log(isMatch);\r\n//                     if(typeof isMatch === typeof Error) {\r\n//                         throw isMatch;\r\n//                     }\r\n//                     else if (isMatch) {\r\n//                         TokenHelper.sign(result.username)\r\n//                         .then((token) => {\r\n//                             LoginHelper.token = token;\r\n//                             return done(null, result);\r\n//                         });\r\n//                     }\r\n//                     else {\r\n//                         return done(null, false);\r\n//                     }\r\n//                 });\r\n//             }).catch(() => {\r\n//                 return done(null, false);\r\n//             });\r\n//         }));\r\n//         */\r\n//     }\r\n\r\n//     private serializeUser(): void {\r\n//         passport.serializeUser((user: User, done: any) => {\r\n//             done(null, user);\r\n//         });\r\n//     }\r\n\r\n//     private deserializeUser(): void {\r\n//         passport.deserializeUser((user: User, done: any) => {\r\n//             this.userServices.getUserByUsername(this.getQuery({username: user.username})).then((result: User) => {\r\n//                 return done(null, result);\r\n//             }).catch(() => {\r\n//                 return done(null, false);\r\n//             });\r\n//         });\r\n//     }\r\n\r\n//     private getQuery(where: any): any {\r\n//         return {\r\n//             where\r\n//         };\r\n//     }\r\n\r\n//     public static isLoggedIn(req: Request, res: Response, next: NextFunction) {\r\n//         if (req.isAuthenticated()) {\r\n//             res.cookie('vietnamfishery', LoginHelper.token, {\r\n//                 maxAge: 365 * 24 * 60 * 60 * 1000\r\n//             });\r\n//             return next();\r\n//         }\r\n//         res.redirect('/api/user/login/failure');\r\n//     }\r\n\r\n//     public static notLoggedIn(req: Request, res: Response, next: NextFunction) {\r\n//         if (!req.isAuthenticated()) {\r\n//             return next();\r\n//         }\r\n//         res.redirect('/api/user/login');\r\n//     }\r\n\r\n//     // public authenticate(successRedirect: string, failureRedirect: string): any {\r\n//     //     return passport.authenticate('local', {\r\n//     //         successRedirect,\r\n//     //         failureRedirect\r\n//     //     });\r\n//     // }\r\n// }\r\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","import { google, drive_v3 } from 'googleapis';\r\nimport { JWT } from 'google-auth-library';\r\nimport { folderDrive } from '../common';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { CustomStream } from '../lib';\r\nimport { colorCli } from '../config';\r\n\r\nexport class GoogleDrive {\r\n    private static drive: drive_v3.Drive;\r\n    private static key: any;\r\n    private static jwtToken: JWT;\r\n    constructor() {\r\n        GoogleDrive.drive = google.drive('v3');\r\n        GoogleDrive.key = JSON.parse(process.env.GOOGLE_API_KEY);\r\n        GoogleDrive.jwtToken = new google.auth.JWT(GoogleDrive.key.client_email, null, GoogleDrive.key.private_key, ['https://www.googleapis.com/auth/drive'], null);\r\n        GoogleDrive.jwtToken.authorize(err => {\r\n            if (err) {\r\n                console.log(`${ colorCli.RED }Google authorization not accorded: `,err);\r\n                return;\r\n            } else {\r\n                console.log(`${ colorCli.GREEN }Google authorization accorded.${ colorCli.RESET }`);\r\n            }\r\n        });\r\n    }\r\n\r\n    public static upload(request: any, response: Response, next: NextFunction): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            const image: any = (request.files as any).image || (request.files as any).images;\r\n            const requestBody = {\r\n                name: image.name,\r\n                parents: [folderDrive.uploadImageVNF]\r\n            };\r\n\r\n            const media = {\r\n                mediaType: image.mimetype,\r\n                body: CustomStream.BufferToStream(image.data as Buffer)\r\n            };\r\n\r\n            GoogleDrive.drive.files.create({\r\n                auth: GoogleDrive.jwtToken,\r\n                requestBody,\r\n                media\r\n            }, (err, file) => {\r\n                if (err) {\r\n                    resolve({\r\n                        success: false,\r\n                        message: 'Can not upload files. Please try again later.'\r\n                    });\r\n                } else {\r\n                    resolve({\r\n                        success: true,\r\n                        message: 'Upload file successful!',\r\n                        fileId: file.data.id\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    public static getFile = async (request: Request, response: Response, next: NextFunction) => {\r\n        const options: any = {\r\n            auth: GoogleDrive.jwtToken,\r\n            fileId: request.params.fileId,\r\n            alt: 'media'\r\n        };\r\n        GoogleDrive.drive.files.get(options, {\r\n            responseType: 'arraybuffer'\r\n        }, (err, file: any) => {\r\n            if (err) {\r\n                response.status(200).json({ error: err.toString() });\r\n            }\r\n            if (file) {\r\n                const type = file.headers[`content-type`];\r\n                const prefix = 'data:' + type + ';base64,';\r\n                const base64 = file.data.toString('base64');\r\n                const data = prefix + base64;\r\n                response.status(200).json({ data });\r\n            }\r\n        });\r\n    }\r\n\r\n    public static delayGetFileById(fileId: any): Promise<any> {\r\n        const options: any = {\r\n            auth: GoogleDrive.jwtToken,\r\n            fileId,\r\n            alt: 'media'\r\n        };\r\n        return new Promise((resolve, reject) => {\r\n            GoogleDrive.drive.files.get(options, {\r\n                responseType: 'arraybuffer'\r\n            }, (err, file: any) => {\r\n                if (file) {\r\n                    const type = file.headers[`content-type`];\r\n                    const prefix = 'data:' + type + ';base64,';\r\n                    const base64 = file.data.toString('base64');\r\n                    const data = prefix + base64;\r\n                    resolve(data);\r\n                } else if(err) {\r\n                    resolve(err);\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n","import { Options, PoolOptions, ReplicationOptions } from 'sequelize';\r\nimport * as moment from 'moment-timezone';\r\nimport * as os from 'os';\r\nimport { find } from 'lodash';\r\n\r\nexport enum environment {\r\n    development = 'development',\r\n    production = 'production'\r\n}\r\n\r\nexport enum Dialect {\r\n    mysql = 'mysql',\r\n    sqlite = 'sqlite',\r\n    postgres = 'postgres',\r\n    mssql = 'mssql'\r\n}\r\n\r\nexport interface ISequelizeConfig {\r\n    dialect?: Dialect;\r\n    operatorsAliases?: boolean;\r\n    pool?: PoolOptions;\r\n    replication?: ReplicationOptions;\r\n}\r\n\r\nconst env = process.env.NODE_ENV.trim() || environment.development;\r\nconst isProd = env === 'production';\r\n\r\nconst reg: RegExp = new RegExp(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/);\r\n\r\nconst wifi: any = find(os.networkInterfaces()[`Wi-Fi`], e => reg.test(e.address.toString())) || {};\r\n\r\nexport const host: string = wifi.address || os.hostname() || 'localhost';\r\n\r\nexport const databaseName = 'fisheriesdatabase';\r\n\r\n/**\r\n * @var PORT from evironment - config in cli run start project\r\n * @var DEVELOPMENT from evironment - port config with development stage, value: 7979\r\n * @var PRODUCTION from evironment - port config with production stage, value: 9999\r\n */\r\nexport const port = process.env.PORT || env === environment.development ? 7979 : 9999;\r\n\r\nconst pool: PoolOptions = {\r\n    acquire: 30000,\r\n    idle: 10000,\r\n    max: 5,\r\n    min: 0\r\n};\r\n\r\nexport const authdb: any = {\r\n    host: 'localhost',\r\n    password: 'J%:dTva*#9c>k@L6',\r\n    username: 'fisherier'\r\n};\r\n\r\nconst replication: ReplicationOptions = {\r\n    read: authdb,\r\n    write: authdb\r\n};\r\n\r\nconst timezone: string = moment().utc().format('Z');\r\nexport const configDB: Options = {\r\n    dialect: Dialect.mysql,\r\n    operatorsAliases: false,\r\n    pool,\r\n    port: 3306,\r\n    replication,\r\n    timezone,\r\n};\r\n\r\nexport const config: Options = {\r\n    dialect: Dialect.mysql,\r\n    operatorsAliases: false,\r\n    pool,\r\n    replication\r\n};\r\n\r\n/**\r\n * color of console.log\r\n */\r\nexport enum colorCli {\r\n    RESET = '\\x1b[0m',\r\n    BRIGHT = '\\x1b[1m',\r\n    DIM = '\\x1b[2m',\r\n    UNDERSCORE = '\\x1b[4m',\r\n    BLINK = '\\x1b[5m',\r\n    REVERSE = '\\x1b[7m',\r\n    HIDDEN = '\\x1b[8m',\r\n    BLACK = '\\x1b[30m',\r\n    RED = '\\x1b[31m',\r\n    GREEN = '\\x1b[32m',\r\n    YELLOW = '\\x1b[33m',\r\n    BLUE = '\\x1b[34m',\r\n    MAGENTA = '\\x1b[35m',\r\n    CYAN = '\\x1b[36m', // xanh biển\r\n    WHITE = '\\x1b[37m',\r\n    CRIMSON = '\\x1b[38m', // not working\r\n    BG_BLACK = '\\x1b[40m',\r\n    BG_RED = '\\x1b[41m',\r\n    BG_GREEN = '\\x1b[42m',\r\n    BG_YELLOW = '\\x1b[43m',\r\n    BG_BLUE = '\\x1b[44m',\r\n    BG_MAGENTA = '\\x1b[45m',\r\n    BG_CYAN = '\\x1b[46m',\r\n    BG_WHITE = '\\x1b[47m',\r\n    BG_CRIMSON = '\\x1b[48m', // not working\r\n    // color 256\r\n    /**\r\n     * ```js\r\n     *  for(let i = 0; i < 16; i++) {\r\n     *      for(let j = 0; j < 16; j++) {\r\n     *          const code = (i * 16 + j);\r\n     *          console.log(colorCli.TEMPLATE + code + 'm', code + '\\t');\r\n     *      }\r\n     *  }\r\n     * ```\r\n     */\r\n    TEMPLATE = '\\u001b[38;5;',\r\n}\r\n\r\nexport const rootEndpoint = '/api';\r\n\r\nexport enum APIVersion {\r\n    v1 = '/api/v1'\r\n}\r\n\r\n/**\r\n * Method of http\r\n */\r\nexport enum method {\r\n    get = 'GET',\r\n    post = 'POST',\r\n    put = 'PUT',\r\n    delete = 'DELETE'\r\n}\r\n","import { Sequelize } from 'sequelize';\r\nimport * as Sequeliz from 'sequelize';\r\nimport { configDB, colorCli } from '../config';\r\nimport { databaseName } from '../config';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { ModelBuilder } from '../models/model-builder';\r\nimport * as options from '../models/objects';\r\n\r\nexport default class DBHelper {\r\n    public static sequelize: Sequelize = new Sequeliz(databaseName, null, null, {\r\n        ...configDB\r\n    });\r\n    private models: any = {};\r\n\r\n    constructor(private optionsModel: IOptionsModelDB) {\r\n        Object.keys(options).forEach(element => {\r\n            this.models[element] = this.toModel(options[element].tableName, options[element].attributes, options[element].options);\r\n        });\r\n    }\r\n\r\n    public static getDatabaseConnection() {\r\n        DBHelper.sequelize.authenticate().then(() => {\r\n            console.log(`${ colorCli.GREEN }Connection with database has been established successfully.`);\r\n        })\r\n        .catch(err => {\r\n            console.error(`${ colorCli.RED }Unable to connect to the database:`, err);\r\n        });\r\n    }\r\n\r\n    private toModel (modelName: string, model: any, deleteMode: any) {\r\n        return DBHelper.sequelize.define(modelName, model, deleteMode);\r\n    }\r\n\r\n    private get modelName () {\r\n        return this.optionsModel.tableName;\r\n    }\r\n\r\n    private get deleteMode () {\r\n        return this.optionsModel.options;\r\n    }\r\n\r\n    private get model () {\r\n        return DBHelper.sequelize.define(this.modelName, this.optionsModel.attributes, this.deleteMode);\r\n    }\r\n\r\n    public get usersModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.usersAssociate(\r\n            this.models[`districtOptions`],\r\n            this.models[`userrolesOptions`],\r\n            this.models[`pondOptions`],\r\n            this.models[`couponOptions`],\r\n            this.models[`boughtbreedOptions`],\r\n            this.models[`provinceOptions`],\r\n            this.models[`seasonOptions`],\r\n            this.models[`wardOptions`],\r\n            this.models[`storageOwnerOptions`],\r\n            this.models[`ownerBreedOptions`],\r\n            this.models[`ponduserrolesOptions`],\r\n            this.models[`incurredsOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get boughtbreedsModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.boughtbreedsAssociate(\r\n            this.models[`seasonOptions`],\r\n            this.models[`userOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get boughtbreeddetailsModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.boughtbreeddetailsAssociate(\r\n            this.models[`couponOptions`],\r\n            this.models[`breedOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get breedOwnerModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.breedOwnerAssociate(\r\n            this.models[`breedOptions`],\r\n            this.models[`userOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get provinceModel() {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.provinceAssociate(this.models[`userOptions`]);\r\n        return md;\r\n    }\r\n\r\n    public get districtModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.districtAssociate(this.models[`userOptions`]);\r\n        return md;\r\n    }\r\n\r\n    public get wardModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.wardAssociate(this.models[`userOptions`]);\r\n        return md;\r\n    }\r\n\r\n    public get breedsModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.breedsAssociate(\r\n            this.models[`boughtbreeddetailsOptions`],\r\n            this.models[`stockingdetailOptions`],\r\n            this.models[`ownerBreedOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get costsModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.costsAssociate(this.models[`pondprepareOptions`]);\r\n        return md;\r\n    }\r\n\r\n    public get couponModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.couponAssociate(\r\n            this.models[`materialOptions`],\r\n            this.models[`userOptions`],\r\n            this.models[`seasonOptions`],\r\n            this.models[`boughtbreeddetailsOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get diedfisherysModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.diedfisherysAssociate(this.models[`seasonAndPondOptions`]);\r\n        return md;\r\n    }\r\n\r\n    public get growthsModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.growthsAssociate(this.models[`seasonAndPondOptions`]);\r\n        return md;\r\n    }\r\n\r\n    public get harvestdetailsModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.harvestdetailsAssociate(this.models[`harvestOptions`]);\r\n        return md;\r\n    }\r\n\r\n    public get harvestModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.harvestsAssociate(this.models[`harvestdetailOptions`], this.models[`seasonAndPondOptions`]);\r\n        return md;\r\n    }\r\n\r\n    public get materialModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.materialAssociate(\r\n            this.models[`couponOptions`],\r\n            this.models[`pondprepareOptions`],\r\n            this.models[`storagesOptions`],\r\n            this.models[`usingfoodOptions`],\r\n            this.models[`usingveterinaryOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get ponddiaryModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.ponddiaryAssociate(\r\n            this.models[`seasonAndPondOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get pondenvironmentsModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.pondenvironmentAssociate(this.models[`seasonAndPondOptions`]);\r\n        return md;\r\n    }\r\n\r\n    public get pondprepareModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.pondprepareAssociate(\r\n            this.models[`seasonAndPondOptions`],\r\n            this.models[`costsOptions`],\r\n            this.models[`pondpreparedetailOptions`],\r\n            this.models[`incurredsOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get pondpreparedetailsModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.pondpreparedetailsAssociate(this.models[`pondprepareOptions`],\r\n        this.models[`storagesOptions`]);\r\n        return md;\r\n    }\r\n\r\n    public get incurredModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.incurredAssociate(\r\n            this.models[`pondprepareOptions`],\r\n            this.models[`userOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get pondsModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.pondsAssociate(\r\n            this.models[`ponduserrolesOptions`],\r\n            this.models[`seasonAndPondOptions`],\r\n            this.models[`userOptions`],\r\n            this.models[`seasonOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get pricesModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.pricesAssociate(this.models[`seasonOptions`]);\r\n        return md;\r\n    }\r\n\r\n    public get ponduserrolesModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.ponduserrolesAssociate(\r\n            this.models[`userOptions`],\r\n            this.models[`pondOptions`],\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get userRolesModel() {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.userRolesAssociate(\r\n            this.models[`ponduserrolesOptions`],\r\n            this.models[`userOptions`],\r\n            this.models[`seasonOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get usingVeterinaryModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.usingveterinaryAssociate(\r\n            this.models[`storagesOptions`],\r\n            this.models[`takecareOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get usingfoodsModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.usingfoodsAssociate(\r\n            this.models[`storagesOptions`],\r\n            this.models[`takecareOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get takecareModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.takecareAssociate(\r\n            this.models[`usingveterinaryOptions`],\r\n            this.models[`usingfoodOptions`],\r\n            this.models[`seasonAndPondOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get storagesModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.storagesAssociate(\r\n            this.models[`materialOptions`],\r\n            this.models[`storageOwnerOptions`],\r\n            this.models[`pondpreparedetailOptions`],\r\n            this.models[`usingfoodOptions`],\r\n            this.models[`usingveterinaryOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get ownerStoragesModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.storageOwnerAssociate(\r\n            this.models[`storagesOptions`],\r\n            this.models[`userOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get stockingdetailsModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.stockingdetailsAssociate(\r\n            this.models[`stockingOptions`],\r\n            this.models[`breedOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get stockingModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.stockingAssociate(\r\n            this.models[`stockingdetailOptions`],\r\n            this.models[`seasonAndPondOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get seasonModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.seasonAssociate(\r\n            this.models[`boughtbreedOptions`],\r\n            this.models[`pricesOptions`],\r\n            this.models[`userOptions`],\r\n            this.models[`seasonAndPondOptions`],\r\n            this.models[`pondOptions`],\r\n            this.models[`userrolesOptions`],\r\n            this.models[`couponOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get seasonAndPondModel() {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.seasonAndPondAssociate(\r\n            this.models[`diedfisherysOptions`],\r\n            this.models[`growthOptions`],\r\n            this.models[`harvestOptions`],\r\n            this.models[`ponddiaryOptions`],\r\n            this.models[`pondenvironmentsOptions`],\r\n            this.models[`pondprepareOptions`],\r\n            this.models[`pondOptions`],\r\n            this.models[`seasonOptions`],\r\n            this.models[`stockingOptions`],\r\n            this.models[`takecareOptions`]\r\n        );\r\n        return md;\r\n    }\r\n}\r\n","export * from './pondPrepare.schema';\r\nexport * from './seasons.schema';\r\nexport * from './ponds.schema';\r\nexport * from './pondDiary.schema';\r\n","module.exports = require(\"fs\");","module.exports = require(\"express\");","module.exports = require(\"moment-timezone\");","/*\r\n* The Promise module using bluebird\r\n*/\r\n\r\nimport * as Promise from 'bluebird';\r\nPromise.config({\r\n    warnings: {\r\n        wForgottenReturn: false\r\n    }\r\n});\r\n\r\nexport { Promise };\r\n","module.exports = require(\"bluebird\");","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function ponduserrolesToPond(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.POND_USER_ROLE_2_POND,\r\n        foreignKey: {\r\n            name: 'pondId',\r\n            field: 'pondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function ponduserrolesToUser(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.POND_USER_ROLE_2_USER,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as fs from 'fs';\r\nimport * as winston from 'winston';\r\n\r\nconst PATHS = {\r\n  LOG: `${process.cwd()}/logs`,\r\n  LOG_ERROR: `${process.cwd()}/logs/_error.log`,\r\n  LOG_INFO: `${process.cwd()}/logs/_info.log`,\r\n};\r\n// ensure log directory exists\r\n(() => fs.existsSync(PATHS.LOG) || fs.mkdirSync(PATHS.LOG))();\r\n\r\nexport const logger = new (winston.Logger)({\r\n  exitOnError: false,\r\n  transports: [\r\n    new winston.transports.File({\r\n      colorize: false,\r\n      filename: PATHS.LOG_INFO,\r\n      handleExceptions: true,\r\n      json: true,\r\n      level: 'info',\r\n      maxFiles: 2,\r\n      maxsize: 5242880, // 5MB\r\n      name: 'info',\r\n    }),\r\n    new (winston.transports.File)({\r\n      colorize: false,\r\n      filename: PATHS.LOG_ERROR,\r\n      handleExceptions: true,\r\n      json: true,\r\n      level: 'error',\r\n      maxFiles: 2,\r\n      maxsize: 5242880, // 5MB\r\n      name: 'error',\r\n    }),\r\n    new winston.transports.Console({\r\n      colorize: true,\r\n      handleExceptions: true,\r\n      json: false,\r\n      level: 'debug',\r\n      name: 'debug',\r\n    }),\r\n  ],\r\n});\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { userOptions } from '../models/objects';\r\nimport { Promise } from '../lib';\r\nimport DBHelper from '../helpers/db-helpers';\r\nimport { Sequelize, Transaction } from 'sequelize';\r\nimport { UserRole } from '../components';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport class UserServives extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = userOptions;\r\n    constructor() {\r\n        super(UserServives.optionsModel);\r\n        this.models = this.conn.usersModel;\r\n    }\r\n\r\n    public register(entity: any): Promise<any> {\r\n        const sequeliz: Sequelize = DBHelper.sequelize;\r\n        return new Promise((resolve, reject) => {\r\n            sequeliz.transaction({autocommit: true},(t: Transaction) => {\r\n                return this.models.create(entity.user);\r\n            }).catch(e => {\r\n                return resolve(e);\r\n            }).then((user: any) => {\r\n                if(user) {\r\n                    const userRoles: UserRole = new UserRole();\r\n                    userRoles.setUserId = user.userId;\r\n                    userRoles.setRoles = entity.roles;\r\n                    return userRoles.userRolesServices.models.create(userRoles);\r\n                }\r\n            }).catch(e => {\r\n                return resolve(e);\r\n            }).\r\n            then((res: any) => {\r\n                resolve(res ? res.dataValues : null);\r\n            });\r\n        });\r\n    }\r\n\r\n    public getUserByUsername(userCriteria: any): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            this.models.findOne(this.joinQuery(this.getQuery(userCriteria.getUsername))).then((user: any) => {\r\n                if(user) {\r\n                    resolve(user.dataValues);\r\n                } else {\r\n                    resolve(user);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    public registerChild(entity: any): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            this.models.create(entity).then((user) => {\r\n                resolve(user);\r\n            }).catch(err => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    public updateMyProfile(entity: any, options: any): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            this.models.update(entity, options).then((user: any) => {\r\n                resolve(user);\r\n            });\r\n        });\r\n    }\r\n\r\n    public changePassword(enity: any, query: any): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            this.models.update(enity, query).then((data: any) => {\r\n                resolve(data);\r\n            });\r\n        });\r\n    }\r\n\r\n    private joinQuery(userQuery: any): any {\r\n        const include =  {\r\n            include: [\r\n                {\r\n                    model: (this.models as any).sequelize.models.province,\r\n                    as: ActionAssociateDatabase.USER_2_PRO,\r\n                    require: true\r\n                },\r\n                {\r\n                    model: (this.models as any).sequelize.models.district,\r\n                    as: ActionAssociateDatabase.USER_2_DIS,\r\n                    require: true\r\n                },\r\n                {\r\n                    model: (this.models as any).sequelize.models.ward,\r\n                    as: ActionAssociateDatabase.USER_2_WAR,\r\n                    require: true\r\n                }\r\n            ],\r\n            attributes: [`userId`, `userUUId`, `firstname`, `lastname`, `username`, `password`, `birthday`, `town`, `district`, `province`, `status`, `phone`, `email`, `images`, `createdBy`, `createdDate`, `updatedBy`, `updatedDate`, `isDeleted`]\r\n        };\r\n        return { ...userQuery, ...include };\r\n    }\r\n\r\n    getSeasonWithUser(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            const query: any = {\r\n                include: [\r\n                    {\r\n                        model: (this.models as any).sequelize.models.seasons,\r\n                        as: ActionAssociateDatabase.USER_2_SEASON,\r\n                        limit: 1,\r\n                        order: [\r\n                            ['seasonId', 'DESC']\r\n                        ]\r\n                    }\r\n                ]\r\n            };\r\n            this.models.findAll(query).then(res => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n\r\n    getQuery(username: any): any {\r\n        return {\r\n            where: {\r\n                username\r\n            }\r\n        };\r\n    }\r\n}\r\n","export * from './district';\r\n","export * from './province';\r\n","export * from './ward';\r\n","module.exports = require(\"jsonwebtoken\");","import * as SocketIO from 'socket.io';\r\nimport { logger } from '../services/logger';\r\n\r\nexport class BaseSocketServer {\r\n    protected socketConnection: SocketIO.Socket;\r\n    constructor(protected io: SocketIO.Server) {\r\n        this.io.on('connection', (socket: SocketIO.Socket) => {\r\n            this.socketConnection = socket;\r\n            logger.info(`${ socket.id } is connected.`);\r\n            socket.on('disconnect', (reason) => {\r\n                logger.info(`${ socket.id } is disconnected. [Reason] is ${ reason }`);\r\n            });\r\n        });\r\n    }\r\n}\r\n","import { ServerExpress } from './app';\r\nimport { colorCli, port, host } from './config';\r\nimport * as Debug from 'debug';\r\nconst debug = Debug('express:server');\r\nimport * as greenlock from 'greenlock-express';\r\n\r\n// create http server port\r\nexport const app = ServerExpress.bootstrap().app;\r\ngreenlock.create({\r\n    version: 'draft-11',\r\n    server: 'https://acme-v02.api.letsencrypt.org/directory',\r\n    email: 'vietnamfishery@gmail.com',\r\n    agreeTos: true,\r\n    app,\r\n    approvedDomains: ['ec2-13-250-98-129.ap-southeast-1.compute.amazonaws.com', 'www.ec2-13-250-98-129.ap-southeast-1.compute.amazonaws.com'],\r\n    tyMember: true,\r\n    telemetry: false\r\n    // debug: true\r\n}).listen(9999,443);\r\n","import setEnvironment from './bin/setEnvironment';\r\nsetEnvironment();\r\nimport * as bodyParser from 'body-parser';\r\nimport * as cookieParser from 'cookie-parser';\r\nimport * as createError from 'http-errors';\r\nimport * as compression from 'compression';\r\nimport * as errorHandler from 'errorhandler';\r\nimport * as express from 'express';\r\nimport * as cors from 'cors';\r\nimport * as expressStatusMonitor from 'express-status-monitor';\r\nimport * as helmet from 'helmet';\r\nimport * as methodOverride from 'method-override';\r\nimport * as morgan from 'morgan';\r\nimport * as path from 'path';\r\nimport * as fileUpload from 'express-fileupload';\r\nimport * as SocketIO from 'socket.io';\r\nimport { createServer, Server } from 'http';\r\n// import { createServer, Server } from 'https';\r\n// import { readFileSync } from 'fs';\r\n\r\nimport { GoogleDrive } from './googleAPI/drive.google';\r\nimport DBHelper from './helpers/db-helpers';\r\n\r\n// socket import\r\nimport { BaseSocketServer } from './socketServer/BaseSocket';\r\n// import { PhSocket } from './socketServer/phSocket';\r\n\r\nimport { ApiRoutes } from './routes';\r\nimport { logger } from './services';\r\n\r\nimport { SocketBuild } from './socketServer/index';\r\n\r\n// import './services/connectionDB';\r\n\r\n/**\r\n * The server.\r\n *\r\n * @class Server\r\n */\r\nexport class ServerExpress {\r\n    /**\r\n     * Bootstrap the application.\r\n     *\r\n     * @class Server\r\n     * @method bootstrap\r\n     * @static\r\n     */\r\n    public static bootstrap(): ServerExpress {\r\n        return new ServerExpress();\r\n    }\r\n\r\n    public app: express.Application;\r\n    public server: Server;\r\n    public io: SocketIO.Server;\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @class Server\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        // create expressjs application\r\n        this.app = express();\r\n        // create server for socket io\r\n        this.server = createServer(this.app);\r\n\r\n        // // https config\r\n        // const certsPath = path.join(__dirname, '../certs', 'server');\r\n        // const caCertsPath = path.join(__dirname, '../certs', 'ca');\r\n        // const options: any = {\r\n        //     key: readFileSync(certsPath + '/my-server.key.pem', { encoding: 'utf8'}),\r\n        //     cert: readFileSync(certsPath + '/my-server.crt.pem', { encoding: 'utf8'}),\r\n        //     ca: readFileSync(caCertsPath + '/my-root-ca.crt.pem', { encoding: 'utf8'}),\r\n        //     requestCert: false,\r\n        //     rejectUnauthorized: false\r\n        // };\r\n        // this.server = createServer(options,this.app);\r\n\r\n        // Add socket server\r\n        this.io = SocketIO(this.server);\r\n        // socket client in /socket.io/socket.io.js\r\n        new SocketBuild(this.io);\r\n\r\n        // Google Drive API\r\n        new GoogleDrive();\r\n\r\n        // configure application\r\n        this.config();\r\n        // add routes\r\n        this.routes();\r\n\r\n        // handle error 404, ...etc\r\n        this.handleErr();\r\n\r\n        // using Database\r\n        DBHelper.getDatabaseConnection();\r\n    }\r\n\r\n    /**\r\n     * Configure application\r\n     *\r\n     * @class Server\r\n     * @method config\r\n     */\r\n    public async config() {\r\n        this.app.use(cors());\r\n\r\n        // add static paths\r\n        this.app.use('/assets', express.static(path.join(__dirname, '../public')));\r\n\r\n        // set template\r\n        this.app.set('views', path.join(__dirname, '../views'));\r\n        this.app.set('view engine', 'ejs');\r\n\r\n        // mount logger\r\n        this.app.use(morgan('tiny', {\r\n            stream: {\r\n                write: (message: string) => logger.info(message.trim()),\r\n            },\r\n        } as morgan.Options));\r\n\r\n        // mount urlencode parser\r\n        this.app.use(bodyParser.json({\r\n            limit: '50mb',\r\n        }));\r\n\r\n        // mount urlencode parser\r\n        this.app.use(bodyParser.urlencoded({\r\n            extended: false            \r\n        }));\r\n\r\n        // mount query string parser\r\n        this.app.use(cookieParser());\r\n\r\n        // mount override?\r\n        this.app.use(helmet());\r\n        this.app.use(compression());\r\n        this.app.use(methodOverride());\r\n        this.app.use(expressStatusMonitor());\r\n        this.app.use(fileUpload({\r\n            limits: { fileSize: 50 * 1024 * 1024 },\r\n        }));\r\n\r\n        // this.app.use(function (req, res, next) {\r\n        //     res.header('Access-Control-Allow-Origin', '*:*');\r\n        //     res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\r\n        //     next();\r\n        // });\r\n        // this.handleErr();\r\n    }\r\n\r\n    private handleErr = () => {\r\n        // catch 404 and forward to error handler\r\n        this.app.use((req: express.Request, res: express.Response, next: express.NextFunction) => {\r\n            next(createError(404));\r\n        });\r\n\r\n        // catch 404 and forward to error handler\r\n        this.app.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) => {\r\n            // err.status = 404;\r\n            // next(err);\r\n            // set locals, only providing error in development\r\n            res.locals.message = err.message;\r\n            res.locals.error = req.app.get('env') === 'development' ? err : {};\r\n\r\n            // render the error page\r\n            res.status(err.status || 500);\r\n            res.render('error');\r\n        });\r\n\r\n        // error handling\r\n        this.app.use(errorHandler());\r\n    }\r\n\r\n    /**\r\n     * Create and return Router.\r\n     *\r\n     * @class Server\r\n     * @method routes\r\n     * @return void\r\n     */\r\n    private routes = async () => {\r\n        this.app.use(ApiRoutes.path, ApiRoutes.router);\r\n    }\r\n}\r\n","import * as path from 'path';\r\nimport * as dotenv from 'dotenv';\r\nexport default function setEnvironment() {\r\n    if (process.env.NODE_ENV.trim() === 'debug') {\r\n        dotenv.config({\r\n            path: process.cwd() + '/debug.env'\r\n        });\r\n    }\r\n    else if (process.env.NODE_ENV.trim() === 'development') {\r\n        dotenv.config({\r\n            path: process.cwd() + '/.env'\r\n        });\r\n    } else if (process.env.NODE_ENV.trim() === 'production') {\r\n        dotenv.config({\r\n            path: process.cwd() + '/production.env'\r\n        });\r\n    }\r\n}\r\n","module.exports = require(\"dotenv\");","module.exports = require(\"body-parser\");","module.exports = require(\"cookie-parser\");","module.exports = require(\"http-errors\");","module.exports = require(\"compression\");","module.exports = require(\"errorhandler\");","module.exports = require(\"cors\");","module.exports = require(\"express-status-monitor\");","module.exports = require(\"helmet\");","module.exports = require(\"method-override\");","module.exports = require(\"morgan\");","module.exports = require(\"path\");","module.exports = require(\"express-fileupload\");","module.exports = require(\"socket.io\");","module.exports = require(\"http\");","module.exports = require(\"googleapis\");","export const ContentType = {\r\n    Gzip: 'application/gzip',\r\n    Json: 'application/json',\r\n    JsonUtf8: 'application/json; charset=utf8',\r\n};\r\n\r\nexport const apig = {\r\n    logLevel: 'INFO',\r\n    metricsEnabled: true,\r\n    origin: '*',\r\n};\r\n\r\nexport const AccessExposeHeaders = 'X-Pagination-Index,X-Pagination-Size,X-Pagination-TotalCount';\r\n\r\nexport interface IOptionsHttpResponse {\r\n    err?: any;\r\n    message?: any;\r\n    data?: any;\r\n    status?: number;\r\n    excludeStack?: any;\r\n    code?: string;\r\n    details?: any;\r\n}\r\n\r\nexport const IdDataTypes = {\r\n    Integer: 'Integer',\r\n    UuidV1: 'UuidV1',\r\n    UuidV4: 'UuidV4',\r\n};\r\n\r\nexport enum folderDrive {\r\n    uploadImageVNF = '1zh74DklADISZbcEYVix2nDDKd5wtt0-Z'\r\n}\r\n\r\nexport enum defaultImage {\r\n    userImage = '1pL4I4TNcKOf5kD2YTNXXJjuWtyJSBDE2',\r\n    pondImage = '1EVRh5NePZkOBxfKFDAD1RZ3AjHSWJ12W'\r\n}\r\n\r\nexport const isUUId4: RegExp = /^[0-9A-F]{8}-[0-9A-F]{4}-[4][0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i;\r\n\r\nexport interface ISearchOptions {\r\n    pageSizes?: string;\r\n    pageIndex?: string;\r\n    // order?: Array<[]>;\r\n    orderBy?: string;\r\n    orderType?: string;\r\n    between?: string[];\r\n    count?: string;\r\n    userId?: string;\r\n}\r\n\r\n/**\r\n * Những hạng mục đã được đánh dấu [✔] vui lòng không sửa đổi,\r\n * Nếu không sẽ xảy ra lỗi rất nghiêm trọng không fix nổi\r\n */\r\nexport enum ActionAssociateDatabase {\r\n\r\n    BOUGHT_BREED_DETAIL_2_COUPON = 'coupon', // ✔\r\n    BOUGHT_BREED_DETAIL_2_BREED = 'breed', // ✔\r\n\r\n    BOUGHT_BREED_2_BOUGHT_BREED_DETAIL = 'boughtbreedsToBoughtBreedDetails',\r\n    BOUGHT_BREED_2_USER = 'users',\r\n    BOUGHT_BREED_2_SEASON = 'season',\r\n\r\n    BREED_2_BOUGHT_BREED_DETAIL = 'boughBreedDetail',\r\n    BREED_2_STOKING_DETAIL = 'stockingDetails',\r\n    BREED_2_OWNER_BREED = 'owner',\r\n\r\n    COST_2_POND_PREPARE = 'costs',\r\n\r\n    COUPON_2_MATERIAL = 'materials',\r\n    COUPON_2_BOUGHT_BREED_DETAILS = 'boughtBreedDetails', // ✔\r\n    COUPON_2_SEASON = 'season', // ✔\r\n    COUPON_2_USER = 'user',\r\n\r\n    DIED_FISHERY_2_SEASON_AND_POND = 'seasonAndPond',\r\n\r\n    DISTRICT_2_USER = 'districtsToUser',\r\n\r\n    GROWTH_2_SEASON_AND_POND = 'seasonAndPond',\r\n\r\n    HARVEST_DETAIL_2_HARVEST = 'harvest', // ✔\r\n\r\n    HARVEST_2_HARVEST_DETAILS = 'details',\r\n    HARVEST_2_SEASON_AND_POND = 'harvestsnp', // ✔\r\n\r\n    MATERIAL_2_COUPON = 'coupon',\r\n    MATERIAL_2_POND_PREPARE = 'materialToPondPrepare',\r\n    MATERIAL_2_STORAGE = 'storage', // ✔\r\n    MATERIAL_2_USING_FOOD = 'usingFoods',\r\n    MATERIAL_2_USING_VETERINARY = 'usingVeterinay',\r\n\r\n    POND_DIARY_2_SEASON_AND_POND = 'snp', // ✔\r\n\r\n    POND_ENVIRONMENT_2_SEASON_AND_POND = 'environments',\r\n\r\n    POND_PREPARE_2_SEASON_AND_POND = 'seasonAndPond',\r\n    POND_PREPARE_2_COST = 'pondPrepare',\r\n    POND_PREPARE_2_POND_PREPARE_DETAILS = 'details',\r\n    POND_PREPARE_2_INCURREDS = 'incurreds',\r\n\r\n    POND_PREPARE_DETAIL_2_POND_PREPARE = 'pondPrepare',\r\n    POND_PREPARE_DETAIL_2_STORAGE = 'storages',\r\n    POND_PREPARE_DETAIL_2_COST = 'detailCost',\r\n\r\n    INCURREDS_TO_POND_PREPARE = 'pondPrepare',\r\n    INCURREDS_TO_USER = 'user',\r\n\r\n    POND_2_POND_USER_ROLE = 'pondUserRoles', // ✔\r\n    POND_2_SEASON = 'seasons',\r\n    POND_2_USER = 'user', // ✔\r\n    POND_2_EMPLOYEE_MAYNY_ROLES = 'users', // ✔\r\n    POND_2_SEASON_AND_POND = 'seasonsnp', // ✔\r\n\r\n    POND_USER_ROLE_2_USER = 'user', // ✔\r\n    POND_USER_ROLE_2_USER_ROLE = 'userRole',\r\n    POND_USER_ROLE_2_POND = 'pond',\r\n\r\n    PRICE_2_SEASON = 'prices',\r\n\r\n    PROVINCE_2_USER = 'provinces',\r\n\r\n    SEASON_AND_POND_2_SEASON = 'seasons',\r\n    SEASON_AND_POND_2_POND = 'ponds',\r\n    SEASON_AND_POND_2_GROWTH = 'seasonNPondToGrowth',\r\n    SEASON_AND_POND_2_DIED_FISH = 'diedFishSeason',\r\n    SEASON_AND_POND_2_HARVEST = 'toHarvests',\r\n    SEASON_AND_POND_2_POND_DIARY = 'seasonWithDiary',\r\n    SEASON_AND_POND_2_POND_PREPARE = 'withPondPrepare',\r\n    SEASON_AND_POND_2_TAKE_CARE = 'takeCares',\r\n    SEASON_AND_POND_2_STOCKING = 'stocking',\r\n    SEASON_AND_POND_2_POND_ENV = 'seasonWithEnvironment',\r\n\r\n    SEASON_2_BOUGHT_BREED = 'boughtBreed',\r\n    SEASON_2_PRICE = 'price',\r\n    SEASON_2_COUPON = 'coupon',\r\n    SEASON_2_USER = 'user', // ✔\r\n    SEASON_2_USER_ROLES = 'roles',\r\n    SEASON_2_POND = 'ponds',\r\n    SEASON_2_SEASON_AND_POND = 'seasonToSeasonNPond',\r\n    SEASON_2_STORAGE = 'storage',\r\n\r\n    STOCKING_2_STOCKING_DETAILS = 'details',\r\n    STOCKING_2_SEASON_AND_POND = 'seasonAndPond',\r\n\r\n    STOCKING_DETAILS_2_STOCKING = 'stocking',\r\n    STOCKING_DETAILS_2_BREED = 'breed',\r\n\r\n    STORAGE_2_POND_PREPARE_DETAILS = 'pondPrepareDetails', // ✔\r\n    STORAGE_2_MATERIAL = 'materials',\r\n    STORAGE_2_SEASON = 'storagesToSeason',\r\n    STORAGE_2_PRICE = 'storagesToPrices',\r\n    STORAGE_2_USING_FOOD = 'usingFoods',\r\n    STORAGE_2_USING_VETERINARY = 'usingveterinary',\r\n    STORAGE_2_OWNER = 'owner',\r\n\r\n    OWNER_TO_STORAGE = 'storages',\r\n    OWNER_TO_USER = 'user',\r\n\r\n    OWNER_BREED_TO_BREED = 'breeds',\r\n    OWNER_BREED_TO_USER = 'user',\r\n\r\n    TAKE_CARE_2_USING_FOOD = 'usingFoods',\r\n    TAKE_CARE_2_USING_VETERINARY = 'usingVeterinary',\r\n    TAKE_CARE_2_SEASON_AND_POND = 'seasonAndPond',\r\n\r\n    USER_ROLES_2_USER = 'userInfo',\r\n    USER_ROLES_2_SEASON = 'seasonRoles',\r\n    USER_ROLES_2_USER_BOSS = 'employees', // ✔\r\n    USER_ROLES_2_POND_USER_ROLE = 'pondUserRoles', // ✔\r\n\r\n    USER_2_ROLES_USER = 'roles', // ✔\r\n    USER_2_POND = 'ponds',\r\n    USER_2_POND_MANY_ROLES = 'pondsBy',\r\n    USER_2_COUPON = 'coupons',\r\n    USER_2_SEASON = 'seasons', // ✔\r\n    USER_2_BOUGHT_BREED = 'userToBoughtBreeds',\r\n    USER_2_PRO = 'provinces',\r\n    USER_2_DIS = 'districts',\r\n    USER_2_WAR = 'wards',\r\n    USER_2_ROLES_GET_EMPLOYEES = 'employees', // ✔\r\n    USER_2_POND_USER_ROLE = 'pondUserRole',\r\n    USER_2_OWNER_STORAGE = 'user',\r\n    USER_2_OWNER_BREED = 'ownerBreed',\r\n    USER_2_INCURREDS = 'incurreds',\r\n\r\n    USING_FOOD_2_STORAGE = 'storages',\r\n    USING_FOOD_2_TAKE_CARE = 'usingFoods',\r\n\r\n    USING_VETERINARY_2_STORAGE = 'storages',\r\n    USING_VETERINARY_2_TAKE_CARE = 'usingVeterinaryTakeCare',\r\n\r\n    WARD_2_USER = 'wards',\r\n}\r\n","/**\r\n * @description :: Custom library to process date time format\r\n * like get date, month, year or concat time together\r\n */\r\n\r\n/**\r\n * Module dependencies.\r\n */\r\n// import 'moment-timezone'\r\nimport * as moment from 'moment-timezone';\r\n\r\n/**\r\n * Define a DateUtil that supports some functions to work with date time\r\n */\r\nexport class DateUtil {\r\n\r\n   /**\r\n    * Get current datetime using moment\r\n    * @return {Date} The current date\r\n    */\r\n    public static getNow(): Date {\r\n        return moment().toDate();\r\n    }\r\n\r\n   /**\r\n    * Get current datetime for specify time zone\r\n    * @param {String} timeZone  The time zone name\r\n    * @param {String} format    The format pattern to be used\r\n    * @return {Date}            The current date in specify time zone\r\n    */\r\n    public static getNowByTimeZone(timeZone: string, format: string): string {\r\n        return moment().tz(timeZone).format(format);\r\n    }\r\n\r\n    /**\r\n     * Get current UTC datetime using moment\r\n     * @return {String} A string that represent curent UTC datetime (i.e. 2016-11-13T04:40:08Z)\r\n     */\r\n    public static getUTCDateTime(date?: Date): string {\r\n        return moment(date).utc().format();\r\n    }\r\n\r\n    /**\r\n     * Converts the given date with the format pattern\r\n     * @param {String} date             The date to be converted\r\n     * @param {String} format           The format pattern to be used\r\n     * @param {boolean} isUTC           The boolean value to specific the date is UTC or not\r\n     * @param {boolean} ignoreConvert   The flag to specific the date is convert to server time or not\r\n     * @return {String}                 The formatted date\r\n     */\r\n    public static formatDate(date: moment.MomentInput, format: string, isUTC?: boolean, ignoreConvert: boolean = false): string {\r\n        if (!date) {\r\n            return null;\r\n        }\r\n\r\n        if (isUTC) {\r\n            return moment.utc(date).format(format);\r\n        }\r\n\r\n        // Remove Z character from the date value to ignore convert to local time\r\n        if (ignoreConvert && typeof date === 'string') {\r\n            date = date.replace(new RegExp('Z', 'g'), '');\r\n        }\r\n\r\n        return moment(date).format(format);\r\n    }\r\n\r\n    /**\r\n     * Gets the date from the formatted date string\r\n     * @param {String} str The formatted date to be converted\r\n     * @param {String} format The format pattern is using\r\n     * @return {String} Return the date from the formatted date string\r\n     */\r\n    public static parse(str: moment.MomentInput, format?: moment.MomentFormatSpecification): Date {\r\n        if (str === null || str === '') {\r\n            return null;\r\n        }\r\n        return moment(str, format).toDate();\r\n    }\r\n\r\n    /**\r\n     * Converts the formatted date to the new format\r\n     * @param {String} str          The formatted date to be converted\r\n     * @param {String} format       The format pattern is using\r\n     * @param {String} newFormat    The new format pattern to be used\r\n     * @return {String} Return the new formatted date\r\n     */\r\n    public static refFormatDate(str: moment.MomentInput, format: moment.MomentFormatSpecification, newFormat: string): string {\r\n        const date: Date = this.parse(str, format);\r\n        return DateUtil.formatDate(date, newFormat);\r\n    }\r\n\r\n    /**\r\n     * To get the difference in another unit of measurement, pass that measurement as the second argument.\r\n     * @param {Date} date           The date to difference\r\n     * @param {Date} diffDate       The date to be diff\r\n     * @param {String} unitOfTime   The unit of time (months, years, days, etc... )\r\n     * @return {String} The difference in another unit of measurement\r\n     */\r\n    public static diffDate(date: moment.MomentInput, diffDate: moment.MomentInput, unitOfTime: moment.unitOfTime.Diff): number {\r\n        return moment(date).diff(diffDate, unitOfTime);\r\n    }\r\n\r\n    /**\r\n     * To add amount unit of time to specified date\r\n     * @param {Date} date           The input date\r\n     * @param {Date} amount         The amount unit that the input date will add\r\n     * @param {String} unitOfTime   The unit of time (months, years, days, etc... )\r\n     * @return {Date} The date after added amount of unit of time.\r\n     */\r\n    public static add(date: moment.MomentInput, amount: moment.DurationInputArg1, unitOfTime: moment.unitOfTime.DurationConstructor): Date {\r\n        return moment(date).add(amount, unitOfTime).toDate();\r\n    }\r\n\r\n    /**\r\n     * To subtract amount unit of time to specified date\r\n     * @param {Date} date           The input date\r\n     * @param {Date} amount         The amount unit that the input date will substract\r\n     * @param {String} unitOfTime   The unit of time (months, years, days, etc... )\r\n     * @return {Date} The date after subtracted amount of unit of time.\r\n     */\r\n    public static subtract(date: moment.MomentInput, amount: moment.DurationInputArg1, unitOfTime: moment.unitOfTime.DurationConstructor): Date {\r\n        return moment(date).subtract(amount, unitOfTime).toDate();\r\n    }\r\n\r\n    /**\r\n     * Calculate the date end of unit of time to specified date\r\n     * @param {Date} date           The input date\r\n     * @param {String} unitOfTime   The unit of time (months, years, days, etc... )\r\n     * @return {Date} The date end of unit of time.\r\n     */\r\n    public static endOf(date: moment.MomentInput, unitOfTime: moment.unitOfTime.StartOf): Date {\r\n        return moment(date).endOf(unitOfTime).toDate();\r\n    }\r\n\r\n    /**\r\n     * Calculate the date start of unit of time to specified date\r\n     * @param {Date} date           The input date\r\n     * @param {String} unitOfTime   The unit of time (months, years, days, etc... )\r\n     * @return {Date} The date end of unit of time.\r\n     */\r\n    public static startOf(date: moment.MomentInput, unitOfTime: moment.unitOfTime.StartOf): Date {\r\n        return moment(date).startOf(unitOfTime).toDate();\r\n    }\r\n}\r\n","import * as bcryptjs from 'bcryptjs';\r\nimport { Promise } from './promise';\r\n\r\nexport class Enscrypts {\r\n    public static getSalt(rounds: number): Promise<string> {\r\n        return Promise.resolve(bcryptjs.genSalt(rounds));\r\n    }\r\n\r\n    public static getSaltSync(rounds: number) {\r\n        return bcryptjs.genSaltSync(rounds);\r\n    }\r\n\r\n    public static hashing(text: string, salt: number | string): Promise<string> {\r\n        return Promise.resolve(bcryptjs.hash(text, salt));\r\n    }\r\n\r\n    public static hashingSync(text: string, salt: number | string): string {\r\n        return bcryptjs.hashSync(text, salt);\r\n    }\r\n\r\n    public static compare(candidate: string, hash: string): Promise<boolean> {\r\n        return Promise.resolve(bcryptjs.compare(candidate, hash));\r\n    }\r\n\r\n    public static compareSync(candidate: string, hash: string): boolean {\r\n        return bcryptjs.compareSync(candidate, hash);\r\n    }\r\n\r\n    /**\r\n     * Enscrypts.hashingSync('vietnamfishery', Enscrypts.getSaltSync(Math.floor((Math.random() * 12) + 1))) + '100%<3' +\r\n     */\r\n    protected reCryptToken = (tokenBCrypt: string, isBoss: boolean): string => {\r\n        const token = tokenBCrypt.split('.');\r\n        if (!isBoss) {\r\n            return token[0] + '.' + (token[1].slice(0, token[1].length - 1) + Math.floor((Math.random() * 9) + 1) + token[1][token[1].length - 1]) + '.' + token[2];\r\n        } else {\r\n            return token[0] + '.' + (token[1].slice(0, token[1].length - 1) + 0 + token[1][token[1].length - 1]) + '.' + token[2];\r\n        }\r\n    }\r\n\r\n    protected extractToken = (token: string): string => {\r\n        const tokenCheck = token.split('.');\r\n        return tokenCheck[0] + '.' + (tokenCheck[1].slice(0, tokenCheck[1].length - 1) + tokenCheck[1][tokenCheck[1].length]) + '.' + tokenCheck[2];\r\n    }\r\n}\r\n","module.exports = require(\"bcryptjs\");","import * as Stream from 'stream';\r\nimport { Promise } from 'bluebird';\r\n\r\nexport class CustomStream extends Stream {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    public static BufferToStream(buffer: Buffer) {\r\n        const stream = new this.Duplex();\r\n        stream.push(buffer);\r\n        stream.push(null);\r\n        return stream;\r\n    }\r\n\r\n    public static StreamToBuffer(stream: Stream) {\r\n        return new Promise((resolve, reject) => {\r\n            const buffers: Buffer[] = [];\r\n            stream.on('error', reject);\r\n            stream.on('data', (data) => buffers.push(data));\r\n            stream.on('end', () => resolve(Buffer.concat(buffers)));\r\n        });\r\n    }\r\n}\r\n","module.exports = require(\"stream\");","module.exports = require(\"os\");","import * as Sequeliz from 'sequelize';\r\n\r\nimport * as associations from './';\r\n\r\nexport class ModelBuilder {\r\n    constructor(private model: Sequeliz.Model<{}, any>) { }\r\n\r\n    boughtbreeddetailsAssociate(couponModel: any, breedsModel: any) {\r\n        associations.boughtbreeddetailsToCoupon(this.model, couponModel);\r\n        associations.boughtbreeddetailsToBreeds(this.model, breedsModel);\r\n    }\r\n\r\n    boughtbreedsAssociate(\r\n        seasonModel: any,\r\n        usersModel: any\r\n    ) {\r\n        associations.boughtbreedsToSeason(this.model, seasonModel);\r\n        associations.boughtbreedsToUser(this.model, usersModel);\r\n    }\r\n\r\n    breedsAssociate(\r\n        boughtBreedDetailsModel: any,\r\n        stockingDetailsModel: any,\r\n        breedOwnerModel: any\r\n    ) {\r\n        associations.breedToBoughBreedDetails(this.model, boughtBreedDetailsModel);\r\n        associations.breedsToStockingDetails(this.model, stockingDetailsModel);\r\n        associations.breedsToOwnerBreed(this.model, breedOwnerModel);\r\n    }\r\n\r\n    costsAssociate(pondPrepareModel: any) {\r\n        associations.costsToPondPrepare(this.model, pondPrepareModel);\r\n    }\r\n\r\n    couponAssociate(\r\n        materialModel: any,\r\n        usersModel: any,\r\n        seasonModel: any,\r\n        boughtBreedDetailsModel: any\r\n    ) {\r\n        associations.couponToMaterial(this.model, materialModel);\r\n        associations.couponToBoughtBreedDetails(this.model, boughtBreedDetailsModel);\r\n        associations.couponToUsers(this.model, usersModel);\r\n        associations.couponToSeason(this.model, seasonModel);\r\n    }\r\n\r\n    diedfisherysAssociate(seasonAndPondModel: any) {\r\n        associations.diedfisherysToSeasonAndPond(this.model, seasonAndPondModel);\r\n    }\r\n\r\n    districtAssociate(userModel: any) {\r\n        associations.districtToUser(this.model, userModel);\r\n    }\r\n\r\n    growthsAssociate(seasonAndPondModel: any) {\r\n        associations.growthsToSeasonAndPond(this.model, seasonAndPondModel);\r\n    }\r\n\r\n    harvestdetailsAssociate(harvestsModel: any) {\r\n        associations.harvestdetailsToHarvests(this.model, harvestsModel);\r\n    }\r\n\r\n    harvestsAssociate(harvestDetailModel: any, seasonAndPondModel: any) {\r\n        associations.harvestsToHarvestDetails(this.model, harvestDetailModel);\r\n        associations.harvestsToSeasonAndPond(this.model, seasonAndPondModel);\r\n    }\r\n\r\n    incurredAssociate(pondPrepareModel: any, userModel: any) {\r\n        associations.incurredsToPondPrepare(this.model, pondPrepareModel);\r\n        associations.incurredsToUser(this.model, userModel);\r\n    }\r\n\r\n    materialAssociate(\r\n        couponModel: any,\r\n        pondPrepareModel: any,\r\n        storageModel: any,\r\n        usingFoodModel: any,\r\n        usingVeterinayModel: any\r\n    ) {\r\n        associations.materialToCoupon(this.model, couponModel);\r\n        associations.materialToPondPrepare(this.model, pondPrepareModel);\r\n        associations.materialToStorages(this.model, storageModel);\r\n        associations.materialToUsingFood(this.model, usingFoodModel);\r\n        associations.materialToUsingVeterinary(this.model, usingVeterinayModel);\r\n    }\r\n\r\n    ponddiaryAssociate(seasonAndPondModel: any) {\r\n        associations.ponddiaryToSeasonAndPond(this.model, seasonAndPondModel);\r\n    }\r\n\r\n    pondenvironmentAssociate(seasonAndModel: any) {\r\n        associations.pondenvironmenToSeasonAndPond(this.model, seasonAndModel);\r\n    }\r\n\r\n    pondprepareAssociate(\r\n        seasonAndPondModel: any,\r\n        costsModel: any,\r\n        pondPrepareDetailModel: any,\r\n        incurredModel: any\r\n    ) {\r\n        associations.pondprepareToCosts(this.model, costsModel);\r\n        associations.pondprepareToPondPrepareDetails(this.model, pondPrepareDetailModel);\r\n        associations.pondprepareToSeasonAndPond(this.model, seasonAndPondModel);\r\n        associations.pondprepareToIncurred(this.model, incurredModel);\r\n    }\r\n\r\n    pondpreparedetailsAssociate(pondPrepareModel: any, storageModel: any) {\r\n        associations.pondpreparedetailsToStorage(this.model, storageModel);\r\n        associations.pondpreparedetailsToPondPrepare(this.model, pondPrepareModel);\r\n    }\r\n\r\n    pondsAssociate(pondUserRolesModel: any, seasonAndPondModel: any, userModel: any, seasonModel: any) {\r\n        associations.pondsToPondUserRoles(this.model, pondUserRolesModel);\r\n        associations.pondsToSeasonAndPond(this.model, seasonAndPondModel);\r\n        associations.pondsToUser(this.model, userModel);\r\n        associations.pondsToUserEmployee(this.model, userModel);\r\n        associations.pondToSeason(this.model, seasonModel);\r\n    }\r\n\r\n    ponduserrolesAssociate(\r\n        userModel: any,\r\n        pondsModel: any\r\n    ) {\r\n        associations.ponduserrolesToUser(this.model, userModel);\r\n        associations.ponduserrolesToPond(this.model, pondsModel);\r\n    }\r\n\r\n    pricesAssociate(seasonModel: any) {\r\n        associations.pricesToSeason(this.model, seasonModel);\r\n    }\r\n\r\n    provinceAssociate(userModel: any) {\r\n        associations.provinceToUser(this.model, userModel);\r\n    }\r\n\r\n    seasonAssociate(\r\n        boughtBreedModel: any,\r\n        priceModel: any,\r\n        userModel: any,\r\n        seasonAndPondModel: any,\r\n        pondsModel: any,\r\n        rolesUserModel: any,\r\n        couponModel: any\r\n    ) {\r\n        associations.seasonToBoughtBreed(this.model, boughtBreedModel);\r\n        associations.seasonToPrice(this.model, priceModel);\r\n        associations.seasonToUser(this.model, userModel);\r\n        associations.seasonToSNP(this.model, seasonAndPondModel);\r\n        associations.seasonToPond(this.model, pondsModel);\r\n        associations.seasonToUserRoles(this.model, rolesUserModel);\r\n        associations.seasonToCoupon(this.model, couponModel);\r\n    }\r\n\r\n    seasonAndPondAssociate(\r\n        diedFishModel: any,\r\n        growthModel: any,\r\n        harvestModel: any,\r\n        pondDiary: any,\r\n        pondEnvironmentModel: any,\r\n        pondPrepareModel: any,\r\n        pondsModel: any,\r\n        seasonModel: any,\r\n        stockingModel: any,\r\n        takeCareModel: any\r\n    ) {\r\n        associations.withDiedFish(this.model, diedFishModel);\r\n        associations.withGrowths(this.model, growthModel);\r\n        associations.withHarvest(this.model, harvestModel);\r\n        associations.withPondDiary(this.model, pondDiary);\r\n        associations.withPondEnv(this.model, pondEnvironmentModel);\r\n        associations.withPondPrepare(this.model, pondPrepareModel);\r\n        associations.withPond(this.model, pondsModel);\r\n        associations.withSeason(this.model, seasonModel);\r\n        associations.withStocking(this.model, stockingModel);\r\n        associations.withTakeCare(this.model, takeCareModel);\r\n    }\r\n\r\n    stockingAssociate(stockingdetailsModel: any, seasonAndPondModel: any) {\r\n        associations.stockingToSNP(this.model, seasonAndPondModel);\r\n        associations.stockingToStockingdetails(this.model, stockingdetailsModel);\r\n    }\r\n\r\n    stockingdetailsAssociate(stockingModel: any, breedsModel: any) {\r\n        associations.stockingdetailsToBreeds(this.model, breedsModel);\r\n        associations.stockingdetailsToStocking(this.model, stockingModel);\r\n    }\r\n\r\n    storagesAssociate(\r\n        materialsModel: any,\r\n        storageOwnerModel: any,\r\n        pondPrepareDetailModel: any,\r\n        usingFoodModel: any,\r\n        usingveterinaryModel: any\r\n    ) {\r\n        associations.storagesToMaterial(this.model, materialsModel);\r\n        associations.storagesToOwner(this.model, storageOwnerModel);\r\n        associations.storagesToPondPrePareDetail(this.model, pondPrepareDetailModel);\r\n        associations.storagesToUsingFood(this.model, usingFoodModel);\r\n        associations.storagesToUsingVeterinary(this.model, usingveterinaryModel);\r\n    }\r\n\r\n    storageOwnerAssociate(\r\n        storageModel: any,\r\n        userModel: any,\r\n    ) {\r\n        associations.ownerToStorage(this.model, storageModel);\r\n        associations.ownerToUser(this.model, userModel);\r\n    }\r\n\r\n    breedOwnerAssociate(\r\n        breedModel: any,\r\n        userModel: any\r\n    ) {\r\n        associations.ownerBreedToBreed(this.model, breedModel);\r\n        associations.ownerBreedToUser(this.model, userModel);\r\n    }\r\n\r\n    takecareAssociate(usingveterinaryModel: any, usingfoodsModel: any, seasonAndPondModel: any) {\r\n        associations.takecareToSNP(this.model, seasonAndPondModel);\r\n        associations.takecareToUsingfoods(this.model, usingfoodsModel);\r\n        associations.takecareToUsingveterinary(this.model, usingveterinaryModel);\r\n    }\r\n\r\n    userRolesAssociate(\r\n        pondUserRolesModel: any,\r\n        userModel: any,\r\n        seasonModel: any\r\n    ) {\r\n        associations.userrolesToPondUserRoles(this.model, pondUserRolesModel);\r\n        associations.userrolesToUsers(this.model, userModel);\r\n        associations.userrolesToUsersBoss(this.model, userModel);\r\n        associations.userrolesToSeason(this.model, seasonModel);\r\n    }\r\n\r\n    usersAssociate(\r\n        districtModel: any,\r\n        rolesUserModel: any,\r\n        pondsModel: any,\r\n        couponModel: any,\r\n        boughtbreedsModel: any,\r\n        provinceModel: any,\r\n        seasonModel: any,\r\n        wardModel: any,\r\n        ownerStorageModel: any,\r\n        breedOwnerModel: any,\r\n        pondUserRolesModel: any,\r\n        incurredModel: any\r\n    ) {\r\n        associations.userToDistrict(this.model, districtModel);\r\n        associations.userToRolesUser(this.model, rolesUserModel);\r\n        associations.userToPond(this.model, pondsModel);\r\n        associations.userToPondRolesBelongMany(this.model, pondsModel);\r\n        associations.userToCoupon(this.model, couponModel);\r\n        associations.userToBoughtBreeds(this.model, boughtbreedsModel);\r\n        associations.userToProvince(this.model, provinceModel);\r\n        associations.userToSeason(this.model, seasonModel);\r\n        associations.userToWard(this.model, wardModel);\r\n        associations.userToRolesBoss(this.model, rolesUserModel);\r\n        associations.userToOwnerStorage(this.model, ownerStorageModel);\r\n        associations.userToOwnerBreed(this.model, breedOwnerModel);\r\n        associations.userToPondUserRoles(this.model, pondUserRolesModel);\r\n        associations.userToIncurred(this.model, incurredModel);\r\n    }\r\n\r\n    usingfoodsAssociate(storageModel: any, takecareModel: any) {\r\n        associations.usingfoodsToStorage(this.model, storageModel);\r\n        associations.usingfoodsToTakecare(this.model, takecareModel);\r\n    }\r\n\r\n    usingveterinaryAssociate(storageModel: any, takecareModel: any) {\r\n        associations.usingveterinaryToStorage(this.model, storageModel);\r\n        associations.usingveterinaryToTakecare(this.model, takecareModel);\r\n    }\r\n\r\n    wardAssociate(userModel: any) {\r\n        associations.wardToUser(this.model, userModel);\r\n    }\r\n}\r\n","export * from './boughtbreeddetails.associate';\r\nexport * from './boughtbreeds.associate';\r\nexport * from './breeds.associate';\r\nexport * from './ownerBreed.associate';\r\nexport * from './costs.associate';\r\nexport * from './coupon.associate';\r\nexport * from './diedfisherys.associate';\r\nexport * from './growths.associate';\r\nexport * from './harvestdetails.associate';\r\nexport * from './harvests.associate';\r\nexport * from './material.associate';\r\nexport * from './ponddiary.associate';\r\nexport * from './pondenvironments.associate';\r\nexport * from './pondprepare.associate';\r\nexport * from './pondpreparedetails.associate';\r\nexport * from './ponds.associate';\r\nexport * from './ponduserroles.associate';\r\nexport * from './prices.associate';\r\nexport * from './ponduserroles.associate';\r\nexport * from './season.associate';\r\nexport * from './seasonandpond.associate';\r\nexport * from './stocking.associate';\r\nexport * from './stockingdetails.associate';\r\nexport * from './storages.associate';\r\nexport * from './storageOwner.associate';\r\nexport * from './takecare.associate';\r\nexport * from './users.associate';\r\nexport * from './userRoles.associate';\r\nexport * from './usingfoods.associate';\r\nexport * from './usingveterinary.associate';\r\nexport * from './province.associate';\r\nexport * from './district.associate';\r\nexport * from './ward.associate';\r\nexport * from './incurreds.associate';\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function boughtbreeddetailsToCoupon(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.BOUGHT_BREED_DETAIL_2_COUPON,\r\n        foreignKey: {\r\n            name: 'couponId',\r\n            field: 'couponId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function boughtbreeddetailsToBreeds(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.BOUGHT_BREED_DETAIL_2_BREED,\r\n        foreignKey: {\r\n            name: 'breedId',\r\n            field: 'breedId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function boughtbreedsToSeason(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.BOUGHT_BREED_2_SEASON,\r\n        foreignKey: {\r\n            name: 'seasonId',\r\n            field: 'seasonId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function boughtbreedsToUser(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.BOUGHT_BREED_2_USER,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function breedToBoughBreedDetails(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.BREED_2_BOUGHT_BREED_DETAIL,\r\n        foreignKey: {\r\n            name: 'breedId',\r\n            field: 'breedId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function breedsToStockingDetails(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.BREED_2_STOKING_DETAIL,\r\n        foreignKey: {\r\n            name: 'breedId',\r\n            field: 'breedId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function breedsToOwnerBreed(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.BREED_2_OWNER_BREED,\r\n        foreignKey: {\r\n            name: 'ownerId',\r\n            field: 'ownerId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function ownerBreedToBreed(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.OWNER_BREED_TO_BREED,\r\n        foreignKey: {\r\n            name: 'ownerId',\r\n            field: 'ownerId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function ownerBreedToUser(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.OWNER_BREED_TO_USER,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function costsToPondPrepare(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.COST_2_POND_PREPARE,\r\n        foreignKey: {\r\n            name: 'pondPrepareId',\r\n            field: 'pondPrepareId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function couponToMaterial(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.COUPON_2_MATERIAL,\r\n        foreignKey: {\r\n            name: 'couponId',\r\n            field: 'couponId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function couponToBoughtBreedDetails(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.COUPON_2_BOUGHT_BREED_DETAILS,\r\n        foreignKey: {\r\n            name: 'couponId',\r\n            field: 'couponId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function couponToUsers(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.COUPON_2_USER,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function couponToSeason(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.COUPON_2_SEASON,\r\n        foreignKey: {\r\n            name: 'seasonId',\r\n            field: 'seasonId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function diedfisherysToSeasonAndPond(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.DIED_FISHERY_2_SEASON_AND_POND,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function growthsToSeasonAndPond(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.GROWTH_2_SEASON_AND_POND,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function harvestdetailsToHarvests(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.HARVEST_DETAIL_2_HARVEST,\r\n        foreignKey: {\r\n            name: 'harvestId',\r\n            field: 'harvestId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function harvestsToHarvestDetails(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.HARVEST_2_HARVEST_DETAILS,\r\n        foreignKey: {\r\n            name: 'harvestId',\r\n            field: 'harvestId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function harvestsToSeasonAndPond(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.HARVEST_2_SEASON_AND_POND,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function materialToCoupon(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.MATERIAL_2_COUPON,\r\n        foreignKey: {\r\n            name: 'couponId',\r\n            field: 'couponId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function materialToPondPrepare(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.MATERIAL_2_POND_PREPARE,\r\n        foreignKey: {\r\n            name: 'materialId',\r\n            field: 'materialId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function materialToStorages(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.MATERIAL_2_STORAGE,\r\n        foreignKey: {\r\n            name: 'storageId',\r\n            field: 'storageId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function materialToUsingFood(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.MATERIAL_2_USING_FOOD,\r\n        foreignKey: {\r\n            name: 'materialId',\r\n            field: 'materialId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function materialToUsingVeterinary(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.MATERIAL_2_USING_VETERINARY,\r\n        foreignKey: {\r\n            name: 'materialId',\r\n            field: 'materialId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function ponddiaryToSeasonAndPond(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.POND_DIARY_2_SEASON_AND_POND,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function pondenvironmenToSeasonAndPond(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.POND_ENVIRONMENT_2_SEASON_AND_POND,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function pondprepareToCosts(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.POND_PREPARE_2_COST,\r\n        foreignKey: {\r\n            name: 'pondPrepareId',\r\n            field: 'pondPrepareId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function pondprepareToSeasonAndPond(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.POND_PREPARE_2_SEASON_AND_POND,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function pondprepareToPondPrepareDetails(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.POND_PREPARE_2_POND_PREPARE_DETAILS,\r\n        foreignKey: {\r\n            name: 'pondPrepareId',\r\n            field: 'pondPrepareId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function pondprepareToIncurred(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.POND_PREPARE_2_INCURREDS,\r\n        foreignKey: {\r\n            name: 'pondPrepareId',\r\n            field: 'pondPrepareId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function pondpreparedetailsToStorage(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.POND_PREPARE_DETAIL_2_STORAGE,\r\n        foreignKey: {\r\n            name: 'storageId',\r\n            field: 'storageId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function pondpreparedetailsToPondPrepare(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.POND_PREPARE_DETAIL_2_POND_PREPARE,\r\n        foreignKey: {\r\n            name: 'pondPrepareId',\r\n            field: 'pondPrepareId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function pondsToPondUserRoles(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n        foreignKey: {\r\n            name: 'pondId',\r\n            field: 'pondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function pondsToSeasonAndPond(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.POND_2_SEASON_AND_POND,\r\n        foreignKey: {\r\n            name: 'pondId',\r\n            field: 'pondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function pondsToUser(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.POND_2_USER,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function pondsToUserEmployee(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsToMany(model, {\r\n        as: ActionAssociateDatabase.POND_2_EMPLOYEE_MAYNY_ROLES,\r\n        through: 'ponduserroles',\r\n        foreignKey: {\r\n            name: 'pondId',\r\n            field: 'pondId'\r\n        },\r\n        otherKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function pondToSeason(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsToMany(model, {\r\n        as: ActionAssociateDatabase.POND_2_SEASON,\r\n        through: 'seasonsandpond',\r\n        foreignKey: {\r\n            name: 'pondId',\r\n            field: 'pondId'\r\n        },\r\n        otherKey: {\r\n            name: 'seasonId',\r\n            field: 'seasonId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function pricesToSeason(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.PRICE_2_SEASON,\r\n        foreignKey: {\r\n            name: 'seasonId',\r\n            field: 'seasonId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function seasonToBoughtBreed(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_2_BOUGHT_BREED,\r\n        foreignKey: {\r\n            name: 'seasonId',\r\n            field: 'seasonId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function seasonToPrice(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_2_PRICE,\r\n        foreignKey: {\r\n            name: 'seasonId',\r\n            field: 'seasonId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function seasonToUser(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.SEASON_2_USER,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function seasonToUserRoles(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.SEASON_2_USER_ROLES,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function seasonToSNP(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_2_SEASON_AND_POND,\r\n        foreignKey: {\r\n            name: 'seasonId',\r\n            field: 'seasonId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function seasonToCoupon(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_2_COUPON,\r\n        foreignKey: {\r\n            name: 'seasonId',\r\n            field: 'seasonId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function seasonToPond(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsToMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_2_POND,\r\n        through: 'seasonsandpond',\r\n        foreignKey: {\r\n            name: 'seasonId',\r\n            field: 'seasonId'\r\n        },\r\n        otherKey: {\r\n            name: 'pondId',\r\n            field: 'pondId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function withDiedFish(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_AND_POND_2_DIED_FISH,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function withGrowths(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_AND_POND_2_GROWTH,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function withHarvest(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_AND_POND_2_HARVEST,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function withPondDiary(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_AND_POND_2_POND_DIARY,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function withPondEnv(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_AND_POND_2_POND_ENV,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function withPondPrepare(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_AND_POND_2_POND_PREPARE,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function withSeason(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n        foreignKey: {\r\n            name: 'seasonId',\r\n            field: 'seasonId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function withPond(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.SEASON_AND_POND_2_POND,\r\n        foreignKey: {\r\n            name: 'pondId',\r\n            field: 'pondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function withStocking(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_AND_POND_2_STOCKING,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function withTakeCare(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_AND_POND_2_TAKE_CARE,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function stockingToSNP(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.STOCKING_2_SEASON_AND_POND,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n\r\nexport function stockingToStockingdetails(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasOne(model, {\r\n        as: ActionAssociateDatabase.STOCKING_2_STOCKING_DETAILS,\r\n        foreignKey: {\r\n            name: 'stockingId',\r\n            field: 'stockingId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function stockingdetailsToBreeds(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.STOCKING_DETAILS_2_BREED,\r\n        foreignKey: {\r\n            name: 'breedId',\r\n            field: 'breedId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function stockingdetailsToStocking(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.STOCKING_DETAILS_2_STOCKING,\r\n        foreignKey: {\r\n            name: 'stockingId',\r\n            field: 'stockingId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function storagesToOwner(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.STORAGE_2_OWNER,\r\n        foreignKey: {\r\n            name: 'ownerId',\r\n            field: 'ownerId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function storagesToMaterial(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.STORAGE_2_MATERIAL,\r\n        foreignKey: {\r\n            name: 'storageId',\r\n            field: 'storageId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function storagesToPondPrePareDetail(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.STORAGE_2_POND_PREPARE_DETAILS,\r\n        foreignKey: {\r\n            name: 'storageId',\r\n            field: 'storageId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function storagesToUsingFood(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.STORAGE_2_USING_FOOD,\r\n        foreignKey: {\r\n            name: 'storageId',\r\n            field: 'storageId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function storagesToUsingVeterinary(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.STORAGE_2_USING_VETERINARY,\r\n        foreignKey: {\r\n            name: 'storageId',\r\n            field: 'storageId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function ownerToStorage(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.OWNER_TO_STORAGE,\r\n        foreignKey: {\r\n            name: 'ownerId',\r\n            field: 'ownerId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function ownerToUser(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.OWNER_TO_USER,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function takecareToSNP(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.TAKE_CARE_2_SEASON_AND_POND,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function takecareToUsingfoods(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.TAKE_CARE_2_USING_FOOD,\r\n        foreignKey: {\r\n            name: 'takeCareId',\r\n            field: 'takeCareId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n\r\nexport function takecareToUsingveterinary(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.TAKE_CARE_2_USING_VETERINARY,\r\n        foreignKey: {\r\n            name: 'takeCareId',\r\n            field: 'takeCareId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function userToBoughtBreeds(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.USER_2_BOUGHT_BREED,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n\r\nexport function userToDistrict(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.USER_2_DIS,\r\n        foreignKey: {\r\n            field: 'district',\r\n            name: 'district'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userToRolesUser(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.USER_2_ROLES_USER,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userToPond(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.USER_2_POND,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userToPondRolesBelongMany(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsToMany(model, {\r\n        as: ActionAssociateDatabase.USER_2_POND_MANY_ROLES,\r\n        through: 'ponduserroles',\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        },\r\n        otherKey: {\r\n            name: 'pondId',\r\n            field: 'pondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userToCoupon(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.USER_2_COUPON,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userToProvince(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.USER_2_PRO,\r\n        foreignKey: {\r\n            name: 'province',\r\n            field: 'province'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userToSeason(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.USER_2_SEASON,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userToWard(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.USER_2_WAR,\r\n        foreignKey: {\r\n            name: 'town',\r\n            field: 'town'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userToRolesBoss(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.USER_2_ROLES_GET_EMPLOYEES,\r\n        foreignKey: {\r\n            name: 'bossId',\r\n            field: 'bossId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userToPondUserRoles(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.USER_2_POND_USER_ROLE,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userToOwnerStorage(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasOne(model, {\r\n        as: ActionAssociateDatabase.USER_2_OWNER_STORAGE,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userToOwnerBreed(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasOne(model, {\r\n        as: ActionAssociateDatabase.USER_2_OWNER_BREED,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userToIncurred(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.USER_2_INCURREDS,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function userrolesToPondUserRoles(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.USER_ROLES_2_POND_USER_ROLE,\r\n        foreignKey: {\r\n            name: 'rolesId',\r\n            field: 'rolesId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userrolesToUsers(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.USER_ROLES_2_USER,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userrolesToUsersBoss(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.USER_ROLES_2_USER_BOSS,\r\n        foreignKey: {\r\n            name: 'bossId',\r\n            field: 'bossId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userrolesToSeason(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.USER_ROLES_2_SEASON,\r\n        foreignKey: {\r\n            name: 'bossId',\r\n            field: 'bossId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function usingfoodsToStorage(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.USING_FOOD_2_STORAGE,\r\n        foreignKey: {\r\n            name: 'storageId',\r\n            field: 'storageId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function usingfoodsToTakecare(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.USING_FOOD_2_TAKE_CARE,\r\n        foreignKey: {\r\n            name: 'takeCareId',\r\n            field: 'takeCareId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function usingveterinaryToStorage(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.USING_VETERINARY_2_STORAGE,\r\n        foreignKey: {\r\n            name: 'storageId',\r\n            field: 'storageId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function usingveterinaryToTakecare(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.USING_VETERINARY_2_TAKE_CARE,\r\n        foreignKey: {\r\n            name: 'takeCareId',\r\n            field: 'takeCareId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function provinceToUser(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.PROVINCE_2_USER,\r\n        foreignKey: {\r\n            name: 'provinceid',\r\n            field: 'provinceid'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function districtToUser(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.DISTRICT_2_USER,\r\n        foreignKey: {\r\n            name: 'districtid',\r\n            field: 'districtid'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function wardToUser(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.WARD_2_USER,\r\n        foreignKey: {\r\n            name: 'wardid',\r\n            field: 'wardid'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function incurredsToPondPrepare(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.INCURREDS_TO_POND_PREPARE,\r\n        foreignKey: {\r\n            name: 'pondPrepareId',\r\n            field: 'pondPrepareId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function incurredsToUser(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.INCURREDS_TO_USER,\r\n        foreignKey: {\r\n            name: 'ownerId',\r\n            field: 'ownerId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequelize from 'sequelize';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const boughtbreeddetailsOptions: any = _.merge({\r\n    tableName: 'boughtbreeddetails'\r\n},\r\n{\r\n    attributes: {\r\n        boughtBreedDetailId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n        },\r\n        boughtBreedDetailUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n        },\r\n        couponId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n        },\r\n        breedId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n        },\r\n        quantity: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: false,\r\n        },\r\n        unit: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: false\r\n        },\r\n        unitPrice: {\r\n            allowNull: false,\r\n            type: Sequelize.FLOAT,\r\n            // field: 'unitPrice'\r\n        },\r\n        soldAddress: {\r\n            type: Sequelize.STRING,\r\n            allowNull: true,\r\n        },\r\n        testingAgency: {\r\n            type: Sequelize.STRING,\r\n            allowNull: true,\r\n        },\r\n        descriptions: {\r\n            type: Sequelize.TEXT,\r\n            allowNull: true,\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true,\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'boughtbreeddetails'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const boughtbreedOptions: any = _.merge({\r\n    tableName: 'boughtbreeds'\r\n},\r\n{\r\n    attributes: {\r\n        boughtBreedId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n        },\r\n        boughtBreedUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n        },\r\n        userId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n        },\r\n        seasonId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n        },\r\n        createdBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true,\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: true,\r\n            defaultValue: 0,\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'boughtbreeds'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const breedOptions: any = _.merge({\r\n    tableName: 'breeds'\r\n},\r\n{\r\n    attributes: {\r\n        breedId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n        },\r\n        breedUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n        },\r\n        ownerId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n        },\r\n        breedName: {\r\n            type: Sequelize.STRING(80),\r\n        },\r\n        totalQuantity: {\r\n            type: Sequelize.BIGINT(20),\r\n        },\r\n        unit: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: false\r\n        },\r\n        loopOfBreed: {\r\n            type: Sequelize.INTEGER(11),\r\n            allowNull: false,\r\n        },\r\n        tips: {\r\n            type: Sequelize.TEXT,\r\n            allowNull: true,\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: true,\r\n            defaultValue: 0,\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'breeds'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const costsOptions: any = _.merge({\r\n    tableName: 'costs'\r\n},\r\n{\r\n    attributes: {\r\n        costId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n            // field: 'costId'\r\n        },\r\n        costUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n            // field: 'costUUId'\r\n        },\r\n        pondPrepareId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            // field: 'pondPrepareId'\r\n        },\r\n        label: {\r\n            type: Sequelize.STRING(100),\r\n            // field: 'label'\r\n        },\r\n        value: {\r\n            type: Sequelize.FLOAT,\r\n            // field: 'value'\r\n        },\r\n        responsible: {\r\n            type: Sequelize.STRING(100),\r\n            // field: 'responsible'\r\n        },\r\n        notes: {\r\n            type: Sequelize.TEXT,\r\n            allowNull: true,\r\n            // field: 'notes'\r\n        },\r\n        createdBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true,\r\n            // field: 'createdBy'\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'createdDate'\r\n        },\r\n        updatedBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true,\r\n            // field: 'updatedBy'\r\n        },\r\n        updatedDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'updatedDate'\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: true,\r\n            defaultValue: 0,\r\n            // field: 'isDeleted'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'costs'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const couponOptions: any = _.merge({\r\n    tableName: 'coupons'\r\n},\r\n{\r\n    attributes: {\r\n        couponId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true\r\n        },\r\n        userId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false\r\n        },\r\n        seasonId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            unique: true\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            }\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: true,\r\n            defaultValue: 0,\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'coupons'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const diedfisherysOptions: any = _.merge({\r\n    tableName: 'diedfisherys'\r\n},\r\n{\r\n    attributes: {\r\n        diedFisheryId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n            // field: 'diedFisheryId'\r\n        },\r\n        diedFisheryUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n            // field: 'diedFisheryUUId'\r\n        },\r\n        seasonAndPondId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            // field: 'seasonAndPondId'\r\n        },\r\n        card: {\r\n            type: Sequelize.INTEGER(1),\r\n            // field: 'card'\r\n        },\r\n        quantity: {\r\n            type: Sequelize.FLOAT,\r\n            // field: 'quantity'\r\n        },\r\n        solutions: {\r\n            type: Sequelize.TEXT,\r\n            allowNull: true,\r\n            // field: 'solutions'\r\n        },\r\n        employee: {\r\n            type: Sequelize.STRING(50),\r\n            allowNull: true,\r\n            // field: 'employee'\r\n        },\r\n        createdBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true,\r\n            // field: 'createdBy'\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'createdDate'\r\n        },\r\n        updatedBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true,\r\n            // field: 'updatedBy'\r\n        },\r\n        updatedDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'updatedDate'\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: true,\r\n            defaultValue: 0,\r\n            // field: 'isDeleted'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'diedfisherys'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport * as _ from 'lodash';\r\n\r\nexport const districtOptions: any = _.merge({\r\n    tableName: 'district'\r\n},\r\n{\r\n    attributes: {\r\n        districtid: {\r\n            type: Sequelize.STRING(5),\r\n            primaryKey: true,\r\n            // field: 'districtid'\r\n        },\r\n        name: {\r\n            type: Sequelize.STRING(100),\r\n            // field: 'name'\r\n        },\r\n        type: {\r\n            type: Sequelize.STRING(30),\r\n            // field: 'type'\r\n        },\r\n        location: {\r\n            type: Sequelize.STRING(30),\r\n            // field: 'location'\r\n        },\r\n        provinceid: {\r\n            type: Sequelize.STRING(5),\r\n            allowNull: false,\r\n            // field: 'provinceid'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'district',\r\n        createdAt: false,\r\n        updatedAt: false,\r\n        deletedAt: false,\r\n        defaultScope: {},\r\n        scopes: {}\r\n    }\r\n});\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const growthOptions: any = _.merge({\r\n    tableName: 'growths'\r\n},\r\n{\r\n    attributes: {\r\n        growthId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n            // field: 'growthId'\r\n        },\r\n        growthUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n            // field: 'growthUUId'\r\n        },\r\n        seasonAndPondId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            // field: 'seasonAndPondId'\r\n        },\r\n        averageDensity: {\r\n            type: Sequelize.FLOAT,\r\n            // field: 'averageDensity'\r\n        },\r\n        averageMass: {\r\n            type: Sequelize.FLOAT,\r\n            // field: 'averageMass'\r\n        },\r\n        speedOdGrowth: {\r\n            type: Sequelize.FLOAT,\r\n            // field: 'speedOdGrowth'\r\n        },\r\n        livingRatio: {\r\n            type: Sequelize.FLOAT,\r\n            // field: 'livingRatio'\r\n        },\r\n        createdBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true,\r\n            // field: 'createdBy'\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'createdDate'\r\n        },\r\n        updatedBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true,\r\n            // field: 'updatedBy'\r\n        },\r\n        updatedDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'updatedDate'\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: true,\r\n            defaultValue: 0,\r\n            // field: 'isDeleted'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'growths'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const harvestdetailOptions: any = _.merge({\r\n    tableName: 'harvestdetails'\r\n},\r\n{\r\n    attributes: {\r\n        harvestDetailUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n            // field: 'harvestIdDetailUUId'\r\n        },\r\n        harvestId: {\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n            // field: 'harvestId'\r\n        },\r\n        quantity: {\r\n            type: Sequelize.FLOAT,\r\n            // field: 'quantity'\r\n        },\r\n        unitPrice: {\r\n            type: Sequelize.FLOAT,\r\n            // field: 'unitPrice'\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: true,\r\n            defaultValue: 0,\r\n            // field: 'isDeleted'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'harvestdetails'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const harvestOptions: any = _.merge({\r\n    tableName: 'harvests'\r\n},\r\n{\r\n    attributes: {\r\n        harvestId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true\r\n        },\r\n        harvestUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false\r\n        },\r\n        seasonAndPondId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false\r\n        },\r\n        harvestName: {\r\n            type: Sequelize.STRING(50),\r\n            allowNull: true\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            }\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: true,\r\n            defaultValue: 0,\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'harvests'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const materialOptions: any = _.merge({\r\n    tableName: 'materials'\r\n},\r\n{\r\n    attributes: {\r\n        materialId : {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n            // field: 'materialId'\r\n        },\r\n        materialUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n            // field: 'materialUUId'\r\n        },\r\n        couponId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            // field: 'couponId'\r\n        },\r\n        storageId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            // field: 'storageId'\r\n        },\r\n        provider: {\r\n            type: Sequelize.STRING(100),\r\n            // field: 'provider'\r\n        },\r\n        providerAddress: {\r\n            type: Sequelize.STRING,\r\n            // field: 'providerAddress'\r\n        },\r\n        quantity: {\r\n            type: Sequelize.DOUBLE,\r\n            // field: 'quantity'\r\n        },\r\n        unit: {\r\n            type: Sequelize.INTEGER(1),\r\n            // field: 'unit'\r\n        },\r\n        unitPrice: {\r\n            type: Sequelize.FLOAT,\r\n            // field: 'unitPrice'\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: true,\r\n            defaultValue: 0,\r\n            // field: 'isDeleted'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'materials'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const ownerBreedOptions: any = _.merge({\r\n    tableName: 'ownerbreed'\r\n},\r\n{\r\n    attributes: {\r\n        ownerId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n        },\r\n        userId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'ownerbreed'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const ponddiaryOptions: any = _.merge({\r\n    tableName: 'ponddiary'\r\n},\r\n{\r\n    attributes: {\r\n        pondDiaryId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true\r\n        },\r\n        pondDiaryUUId: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: false,\r\n            unique: true\r\n        },\r\n        seasonAndPondId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false\r\n        },\r\n        diaryName: {\r\n            type: Sequelize.STRING(100)\r\n        },\r\n        fisheryQuantity: {\r\n            type: Sequelize.FLOAT\r\n        },\r\n        healthOfFishery: {\r\n            type: Sequelize.STRING(36)\r\n        },\r\n        pondVolume: {\r\n            type: Sequelize.FLOAT\r\n        },\r\n        diedFishery: {\r\n            type: Sequelize.INTEGER(11)\r\n        },\r\n        notes: {\r\n            type: Sequelize.TEXT\r\n        },\r\n        createdBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n        },\r\n        updatedBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true\r\n        },\r\n        updatedDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            }\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'ponddiary'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const pondenvironmentsOptions: any = _.merge({\r\n    tableName: 'pondenvironments'\r\n},\r\n{\r\n    attributes: {\r\n        pondEnvironmentId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n            // field: 'pondEnvironmentId'\r\n        },\r\n        pondEnvironmentUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n            // field: 'pondEnvironmentUUId'\r\n        },\r\n        seasonAndPondId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            // field: 'seasonAndPondId'\r\n        },\r\n        oxyMorning: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: true,\r\n            // field: 'oxyMorning'\r\n        },\r\n        oxyAfternoon: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: true,\r\n            // field: 'oxyAfternoon'\r\n        },\r\n        phMorning: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: true,\r\n            // field: 'phMorning'\r\n        },\r\n        phAfternoon: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: true,\r\n            // field: 'phAfternoon'\r\n        },\r\n        transparent: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: true,\r\n            // field: 'transparent'\r\n        },\r\n        salinity: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: true,\r\n            // field: 'salinity'\r\n        },\r\n        h2s: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: true,\r\n            // field: 'h2s'\r\n        },\r\n        nh3: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: true,\r\n            // field: 'nh3'\r\n        },\r\n        bazo: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: true,\r\n            // field: 'bazo'\r\n        },\r\n        createdBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true,\r\n            // field: 'createdBy'\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'createdDate'\r\n        },\r\n        updatedBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true,\r\n            // field: 'updatedBy'\r\n        },\r\n        updatedDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'updatedDate'\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n            // field: 'isDeleted'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'pondenvironments'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const pondprepareOptions: any = _.merge({\r\n    tableName: 'pondprepare'\r\n},\r\n{\r\n    attributes: {\r\n        pondPrepareId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n            // field: 'pondPrepareId'\r\n        },\r\n        pondPrepareUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n            // field: 'pondPrepareUUId'\r\n        },\r\n        seasonAndPondId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            // field: 'seasonAndPondId'\r\n        },\r\n        pondprepareName: {\r\n            type: Sequelize.STRING(50),\r\n            // field: 'pondprepareName'\r\n        },\r\n        // notes: {\r\n        //     type: Sequelize.TEXT,\r\n        //     allowNull: true,\r\n        //     // field: 'notes'\r\n        // },\r\n        createdBy: {\r\n            type: Sequelize.STRING(36),\r\n            // field: 'createdBy'\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'createdDate'\r\n        },\r\n        updatedBy: {\r\n            type: Sequelize.STRING(36),\r\n            // field: 'updatedBy'\r\n        },\r\n        updatedDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'updatedDate'\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n            // field: 'isDeleted'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'pondprepare'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const pondpreparedetailOptions: any = _.merge({\r\n    tableName: 'pondpreparedetails'\r\n},\r\n{\r\n    attributes: {\r\n        pondPrepareDetailId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n        },\r\n        pondPrepareDetailUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n        },\r\n        storageId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n        },\r\n        pondPrepareId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n        },\r\n        quantity: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: false,\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'pondpreparedetails',\r\n        createdBy: false,\r\n        updatedBy: false\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const pondOptions: any = _.merge({\r\n    tableName: 'ponds'\r\n},\r\n{\r\n    attributes: {\r\n        pondId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true\r\n        },\r\n        pondUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false\r\n        },\r\n        userId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false\r\n        },\r\n        pondName: {\r\n            type: Sequelize.STRING(50)\r\n        },\r\n        pondArea: {\r\n            type: Sequelize.FLOAT\r\n        },\r\n        pondDepth: {\r\n            type: Sequelize.FLOAT\r\n        },\r\n        createCost: {\r\n            type: Sequelize.FLOAT\r\n        },\r\n        pondCreatedDate: {\r\n            type: Sequelize.DATE\r\n        },\r\n        status: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: false,\r\n            defaultValue: 0\r\n        },\r\n        isFed: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: true,\r\n            defaultValue: 0\r\n        },\r\n        isDiary: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: true,\r\n            defaultValue: 0\r\n        },\r\n        images: {\r\n            type: Sequelize.TEXT({ length: '1000' }),\r\n            allowNull: true\r\n        },\r\n        pondLatitude: {\r\n            type: Sequelize.DOUBLE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return null;\r\n            }\r\n        },\r\n        pondLongitude: {\r\n            type: Sequelize.DOUBLE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return null;\r\n            }\r\n        },\r\n        createdBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            }\r\n        },\r\n        updatedBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true\r\n        },\r\n        updatedDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            }\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'ponds'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const ponduserrolesOptions: any = _.merge({\r\n    tableName: 'ponduserroles'\r\n},\r\n    {\r\n        attributes: {\r\n            pondUserRolesId: {\r\n                type: Sequelize.BIGINT(20),\r\n                autoIncrement: true,\r\n                primaryKey: true,\r\n                allowNull: false,\r\n            },\r\n            userId: {\r\n                type: Sequelize.BIGINT(20),\r\n                unique: true,\r\n                field: 'userId'\r\n            },\r\n            pondId: {\r\n                type: Sequelize.BIGINT(20),\r\n                unique: true,\r\n                field: 'pondId'\r\n            },\r\n            createdDate: {\r\n                type: Sequelize.DATE,\r\n                allowNull: true,\r\n                defaultValue: () => {\r\n                    return DateUtil.getUTCDateTime();\r\n                },\r\n                // field: 'createdDate'\r\n            },\r\n            isDeleted: {\r\n                type: Sequelize.INTEGER(1),\r\n                defaultValue: 0,\r\n                allowNull: true\r\n                // field: 'isDeleted'\r\n            }\r\n        },\r\n        options: {\r\n            tableName: 'ponduserroles',\r\n            defaultScope: {},\r\n            scopes: {}\r\n        }\r\n    }, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const pricesOptions: any = _.merge({\r\n    tableName: 'prices'\r\n},\r\n{\r\n    attributes: {\r\n        priceId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n            // field: 'priceId'\r\n        },\r\n        priceUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n            // field: 'priceUUId'\r\n        },\r\n        seasonId: {\r\n            type: Sequelize.BIGINT(20),\r\n            unique: true,\r\n            allowNull: false,\r\n            // field: 'seasonId'\r\n        },\r\n        totalCost: {\r\n            type: Sequelize.DOUBLE,\r\n            // field: 'totalCost'\r\n        },\r\n        totalProfit: {\r\n            type: Sequelize.DOUBLE,\r\n            // field: 'totalProfit'\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'createdDate'\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n            // field: 'isDeleted'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'prices'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const provinceOptions: any = _.merge({\r\n    tableName: 'province'\r\n},\r\n{\r\n    attributes: {\r\n        provinceid: {\r\n            type: Sequelize.STRING(5),\r\n            primaryKey: true,\r\n            // field: 'provinceid'\r\n        },\r\n        name: {\r\n            type: Sequelize.STRING(100),\r\n            // field: 'name'\r\n        },\r\n        type: {\r\n            type: Sequelize.STRING(30),\r\n            // field: 'type'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'province',\r\n        createdAt: false,\r\n        updatedAt: false,\r\n        deletedAt: false,\r\n        defaultScope: {},\r\n        scopes: {}\r\n    }\r\n});\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const seasonOptions: any = _.merge({\r\n    tableName: 'seasons'\r\n},\r\n{\r\n    attributes: {\r\n        seasonId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n            // field: 'seasonId'\r\n        },\r\n        seasonUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n            // field: 'seasonUUId'\r\n        },\r\n        userId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            // field: 'userId'\r\n        },\r\n        seasonName: {\r\n            type: Sequelize.STRING(100),\r\n            // field: 'seasonName'\r\n        },\r\n        status: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            // field: 'seasonName'\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'createdDate'\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n            // field: 'isDeleted'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'seasons'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const incurredsOptions: any = _.merge({\r\n    tableName: 'incurreds'\r\n},\r\n{\r\n    attributes: {\r\n        incurredId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n        },\r\n        incurredUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n        },\r\n        pondPrepareId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n        },\r\n        ownerId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n        },\r\n        incurredName: {\r\n            type: Sequelize.STRING(100),\r\n            allowNull: false,\r\n        },\r\n        value: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: false,\r\n        },\r\n        notes: {\r\n            type: Sequelize.STRING(255),\r\n            allowNull: true,\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'incurreds',\r\n        createdBy: false,\r\n        updatedBy: false\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport * as _ from 'lodash';\r\n\r\nexport const seasonAndPondOptions: any = _.merge({\r\n    tableName: 'seasonsandpond'\r\n},\r\n{\r\n    attributes: {\r\n        seasonAndPondId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true\r\n        },\r\n        seasonId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            unique: true\r\n        },\r\n        pondId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            unique: true\r\n        }\r\n    },\r\n    options: {\r\n        createdAt: false,\r\n        updatedAt: false,\r\n        deletedAt: false,\r\n        hooks: {},\r\n        tableName: 'seasonsandpond'\r\n    }\r\n});\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const stockingOptions: any = _.merge({\r\n    tableName: 'stocking'\r\n},\r\n{\r\n    attributes: {\r\n        stockingId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n            // field: 'stockingId'\r\n        },\r\n        stockingUUId: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: false,\r\n            unique: true,\r\n            // field: 'stockingUUId'\r\n        },\r\n        seasonAndPondId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            // field: 'seasonAndPondId'\r\n        },\r\n        notes: {\r\n            type: Sequelize.TEXT,\r\n            allowNull: true,\r\n            // field: 'notes'\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'createdDate'\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n            // field: 'isDeleted'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'stocking'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const stockingdetailOptions: any = _.merge({\r\n    tableName: 'stockingdetails'\r\n},\r\n{\r\n    attributes: {\r\n        stockingDetailUUId: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: false,\r\n            unique: true,\r\n        },\r\n        breedId: {\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n        },\r\n        stockingId: {\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n        },\r\n        stockingQuantity: {\r\n            type: Sequelize.BIGINT(20),\r\n        },\r\n        phFirst: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: true,\r\n        },\r\n        salinityFirst: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: true,\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'stockingdetails'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const storagesOptions: any = _.merge({\r\n    tableName: 'storages'\r\n},\r\n{\r\n    attributes: {\r\n        storageId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true\r\n        },\r\n        storageUUId: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: false,\r\n            unique: true\r\n        },\r\n        ownerId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false\r\n        },\r\n        productName: {\r\n            type: Sequelize.STRING(100)\r\n        },\r\n        quantityStorages: {\r\n            type: Sequelize.DOUBLE\r\n        },\r\n        unit: {\r\n            type: Sequelize.INTEGER(1)\r\n        },\r\n        type: {\r\n            type: Sequelize.INTEGER(1)\r\n        },\r\n        descriptions: {\r\n            type: Sequelize.TEXT\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            }\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'storages'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const storageOwnerOptions: any = _.merge({\r\n    tableName: 'storageowner'\r\n},\r\n{\r\n    attributes: {\r\n        storageOwnerId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n        },\r\n        userId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'storageowner'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const takecareOptions: any = _.merge({\r\n    tableName: 'takecare'\r\n},\r\n{\r\n    attributes: {\r\n        takeCareId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true\r\n        },\r\n        takeCareUUId: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: false,\r\n            unique: true\r\n        },\r\n        seasonAndPondId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false\r\n        },\r\n        type: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: false\r\n        },\r\n        takeCareName: {\r\n            type: Sequelize.STRING(100),\r\n            allowNull: true\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            }\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'takecare'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const userOptions: any = _.merge({\r\n    tableName: 'users'\r\n},\r\n{\r\n    attributes: {\r\n        userId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n            // field: 'userId'\r\n        },\r\n        userUUId: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: false,\r\n            unique: true,\r\n            // field: 'userUUId'\r\n        },\r\n        firstname: {\r\n            type: Sequelize.STRING(50),\r\n            // field: 'firstname'\r\n        },\r\n        lastname: {\r\n            type: Sequelize.STRING(50),\r\n            // field: 'lastname'\r\n        },\r\n        birthday: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            // field: 'birthday'\r\n        },\r\n        addressContact: {\r\n            type: Sequelize.STRING,\r\n            allowNull: true,\r\n            // field: 'addressContact'\r\n        },\r\n        username: {\r\n            type: Sequelize.STRING(50),\r\n            allowNull: false,\r\n            unique: true,\r\n            // field: 'username'\r\n        },\r\n        password: {\r\n            type: Sequelize.STRING(100),\r\n            // field: 'password'\r\n        },\r\n        town: {\r\n            type: Sequelize.STRING(50),\r\n            allowNull: true,\r\n            // field: 'town'\r\n        },\r\n        district: {\r\n            type: Sequelize.STRING(50),\r\n            allowNull: true,\r\n            // field: 'district'\r\n        },\r\n        province: {\r\n            type: Sequelize.STRING(5),\r\n            allowNull: true,\r\n            // field: 'province'\r\n        },\r\n        status: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: false,\r\n            defaultValue: 0,\r\n            // field: 'status'\r\n        },\r\n        phone: {\r\n            type: Sequelize.STRING(15),\r\n            allowNull: true,\r\n            // field: 'phone'\r\n        },\r\n        email: {\r\n            type: Sequelize.STRING(100),\r\n            allowNull: true,\r\n            // field: 'email'\r\n        },\r\n        images: {\r\n            type: Sequelize.TEXT({ length: '1000' }),\r\n            allowNull: true,\r\n            // field: 'images'\r\n        },\r\n        createdBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true,\r\n            // field: 'createdBy'\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'createdDate'\r\n        },\r\n        updatedBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true,\r\n            // field: 'updatedBy'\r\n        },\r\n        updatedDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'updatedDate'\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n            // field: 'isDeleted'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'users'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const userrolesOptions: any = _.merge({\r\n    tableName: 'userroles'\r\n},\r\n{\r\n    attributes: {\r\n        rolesId: {\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n            autoIncrement: true,\r\n        },\r\n        bossId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            unique: true,\r\n            index: true\r\n        },\r\n        userId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            unique: true,\r\n        },\r\n        roles: {\r\n            type: Sequelize.INTEGER(11),\r\n            unique: true,\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n        },\r\n        updatedBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true,\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'userroles'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const usingfoodOptions: any = _.merge({\r\n    tableName: 'usingfoods'\r\n},\r\n{\r\n    attributes: {\r\n        usingFoodId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true\r\n        },\r\n        usingFoodUUId: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: false,\r\n            unique: true\r\n        },\r\n        takeCareId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false\r\n        },\r\n        storageId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false\r\n        },\r\n        massOfFishery: {\r\n            type: Sequelize.FLOAT\r\n        },\r\n        feedingRate: {\r\n            type: Sequelize.FLOAT\r\n        },\r\n        totalFood: {\r\n            type: Sequelize.FLOAT\r\n        },\r\n        createdBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            }\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'usingfoods'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const usingveterinaryOptions: any = _.merge({\r\n    tableName: 'usingveterinary'\r\n},\r\n{\r\n    attributes: {\r\n        usingVeterinaryId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true\r\n        },\r\n        usingVeterinaryUUId: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: false,\r\n            unique: true\r\n        },\r\n        takeCareId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false\r\n        },\r\n        storageId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false\r\n        },\r\n        causesNSymptoms: {\r\n            type: Sequelize.STRING\r\n        },\r\n        averageSize: {\r\n            type: Sequelize.FLOAT\r\n        },\r\n        totalBiomass: {\r\n            type: Sequelize.FLOAT\r\n        },\r\n        quantity: {\r\n            type: Sequelize.FLOAT\r\n        },\r\n        result: {\r\n            type: Sequelize.STRING(100),\r\n        },\r\n        latestHarvestDate: {\r\n            type: Sequelize.INTEGER(11),\r\n            allowNull: true\r\n        },\r\n        mentor: {\r\n            type: Sequelize.STRING(50),\r\n            allowNull: true\r\n        },\r\n        createdBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            }\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'usingveterinary'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport * as _ from 'lodash';\r\n\r\nexport const wardOptions: any = _.merge({\r\n    tableName: 'ward'\r\n},\r\n{\r\n    attributes: {\r\n        wardid: {\r\n            type: Sequelize.STRING(5),\r\n            primaryKey: true,\r\n            // field: 'wardid'\r\n        },\r\n        name: {\r\n            type: Sequelize.STRING(100),\r\n            // field: 'name'\r\n        },\r\n        type: {\r\n            type: Sequelize.STRING(30),\r\n            // field: 'type'\r\n        },\r\n        location: {\r\n            type: Sequelize.STRING(30),\r\n            // field: 'location'\r\n        },\r\n        districtid: {\r\n            type: Sequelize.STRING(5),\r\n            allowNull: false,\r\n            // field: 'districtid'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'ward',\r\n        createdAt: false,\r\n        updatedAt: false,\r\n        deletedAt: false,\r\n        defaultScope: {},\r\n        scopes: {}\r\n    }\r\n});\r\n","import { NextFunction, Request, Response, Router } from 'express';\r\nimport * as httpStatusCode from 'http-status-codes';\r\nimport { colorCli } from '../config';\r\n\r\nimport { BaseRoute } from './BaseRoute';\r\nimport { logger } from '../services';\r\nimport { PingRoute } from './ping';\r\nimport { UserRoute } from './users';\r\nimport { UploadRoute } from './upload';\r\nimport { GetFileRoute } from './getFile';\r\nimport { ProvinceRoute } from './province';\r\nimport { DistrictRoute } from './district';\r\nimport { WardRoute } from './ward';\r\nimport { PondRoute } from './ponds';\r\nimport { SeasonRoute } from './seasons';\r\nimport { PondPrepareRoute } from './pondPrepare';\r\nimport { PondPrepareDetailRoute } from './pondPrepareDetail';\r\nimport { StorageRoute } from './storages';\r\nimport { BreedRoute } from './breed';\r\nimport { StockingRoute } from './stocking';\r\nimport { DiedFisheryRoute } from './diedFishery';\r\nimport { GrowthsRoute } from './growths';\r\nimport { HarvestRoute } from './harvest';\r\nimport { UserRoleRoute } from './userRoles';\r\nimport { PondUserRolesRoute } from './pondUserRoles';\r\nimport { MaterialRoute } from './material';\r\nimport { SeasonAndPondRoute } from './seasonAndPond';\r\nimport { UsingFoodRoute } from './usingFood';\r\nimport { PondDiaryRoute } from './pondDiary';\r\nimport { TakeCareRoute } from './takeCare';\r\nimport { UsingVeterinaryRoute } from './usingVeterinary';\r\nimport { CostsRoute } from './costs';\r\n/**\r\n * / route\r\n *\r\n * @class User\r\n */\r\nexport class ApiRoutes extends BaseRoute {\r\n    public static path = '/api/v1';\r\n    private static instance: ApiRoutes;\r\n\r\n    /**\r\n     * @class ApiRoutes\r\n     * @constructor\r\n     */\r\n    private constructor () {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    /**\r\n     * @class ApiRoute\r\n     * @method getRouter\r\n     * @returns {Router}\r\n     */\r\n    static get router (): Router {\r\n        if (!this.instance) {\r\n            this.instance = new ApiRoutes();\r\n        }\r\n        return this.instance.router;\r\n    }\r\n\r\n    /**\r\n     * @class ApiRoute\r\n     * @method init\r\n     */\r\n    private init () {\r\n        // console.log('\\x1b[36m%s\\x1b[0m', 'I am cyan');\r\n        console.log(`\\n${ colorCli.YELLOW }###################################################\\n${ colorCli.YELLOW }##         WELCOME TO VIETNAM FISHERY API        ##\\n${ colorCli.YELLOW }##             Creating api routes...            ##\\n${ colorCli.YELLOW }###################################################\\n`);\r\n\r\n        // add index page route\r\n        this.router.get('/', this.get);\r\n        this.router.use(BreedRoute.path, BreedRoute.router);\r\n        this.router.use(CostsRoute.path, CostsRoute.router);\r\n        this.router.use(DiedFisheryRoute.path, DiedFisheryRoute.router);\r\n        this.router.use(DistrictRoute.path, DistrictRoute.router);\r\n        this.router.use(GetFileRoute.path, GetFileRoute.router);\r\n        this.router.use(GrowthsRoute.path, GrowthsRoute.router);\r\n        this.router.use(HarvestRoute.path, HarvestRoute.router);\r\n        this.router.use(MaterialRoute.path, MaterialRoute.router);\r\n        // this.router.use(PingRoute.path, PingRoute.router);\r\n        this.router.use(PondDiaryRoute.path, PondDiaryRoute.router);\r\n        this.router.use(PondPrepareRoute.path, PondPrepareRoute.router);\r\n        this.router.use(PondPrepareDetailRoute.path, PondPrepareDetailRoute.router);\r\n        this.router.use(PondRoute.path, PondRoute.router);\r\n        this.router.use(PondUserRolesRoute.path, PondUserRolesRoute.router);\r\n        this.router.use(ProvinceRoute.path, ProvinceRoute.router);\r\n        this.router.use(SeasonAndPondRoute.path, SeasonAndPondRoute.router);\r\n        this.router.use(SeasonRoute.path, SeasonRoute.router);\r\n        this.router.use(StockingRoute.path, StockingRoute.router);\r\n        this.router.use(StorageRoute.path, StorageRoute.router);\r\n        this.router.use(TakeCareRoute.path, TakeCareRoute.router);\r\n        this.router.use(UploadRoute.path, UploadRoute.router);\r\n        this.router.use(UserRoleRoute.path, UserRoleRoute.router);\r\n        this.router.use(UserRoute.path, UserRoute.router);\r\n        this.router.use(UsingFoodRoute.path, UsingFoodRoute.router);\r\n        this.router.use(UsingVeterinaryRoute.path, UsingVeterinaryRoute.router);\r\n        this.router.use(WardRoute.path, WardRoute.router);\r\n\r\n        // log total endpoint\r\n        console.log(`\\n${ colorCli.CYAN }###################################################\\n${ colorCli.CYAN }##        Total endpoints of api is: ${ colorCli.YELLOW }${ BaseRoute.countEndpoints }${ colorCli.CYAN }         ##\\n${ colorCli.CYAN }###################################################\\n`);\r\n    }\r\n\r\n    /**\r\n     * @class ApiRoute\r\n     * @method index\r\n     * @param req {Request} The express Request object.\r\n     * @param res {Response} The express Response object.\r\n     * @param next {NextFunction} Execute the next method.\r\n     */\r\n    private async get (req: Request, res: Response, next: NextFunction) {\r\n        res.status(httpStatusCode.OK).render('index');\r\n    }\r\n}\r\n","module.exports = require(\"http-status-codes\");","module.exports = require(\"is-my-json-valid\");","export * from './users.route';\r\n","import { NextFunction, Request, Response } from 'express';\r\nimport { logger, UserRolesServices, ProvinceServices, DistrictServives, WardServices, PondsServices, UserServives , PondUserRolesServices} from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { User, UserRole, OwnerBreed, OwnerStorage } from '../../components';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Enscrypts } from '../../lib';\r\nimport * as jwt from 'jsonwebtoken';\r\nimport { GoogleDrive } from '../../googleAPI/drive.google';\r\nimport { defaultImage } from '../../common';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { Transaction } from 'sequelize';\r\nimport { readFileSync } from 'fs';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class UserRoute extends BaseRoute {\r\n    public static path = '/user';\r\n    private static instance: UserRoute;\r\n    private cert: Buffer = readFileSync(process.cwd() + '/authKey/jwtRS256.key');\r\n    private userRolesServices: UserRolesServices = new UserRolesServices();\r\n    private provinceServices: ProvinceServices = new ProvinceServices();\r\n    private districtServives: DistrictServives = new DistrictServives();\r\n    private wardServices: WardServices = new WardServices();\r\n    private pondsServices: PondsServices = new PondsServices();\r\n    private userServives: UserServives = new UserServives();\r\n    private pondUserRolesServices: PondUserRolesServices = new PondUserRolesServices();\r\n    /**\r\n     * @class UserRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!UserRoute.instance) {\r\n            UserRoute.instance = new UserRoute();\r\n        }\r\n        return UserRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[UserRoute] Creating user route.');\r\n\r\n        // vertify login\r\n        this.router.get('/vertify', this.vertify);\r\n        this.router.get('/vertify/boss', this.vertifyBoss);\r\n        this.router.get('/vertify/roles/storage', this.vertifyStorageRoles);\r\n        this.router.get('/vertify/roles/pond', this.vertifyPondRoles);\r\n        this.router.get('/vertify/roles/pond/:pondUUId', this.vertifyRolesOfPond);\r\n\r\n        // add route boss\r\n        this.router.post('/register', this.register);\r\n        this.router.post('/login', this.login);\r\n        this.router.get('/get', Authentication.isLogin, this.getUserInfo);\r\n        this.router.get('/getWithUpdate', Authentication.isLogin, this.getUserInfoWithUpdate);\r\n        this.router.put('/update', Authentication.isLogin, this.updateUserProfile);\r\n        this.router.put('/update/password', Authentication.isLogin, this.updateUserPassword);\r\n\r\n        // employees\r\n        this.router.post('/register/employee', Authentication.isLogin, this.regiterEmployee);\r\n        this.router.get('/gets/employees', Authentication.isLogin, this.getEmployee);\r\n        this.router.get('/gets/employees/withoutIsDelete', Authentication.isLogin, this.getEmployeesWithoutIsDelete);\r\n        this.router.get('/get/employee', Authentication.isLogin, this.getEmplyeeById);\r\n        this.router.get('/gets/employees/pond', Authentication.isLogin, this.getEmployeesPondRole);\r\n        this.router.get('/gets/all/employees/pond', Authentication.isLogin, this.getAllPondAndEmployees);\r\n        this.router.put('/update/employee', Authentication.isLogin, this.updateEmployee);\r\n        this.router.post('/insert/employee/role', Authentication.isLogin, this.insertOnlyRole);\r\n\r\n        // log endPoint\r\n        this.logEndpoints(this.router, UserRoute.path);\r\n    }\r\n\r\n    private register = async (request: Request, response: Response, next: NextFunction) => {\r\n        const user: User = new User();\r\n        const { firstname, lastname, username, password } = request.body;\r\n        user.setUserUUId = uuidv4();\r\n        user.setFirstname = firstname;\r\n        user.setLastname = lastname;\r\n        user.setUsername = username;\r\n        const hash = user.hashPassword(password);\r\n        user.setPassword = hash;\r\n        user.setImages = defaultImage.userImage;\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            const userCreated: any = await user.userServices.models.create(user, {\r\n                transaction: t\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Tên người dùng đã được sử dụng, vui lòng thử tên khác.'\r\n                });\r\n                t.rollback();\r\n            });\r\n            if(userCreated.userId) {\r\n                const storageOwner: OwnerStorage = new OwnerStorage();\r\n                storageOwner.setOwnerStorages(null, userCreated.userId);\r\n                const breedOwner: OwnerBreed = new OwnerBreed();\r\n                breedOwner.setOwnerBreed(null, userCreated.userId);\r\n                const sOwner: any = await storageOwner.storegeOwnwerServices.models.create(storageOwner, { transaction: t })\r\n                    .catch(e => {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Có lỗi xảy ra, vui lòng thực hiện lại.'\r\n                        });\r\n                        t.rollback();\r\n                    });\r\n                const bOwner: any = await breedOwner.breedOwnwerServices.models.create(breedOwner, { transaction: t })\r\n                    .catch(e => {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Có lỗi xảy ra, vui lòng thực hiện lại.'\r\n                        });\r\n                        t.rollback();\r\n                    });\r\n                if(sOwner && bOwner) {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Tạo tài khoản thành công, vui lòng đợi trong khi chúng tôi chuyển bạn về trang trước...'\r\n                    });\r\n                    t.commit();\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Có lỗi xảy ra, vui lòng thực hiện lại.'\r\n                    });\r\n                    t.rollback();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private login = async (request: Request, response: Response, next: NextFunction) => {\r\n        const user: User = new User();\r\n        const { username, password } = request.body;\r\n        user.setUsername = username;\r\n        user.setPassword = password;\r\n        user.userServices.models.findOne({\r\n            include: [\r\n                {\r\n                    model: this.userRolesServices.models,\r\n                    as: ActionAssociateDatabase.USER_2_ROLES_USER,\r\n                    required: false,\r\n                    attributes: ['userId', 'roles', 'bossId']\r\n                },\r\n                {\r\n                    model: this.userRolesServices.models,\r\n                    as: ActionAssociateDatabase.USER_2_ROLES_GET_EMPLOYEES,\r\n                    required: false,\r\n                    attributes: ['userId', 'roles']\r\n                },\r\n                {\r\n                    model: this.pondUserRolesServices.models,\r\n                    as: ActionAssociateDatabase.USER_2_POND_USER_ROLE,\r\n                    required: false,\r\n                    attributes: ['userId', 'pondId'],\r\n                    include: [\r\n                        {\r\n                            model: this.pondsServices.models,\r\n                            as: ActionAssociateDatabase.POND_USER_ROLE_2_POND,\r\n                            attributes: ['pondUUId']\r\n                        }\r\n                    ]\r\n                }\r\n            ],\r\n            where: {\r\n                username\r\n            },\r\n            attributes: ['userId', 'userUUId', 'lastname', 'firstname', 'username', 'password', 'createdDate', 'createdBy']\r\n        }).then((u: any) => {\r\n            if(!u) {\r\n                response.json({\r\n                    success: false,\r\n                    message: 'Sai tài khoản, mật khẩu, vui lòng thử lại!'\r\n                });\r\n            } else {\r\n                Enscrypts.compare(user.getPassword, u.password).then((isMatch: boolean) => {\r\n                    if(isMatch) {\r\n                        delete u.dataValues.password;\r\n                        const content: any = u.dataValues;\r\n                        content.isLogin = true;\r\n                        const token: any = jwt.sign(content, this.cert, {\r\n                            algorithm: 'RS512'\r\n                        });\r\n                        response.json({\r\n                            success: true,\r\n                            token\r\n                        });\r\n                    } else {\r\n                        response.json({\r\n                            success: false,\r\n                            message: 'Sai tài khoản, mật khẩu, vui lòng thử lại!'\r\n                        });\r\n                    }\r\n                }).catch(err => {\r\n                    response.json({\r\n                        success: false,\r\n                        message: 'Sai tài khoản, mật khẩu, vui lòng thử lại!'\r\n                    });\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            response.json({\r\n                success: false,\r\n                message: 'Sai tài khoản, mật khẩu, vui lòng thử lại!'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * get cho chức năng xem thông tin\r\n     */\r\n    private getUserInfo = async (request: Request, response: Response) => {\r\n        const user: User = new User();\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const decodeToken: any = Authentication.detoken(token);\r\n        const { userId } = decodeToken;\r\n        user.userServices.models.findOne({\r\n            include: [\r\n                {\r\n                    model: this.provinceServices.models,\r\n                    as: ActionAssociateDatabase.USER_2_PRO\r\n                },\r\n                {\r\n                    model: this.districtServives.models,\r\n                    as: ActionAssociateDatabase.USER_2_DIS,\r\n                },\r\n                {\r\n                    model: this.wardServices.models,\r\n                    as: ActionAssociateDatabase.USER_2_WAR\r\n                }\r\n            ],\r\n            where: {\r\n                userId\r\n            }\r\n        })\r\n        .then((user$: any) => {\r\n            if(!user$) {\r\n                response.json({\r\n                    success: false,\r\n                    message: 'Có lỗi xảy ra vui lòng thử lại!'\r\n                });\r\n            } else {\r\n                delete user$.dataValues[`password`];\r\n                response.json(user$.dataValues);\r\n            }\r\n        }).catch(err => {\r\n            response.json({\r\n                success: false,\r\n                message: 'Có lỗi xảy ra vui lòng thử lại!'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * get cho chưc năng update, khong can join tinh huyen xa\r\n     */\r\n    private getUserInfoWithUpdate = async (request: Request, response: Response, next: NextFunction) => {\r\n        const user: User = new User();\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const decodeToken: any = Authentication.detoken(token);\r\n        user.setUsername = decodeToken.username;\r\n        user.login().then((user$: any) => {\r\n            if(!user$) {\r\n                response.json({\r\n                    success: false,\r\n                    message: 'Có lỗi xảy ra vui lòng thử lại!'\r\n                });\r\n            } else {\r\n                delete user$[`password`];\r\n                response.json(user$);\r\n            }\r\n        }).catch(err => {\r\n            response.json({\r\n                success: false,\r\n                message: 'Có lỗi xảy ra vui lòng thử lại!'\r\n            });\r\n        });\r\n    }\r\n\r\n    private updateUserProfile = async (request: any, response: Response, next: NextFunction) => {\r\n        const user: User = new User();\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const decodetoken: any = Authentication.detoken(token);\r\n        const { firstname, lastname, birthday, email, phone, town, district, province, images } = request.body;\r\n        user.setUser(decodetoken.userId,undefined,firstname,lastname,undefined,null,birthday,email,phone,undefined,town,district,province,null,images,undefined,undefined,undefined,undefined,undefined);\r\n        if(request.files) {\r\n            GoogleDrive.upload(request,response,next).then((data: any) => {\r\n                if(data.fileId) {\r\n                    user.setImages = data.fileId;\r\n                    user.updateMyProfile().then(res => {\r\n                        if(Array.isArray(res)) {\r\n                            response.status(200).json({\r\n                                success: true,\r\n                                fileId: data.fileId,\r\n                                message: 'Hồ sơ đã được cập nhật.'\r\n                            });\r\n                        } else {\r\n                            response.status(200).json({\r\n                                success: false,\r\n                                message: 'Đã có lỗi xảy ra, xin vui lòng thử lại!'\r\n                    });\r\n                        }\r\n                    }).catch(e => {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Đã có lỗi xảy ra, xin vui lòng thử lại!',\r\n                            error: e\r\n                        });\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã có lỗi xảy ra, xin vui lòng thử lại!'\r\n                    });\r\n                }\r\n            });\r\n        } else {\r\n            user.updateMyProfile().then(res => {\r\n                if(Array.isArray(res)) {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Hồ sơ đã được cập nhật.'\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã có lỗi xảy ra, xin vui lòng thử lại!'\r\n                    });\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, xin vui lòng thử lại!',\r\n                    error: e\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    private updateUserPassword = async (request: Request, response: Response, next: NextFunction) => {\r\n        const user: User = new User();\r\n        const { oldPassword, newPassword } = request.body;\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const decodeToken: any = Authentication.detoken(token);\r\n        user.setUsername = decodeToken.username;\r\n        user.login().then((data: any) => {\r\n            Enscrypts.compare(oldPassword, data.password).then((isMatch: boolean) => {\r\n                if(!isMatch) {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Sai mật khẩu cũ!'\r\n                    });\r\n                } else {\r\n                    user.setUserId = decodeToken.userId;\r\n                    user.setPassword = newPassword;\r\n                    user.changePassword().then((data$: any) => {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: 'Thực hiện thành công, vui lòng đợi hệ thống chuyển sang trang trước.'\r\n                        });\r\n                    }).catch(e => {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Có lỗi xảy ra vui lòng thử lại!',\r\n                            error: e\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    private regiterEmployee = async (request: Request, response: Response, next: NextFunction) => {\r\n        const user: User = new User();\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { username, password, firstname, lastname, roles } = request.body;\r\n        user.setUserUUId = uuidv4();\r\n        user.setFirstname = firstname;\r\n        user.setLastname = lastname;\r\n        user.setUsername = username;\r\n        const hash = user.hashPassword(password);\r\n        user.setPassword = hash;\r\n        user.setImages = defaultImage.userImage;\r\n        user.setCreatedBy = deToken.userUUId;\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            const userCreated: any = await user.userServices.models.create(user, {\r\n                transaction: t\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Tên người dùng đã được sử dụng, vui lòng thử tên khác.'\r\n                });\r\n            });\r\n            if(userCreated) {\r\n                const userRoles: UserRole = new UserRole();\r\n                userRoles.setUserRoles(null, deToken.userId, userCreated.userId, roles);\r\n                const role: any = await userRoles.userRolesServices.models.create(userRoles, {\r\n                    transaction: t\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Có lỗi xảy ra, vui lòng thực hiện lại.'\r\n                    });\r\n                    t.rollback();\r\n                });\r\n                if(role) {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Tạo tài khoản thành công, vui lòng đợi trong khi chúng tôi chuyển bạn về trang trước...'\r\n                    });\r\n                    t.commit();\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Có lỗi xảy ra, vui lòng thực hiện lại.'\r\n                    });\r\n                    t.rollback();\r\n                }\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Có lỗi xảy ra, vui lòng thực hiện lại.'\r\n                });\r\n                t.rollback();\r\n            }\r\n        });\r\n    }\r\n\r\n    private getEmployee = async (request: Request, response: Response, next: NextFunction) => {\r\n        const user: User = new User();\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const decodetoken: any = Authentication.detoken(token);\r\n        user.userServices.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.userRolesServices.models,\r\n                    as: ActionAssociateDatabase.USER_2_ROLES_USER,\r\n                    where: {\r\n                        bossId: decodetoken.userId,\r\n                        [this.userRolesServices.Op.and]: {\r\n                            userId: {\r\n                                [this.userRolesServices.Op.ne]: decodetoken.userId\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            ]\r\n        }).then(async (employees: any[]) => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                employees\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi không mong muốn, vui lòng thử lại.'\r\n            });\r\n            throw e;\r\n        });\r\n    }\r\n\r\n    private getEmplyeeById = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { rolesid }: any = request.headers;\r\n        const user: User = new User();\r\n        this.userRolesServices.models.findOne({\r\n            include: [\r\n                {\r\n                    model: user.userServices.models,\r\n                    as: ActionAssociateDatabase.USER_ROLES_2_USER\r\n                }\r\n            ],\r\n            where: {\r\n                rolesId: (rolesid * 1)\r\n            }\r\n        }).then(roles => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                roles\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thực hiện lại...'\r\n            });\r\n        });\r\n    }\r\n\r\n    private insertOnlyRole = async (request: Request, response: Response, next: NextFunction) => {\r\n        const userRoles: UserRole = new UserRole();\r\n        const { userId, roles } = request.body;\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        userRoles.setBossId = deToken.userId;\r\n        userRoles.setUserId = userId;\r\n        userRoles.setRoles = roles;\r\n        userRoles.userRolesServices.models.upsert(userRoles.getFields(userRoles))\r\n        .then((res: any) => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: 'Phân quyền thành công.'\r\n            });\r\n        }).catch(e => {\r\n            e;\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thực hiện lại...'\r\n            });\r\n        });\r\n    }\r\n\r\n    private updateEmployee = async (request: Request, response: Response, next: NextFunction) => {\r\n        const userRoles: UserRole = new UserRole();\r\n        const { rolesId, roles, isDeleted } = request.body;\r\n        userRoles.setRolesId = rolesId;\r\n        userRoles.setRoles = roles;\r\n        userRoles.setIsDeleted = isDeleted;\r\n        userRoles.update().then((res: any) => {\r\n            if(res.length > 0) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: 'Cập nhật thành công.'\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thực hiện lại...'\r\n            });\r\n        });\r\n    }\r\n\r\n    private getEmployeesPondRole = async (request: Request, response: Response, next: NextFunction) => {\r\n        const user: User = new User();\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        user.userServices.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.pondsServices.models,\r\n                    through: {\r\n                        where: {\r\n                            isDeleted: 0\r\n                        }\r\n                    },\r\n                    as: ActionAssociateDatabase.USER_2_POND_MANY_ROLES,\r\n                    where: {\r\n                        userId: deToken.userId\r\n                    }\r\n                }\r\n            ]\r\n        }).then((res: any) => {\r\n            if(res.length > 0) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    employees: res\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Bạn không có nhân viên có quyền quản lý ao.'\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private getAllPondAndEmployees = async (request: Request, response: Response, next: NextFunction) => {\r\n        const user: User = new User();\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        user.userServices.models.findOne({\r\n            include: [\r\n                {\r\n                    model: this.userRolesServices.models,\r\n                    as: ActionAssociateDatabase.USER_ROLES_2_USER_BOSS,\r\n                    where: {\r\n                        roles: 1\r\n                    },\r\n                    attributes: ['userId'],\r\n                    include: [\r\n                        {\r\n                            model: user.userServices.models,\r\n                            as: ActionAssociateDatabase.USER_ROLES_2_USER,\r\n                            attributes: ['userId', 'userUUId', 'username', 'lastname', 'firstname']\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    model: this.pondsServices.models,\r\n                    as: ActionAssociateDatabase.USER_2_POND\r\n                }\r\n            ],\r\n            where: {\r\n                userId: deToken.userId\r\n            },\r\n            attributes: []\r\n        }).then((res: any) => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                user: res\r\n            });\r\n        }).catch(e => {\r\n            console.log(e);\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private getEmployeesWithoutIsDelete = async (request: Request, response: Response, next: NextFunction) => {\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const user: User = new User();\r\n        user.userServices.models.findAll({\r\n            where: {\r\n                createdBy: deToken.userUUId\r\n            }\r\n        }).then(employees => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                employees\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private vertify = async (request: Request, response: Response, next: NextFunction) => {\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        jwt.verify(token, Authentication.cert, {\r\n            algorithms: ['RS512', 'RS256']\r\n        }, (err, data) => {\r\n            if(err) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Bạn cần đăng nhập để tiếp tục.'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: 'Đăng nhập thành công!'\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    private vertifyBoss = async (request: Request, response: Response, next: NextFunction) => {\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        if(!token) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: '',\r\n                isBoss: false\r\n            });\r\n        }\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        this.userServives.models.findOne({\r\n            where: {\r\n                userId,\r\n                createdBy: null\r\n            }\r\n        }).then(res => {\r\n            if(res) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    isBoss: true\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: '',\r\n                    isBoss: false\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi xác thực người dùng.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private vertifyPondRoles = async (request: Request, response: Response, next: NextFunction) => {\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        if(!token) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: ''\r\n            });\r\n        }\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        this.userServives.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.userRolesServices.models,\r\n                    as: ActionAssociateDatabase.USER_2_ROLES_USER,\r\n                    required: false\r\n                }\r\n            ],\r\n            where: {\r\n                [this.sequeliz.Op.or]: [\r\n                    {\r\n                        '$roles.roles$': 1,\r\n                        userId\r\n                    },\r\n                    {\r\n                        userId,\r\n                        createdBy: null\r\n                    }\r\n                ]\r\n            } as any\r\n        }).then((res: any) => {\r\n            if(res.length) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: ''\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: ''\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            e;\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi xác thực người dùng.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private vertifyStorageRoles = async (request: Request, response: Response, next: NextFunction) => {\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        if(!token) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: ''\r\n            });\r\n        }\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        this.userServives.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.userRolesServices.models,\r\n                    as: ActionAssociateDatabase.USER_2_ROLES_USER,\r\n                    required: false\r\n                }\r\n            ],\r\n            where: {\r\n                [this.sequeliz.Op.or]: [\r\n                    {\r\n                        '$roles.roles$': 2,\r\n                        userId\r\n                    },\r\n                    {\r\n                        userId,\r\n                        createdBy: null\r\n                    }\r\n                ]\r\n            } as any\r\n        }).then((res: any) => {\r\n            if(res.length) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: ''\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: ''\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi xác thực người dùng.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private vertifyRolesOfPond = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondUUId } = request.params;\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        if(!token) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi xác thực người dùng.'\r\n            });\r\n        }\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        this.pondUserRolesServices.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.pondsServices.models,\r\n                    as: ActionAssociateDatabase.POND_USER_ROLE_2_POND,\r\n                    where: {\r\n                        pondUUId\r\n                    }\r\n                }\r\n            ],\r\n            where: {\r\n                userId\r\n            }\r\n        }).then((res: any) => {\r\n            if(res.length) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: ''\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: ''\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi xác thực người dùng.'\r\n            });\r\n        });\r\n    }\r\n}\r\n","module.exports = require(\"winston\");","import * as del from 'del';\r\n\r\nexport const fileFilter = (req, file, cb) => {\r\n  // accept image only\r\n  if (!file.originalname.match(/\\.(jpg|jpeg|png|gif|xlsx|xls|csv|zip)$/)) {\r\n    return cb(new Error('File format not allowed!'), false);\r\n  }\r\n  cb(undefined, true);\r\n};\r\n\r\nexport const cleanFolder = (folderPath: string) => {\r\n  // delete files inside folder but not the folder itself\r\n  del.sync([`${folderPath}/**`, `!${folderPath}`]);\r\n};\r\n","module.exports = require(\"del\");","export * from './boughtBreed';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { BoughtBreedServives } from '../../services'; // import services\r\n\r\nexport class BoughtBreed extends BaseComponent {\r\n    public boughtBreedServives: BoughtBreedServives;\r\n    private boughtBreedId: number;\r\n    private boughtBreedUUId: string;\r\n    private userId: number;\r\n    private seasonId: number;\r\n    private createdBy: string;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.boughtBreedServives = new BoughtBreedServives();\r\n        this.services = this.boughtBreedServives;\r\n    }\r\n\r\n    public set setBoughtBreedId(boughtBreedId: number) {\r\n        this.boughtBreedId = boughtBreedId ? boughtBreedId : null;\r\n    }\r\n\r\n    public set setBoughtBreedUUId(boughtBreedUUId: string) {\r\n        this.boughtBreedUUId = boughtBreedUUId;\r\n    }\r\n\r\n    public set setUserId(userId: number) {\r\n        this.userId = userId;\r\n    }\r\n\r\n    public set setSeasonId(seasonId: number) {\r\n        this.seasonId = seasonId;\r\n    }\r\n\r\n    public set setCreatedBy(createdBy: string) {\r\n        this.createdBy =  createdBy;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setBoughtBreeds(\r\n        boughtBreedId: number,\r\n        boughtBreedUUId: string,\r\n        userId: number,\r\n        seasonId: number,\r\n        createdBy?: string,\r\n        createdDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setBoughtBreedId = boughtBreedId;\r\n        this.setBoughtBreedUUId = boughtBreedUUId;\r\n        this.setUserId = userId;\r\n        this.setSeasonId = seasonId;\r\n        this.setCreatedBy = createdBy;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getBoughtBreedId(): number {\r\n        return this.boughtBreedId;\r\n    }\r\n\r\n    public get getBoughtBreedUUId(): string {\r\n        return this.boughtBreedUUId;\r\n    }\r\n\r\n    public get getUserId(): number {\r\n        return this.userId;\r\n    }\r\n\r\n    public get getSeasonId(): number {\r\n        return this.seasonId;\r\n    }\r\n\r\n    public get getCreatedBy(): string {\r\n        return this.createdBy;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './boughtBreedDetail';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { BoughtBreedDetailsServives } from '../../services'; // import services\r\n\r\nexport class BoughtBreedDetail extends BaseComponent {\r\n    public boughtBreedDetailsServives: BoughtBreedDetailsServives;\r\n    private boughtBreedDetailId: number;\r\n    private boughtBreedDetailUUId: string;\r\n    private couponId: number;\r\n    private breedId: number;\r\n    private quantity: number;\r\n    private unit: number;\r\n    private unitPrice: number;\r\n    private soldAddress: string;\r\n    private testingAgency: string;\r\n    private descriptions: string;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.boughtBreedDetailsServives = new BoughtBreedDetailsServives();\r\n        this.services = this.boughtBreedDetailsServives;\r\n    }\r\n\r\n    public set setBoughtBreedDetailId(boughtBreedDetailId: number) {\r\n        this.boughtBreedDetailId = boughtBreedDetailId;\r\n    }\r\n\r\n    public set setBoughtBreedDetailUUId(boughtBreedDetailUUId: string) {\r\n        this.boughtBreedDetailUUId = boughtBreedDetailUUId;\r\n    }\r\n\r\n    public set setCouponId(couponId: number) {\r\n        this.couponId = couponId;\r\n    }\r\n\r\n    public set setBreedId(breedId: number) {\r\n        this.breedId = breedId;\r\n    }\r\n\r\n    public set setQuantity(quantity: number) {\r\n        this.quantity = quantity;\r\n    }\r\n\r\n    public set setUnit(unit: number) {\r\n        this.unit = unit;\r\n    }\r\n\r\n    public set setUnitPrice(unitPrice: number) {\r\n        this.unitPrice = unitPrice;\r\n    }\r\n\r\n    public set setSoldAddress(soldAddress: string) {\r\n        this.soldAddress = soldAddress;\r\n    }\r\n\r\n    public set setTestingAgency(testingAgency: string) {\r\n        this.testingAgency = testingAgency;\r\n    }\r\n\r\n    public set setDescriptions(descriptions: string) {\r\n        this.descriptions = descriptions;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setBoughtBreedDetails(\r\n        boughtBreedDetailId: number,\r\n        boughtBreedDetailUUId: string,\r\n        couponId: number,\r\n        breedId: number,\r\n        quantity: number,\r\n        unit: number,\r\n        unitPrice: number,\r\n        soldAddress?: string,\r\n        testingAgency?: string,\r\n        descriptions?: string,\r\n        isDeleted?: number,\r\n    ) {\r\n        this.setBoughtBreedDetailId = boughtBreedDetailId;\r\n        this.setBoughtBreedDetailUUId = boughtBreedDetailUUId;\r\n        this.setCouponId = couponId;\r\n        this.setBreedId = breedId;\r\n        this.setQuantity = quantity;\r\n        this.setUnit = unit;\r\n        this.setUnitPrice = unitPrice;\r\n        this.setSoldAddress = soldAddress;\r\n        this.setTestingAgency = testingAgency;\r\n        this.setDescriptions = descriptions;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getBoughtBreedDetailId(): number {\r\n        return this.boughtBreedDetailId;\r\n    }\r\n\r\n    public get getBoughtBreedDetailUUId(): string {\r\n        return this.boughtBreedDetailUUId;\r\n    }\r\n\r\n    public get getCouponId(): number {\r\n        return this.couponId;\r\n    }\r\n\r\n    public get getBreedId(): number {\r\n        return this.breedId;\r\n    }\r\n\r\n    public get getQuantity(): number {\r\n        return this.quantity;\r\n    }\r\n\r\n    public get getUnit(): number {\r\n        return this.unit;\r\n    }\r\n\r\n    public get getUnitPrice(): number {\r\n        return this.unitPrice;\r\n    }\r\n\r\n    public get getSoldAddress(): string {\r\n        return this.soldAddress;\r\n    }\r\n\r\n    public get getTestingAgency(): string {\r\n        return this.testingAgency;\r\n    }\r\n\r\n    public get getDescriptions(): string {\r\n        return this.descriptions;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './breed';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { BreedServives } from '../../services'; // import services\r\n\r\nexport class Breed extends BaseComponent {\r\n    public breedServives: BreedServives;\r\n    private breedId: number;\r\n    private breedUUId: string;\r\n    private ownerId: number;\r\n    private breedName: string;\r\n    private totalQuantity: number;\r\n    private loopOfBreed: number;\r\n    private unit: number;\r\n    private tips: string;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.breedServives = new BreedServives();\r\n        this.services = this.breedServives;\r\n    }\r\n\r\n    public set setBreedId(breedId: number) {\r\n        this.breedId = breedId;\r\n    }\r\n\r\n    public set setBreedUUId(breedUUId: string) {\r\n        this.breedUUId = breedUUId;\r\n    }\r\n\r\n    public set setOwnerId(userId: number) {\r\n        this.ownerId = userId;\r\n    }\r\n\r\n    public set setBreedName(breedName: string) {\r\n        this.breedName = breedName;\r\n    }\r\n\r\n    public set setTotalQuantity(totalQuantity: number) {\r\n        this.totalQuantity = totalQuantity;\r\n    }\r\n\r\n    public set setUnit(unit: number) {\r\n        this.unit = unit;\r\n    }\r\n\r\n    public set setLoopOfBreed(loopOfBreed: number) {\r\n        this.loopOfBreed = loopOfBreed;\r\n    }\r\n\r\n    public set setTips(tips: string) {\r\n        this.tips = tips;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setBreed(\r\n        breedId: number,\r\n        breedUUId: string,\r\n        ownerId: number,\r\n        breedName: string,\r\n        totalQuantity: number,\r\n        unit: number,\r\n        loopOfBreed: number,\r\n        tips?: string,\r\n        createdDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setBreedId = breedId;\r\n        this.setBreedUUId = breedUUId;\r\n        this.setOwnerId = ownerId;\r\n        this.setBreedName = breedName;\r\n        this.setTotalQuantity = totalQuantity;\r\n        this.setUnit = unit;\r\n        this.setLoopOfBreed = loopOfBreed;\r\n        this.setTips = tips;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getBreedId(): number {\r\n        return this.breedId;\r\n    }\r\n\r\n    public get getBreedUUId(): string {\r\n        return this.breedUUId;\r\n    }\r\n\r\n    public get getOwnerId(): number {\r\n        return this.ownerId;\r\n    }\r\n\r\n    public get getBreedName(): string {\r\n        return this.breedName;\r\n    }\r\n\r\n    public get getTotalQuantity(): number {\r\n        return this.totalQuantity;\r\n    }\r\n\r\n    public get getUnit(): number {\r\n        return this.unit;\r\n    }\r\n\r\n    public get getLoopOfBreed(): number {\r\n        return this.loopOfBreed;\r\n    }\r\n\r\n    public get getTips(): string {\r\n        return this.tips;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './breedOwner';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { BreedOwnwerServices } from '../../services'; // import services\r\n\r\nexport class OwnerBreed extends BaseComponent {\r\n    public breedOwnwerServices: BreedOwnwerServices;\r\n    private ownerId: number;\r\n    private userId: number;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.breedOwnwerServices = new BreedOwnwerServices();\r\n        this.services = this.breedOwnwerServices;\r\n    }\r\n\r\n    public set setOwnerId(ownerId: number) {\r\n        this.ownerId = ownerId;\r\n    }\r\n\r\n    public set setUserId(userId: number) {\r\n        this.userId = userId;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setOwnerBreed(\r\n        ownerId: number,\r\n        userId: number,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setOwnerId = ownerId;\r\n        this.setUserId = userId;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getOwnerId(): number {\r\n        return this.ownerId;\r\n    }\r\n\r\n    public get getUserId(): number {\r\n        return this.userId;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './cost';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { CostsServives } from '../../services'; // import services\r\n\r\nexport class Cost extends BaseComponent {\r\n    public costsServives: CostsServives;\r\n    private costId: number;\r\n    private costUUId: string;\r\n    private pondPrepareId: number;\r\n    private label: string;\r\n    private value: number;\r\n    private responsible: string;\r\n    private notes: string;\r\n    private createdBy: string;\r\n    private createdDate: Date;\r\n    private updatedBy: string;\r\n    private updatedDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.costsServives = new CostsServives();\r\n        this.services = this.costsServives;\r\n    }\r\n\r\n    public set setCostId(costId: number) {\r\n        this.costId = costId;\r\n    }\r\n\r\n    public set setCostUUId(costUUId: string) {\r\n        this.costUUId = costUUId;\r\n    }\r\n\r\n    public set setPondPrepareId(pondPrepareId: number) {\r\n        this.pondPrepareId = pondPrepareId;\r\n    }\r\n\r\n    public set setLabel(label: string) {\r\n        this.label = label;\r\n    }\r\n\r\n    public set setValue(value: number) {\r\n        this.value = value;\r\n    }\r\n\r\n    public set setResponsible(responsible: string) {\r\n        this.responsible = responsible;\r\n    }\r\n\r\n    public set setNotes(notes: string) {\r\n        this.notes = notes;\r\n    }\r\n\r\n    public set setCreatedBy(createdBy: string) {\r\n        this.createdBy = createdBy;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setUpdatedBy(updatedBy: string) {\r\n        this.updatedBy = updatedBy;\r\n    }\r\n\r\n    public set setUpdatedDate(updatedDate: Date) {\r\n        this.updatedDate = updatedDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setCost(\r\n            costId: number,\r\n            costUUId: string,\r\n            pondPrepareId: number,\r\n            label: string,\r\n            value: number,\r\n            responsible: string,\r\n            notes: string,\r\n            createdBy?: string,\r\n            createdDate?: Date,\r\n            updatedBy?: string,\r\n            updatedDate?: Date,\r\n            isDeleted?: number\r\n        ) {\r\n            this.setCostId = costId;\r\n            this.setCostUUId = costUUId;\r\n            this.setPondPrepareId = pondPrepareId;\r\n            this.setLabel = label;\r\n            this.setValue = value;\r\n            this.setResponsible = responsible;\r\n            this.setNotes = notes;\r\n            this.setCreatedBy = createdBy;\r\n            this.setCreatedDate = createdDate;\r\n            this.setUpdatedBy = updatedBy;\r\n            this.setUpdatedDate = updatedDate;\r\n            this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getCostId(): number {\r\n        return this.costId;\r\n    }\r\n\r\n    public get getCostUUId(): string {\r\n        return this.costUUId;\r\n    }\r\n\r\n    public get getPondPrepareId(): number {\r\n        return this.pondPrepareId;\r\n    }\r\n\r\n    public get getLabel(): string {\r\n        return this.label;\r\n    }\r\n\r\n    public get getValue(): number {\r\n        return this.value;\r\n    }\r\n\r\n    public get getResponsible(): string {\r\n        return this.responsible;\r\n    }\r\n\r\n    public get getNotes(): string {\r\n        return this.notes;\r\n    }\r\n\r\n    public get getCreatedBy(): string {\r\n        return this.createdBy;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getUpdatedBy(): string {\r\n        return this.updatedBy;\r\n    }\r\n\r\n    public get getUpdatedDate(): Date {\r\n        return this.updatedDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './coupon';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { CouponServives } from '../../services'; // import services\r\n\r\nexport class Coupon extends BaseComponent {\r\n    public couponServives: CouponServives;\r\n    private couponId: number;\r\n    private userId: number;\r\n    private seasonId: number;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.couponServives = new CouponServives();\r\n        this.services = this.couponServives;\r\n    }\r\n\r\n    public set setCouponId(couponId: number) {\r\n        this.couponId = couponId;\r\n    }\r\n\r\n    public set setUserId(userId: number) {\r\n        this.userId = userId;\r\n    }\r\n\r\n    public set setSeasonId(seasonId: number) {\r\n        this.seasonId = seasonId;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setCoupon(\r\n        couponId: number,\r\n        userId: number,\r\n        seasonId: number,\r\n        createdDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setCouponId = couponId;\r\n        this.setUserId = userId;\r\n        this.setSeasonId= seasonId;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getCouponId(): number {\r\n        return this.couponId;\r\n    }\r\n\r\n    public get getUserId (): number {\r\n        return this.userId;\r\n    }\r\n\r\n    public get getSeasonId(): number {\r\n        return this.seasonId;\r\n    }\r\n\r\n    public get getCreatedDate (): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted (): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './diedFishery';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { DiedFisherysServives } from '../../services'; // import services\r\n\r\nexport class DiedFishery extends BaseComponent {\r\n    public diedFisherysServives: DiedFisherysServives;\r\n    private diedFisheryId: number;\r\n    private diedFisheryUUId: string;\r\n    private seasonAndPondId: number;\r\n    private card: number;\r\n    private quantity: number;\r\n    private solutions: string;\r\n    private employee: string;\r\n    private createdBy: string;\r\n    private createdDate: Date;\r\n    private updatedBy: string;\r\n    private updatedDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.diedFisherysServives = new DiedFisherysServives();\r\n        this.services = this.diedFisherysServives;\r\n    }\r\n\r\n    public set setDiedFisheryId(diedFisheryId: number) {\r\n        this.diedFisheryId = diedFisheryId;\r\n    }\r\n\r\n    public set setDiedFisheryUUId(diedFisheryUUId: string) {\r\n        this.diedFisheryUUId = diedFisheryUUId;\r\n    }\r\n\r\n    public set setSeasonAndPondId(seasonAndPondId: number) {\r\n        this.seasonAndPondId = seasonAndPondId;\r\n    }\r\n\r\n    public set setCard(card: number) {\r\n        this.card = card;\r\n    }\r\n\r\n    public set setQuantity(quantity: number) {\r\n        this.quantity = quantity;\r\n    }\r\n\r\n    public set setSolutions(solutions: string) {\r\n        this.solutions = solutions;\r\n    }\r\n\r\n    public set setEmployee(employee: string) {\r\n        this.employee = employee;\r\n    }\r\n\r\n    public set setCreatedBy(createdBy: string) {\r\n        this.createdBy = createdBy;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setUpdatedBy(updatedBy: string) {\r\n        this.updatedBy = updatedBy;\r\n    }\r\n\r\n    public set setUpdatedDate(updatedDate: Date) {\r\n        this.updatedDate = updatedDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setDiedfisherys(\r\n        diedFisheryId: number,\r\n        diedFisheryUUId: string,\r\n        seasonAndPondId: number,\r\n        card: number,\r\n        quantity: number,\r\n        solutions?: string,\r\n        employee?: string,\r\n        createdBy?: string,\r\n        createdDate?: Date,\r\n        updatedBy?: string,\r\n        updatedDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setDiedFisheryId = diedFisheryId;\r\n        this.setDiedFisheryUUId = diedFisheryUUId;\r\n        this.setSeasonAndPondId = seasonAndPondId;\r\n        this.setCard = card;\r\n        this.setQuantity = quantity;\r\n        this.setSolutions = solutions;\r\n        this.setEmployee = employee;\r\n        this.setCreatedBy = createdBy;\r\n        this.setCreatedDate = createdDate;\r\n        this.setUpdatedBy = updatedBy;\r\n        this.setUpdatedDate = updatedDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getDiedFisheryId(): number {\r\n        return this.diedFisheryId;\r\n    }\r\n\r\n    public get getDiedFisheryUUId(): string {\r\n        return this.diedFisheryUUId;\r\n    }\r\n\r\n    public get getSeasonAndPondId(): number {\r\n        return this.seasonAndPondId;\r\n    }\r\n\r\n    public get getCard(): number {\r\n        return this.card;\r\n    }\r\n\r\n    public get getQuantity(): number {\r\n        return this.quantity;\r\n    }\r\n\r\n    public get getSolutions(): string {\r\n        return this.solutions;\r\n    }\r\n\r\n    public get getEmployee(): string {\r\n        return this.employee;\r\n    }\r\n\r\n    public get getCreatedBy(): string {\r\n        return this.createdBy;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getUpdatedBy(): string {\r\n        return this.updatedBy;\r\n    }\r\n\r\n    public get getUpdatedDate(): Date {\r\n        return this.updatedDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { DistrictServives } from '../../services';\r\n\r\nexport class District extends BaseComponent {\r\n    public districtServives: DistrictServives;\r\n    private districtid: string;\r\n    private name: string;\r\n    private type: string;\r\n    private location: string;\r\n    private provinceid: string;\r\n\r\n    constructor() {\r\n        super();\r\n        this.districtServives = new DistrictServives();\r\n        this.services = this.districtServives;\r\n    }\r\n\r\n    public setDistrictid(districtid: string) {\r\n        this.districtid = districtid;\r\n    }\r\n\r\n    public setName(name: string) {\r\n        this.name = name;\r\n    }\r\n\r\n    public setType(type: string) {\r\n        this.type = type;\r\n    }\r\n\r\n    public setLocation(location: string) {\r\n        this.location = location;\r\n    }\r\n\r\n    public setProvinceid(provinceid: string) {\r\n        this.provinceid = provinceid;\r\n    }\r\n\r\n    public get getDistrictId() {\r\n        return this.districtid;\r\n    }\r\n\r\n    public get getDistrictName() {\r\n        return this.name;\r\n    }\r\n\r\n    public get getDistrictType() {\r\n        return this.type;\r\n    }\r\n\r\n    public get getDistrictLocation() {\r\n        return this.location;\r\n    }\r\n\r\n    public get getProvinceIdWithDistrict() {\r\n        return this.provinceid;\r\n    }\r\n\r\n    getAllDistrict(): Promise<District[]> {\r\n        return new Promise((resolve, reject) => {\r\n            this.districtServives.getAll(null).then((res: any[])  => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n\r\n    getDistrictByProvinceId(proId): Promise<District[]> {\r\n        return new Promise((resolve, reject) => {\r\n            this.districtServives.getByProviceId(proId).then((res: any[])  => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './growth';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { GrowthsServives } from '../../services'; // import services\r\n\r\nexport class Growth extends BaseComponent {\r\n    public growthsServives: GrowthsServives;\r\n    private growthId: number;\r\n    private growthUUId: string;\r\n    private seasonAndPondId: number;\r\n    private averageDensity: number;\r\n    private averageMass: number;\r\n    private speedOdGrowth: number;\r\n    private livingRatio: number;\r\n    private createdBy: string;\r\n    private createdDate: Date;\r\n    private updatedBy: string;\r\n    private updatedDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.growthsServives = new GrowthsServives();\r\n        this.services = this.growthsServives;\r\n    }\r\n\r\n    public set setGrowthId(growthId: number) {\r\n        this.growthId = growthId;\r\n    }\r\n\r\n    public set setGrowthUUId(growthUUId: string) {\r\n        this.growthUUId = growthUUId;\r\n    }\r\n\r\n    public set setSeasonAndPondId(seasonAndPondId: number) {\r\n        this.seasonAndPondId = seasonAndPondId;\r\n    }\r\n\r\n    public set setAverageDensity(averageDensity: number) {\r\n        this.averageDensity = averageDensity;\r\n    }\r\n\r\n    public set setAverageMass(averageMass: number) {\r\n        this.averageMass = averageMass;\r\n    }\r\n\r\n    public set setSpeedOdGrowth(speedOdGrowth: number) {\r\n        this.speedOdGrowth = speedOdGrowth;\r\n    }\r\n\r\n    public set setLivingRatio(livingRatio: number) {\r\n        this.livingRatio = livingRatio;\r\n    }\r\n\r\n    public set setCreatedBy(createdBy: string) {\r\n        this.createdBy = createdBy;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setUpdatedBy(updatedBy: string) {\r\n        this.updatedBy = updatedBy;\r\n    }\r\n\r\n    public set setUpdatedDate(updatedDate: Date) {\r\n        this.updatedDate = updatedDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setGrowths(\r\n        growthId: number,\r\n        growthUUId: string,\r\n        seasonAndPondId: number,\r\n        averageDensity: number,\r\n        averageMass: number,\r\n        speedOdGrowth: number,\r\n        livingRatio: number,\r\n        createdBy?: string,\r\n        createdDate?: Date,\r\n        updatedBy?: string,\r\n        updatedDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setGrowthId = growthId;\r\n        this.setGrowthUUId = growthUUId;\r\n        this.seasonAndPondId = seasonAndPondId;\r\n        this.setAverageDensity = averageDensity;\r\n        this.setAverageMass = averageMass;\r\n        this.setSpeedOdGrowth = speedOdGrowth;\r\n        this.setLivingRatio = livingRatio;\r\n        this.setCreatedBy = createdBy;\r\n        this.setCreatedDate = createdDate;\r\n        this.setUpdatedBy = updatedBy;\r\n        this.setUpdatedDate = updatedDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getGrowthId(): number {\r\n        return this.growthId;\r\n    }\r\n\r\n    public get getGrowthUUId(): string {\r\n        return this.growthUUId;\r\n    }\r\n\r\n    public get getSeasonAndPondId(): number {\r\n        return this.seasonAndPondId;\r\n    }\r\n\r\n    public get getAverageDensity(): number {\r\n        return this.averageDensity;\r\n    }\r\n\r\n    public get getAverageMass(): number {\r\n        return this.averageMass;\r\n    }\r\n\r\n    public get getSpeedOdGrowth(): number {\r\n        return this.speedOdGrowth;\r\n    }\r\n\r\n    public get getLivingRatio(): number {\r\n        return this.livingRatio;\r\n    }\r\n\r\n    public get getCreatedBy(): string {\r\n        return this.createdBy;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getUpdatedBy(): string {\r\n        return this.updatedBy;\r\n    }\r\n\r\n    public get getUpdatedDate(): Date {\r\n        return this.updatedDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './harvestDetail';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { HarvestDetailsServives } from '../../services'; // import services\r\n\r\nexport class HarvestDetail extends BaseComponent {\r\n    public harvestDetailsServives: HarvestDetailsServives;\r\n    private harvestDetailUUId: string;\r\n    private harvestId: number;\r\n    private quantity: number;\r\n    private unitPrice: number;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.harvestDetailsServives = new HarvestDetailsServives();\r\n        this.services = this.harvestDetailsServives;\r\n    }\r\n\r\n    public set setHarvestIdDetailUUId(harvestIdDetailUUId: string) {\r\n        this.harvestDetailUUId = harvestIdDetailUUId;\r\n    }\r\n\r\n    public set setHarvestId(harvestId: number) {\r\n        this.harvestId = harvestId;\r\n    }\r\n\r\n    public set setQuantity(quantity: number) {\r\n        this.quantity = quantity;\r\n    }\r\n\r\n    public set setUnitPrice(unitPrice: number) {\r\n        this.unitPrice = unitPrice;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setHarvestdetails(\r\n        harvestIdDetailUUId: string,\r\n        harvestId: number,\r\n        quantity: number,\r\n        unitPrice: number,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setHarvestIdDetailUUId = harvestIdDetailUUId;\r\n        this.setHarvestId = harvestId;\r\n        this.setQuantity = quantity;\r\n        this.setUnitPrice = unitPrice;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getHarvestDetailUUId(): string {\r\n        return this.harvestDetailUUId;\r\n    }\r\n\r\n    public get getHarvestId(): number {\r\n        return this.harvestId;\r\n    }\r\n\r\n    public get getQuantity(): number {\r\n        return this.quantity;\r\n    }\r\n\r\n    public get getUnitPrice(): number {\r\n        return this.unitPrice;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './harvest';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { HarvestsServives } from '../../services'; // import services\r\n\r\nexport class Harvest extends BaseComponent {\r\n    public harvestsServives: HarvestsServives;\r\n    private harvestId: number;\r\n    private harvestUUId: string;\r\n    private seasonAndPondId: number;\r\n    private harvestName: string;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.harvestsServives = new HarvestsServives();\r\n        this.services = this.harvestsServives;\r\n    }\r\n\r\n    public set setHarvestId(harvestId: number) {\r\n        this.harvestId = harvestId;\r\n    }\r\n\r\n    public set setHarvestUUId(harvestUUId: string) {\r\n        this.harvestUUId = harvestUUId;\r\n    }\r\n\r\n    public set setSeasonAndPondId(seasonAndPondId: number) {\r\n        this.seasonAndPondId = seasonAndPondId;\r\n    }\r\n\r\n    public set setHarvestName(harvestName: string) {\r\n        this.harvestName = harvestName;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setHarvests(\r\n        harvestId: number,\r\n        harvestUUId: string,\r\n        seasonAndPondId: number,\r\n        harvestName: string,\r\n        createdDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setHarvestId = harvestId;\r\n        this.setHarvestUUId = harvestUUId;\r\n        this.setSeasonAndPondId = seasonAndPondId;\r\n        this.setHarvestName = harvestName;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getHarvestId(): number {\r\n        return this.harvestId;\r\n    }\r\n\r\n    public get getHarvestUUId(): string {\r\n        return this.harvestUUId;\r\n    }\r\n\r\n    public get getsetSeasonAndPondId(): number {\r\n        return this.seasonAndPondId;\r\n    }\r\n\r\n    public get getHarvestName(): string {\r\n        return this.harvestName;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './material';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { MaterialServives } from '../../services';\r\n\r\nexport class Material extends BaseComponent {\r\n    public materialServives: MaterialServives;\r\n    private materialId: number;\r\n    private materialUUId: string;\r\n    private couponId: number;\r\n    private storageId: number;\r\n    private provider: string;\r\n    private providerAddress: string;\r\n    private quantity: number;\r\n    private unit: number;\r\n    private unitPrice: number;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.materialServives = new MaterialServives();\r\n        this.services = this.materialServives;\r\n    }\r\n\r\n    public set setMaterialId(materialId: number) {\r\n        this.materialId = materialId;\r\n    }\r\n\r\n    public set setMaterialUUId(materialUUId: string) {\r\n        this.materialUUId = materialUUId;\r\n    }\r\n\r\n    public set setCouponId(couponId: number) {\r\n        this.couponId = couponId;\r\n    }\r\n\r\n    public set setStorageId(storageId: number) {\r\n        this.storageId = storageId;\r\n    }\r\n\r\n    public set setProvider(provider: string) {\r\n        this.provider = provider;\r\n    }\r\n\r\n    public set setProviderAddress(providerAddress: string) {\r\n        this.providerAddress = providerAddress;\r\n    }\r\n\r\n    public set setQuantity(quantity: number) {\r\n        this.quantity = quantity;\r\n    }\r\n\r\n    public set setUnit(unit: number) {\r\n        this.unit = unit;\r\n    }\r\n\r\n    public set setUnitPrice(unitPrice: number) {\r\n        this.unitPrice = unitPrice;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setMaterial(\r\n        materialId: number,\r\n        materialUUId: string,\r\n        couponId: number,\r\n        storageId: number,\r\n        provider: string,\r\n        providerAddress: string,\r\n        quantity: number,\r\n        unit: number,\r\n        unitPrice: number,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setMaterialId = materialId;\r\n        this.setMaterialUUId = materialUUId;\r\n        this.setCouponId = couponId;\r\n        this.setStorageId = storageId;\r\n        this.setProvider = provider;\r\n        this.setProviderAddress = providerAddress;\r\n        this.setQuantity = quantity;\r\n        this.setUnit = unit;\r\n        this.setUnitPrice = unitPrice;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getMaterialId(): number {\r\n        return this.materialId;\r\n    }\r\n\r\n    public get getMaterialUUId(): string {\r\n        return this.materialUUId;\r\n    }\r\n\r\n    public get getCouponId(): number {\r\n        return this.couponId;\r\n    }\r\n\r\n    public get getStorageId(): number {\r\n        return this.storageId;\r\n    }\r\n\r\n    public get getProvider(): string {\r\n        return this.provider;\r\n    }\r\n\r\n    public get getProviderAddress(): string {\r\n        return this.providerAddress;\r\n    }\r\n\r\n    public get getQuantity(): number {\r\n        return this.quantity;\r\n    }\r\n\r\n    public get getUnit(): number {\r\n        return this.unit;\r\n    }\r\n\r\n    public get getUnitPrice(): number {\r\n        return this.unitPrice;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './pondEnvironment';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { PondEnvironmentsServices } from '../../services'; // import services\r\n\r\nexport class PondEnvironment extends BaseComponent {\r\n    public pondEnvironmentsServices: PondEnvironmentsServices;\r\n    private pondEnvironmentId: number;\r\n    private pondEnvironmentUUId: string;\r\n    private seasonAndPondId: number;\r\n    private oxyMorning: number;\r\n    private oxyAfternoon: number;\r\n    private phMorning: number;\r\n    private phAfternoon: number;\r\n    private transparent: number;\r\n    private salinity: number;\r\n    private h2s: number;\r\n    private nh3: number;\r\n    private bazo: number;\r\n    private createdBy: string;\r\n    private createdDate: Date;\r\n    private updatedBy: string;\r\n    private updatedDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.pondEnvironmentsServices = new PondEnvironmentsServices();\r\n        this.services = this.pondEnvironmentsServices;\r\n    }\r\n\r\n    public set setPondEnvironmentId(pondEnvironmentId: number) {\r\n        this.pondEnvironmentId = pondEnvironmentId;\r\n    }\r\n\r\n    public set setPondEnvironmentUUId(pondEnvironmentUUId: string) {\r\n        this.pondEnvironmentUUId = pondEnvironmentUUId;\r\n    }\r\n\r\n    public set setSeasonAndPondId(seasonAndPondId: number) {\r\n        this.seasonAndPondId = seasonAndPondId;\r\n    }\r\n\r\n    public set setOxyMorning(oxyMorning: number) {\r\n        this.oxyMorning = oxyMorning;\r\n    }\r\n\r\n    public set setOxyAfternoon(oxyAfternoon: number) {\r\n        this.oxyAfternoon = oxyAfternoon;\r\n    }\r\n\r\n    public set setPhMorning(phMorning: number) {\r\n        this.phMorning = phMorning;\r\n    }\r\n\r\n    public set setPhAfternoon(phAfternoon: number) {\r\n        this.phAfternoon = phAfternoon;\r\n    }\r\n\r\n    public set setTransparent(transparent: number) {\r\n        this.transparent = transparent;\r\n    }\r\n\r\n    public set setSalinity(salinity: number) {\r\n        this.salinity = salinity;\r\n    }\r\n\r\n    public set setH2s(h2s: number) {\r\n        this.h2s = h2s;\r\n    }\r\n\r\n    public set setNh3(nh3: number) {\r\n        this.nh3 = nh3;\r\n    }\r\n\r\n    public set setBazo(bazo: number) {\r\n        this.bazo = bazo;\r\n    }\r\n\r\n    public set setCreatedBy(createdBy: string) {\r\n        this.createdBy = createdBy;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setUpdatedBy(updatedBy: string) {\r\n        this.updatedBy = updatedBy;\r\n    }\r\n\r\n    public set setUpdatedDate(updatedDate: Date) {\r\n        this.updatedDate = updatedDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setPondenvironments(\r\n        pondEnvironmentId: number,\r\n        pondEnvironmentUUId: string,\r\n        seasonAndPondId: number,\r\n        oxyMorning: number,\r\n        oxyAfternoon: number,\r\n        phMorning: number,\r\n        phAfternoon: number,\r\n        transparent: number,\r\n        salinity: number,\r\n        h2s: number,\r\n        nh3: number,\r\n        bazo: number,\r\n        createdBy?: string,\r\n        createdDate?: Date,\r\n        updatedBy?: string,\r\n        updatedDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setPondEnvironmentId = pondEnvironmentId;\r\n        this.setPondEnvironmentUUId = pondEnvironmentUUId;\r\n        this.setSeasonAndPondId = seasonAndPondId;\r\n        this.setOxyMorning = oxyMorning;\r\n        this.setOxyAfternoon = oxyAfternoon;\r\n        this.setPhMorning = phMorning;\r\n        this.setPhAfternoon = phAfternoon;\r\n        this.setTransparent = transparent;\r\n        this.setSalinity = salinity;\r\n        this.setH2s = h2s;\r\n        this.setNh3 = nh3;\r\n        this.setBazo = bazo;\r\n        this.setCreatedBy = createdBy;\r\n        this.setCreatedDate = createdDate;\r\n        this.setUpdatedBy = updatedBy;\r\n        this.setUpdatedDate = updatedDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getPondEnvironmentId(): number {\r\n        return this.pondEnvironmentId;\r\n    }\r\n\r\n    public get getPondEnvironmentUUId(): string {\r\n        return this.pondEnvironmentUUId;\r\n    }\r\n\r\n    public get getSeasonAndPondId(): number {\r\n        return this.seasonAndPondId;\r\n    }\r\n\r\n    public get getOxyMorning(): number {\r\n        return this.oxyMorning;\r\n    }\r\n\r\n    public get getOxyAfternoon(): number {\r\n        return this.oxyAfternoon;\r\n    }\r\n\r\n    public get getPhMorning(): number {\r\n        return this.phMorning;\r\n    }\r\n\r\n    public get getPhAfternoon(): number {\r\n        return this.phAfternoon;\r\n    }\r\n\r\n    public get getTransparent(): number {\r\n        return this.transparent;\r\n    }\r\n\r\n    public get getSalinity(): number {\r\n        return this.salinity;\r\n    }\r\n\r\n    public get getH2s(): number {\r\n        return this.h2s;\r\n    }\r\n\r\n    public get getNh3(): number {\r\n        return this.nh3;\r\n    }\r\n\r\n    public get getBazo(): number {\r\n        return this.bazo;\r\n    }\r\n\r\n    public get getCreatedBy(): string {\r\n        return this.createdBy;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getUpdatedBy(): string {\r\n        return this.updatedBy;\r\n    }\r\n\r\n    public get getUpdatedDate(): Date {\r\n        return this.updatedDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './pondUserRole';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { PondUserRolesServices } from '../../services';\r\n\r\nexport class PondUserRole extends BaseComponent {\r\n    public pondUserRolesServices: PondUserRolesServices;\r\n    private pondUserRolesId: number;\r\n    private userId: number;\r\n    private pondId: number;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.pondUserRolesServices = new PondUserRolesServices();\r\n        this.services = this.pondUserRolesServices;\r\n    }\r\n\r\n    public set setPondUserRolesId(id: number) {\r\n        this.pondUserRolesId = id;\r\n    }\r\n\r\n    public set setUserId(userId: number) {\r\n        this.userId = userId;\r\n    }\r\n\r\n    public set setPondId(pondId: number) {\r\n        this.pondId = pondId;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setPondUserRoles(pondUserRolesId?: number, userId?: number, pondId?: number, createdDate?: Date, isDeleted?: number) {\r\n        this.setPondUserRolesId = pondUserRolesId;\r\n        this.setUserId = userId;\r\n        this.setPondId = pondId;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getPondUserRolesId(): number {\r\n        return this.pondUserRolesId;\r\n    }\r\n\r\n    public get getUserId(): number {\r\n        return this.userId;\r\n    }\r\n\r\n    public get getPondId(): number {\r\n        return this.pondId;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './pondDiary';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { PondDiaryServices } from '../../services'; // import services\r\n\r\nexport class PondDiary extends BaseComponent {\r\n    public pondDiaryServices: PondDiaryServices;\r\n    private pondDiaryId: number;\r\n    private pondDiaryUUId: string;\r\n    private seasonAndPondId: number;\r\n    private diaryName: string;\r\n    private fisheryQuantity: number;\r\n    private healthOfFishery: string;\r\n    private pondVolume: number;\r\n    private diedFishery: number;\r\n    private notes: string;\r\n    private createdBy?: string;\r\n    private createdDate?: Date;\r\n    private updatedBy?: string;\r\n    private updatedDate?: Date;\r\n    private isDeleted?: number;\r\n    constructor() {\r\n        super();\r\n        this.pondDiaryServices = new PondDiaryServices();\r\n        this.services = this.pondDiaryServices;\r\n    }\r\n\r\n    public set setPondDiaryId(pondDiaryId: number) {\r\n        this.pondDiaryId = pondDiaryId;\r\n    }\r\n\r\n    public set setPondDiaryUUId(pondDiaryUUId: string) {\r\n        this.pondDiaryUUId = pondDiaryUUId;\r\n    }\r\n\r\n    public set setSeasonAndPondId(seasonAndPondId: number) {\r\n        this.seasonAndPondId = seasonAndPondId;\r\n    }\r\n\r\n    public set setDiaryName(diaryName: string) {\r\n        this.diaryName = diaryName;\r\n    }\r\n\r\n    public set setFisheryQuantity(fisheryQuantity: number) {\r\n        this.fisheryQuantity = fisheryQuantity;\r\n    }\r\n\r\n    public set setHealthOfFishery(healthOfFishery: string) {\r\n        this.healthOfFishery = healthOfFishery;\r\n    }\r\n\r\n    public set setPondVolume(pondVolume: number) {\r\n        this.pondVolume = pondVolume;\r\n    }\r\n\r\n    public set setDiedFishery(diedFishery: number) {\r\n        this.diedFishery = diedFishery;\r\n    }\r\n\r\n    public set setNotes(notes: string) {\r\n        this.notes = notes;\r\n    }\r\n\r\n    public set setCreatedBy(createdBy: string) {\r\n        this.createdBy = createdBy;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setUpdatedBy(updatedBy: string) {\r\n        this.updatedBy = updatedBy;\r\n    }\r\n\r\n    public set setUpdatedDate(updatedDate: Date) {\r\n        this.updatedDate = updatedDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setPonddiary(\r\n        pondDiaryId: number,\r\n        pondDiaryUUId: string,\r\n        seasonAndPondId: number,\r\n        diaryName: string,\r\n        fisheryQuantity: number,\r\n        healthOfFishery: string,\r\n        pondVolume: number,\r\n        diedFishery: number,\r\n        notes: string,\r\n        createdBy?: string,\r\n        createdDate?: Date,\r\n        updatedBy?: string,\r\n        updatedDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setPondDiaryId = pondDiaryId;\r\n        this.setPondDiaryUUId = pondDiaryUUId;\r\n        this.setSeasonAndPondId= seasonAndPondId;\r\n        this.setDiaryName = diaryName;\r\n        this.setFisheryQuantity = fisheryQuantity;\r\n        this.setHealthOfFishery = healthOfFishery;\r\n        this.setPondVolume = pondVolume;\r\n        this.setDiedFishery = diedFishery;\r\n        this.setNotes = notes;\r\n        this.setCreatedBy = createdBy;\r\n        this.setCreatedDate = createdDate;\r\n        this.setUpdatedBy = updatedBy;\r\n        this.setUpdatedDate = updatedDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getPondDiaryId(): number {\r\n        return this.pondDiaryId;\r\n    }\r\n\r\n    public get getPondDiaryUUId(): string {\r\n        return this.pondDiaryUUId;\r\n    }\r\n\r\n    public get getSeasonAndPondId(): number {\r\n        return this.seasonAndPondId;\r\n    }\r\n\r\n    public get getDiaryName(): string {\r\n        return this.diaryName;\r\n    }\r\n\r\n    public get getFisheryQuantity(): number {\r\n        return this.fisheryQuantity;\r\n    }\r\n\r\n    public get getHealthOfFishery(): string {\r\n        return this.healthOfFishery;\r\n    }\r\n\r\n    public get getPondVolume(): number {\r\n        return this.pondVolume;\r\n    }\r\n\r\n    public get getDiedFishery(): number {\r\n        return this.diedFishery;\r\n    }\r\n\r\n    public get getNotes(): string {\r\n        return this.notes;\r\n    }\r\n\r\n    public get getPrimary(): object {\r\n        return {\r\n            pondDiaryId: this.getPondDiaryId\r\n        };\r\n    }\r\n\r\n    public get getCreatedBy(): string {\r\n        return this.createdBy;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getUpdatedBy(): string {\r\n        return this.updatedBy;\r\n    }\r\n\r\n    public get getUpdatedDate(): Date {\r\n        return this.updatedDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n\r\n    // public get getForgeinKey(): object {\r\n    //     return {\r\n    //         pondId: this.getPondId,\r\n    //         seasonId: this.getSeasonId\r\n    //     };\r\n    // }\r\n}\r\n","export * from './pondPrepare';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { PondPrepareServices } from '../../services'; // import services\r\n\r\nexport class PondPrepare extends BaseComponent {\r\n    public pondPrepareServices: PondPrepareServices;\r\n    private pondPrepareId: number;\r\n    private pondPrepareUUId: string;\r\n    private seasonAndPondId: number;\r\n    private pondprepareName: string;\r\n    private createdBy: string;\r\n    private createdDate: Date;\r\n    private updatedBy: string;\r\n    private updatedDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.pondPrepareServices = new PondPrepareServices();\r\n        this.services = this.pondPrepareServices;\r\n    }\r\n\r\n    public set setPondPrepareId(pondPrepareId: number) {\r\n        this.pondPrepareId = pondPrepareId;\r\n    }\r\n\r\n    public set setPondPrepareUUId(pondPrepareUUId: string) {\r\n        this.pondPrepareUUId = pondPrepareUUId;\r\n    }\r\n\r\n    public set setSeasonAndPondId(seasonAndPondId: number) {\r\n        this.seasonAndPondId = seasonAndPondId;\r\n    }\r\n\r\n    public set setPondprepareName(pondprepareName: string) {\r\n        this.pondprepareName = pondprepareName;\r\n    }\r\n\r\n    public set setCreatedBy(createdBy: string) {\r\n        this.createdBy = createdBy;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setUpdatedBy(updatedBy: string) {\r\n        this.updatedBy = updatedBy;\r\n    }\r\n\r\n    public set setUpdatedDate(updatedDate: Date) {\r\n        this.updatedDate = updatedDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setPondprepare(\r\n        pondPrepareId: number,\r\n        pondPrepareUUId: string,\r\n        seasonAndPondId: number,\r\n        pondprepareName: string,\r\n        createdBy?: string,\r\n        createdDate?: Date,\r\n        updatedBy?: string,\r\n        updatedDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setPondPrepareId = pondPrepareId;\r\n        this.setPondPrepareUUId = pondPrepareUUId;\r\n        this.setSeasonAndPondId = seasonAndPondId;\r\n        this.setPondprepareName = pondprepareName;\r\n        this.setCreatedBy = createdBy;\r\n        this.setCreatedDate = createdDate;\r\n        this.setUpdatedBy = updatedBy;\r\n        this.setUpdatedDate = updatedDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getPondPrepareId(): number {\r\n        return this.pondPrepareId;\r\n    }\r\n\r\n    public get getPondPrepareUUId(): string {\r\n        return this.pondPrepareUUId;\r\n    }\r\n\r\n    public get getSeasonAndPondId(): number {\r\n        return this.seasonAndPondId;\r\n    }\r\n\r\n    public get getPondprepareName(): string {\r\n        return this.pondprepareName;\r\n    }\r\n\r\n    public get getCreatedBy(): string {\r\n        return this.createdBy;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getUpdatedBy(): string {\r\n        return this.updatedBy;\r\n    }\r\n\r\n    public get getUpdatedDate(): Date {\r\n        return this.updatedDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n\r\n}\r\n","export * from './pondPrepareDetails';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { PondPrepareDetailsServices } from '../../services'; // import services\r\n\r\nexport class PondPrepareDetail extends BaseComponent {\r\n    public pondPrepareDetailsServices: PondPrepareDetailsServices;\r\n    private pondPrepareDetailId: number;\r\n    private pondPrepareDetailUUId: string;\r\n    private storageId: number;\r\n    private pondPrepareId: number;\r\n    private quantity: number;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.pondPrepareDetailsServices = new PondPrepareDetailsServices();\r\n        this.services = this.pondPrepareDetailsServices;\r\n    }\r\n\r\n    public set setPondPrepareDetailId(pondPrepareDetailId: number) {\r\n        this.pondPrepareDetailId = pondPrepareDetailId;\r\n    }\r\n\r\n    public set setPondPrepareDetailUUId(pondPrepareDetailUUId: string) {\r\n        this.pondPrepareDetailUUId = pondPrepareDetailUUId;\r\n    }\r\n\r\n    public set setPondPrepareId(pondPrepareId: number) {\r\n        this.pondPrepareId = pondPrepareId;\r\n    }\r\n\r\n    public set setStorageId(storageId: number) {\r\n        this.storageId = storageId;\r\n    }\r\n\r\n    public set setQuantity(quantity: number) {\r\n        this.quantity = quantity;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setPondpreparedetails(\r\n        pondPrepareDetailId: number,\r\n        pondPrepareDetailUUId: string,\r\n        pondPrepareId: number,\r\n        storageId: number,\r\n        quantity: number,\r\n        createdDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setPondPrepareDetailUUId = pondPrepareDetailUUId;\r\n        this.setPondPrepareId = pondPrepareId;\r\n        this.setStorageId = storageId;\r\n        this.setPondPrepareDetailId = pondPrepareDetailId;\r\n        this.setQuantity = quantity;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getPondPrepareDetailUUId(): string {\r\n        return this.pondPrepareDetailUUId;\r\n    }\r\n\r\n    public get getPondPrepareId(): number {\r\n        return this.pondPrepareId;\r\n    }\r\n\r\n    public get getMaterialId(): number {\r\n        return this.storageId;\r\n    }\r\n\r\n    public get getPondPrepareDetailId(): number {\r\n        return this.pondPrepareDetailId;\r\n    }\r\n\r\n    public get getQuantity(): number {\r\n        return this.quantity;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './pond';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { PondsServices } from '../../services';\r\n\r\nexport class Pond extends BaseComponent {\r\n    public pondsServices: PondsServices;\r\n    private pondId: number;\r\n    private pondUUId: string;\r\n    private userId: number;\r\n    private pondName: string;\r\n    private pondArea: number;\r\n    private pondDepth: number;\r\n    private createCost: number;\r\n    private pondCreatedDate: Date;\r\n    private status: number;\r\n    private isFed: number;\r\n    private isDiary: number;\r\n    private images: string;\r\n    private pondLatitude: number;\r\n    private pondLongitude: number;\r\n    private createdBy: string;\r\n    private createdDate: Date;\r\n    private updatedBy: string;\r\n    private updatedDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.pondsServices = new PondsServices();\r\n        this.services = this.pondsServices;\r\n    }\r\n\r\n    public set setPondId(pondId: number) {\r\n        this.pondId = pondId;\r\n    }\r\n\r\n    public set setPondUUId(pondUUId: string) {\r\n        this.pondUUId = pondUUId;\r\n    }\r\n\r\n    public set setUserId(userId: number) {\r\n        this.userId = userId;\r\n    }\r\n\r\n    public set setPondName(pondName: string) {\r\n        this.pondName = pondName;\r\n    }\r\n\r\n    public set setPondArea(pondArea: number) {\r\n        this.pondArea = pondArea;\r\n    }\r\n\r\n    public set setPondDepth(pondDepth: number) {\r\n        this.pondDepth = pondDepth;\r\n    }\r\n\r\n    public set setCreateCost(createCost: number) {\r\n        this.createCost = createCost;\r\n    }\r\n\r\n    public set setPondCreatedDate(pondCreatedDate: Date) {\r\n        this.pondCreatedDate = pondCreatedDate;\r\n    }\r\n\r\n    public set setStatus(status: number) {\r\n        this.status = status;\r\n    }\r\n\r\n    public set setIsFed(isFed: number) {\r\n        this.isFed = isFed;\r\n    }\r\n\r\n    public set setIsDiary(isDiary: number) {\r\n        this.isDiary = isDiary;\r\n    }\r\n\r\n    public set setImages(images: string) {\r\n        this.images = images;\r\n    }\r\n\r\n    public set setPondLatitude(pondLatitude: number) {\r\n        this.pondLatitude = pondLatitude;\r\n    }\r\n\r\n    public set setPondLongitude(pondLongitude: number) {\r\n        this.pondLongitude = pondLongitude;\r\n    }\r\n\r\n    public set setCreatedBy(createdBy: string) {\r\n        this.createdBy = createdBy;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setUpdatedBy(updatedBy: string) {\r\n        this.updatedBy = updatedBy;\r\n    }\r\n\r\n    public set setUpdatedDate(updatedDate: Date) {\r\n        this.updatedDate = updatedDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setPond(\r\n        pondId: number,\r\n        pondUUId: string,\r\n        userId: number,\r\n        pondName: string,\r\n        pondArea: number,\r\n        pondDepth: number,\r\n        createCost: number,\r\n        pondCreatedDate: Date,\r\n        status: number,\r\n        isFed: number,\r\n        isDiary: number,\r\n        images: string,\r\n        pondLatitude?: number,\r\n        pondLongitude?: number,\r\n        createdBy?: string,\r\n        createdDate?: Date,\r\n        updatedBy?: string,\r\n        updatedDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setPondId = pondId;\r\n        this.setPondUUId = pondUUId;\r\n        this.setUserId = userId;\r\n        this.setPondName = pondName;\r\n        this.setPondArea = pondArea;\r\n        this.setPondDepth = pondDepth;\r\n        this.setCreateCost = createCost;\r\n        this.setStatus = status || status === 0 ? status * 1 : null;\r\n        this.setIsFed = isFed;\r\n        this.setIsDiary = isDiary;\r\n        this.setImages = images;\r\n        this.setPondLatitude = pondLatitude;\r\n        this.setPondLongitude = pondLongitude;\r\n        this.setPondCreatedDate = pondCreatedDate;\r\n        this.setCreatedBy = createdBy;\r\n        this.setCreatedDate = createdDate;\r\n        this.setUpdatedBy = updatedBy;\r\n        this.setUpdatedDate = updatedDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getPondId(): number {\r\n        return this.pondId;\r\n    }\r\n\r\n    public get getPondUUId(): string {\r\n        return this.pondUUId;\r\n    }\r\n\r\n    public get getUserId(): number {\r\n        return this.userId;\r\n    }\r\n\r\n    public get getPondName(): string {\r\n        return this.pondName;\r\n    }\r\n\r\n    public get getPondArea(): number {\r\n        return this.pondArea;\r\n    }\r\n\r\n    public get getPondDepth(): number {\r\n        return this.pondDepth;\r\n    }\r\n\r\n    public get getCreateCost(): number {\r\n        return this.createCost;\r\n    }\r\n\r\n    public get getStatus(): Date {\r\n        return this.pondCreatedDate;\r\n    }\r\n\r\n    public get getIsFed(): number {\r\n        return this.status;\r\n    }\r\n\r\n    public get getIsDiary(): number {\r\n        return this.isFed;\r\n    }\r\n\r\n    public get getImages(): number {\r\n        return this.isDiary;\r\n    }\r\n\r\n    public get getPondLatitude(): string {\r\n        return this.images;\r\n    }\r\n\r\n    public get getPondLongitude(): number {\r\n        return this.pondLatitude;\r\n    }\r\n\r\n    public get getPondCreatedDate(): number {\r\n        return this.pondLongitude;\r\n    }\r\n\r\n    public get getCreatedBy(): string {\r\n        return this.createdBy;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getUpdatedBy(): string {\r\n        return this.updatedBy;\r\n    }\r\n\r\n    public get getUpdatedDate(): Date {\r\n        return this.updatedDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './price';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { PricesServices } from '../../services'; // import services\r\n\r\nexport class Price extends BaseComponent {\r\n    public pricesServices: PricesServices;\r\n    private priceId: number;\r\n    private priceUUId: string;\r\n    private seasonId: number;\r\n    private totalCost: number;\r\n    private totalProfit: number;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.pricesServices = new PricesServices();\r\n        this.services = this.pricesServices;\r\n    }\r\n\r\n    public set setPriceId(priceId: number) {\r\n        this.priceId = priceId;\r\n    }\r\n\r\n    public set setPriceUUId(priceUUId: string) {\r\n        this.priceUUId = priceUUId;\r\n    }\r\n\r\n    public set setSeasonId(seasonId: number) {\r\n        this.seasonId = seasonId;\r\n    }\r\n\r\n    public set setTotalCost(totalCost: number) {\r\n        this.totalCost = totalCost;\r\n    }\r\n\r\n    public set setTotalProfit(totalProfit: number) {\r\n        this.totalProfit = totalProfit;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setPrices(\r\n        priceId: number,\r\n        priceUUId: string,\r\n        seasonId: number,\r\n        totalCost: number,\r\n        totalProfit: number,\r\n        createdDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setPriceId = priceId;\r\n        this.setPriceUUId = priceUUId;\r\n        this.setSeasonId = seasonId;\r\n        this.setTotalCost = totalCost;\r\n        this.setTotalProfit = totalProfit;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getPriceId(): number {\r\n        return this.priceId;\r\n    }\r\n\r\n    public get getPriceUUId(): string {\r\n        return this.priceUUId;\r\n    }\r\n\r\n    public get getSeasonId(): number {\r\n        return this.seasonId;\r\n    }\r\n\r\n    public get getTotalCost(): number {\r\n        return this.totalCost;\r\n    }\r\n\r\n    public get getTotalProfit(): number {\r\n        return this.totalProfit;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { ProvinceServices } from '../../services';\r\n\r\nexport class Province extends BaseComponent {\r\n    public provinceServices: ProvinceServices;\r\n    private provinceid: string;\r\n    private name: string;\r\n    private type: string;\r\n\r\n    constructor() {\r\n        super();\r\n        this.provinceServices = new ProvinceServices();\r\n    }\r\n\r\n    public set setProvinceid(provinceid: string) {\r\n        this.provinceid = provinceid;\r\n    }\r\n\r\n    public set setName(name: string) {\r\n        this.name = name;\r\n    }\r\n\r\n    public set setType(type: string) {\r\n        this.type = type;\r\n    }\r\n\r\n    public setProvince(provinceid: string, name: string, type: string) {\r\n        this.setProvinceid = provinceid;\r\n        this.setName = name;\r\n        this.setType = type;\r\n    }\r\n\r\n    public get getProvinceid(): string {\r\n        return this.provinceid;\r\n    }\r\n\r\n    public get getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    public get getType(): string {\r\n        return this.type;\r\n    }\r\n\r\n    getAllProvince(): Promise<Province[]> {\r\n        return  new Promise((resolve, reject) => {\r\n            this.provinceServices.getAll(null).then((res: any[])  => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './season';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { SeasonServices } from '../../services'; // import services\r\n\r\nexport class Season extends BaseComponent {\r\n    public seasonServices: SeasonServices;\r\n    private seasonId: number;\r\n    private seasonUUId: string;\r\n    private userId: number;\r\n    private seasonName: string;\r\n    private status: number;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n\r\n    constructor() {\r\n        super();\r\n        this.seasonServices = new SeasonServices();\r\n        this.services = this.seasonServices;\r\n    }\r\n\r\n    public set setSeasonId(seasonId: number) {\r\n        this.seasonId = seasonId;\r\n    }\r\n\r\n    public set setSeasonUUId(seasonUUId: string) {\r\n        this.seasonUUId = seasonUUId;\r\n    }\r\n\r\n    public set setUserId(userId: number) {\r\n        this.userId = userId;\r\n    }\r\n\r\n    public set setSeasonName(seasonName: string) {\r\n        this.seasonName = seasonName;\r\n    }\r\n\r\n    public set setStatus(status: number) {\r\n        this.status = status;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setSeason(\r\n        seasonId: number,\r\n        seasonUUId: string,\r\n        userId: number,\r\n        seasonName: string,\r\n        status: number,\r\n        createdDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setSeasonId = seasonId;\r\n        this.setSeasonUUId = seasonUUId;\r\n        this.setUserId = userId;\r\n        this.setSeasonName = seasonName;\r\n        this.setStatus = status;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getSeasonId(): number {\r\n        return this.seasonId;\r\n    }\r\n\r\n    public get getSeasonUUId(): string {\r\n        return this.seasonUUId;\r\n    }\r\n\r\n    public get getUserId(): number {\r\n        return this.userId;\r\n    }\r\n\r\n    public get getSeasonName(): string {\r\n        return this.seasonName;\r\n    }\r\n\r\n    public get getStatus(): number {\r\n        return this.status;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n\r\n    public get getPrimary(): any {\r\n        return {\r\n            seasonId: this.seasonId\r\n        };\r\n    }\r\n}\r\n","export * from './seasonsAndPond';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { SeasonAndPondServices } from '../../services'; // import services\r\n\r\nexport class SeasonsAndPond extends BaseComponent {\r\n    public seasonAndPondServices: SeasonAndPondServices;\r\n    private seasonAndPondId: number;\r\n    private seasonId: number;\r\n    private pondId: number;\r\n\r\n    constructor() {\r\n        super();\r\n        this.seasonAndPondServices = new SeasonAndPondServices();\r\n        this.services = this.seasonAndPondServices;\r\n    }\r\n\r\n    public set setSeasonAndPondId(seasonAndPondId: number) {\r\n        this.seasonAndPondId = seasonAndPondId;\r\n    }\r\n\r\n    public set setSeasonId(seasonId: number) {\r\n        this.seasonId = seasonId;\r\n    }\r\n\r\n    public set setPondId(pondId: number) {\r\n        this.pondId = pondId;\r\n    }\r\n\r\n    public setSeasonsAndPond(\r\n        seasonAndPondId: number,\r\n        seasonId: number,\r\n        pondId: number,\r\n    ) {\r\n        this.setSeasonAndPondId = seasonAndPondId;\r\n        this.setSeasonId= seasonId;\r\n        this.setPondId = pondId;\r\n    }\r\n\r\n    public get getSeasonAndPondId(): number {\r\n        return this.seasonAndPondId;\r\n    }\r\n\r\n    public get getSeasonId(): number {\r\n        return this.seasonId;\r\n    }\r\n\r\n    public get getPondId(): number {\r\n        return this.pondId;\r\n    }\r\n}\r\n","export * from './stocking';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { StockingServices } from '../../services'; // import services\r\n\r\nexport class Stocking extends BaseComponent {\r\n    public stockingServices: StockingServices;\r\n    private stockingId: number;\r\n    private stockingUUId: string;\r\n    private seasonAndPondId: number;\r\n    private notes: string;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.stockingServices = new StockingServices();\r\n        this.services = this.stockingServices;\r\n    }\r\n\r\n    public set setStockingId(stockingId: number) {\r\n        this.stockingId = stockingId;\r\n    }\r\n\r\n    public set setStockingUUId(stockingUUId: string) {\r\n        this.stockingUUId = stockingUUId;\r\n    }\r\n\r\n    public set setSeasonAndPondId(seasonAndPondId: number) {\r\n        this.seasonAndPondId = seasonAndPondId;\r\n    }\r\n\r\n    public set setNotes(notes: string) {\r\n        this.notes = notes;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setStocking(\r\n        stockingId: number,\r\n        stockingUUId: string,\r\n        seasonAndPondId: number,\r\n        notes: string,\r\n        createdDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setStockingId = stockingId;\r\n        this.setStockingUUId = stockingUUId;\r\n        this.setSeasonAndPondId = seasonAndPondId;\r\n        this.setNotes = notes;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getStockingId(): number {\r\n        return this.stockingId;\r\n    }\r\n\r\n    public get getStockingUUId(): string {\r\n        return this.stockingUUId;\r\n    }\r\n\r\n    public get getSeasonAndPondId(): number {\r\n        return this.seasonAndPondId;\r\n    }\r\n\r\n    public get getNotes(): string {\r\n        return this.notes;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './stockingDetail';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { StockingDetailsServices } from '../../services'; // import services\r\n\r\nexport class StockingDetail extends BaseComponent {\r\n    public stockingDetailsServices: StockingDetailsServices;\r\n    private stockingDetailUUId: string;\r\n    private breedId: number;\r\n    private stockingId: number;\r\n    private stockingQuantity: number;\r\n    private phFirst: number;\r\n    private salinityFirst: number;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.stockingDetailsServices = new StockingDetailsServices();\r\n        this.services = this.stockingDetailsServices;\r\n    }\r\n\r\n    public set setStockingDetailUUId(stockingDetailUUId: string) {\r\n        this.stockingDetailUUId = stockingDetailUUId;\r\n    }\r\n\r\n    public set setBreedId(breedId: number) {\r\n        this.breedId = breedId;\r\n    }\r\n\r\n    public set setStockingId(stockingId: number) {\r\n        this.stockingId = stockingId;\r\n    }\r\n\r\n    public set setStockingQuantity(stockingQuantity: number) {\r\n        this.stockingQuantity = stockingQuantity;\r\n    }\r\n\r\n    public set setPhFirst(phFirst: number) {\r\n        this.phFirst = phFirst;\r\n    }\r\n\r\n    public set setSalinityFirst(salinityFirst: number) {\r\n        this.salinityFirst = salinityFirst;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setStockingdetails(\r\n        stockingDetailUUId: string,\r\n        breedId: number,\r\n        stockingId: number,\r\n        stockingQuantity: number,\r\n        phFirst?: number,\r\n        salinityFirst?: number,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setStockingDetailUUId = stockingDetailUUId;\r\n        this.setBreedId = breedId;\r\n        this.setStockingId = stockingId;\r\n        this.setStockingQuantity = stockingQuantity;\r\n        this.setPhFirst = phFirst;\r\n        this.setSalinityFirst = salinityFirst;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getStockingDetailUUId(): string {\r\n        return this.stockingDetailUUId;\r\n    }\r\n\r\n    public get getBreedId(): number {\r\n        return this.breedId;\r\n    }\r\n\r\n    public get getStockingId(): number {\r\n        return this.stockingId;\r\n    }\r\n\r\n    public get getStockingQuantity(): number {\r\n        return this.stockingQuantity;\r\n    }\r\n\r\n    public get getPhFirst(): number {\r\n        return this.phFirst;\r\n    }\r\n\r\n    public get getSalinityFirst(): number {\r\n        return this.salinityFirst;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './storage';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { StoregeServices } from '../../services';\r\n\r\nexport class Storage extends BaseComponent {\r\n    public storegeServices: StoregeServices;\r\n    private storageId: number;\r\n    private storageUUId: string;\r\n    private ownerId: number;\r\n    private productName: string;\r\n    private quantityStorages: number;\r\n    private unit: number;\r\n    private type: number;\r\n    private descriptions: string;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.storegeServices = new StoregeServices();\r\n        this.services = this.storegeServices;\r\n    }\r\n\r\n    public set setStorageId(storageId: number) {\r\n        this.storageId = storageId;\r\n    }\r\n\r\n    public set setStorageUUId(storageUUId: string) {\r\n        this.storageUUId = storageUUId;\r\n    }\r\n\r\n    public set setOwnerId(userId: number) {\r\n        this.ownerId = userId;\r\n    }\r\n\r\n    public set setProductName(productName: string) {\r\n        this.productName = productName;\r\n    }\r\n\r\n    public set setQuantityStorages(quantityStorages: number) {\r\n        this.quantityStorages = quantityStorages;\r\n    }\r\n\r\n    public set setUnit(unit: number) {\r\n        this.unit = unit;\r\n    }\r\n\r\n    public set setType(type: number) {\r\n        this.type = type;\r\n    }\r\n\r\n    public set setDescriptions(descriptions: string) {\r\n        this.descriptions = descriptions;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setStorages(\r\n        storageId: number,\r\n        storageUUId: string,\r\n        ownerId: number,\r\n        productName: string,\r\n        quantityStorages: number,\r\n        unit: number,\r\n        type: number,\r\n        descriptions: string,\r\n        createdDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setStorageId = storageId;\r\n        this.setStorageUUId = storageUUId;\r\n        this.setOwnerId = ownerId;\r\n        this.setProductName = productName;\r\n        this.setQuantityStorages = quantityStorages;\r\n        this.setUnit = unit;\r\n        this.setType = type;\r\n        this.setDescriptions = descriptions;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getStorageId(): number {\r\n        return this.storageId;\r\n    }\r\n\r\n    public get getStorageUUId(): string {\r\n        return this.storageUUId;\r\n    }\r\n\r\n    public get getOwnerId(): number {\r\n        return this.ownerId;\r\n    }\r\n\r\n    public get getProductName(): string {\r\n        return this.productName;\r\n    }\r\n\r\n    public get getQuantityStorages(): number {\r\n        return this.quantityStorages;\r\n    }\r\n\r\n    public get getUnit(): number {\r\n        return this.unit;\r\n    }\r\n\r\n    public get getType(): number {\r\n        return this.type;\r\n    }\r\n\r\n    public get getDescriptions(): string {\r\n        return this.descriptions;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './storageOwner';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { StoregeOwnwerServices } from '../../services'; // import services\r\n\r\nexport class OwnerStorage extends BaseComponent {\r\n    public storegeOwnwerServices: StoregeOwnwerServices;\r\n    private storageOwnerId: number;\r\n    private userId: number;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.storegeOwnwerServices = new StoregeOwnwerServices();\r\n        this.services = this.storegeOwnwerServices;\r\n    }\r\n\r\n    public set setStorageOwnerId(storageOwnerId: number) {\r\n        this.storageOwnerId = storageOwnerId;\r\n    }\r\n\r\n    public set setUserId(userId: number) {\r\n        this.userId = userId;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setOwnerStorages(\r\n        storageOwnerId: number,\r\n        userId: number,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setStorageOwnerId = storageOwnerId;\r\n        this.setUserId = userId;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getStorageOwnerId(): number {\r\n        return this.storageOwnerId;\r\n    }\r\n\r\n    public get getUserId(): number {\r\n        return this.userId;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './takeCare';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { TakeCareServices } from '../../services'; // import services\r\n\r\nexport class TakeCare extends BaseComponent {\r\n    public takeCareServices: TakeCareServices;\r\n    private takeCareId: number;\r\n    private takeCareUUId: string;\r\n    private seasonAndPondId: number;\r\n    private type: number;\r\n    private takeCareName: string;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.takeCareServices = new TakeCareServices();\r\n        this.services = this.takeCareServices;\r\n    }\r\n\r\n    public set setTakeCareId(takeCareId: number) {\r\n        this.takeCareId = takeCareId;\r\n    }\r\n\r\n    public set setTakeCareUUId(takeCareUUId: string) {\r\n        this.takeCareUUId = takeCareUUId;\r\n    }\r\n\r\n    public set setSeasonAndPondId(seasonAndPondId: number) {\r\n        this.seasonAndPondId = seasonAndPondId;\r\n    }\r\n\r\n    public set setTakeType(type: number) {\r\n        this.type = type;\r\n    }\r\n\r\n    public set setTakeCareName(takeCareName: string) {\r\n        this.takeCareName = takeCareName;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setTakecare(\r\n        takeCareId: number,\r\n        takeCareUUId: string,\r\n        seasonAndPondId: number,\r\n        type: number,\r\n        takeCareName?: string,\r\n        createdDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setTakeCareId = takeCareId;\r\n        this.setTakeCareUUId = takeCareUUId;\r\n        this.setSeasonAndPondId= seasonAndPondId;\r\n        this.setTakeType = type;\r\n        this.setTakeCareName = takeCareName;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getTakeCareId(): number {\r\n        return this.takeCareId;\r\n    }\r\n\r\n    public get getTakeCareUUId(): string {\r\n        return this.takeCareUUId;\r\n    }\r\n\r\n    public get getSeasonAndPondId(): number {\r\n        return this.seasonAndPondId;\r\n    }\r\n\r\n    public get getTakeCareName(): string {\r\n        return this.takeCareName;\r\n    }\r\n\r\n    public get getTakeType(): number {\r\n        return this.type;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './userRole';\r\n","import { UserRolesServices } from '../../services';\r\nimport { BaseComponent } from '../baseComponents';\r\n\r\nexport class UserRole extends BaseComponent {\r\n    public userRolesServices: UserRolesServices;\r\n    private rolesId: number;\r\n    private bossId: number;\r\n    private userId: number;\r\n    private roles: number;\r\n    private createdDate: Date;\r\n    private updatedBy: string;\r\n    private isDeleted: number;\r\n\r\n    public constructor() {\r\n        super();\r\n        this.userRolesServices = new UserRolesServices();\r\n        this.services = this.userRolesServices;\r\n    }\r\n\r\n    public set setRolesId(rolesId: number) {\r\n        this.rolesId = rolesId;\r\n    }\r\n\r\n    public set setBossId(bossId: number) {\r\n        this.bossId = bossId;\r\n    }\r\n\r\n    public set setUserId(userId: number) {\r\n        this.userId = userId;\r\n    }\r\n\r\n    public set setRoles(roles: number) {\r\n        this.roles = roles;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setUpdatedBy(updatedBy: string) {\r\n        this.updatedBy = updatedBy;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setUserRoles(\r\n        rolesId: number,\r\n        bossId: number,\r\n        userId: number,\r\n        roles: number,\r\n        createdDate?: Date,\r\n        updatedBy?: string,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setRolesId = rolesId;\r\n        this.setBossId = bossId;\r\n        this.setUserId = userId;\r\n        this.setRoles = roles;\r\n        this.setCreatedDate = createdDate;\r\n        this.setUpdatedBy = updatedBy;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getRolesId(): number {\r\n        return this.rolesId;\r\n    }\r\n\r\n    public get getBossId(): number {\r\n        return this.bossId;\r\n    }\r\n\r\n    public get getUserId(): number {\r\n        return this.userId;\r\n    }\r\n\r\n    public get getRoles(): number {\r\n        return this.roles;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getUpdatedBy(): string {\r\n        return this.updatedBy;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './user';\r\n","import { Enscrypts } from '../../lib/';\r\nimport { UserServives } from '../../services';\r\nimport { BaseComponent } from '../baseComponents';\r\nimport { Promise } from '../../lib';\r\n\r\nexport class User extends BaseComponent {\r\n    public userServices: UserServives;\r\n    private userId: number;\r\n    private userUUId: string;\r\n    private firstname: string;\r\n    private lastname: string;\r\n    private birthday: Date;\r\n    private addressContact: string;\r\n    private username: string;\r\n    private password: string;\r\n    private town: string;\r\n    private district: string;\r\n    private province: string;\r\n    private status: number;\r\n    private phone: string;\r\n    private email: string;\r\n    private images: string;\r\n    private createdBy: string;\r\n    private createdDate: Date;\r\n    private updatedBy: string;\r\n    private updatedDate: Date;\r\n    private isDeleted: number;\r\n\r\n    constructor() {\r\n        super();\r\n        this.userServices = new UserServives();\r\n        this.services = this.userServices;\r\n        this.primary = {\r\n            username: this.getUsername\r\n        };\r\n        this.foreignKey = [\r\n\r\n        ];\r\n    }\r\n\r\n    public set setUserId(userId: number) {\r\n        this.userId = userId;\r\n    }\r\n\r\n    public set setUserUUId(userUUId: string) {\r\n        this.userUUId = userUUId;\r\n    }\r\n\r\n    public set setFirstname(firstname: string) {\r\n        this.firstname = firstname;\r\n    }\r\n\r\n    public set setLastname(lastname: string) {\r\n        this.lastname = lastname;\r\n    }\r\n\r\n    public set setUsername(username: string) {\r\n        this.username = username ? username.toLowerCase().trim() : username;\r\n    }\r\n\r\n    public set setPassword(password: string) {\r\n        this.password = password;\r\n    }\r\n\r\n    public set setBirthday(birthday: Date) {\r\n        this.birthday = birthday;\r\n    }\r\n\r\n    public set setEmail(email: string) {\r\n        this.email = email;\r\n    }\r\n\r\n    public set setPhone(phone: string) {\r\n        this.phone = phone;\r\n    }\r\n\r\n    public set setAddressContact(addressContact: string) {\r\n        this.addressContact = addressContact;\r\n    }\r\n\r\n    public set setTown(town: string) {\r\n        this.town = town;\r\n    }\r\n\r\n    public set setDistrict(district: string) {\r\n        this.district = district;\r\n    }\r\n\r\n    public set setProvince(province: string) {\r\n        this.province = province;\r\n    }\r\n\r\n    public set setStatus(status: number) {\r\n        this.status = status;\r\n    }\r\n\r\n    public set setImages(images: string) {\r\n        this.images = images;\r\n    }\r\n\r\n    public set setCreatedBy(createdBy: string) {\r\n        this.createdBy = createdBy;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setUpdatedBy(updatedBy: string) {\r\n        this.updatedBy = updatedBy;\r\n    }\r\n\r\n    public set setUpdatedDate(updatedDate: Date) {\r\n        this.updatedDate = updatedDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setUser(\r\n        userId: number,\r\n        userUUId: string,\r\n        firstname: string,\r\n        lastname: string,\r\n        username: string,\r\n        password: string,\r\n        birthday?: Date,\r\n        email?: string,\r\n        phone?: string,\r\n        addressContact?: string,\r\n        town?: string,\r\n        district?: string,\r\n        province?: string,\r\n        status?: number,\r\n        images?: string,\r\n        createdBy?: string,\r\n        createdDate?: Date,\r\n        updatedBy?: string,\r\n        updatedDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setUserId = userId;\r\n        this.setUserUUId = userUUId;\r\n        this.setFirstname = firstname;\r\n        this.setLastname = lastname;\r\n        this.setUsername = username;\r\n        this.setPassword = password;\r\n        this.setBirthday = birthday;\r\n        this.setEmail = email;\r\n        this.setPhone = phone;\r\n        this.setAddressContact = addressContact;\r\n        this.setTown = town;\r\n        this.setDistrict = district;\r\n        this.setProvince = province;\r\n        this.setStatus = status;\r\n        this.setImages = images;\r\n        this.setCreatedBy = createdBy;\r\n        this.setCreatedDate = createdDate;\r\n        this.setUpdatedBy = updatedBy;\r\n        this.setUpdatedDate = updatedDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getUserId() {\r\n        return this.userId;\r\n    }\r\n\r\n    public get getUserUUId() {\r\n        return this.userUUId;\r\n    }\r\n\r\n    public get getFirstname() {\r\n        return this.firstname;\r\n    }\r\n\r\n    public get getLastname() {\r\n        return this.lastname;\r\n    }\r\n\r\n    public get getUsername() {\r\n        return this.username;\r\n    }\r\n\r\n    public get getPassword() {\r\n        return this.password;\r\n    }\r\n\r\n    public get getBirthday() {\r\n        return this.birthday;\r\n    }\r\n\r\n    public get getEmail() {\r\n        return this.email;\r\n    }\r\n\r\n    public get getPhone() {\r\n        return this.phone;\r\n    }\r\n\r\n    public get getAddressContact() {\r\n        return this.addressContact;\r\n    }\r\n\r\n    public get getTown() {\r\n        return this.town;\r\n    }\r\n\r\n    public get getDistrict() {\r\n        return this.district;\r\n    }\r\n\r\n    public get getProvince() {\r\n        return this.province;\r\n    }\r\n\r\n    public get getStatus() {\r\n        return this.status;\r\n    }\r\n\r\n    public get getImages() {\r\n        return this.images;\r\n    }\r\n\r\n    public get getCreatedBy() {\r\n        return this.createdBy;\r\n    }\r\n\r\n    public get getCreatedDate() {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getUpdatedBy() {\r\n        return this.updatedBy;\r\n    }\r\n\r\n    public get getUpdatedDate() {\r\n        return this.updatedDate;\r\n    }\r\n\r\n    public get getIsDeleted() {\r\n        return this.isDeleted;\r\n    }\r\n\r\n    public register(): Promise<User> {\r\n        return new Promise((resolve, reject) => {\r\n            Enscrypts.getSalt(Math.floor((Math.random() * 12) + 1)).then(salt => {\r\n                Enscrypts.hashing(this.password, salt).then(hash => {\r\n                    this.setPassword = hash;\r\n                    this.userServices.register(this).then(res => {\r\n                        resolve(res);\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    public login(): Promise<User> {\r\n        return new Promise((resolve, reject) => {\r\n            this.userServices.getUserByUsername(this).then((user$: User) => {\r\n                resolve(user$);\r\n            });\r\n        });\r\n    }\r\n\r\n    public updateMyProfile(): Promise<User> {\r\n        return new Promise((resolve, reject) => {\r\n            this.userServices.update(this.getFields(this)).then(res => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n\r\n    public changePassword(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            Enscrypts.getSalt(Math.floor((Math.random() * 12) + 1)).then((salt: string) => {\r\n                Enscrypts.hashing(this.password, salt).then((hash: string) => {\r\n                    this.password = hash;\r\n                    this.userServices.update(this.getFields(this)).then((res: any) => {\r\n                        resolve(res);\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    public hashPassword = (pass: string): string => {\r\n        const salt = Enscrypts.getSaltSync(Math.floor((Math.random() * 12) + 1));\r\n        return Enscrypts.hashingSync(pass, salt);\r\n    }\r\n}\r\n","export * from './usingFood';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { UsingFoodsServices } from '../../services'; // import services\r\n\r\nexport class UsingFood extends BaseComponent {\r\n    public usingFoodsServices: UsingFoodsServices;\r\n    private usingFoodId: number;\r\n    private usingFoodUUId: string;\r\n    private takeCareId: number;\r\n    private storageId: number;\r\n    private massOfFishery: number;\r\n    private feedingRate: number;\r\n    private totalFood: number;\r\n    private createdBy: string;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.usingFoodsServices = new UsingFoodsServices();\r\n        this.services = this.usingFoodsServices;\r\n    }\r\n\r\n    public set setUsingFoodId(usingFoodId: number) {\r\n        this.usingFoodId = usingFoodId;\r\n    }\r\n\r\n    public set setUsingFoodUUId(usingFoodUUId: string) {\r\n        this.usingFoodUUId = usingFoodUUId;\r\n    }\r\n\r\n    public set setStorageId(storageId: number) {\r\n        this.storageId = storageId;\r\n    }\r\n\r\n    public set setTakeCareId(takeCareId: number) {\r\n        this.takeCareId = takeCareId;\r\n    }\r\n\r\n    public set setMassOfFishery(massOfFishery: number) {\r\n        this.massOfFishery = massOfFishery;\r\n    }\r\n\r\n    public set setFeedingRate(feedingRate: number) {\r\n        this.feedingRate = feedingRate;\r\n    }\r\n\r\n    public set setTotalFood(totalFood: number) {\r\n        this.totalFood = totalFood;\r\n    }\r\n\r\n    public set setCreatedBy(createdBy: string) {\r\n        this.createdBy = createdBy;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setUsingFoods(\r\n        usingFoodId: number,\r\n        usingFoodUUId: string,\r\n        storageId: number,\r\n        takeCareId: number,\r\n        massOfFishery: number,\r\n        feedingRate: number,\r\n        totalFood: number,\r\n        createdBy?: string,\r\n        createdDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setUsingFoodId = usingFoodId;\r\n        this.setUsingFoodUUId = usingFoodUUId;\r\n        this.setTakeCareId = takeCareId;\r\n        this.setStorageId = storageId;\r\n        this.setMassOfFishery = massOfFishery;\r\n        this.setFeedingRate = feedingRate;\r\n        this.setTotalFood = totalFood;\r\n        this.setCreatedBy = createdBy;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getUsingFoodId(): number {\r\n        return this.usingFoodId;\r\n    }\r\n\r\n    public get getUsingFoodUUId(): string {\r\n        return this.usingFoodUUId;\r\n    }\r\n\r\n    public get getStorageId(): number {\r\n        return this.storageId;\r\n    }\r\n\r\n    public get getTakeCareId(): number {\r\n        return this.takeCareId;\r\n    }\r\n\r\n    public get getMassOfFishery(): number {\r\n        return this.massOfFishery;\r\n    }\r\n\r\n    public get getFeedingRate(): number {\r\n        return this.feedingRate;\r\n    }\r\n\r\n    public get getTotalFood(): number {\r\n        return this.totalFood;\r\n    }\r\n\r\n    public get getCreatedBy(): string {\r\n        return this.createdBy;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './usingVeterinary';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { UsingVeterinaryServices } from '../../services';\r\n\r\nexport class UsingVeterinary extends BaseComponent {\r\n    public usingVeterinaryServices: UsingVeterinaryServices;\r\n    private usingVeterinaryId: number;\r\n    private usingVeterinaryUUId: string;\r\n    private takeCareId: number;\r\n    private storageId: number;\r\n    private causesNSymptoms: string;\r\n    private averageSize: number;\r\n    private totalBiomass: number;\r\n    private quantity: number;\r\n    private result: string;\r\n    private latestHarvestDate: number;\r\n    private mentor: string;\r\n    private createdBy: string;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.usingVeterinaryServices = new UsingVeterinaryServices();\r\n        this.services = this.usingVeterinaryServices;\r\n    }\r\n\r\n    public set setUsingVeterinaryId(usingVeterinaryId: number) {\r\n        this.usingVeterinaryId = usingVeterinaryId;\r\n    }\r\n\r\n    public set setUsingVeterinaryUUId(usingVeterinaryUUId: string) {\r\n        this.usingVeterinaryUUId = usingVeterinaryUUId;\r\n    }\r\n\r\n    public set setTakeCareId(takeCareId: number) {\r\n        this.takeCareId = takeCareId;\r\n    }\r\n\r\n    public set setStorageId(storageId: number) {\r\n        this.storageId = storageId;\r\n    }\r\n\r\n    public set setCausesNSymptoms(causesNSymptoms: string) {\r\n        this.causesNSymptoms = causesNSymptoms;\r\n    }\r\n\r\n    public set setAverageSize(averageSize: number) {\r\n        this.averageSize = averageSize;\r\n    }\r\n\r\n    public set setTotalBiomass(totalBiomass: number) {\r\n        this.totalBiomass = totalBiomass;\r\n    }\r\n\r\n    public set setQuantity(quantity: number) {\r\n        this.quantity = quantity;\r\n    }\r\n\r\n    public set setResult(result: string) {\r\n        this.result = result;\r\n    }\r\n\r\n    public set setLatestHarvestDate(latestHarvestDate: number) {\r\n        this.latestHarvestDate = latestHarvestDate;\r\n    }\r\n\r\n    public set setMentor(mentor: string) {\r\n        this.mentor = mentor;\r\n    }\r\n\r\n    public set setCreatedBy(createdBy: string) {\r\n        this.createdBy = createdBy;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setUsingveterinary(\r\n        usingVeterinaryId: number,\r\n        usingVeterinaryUUId: string,\r\n        takeCareId: number,\r\n        storageId: number,\r\n        causesNSymptoms: string,\r\n        averageSize: number,\r\n        totalBiomass: number,\r\n        quantity: number,\r\n        result: string,\r\n        latestHarvestDate: number,\r\n        mentor: string,\r\n        createdBy?: string,\r\n        createdDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setUsingVeterinaryId = usingVeterinaryId;\r\n        this.setUsingVeterinaryUUId = usingVeterinaryUUId;\r\n        this.setStorageId = storageId;\r\n        this.setTakeCareId = takeCareId;\r\n        this.setCausesNSymptoms = causesNSymptoms;\r\n        this.setAverageSize = averageSize;\r\n        this.setTotalBiomass = totalBiomass;\r\n        this.setQuantity = quantity;\r\n        this.setResult = result;\r\n        this.setLatestHarvestDate = latestHarvestDate;\r\n        this.setMentor = mentor;\r\n        this.setCreatedBy = createdBy;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getUsingVeterinaryId(): number {\r\n        return this.usingVeterinaryId;\r\n    }\r\n\r\n    public get getUsingVeterinaryUUId(): string {\r\n        return this.usingVeterinaryUUId;\r\n    }\r\n\r\n    public get getTakeCareId(): number {\r\n        return this.takeCareId;\r\n    }\r\n\r\n    public get getStorageId(): number {\r\n        return this.storageId;\r\n    }\r\n\r\n    public get getCausesNSymptoms(): string {\r\n        return this.causesNSymptoms;\r\n    }\r\n\r\n    public get getAverageSize(): number {\r\n        return this.averageSize;\r\n    }\r\n\r\n    public get getTotalBiomass(): number {\r\n        return this.totalBiomass;\r\n    }\r\n\r\n    public get getQuantity(): number {\r\n        return this.quantity;\r\n    }\r\n\r\n    public get getResult(): string {\r\n        return this.result;\r\n    }\r\n\r\n    public get getLatestHarvestDate(): number {\r\n        return this.latestHarvestDate;\r\n    }\r\n\r\n    public get getMentor(): string {\r\n        return this.mentor;\r\n    }\r\n\r\n    public get getCreatedBy(): string {\r\n        return this.createdBy;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { WardServices } from '../../services';\r\n\r\nexport class Ward extends BaseComponent {\r\n    public wardServices: WardServices;\r\n    private wardid: string;\r\n    private name: string;\r\n    private type: string;\r\n    private location: string;\r\n    private districtid: string;\r\n\r\n    constructor() {\r\n        super();\r\n        this.wardServices = new WardServices();\r\n    }\r\n\r\n    public set setWardid(wardid: string) {\r\n        this.wardid = wardid;\r\n    }\r\n\r\n    public set setName(name: string) {\r\n        this.name = name;\r\n    }\r\n\r\n    public set setType(type: string) {\r\n        this.type = type;\r\n    }\r\n\r\n    public set setLocation(location: string) {\r\n        this.location = location;\r\n    }\r\n\r\n    public set setDistrictid(districtid: string) {\r\n        this.districtid = districtid;\r\n    }\r\n\r\n    public get getWardid(): string {\r\n        return this.wardid;\r\n    }\r\n\r\n    public get getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    public get getType(): string {\r\n        return this.type;\r\n    }\r\n\r\n    public get getLocation(): string {\r\n        return this.location;\r\n    }\r\n\r\n    public get getDistrictid(): string {\r\n        return this.districtid;\r\n    }\r\n\r\n    getAllWard(): Promise<Ward[]> {\r\n        return  new Promise((resolve, reject) => {\r\n            this.wardServices.getAll().then((res: any[])  => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n\r\n    getDistrictByDistrictId(disId): Promise<Ward[]> {\r\n        return  new Promise((resolve, reject) => {\r\n            this.wardServices.getByDistrictId(disId).then((res: any[])  => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './incurreds';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { IncurredsServices } from '../../services';\r\n\r\nexport class Incurred extends BaseComponent {\r\n    public incurredsServices: IncurredsServices;\r\n    private incurredId: number;\r\n    private incurredUUId: string;\r\n    private pondPrepareId: number;\r\n    private ownerId: number;\r\n    private incurredName: string;\r\n    private value: number;\r\n    private notes: string;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.incurredsServices = new IncurredsServices();\r\n        this.services = this.incurredsServices;\r\n    }\r\n\r\n    public set setIncurredId(incurredId: number) {\r\n        this.incurredId = incurredId;\r\n    }\r\n\r\n    public set setIncurredUUId(incurredUUId: string) {\r\n        this.incurredUUId = incurredUUId;\r\n    }\r\n\r\n    public set setPondPrepareId(pondPrepareId: number) {\r\n        this.pondPrepareId = pondPrepareId;\r\n    }\r\n\r\n    public set setOwnerId(ownerId: number) {\r\n        this.ownerId = ownerId;\r\n    }\r\n\r\n    public set setIncurredName(incurredName: string) {\r\n        this.incurredName = incurredName;\r\n    }\r\n\r\n    public set setValue(value: number) {\r\n        this.value = value;\r\n    }\r\n\r\n    public set setNotes(notes: string) {\r\n        this.notes = notes;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setIncurred(\r\n        incurredId: number,\r\n        incurredUUId: string,\r\n        pondPrepareId: number,\r\n        ownerId: number,\r\n        incurredName: string,\r\n        value: number,\r\n        notes: string,\r\n        createdDate?: Date,\r\n        isDeleted?: number,\r\n    ) {\r\n        this.setIncurredId = incurredId;\r\n        this.setIncurredUUId = incurredUUId;\r\n        this.setPondPrepareId = pondPrepareId;\r\n        this.setOwnerId = ownerId;\r\n        this.setIncurredName = incurredName;\r\n        this.setValue = value;\r\n        this.setNotes = notes;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getIncurredId(): number {\r\n        return this.incurredId;\r\n    }\r\n\r\n    public get getIncurredUUId(): string {\r\n        return this.incurredUUId;\r\n    }\r\n\r\n    public get getPondPrepareId(): number {\r\n        return this.pondPrepareId;\r\n    }\r\n\r\n    public get getOwnerId(): number {\r\n        return this.ownerId;\r\n    }\r\n\r\n    public get getIncurredName(): string {\r\n        return this.incurredName;\r\n    }\r\n\r\n    public get getValue(): number {\r\n        return this.value;\r\n    }\r\n\r\n    public get getNotes(): string {\r\n        return this.notes;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { boughtbreeddetailsOptions } from '../models/objects';\r\n\r\nexport class BoughtBreedDetailsServives extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = boughtbreeddetailsOptions;\r\n    constructor() {\r\n        super(BoughtBreedDetailsServives.optionsModel);\r\n        this.models = this.conn.boughtbreeddetailsModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { boughtbreedOptions } from '../models/objects';\r\n\r\nexport class BoughtBreedServives extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = boughtbreedOptions;\r\n    constructor() {\r\n        super(BoughtBreedServives.optionsModel);\r\n        this.models = this.conn.boughtbreedsModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { breedOptions } from '../models/objects';\r\n\r\nexport class BreedServives extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = breedOptions;\r\n    constructor() {\r\n        super(BreedServives.optionsModel);\r\n        this.models = this.conn.breedsModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { ownerBreedOptions } from '../models/objects';\r\n\r\nexport class BreedOwnwerServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = ownerBreedOptions;\r\n    constructor() {\r\n        super(BreedOwnwerServices.optionsModel);\r\n        this.models = this.conn.breedOwnerModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { costsOptions } from '../models/objects';\r\n\r\nexport class CostsServives extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = costsOptions;\r\n    constructor() {\r\n        super(CostsServives.optionsModel);\r\n        this.models = this.conn.costsModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { couponOptions } from '../models/objects';\r\n\r\nexport class CouponServives extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = couponOptions;\r\n    constructor() {\r\n        super(CouponServives.optionsModel);\r\n        this.models = this.conn.couponModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { diedfisherysOptions } from '../models/objects';\r\n\r\nexport class DiedFisherysServives extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = diedfisherysOptions;\r\n    constructor() {\r\n        super(DiedFisherysServives.optionsModel);\r\n        this.models = this.conn.diedfisherysModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { districtOptions } from '../models/objects';\r\n\r\nexport class DistrictServives extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = districtOptions;\r\n    constructor() {\r\n        super(DistrictServives.optionsModel);\r\n        this.models = this.conn.districtModel;\r\n    }\r\n\r\n    getByProviceId(id): Promise<any[]> {\r\n        return new Promise((resolve, reject) => {\r\n            this.models.findAll({\r\n                where: {\r\n                    provinceid: id\r\n                }\r\n            }).then((res: any) => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { growthOptions } from '../models/objects';\r\n\r\nexport class GrowthsServives extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = growthOptions;\r\n    constructor() {\r\n        super(GrowthsServives.optionsModel);\r\n        this.models = this.conn.growthsModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { harvestdetailOptions } from '../models/objects';\r\n\r\nexport class HarvestDetailsServives extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = harvestdetailOptions;\r\n    constructor() {\r\n        super(HarvestDetailsServives.optionsModel);\r\n        this.models = this.conn.harvestdetailsModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { harvestOptions } from '../models/objects';\r\n\r\nexport class HarvestsServives extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = harvestOptions;\r\n    constructor() {\r\n        super(HarvestsServives.optionsModel);\r\n        this.models = this.conn.harvestModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { materialOptions } from '../models/objects';\r\n\r\nexport class MaterialServives extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = materialOptions;\r\n    constructor() {\r\n        super(MaterialServives.optionsModel);\r\n        this.models = this.conn.materialModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { ponddiaryOptions } from '../models/objects';\r\n\r\nexport class PondDiaryServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = ponddiaryOptions;\r\n    constructor() {\r\n        super(PondDiaryServices.optionsModel);\r\n        this.models = this.conn.ponddiaryModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { pondenvironmentsOptions } from '../models/objects';\r\n\r\nexport class PondEnvironmentsServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = pondenvironmentsOptions;\r\n    constructor() {\r\n        super(PondEnvironmentsServices.optionsModel);\r\n        this.models = this.conn.pondenvironmentsModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { pondpreparedetailOptions } from '../models/objects';\r\n\r\nexport class PondPrepareDetailsServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = pondpreparedetailOptions;\r\n    constructor() {\r\n        super(PondPrepareDetailsServices.optionsModel);\r\n        this.models = this.conn.pondpreparedetailsModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { pondprepareOptions } from '../models/objects';\r\n\r\nexport class PondPrepareServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = pondprepareOptions;\r\n    constructor() {\r\n        super(PondPrepareServices.optionsModel);\r\n        this.models = this.conn.pondprepareModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { pondOptions } from '../models/objects';\r\nimport { UserRolesServices, PondUserRolesServices, UserServives } from './';\r\nimport { ActionAssociateDatabase } from '../common';\r\nimport { Promise } from '../lib';\r\nimport { Sequelize, Transaction } from 'sequelize';\r\nimport DBHelper from '../helpers/db-helpers';\r\nimport { UserRole, PondUserRole } from '../components';\r\n\r\nexport class PondsServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = pondOptions;\r\n    private userRolesServices: UserRolesServices = new UserRolesServices();\r\n    private pondUserRolesServices: PondUserRolesServices = new PondUserRolesServices();\r\n    private userServives: UserServives = new UserServives();\r\n    constructor() {\r\n        super(PondsServices.optionsModel);\r\n        this.models = this.conn.pondsModel;\r\n    }\r\n\r\n    insert(entity: any): Promise<any> {\r\n        const sequeliz: Sequelize = DBHelper.sequelize;\r\n        return new Promise((resolve, reject) => {\r\n            sequeliz.transaction({autocommit: false},(t: Transaction) => {\r\n                return this.models.create(entity.pond);\r\n            }).then((pond: any) => {\r\n                if(pond) {\r\n                    const pondUserRole: PondUserRole = new PondUserRole();\r\n                    pondUserRole.setUserId = entity.userId;\r\n                    pondUserRole.setPondId = pond.pondId;\r\n                    return pondUserRole.pondUserRolesServices.models.create(pondUserRole);\r\n                }\r\n            }).then((roles: any) => {\r\n                if(roles) {\r\n                    resolve(roles);\r\n                }\r\n            }).catch(e => {\r\n                return resolve(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    get(entity: any): Promise<any> {\r\n        const sequeliz: Sequelize = DBHelper.sequelize;\r\n        return new Promise((resolve, reject) => {\r\n            sequeliz.transaction({autocommit: false},(t: Transaction) => {\r\n                return (new UserRole()).userRolesServices.models.findOne({\r\n                    where: {\r\n                        userId: entity.userId,\r\n                        [this.Op.and]: {\r\n                            [this.Op.or]: [\r\n                                {roles: 0},\r\n                                {roles: 1}\r\n                            ]\r\n                        }\r\n                    }\r\n                });\r\n            }).then((roles) => {\r\n                if(roles) {\r\n                    return this.models.findAll({\r\n                        include: [\r\n                            {\r\n                                model: this.pondUserRolesServices.models,\r\n                                as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                                where: {\r\n                                    userId: entity.userId\r\n                                }\r\n                            }\r\n                        ]\r\n                    });\r\n                } else {\r\n                    resolve({\r\n                        success: false,\r\n                        message: 'Bạn không có quyền truy cập API này.'\r\n                    });\r\n                }\r\n            }).then((ponds: any) => {\r\n                if(ponds) {\r\n                    resolve({\r\n                        success: true,\r\n                        ponds\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    getById(pondId: number, userId?: number): Promise<any> {\r\n        const sequeliz: Sequelize = DBHelper.sequelize;\r\n        return new Promise((resolve, reject) => {\r\n            sequeliz.transaction({autocommit: false},(t: Transaction) => {\r\n                return (new UserRole()).userRolesServices.models.findOne({\r\n                    where: {\r\n                        userId,\r\n                        [this.Op.and]: {\r\n                            [this.Op.or]: [\r\n                                {roles: 0},\r\n                                {roles: 1}\r\n                            ]\r\n                        }\r\n                    }\r\n                });\r\n            }).then((roles) => {\r\n                if(roles) {\r\n                    return this.models.findOne({\r\n                        include: [\r\n                            {\r\n                                model: this.pondUserRolesServices.models,\r\n                                as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                                where: {\r\n                                    userId\r\n                                }\r\n                            }\r\n                        ],\r\n                        where: {\r\n                            pondId\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    resolve({\r\n                        success: false,\r\n                        message: 'Bạn không có quyền truy cập API này.'\r\n                    });\r\n                }\r\n            }).then((pond: any) => {\r\n                if(pond) {\r\n                    resolve({\r\n                        success: true,\r\n                        pond\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    getQuery(criteria: any): any {\r\n        return {\r\n            include: [\r\n                {\r\n                    model: (this.models as any).sequelize.models.pondUserRoles,\r\n                    as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                    where: criteria\r\n                }\r\n            ]\r\n        };\r\n    }\r\n\r\n    test = (): Promise<any> => {\r\n        const md = this.models;\r\n        return new Promise((resolve, reject) => {\r\n            const query: any = {\r\n                include: [\r\n                    {\r\n                        model: this.pondUserRolesServices.models,\r\n                        as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                        attributes: ['rolesId', 'pondId'],\r\n                        required: true,\r\n                        include: [\r\n                            {\r\n                                model: this.userRolesServices.models,\r\n                                as: ActionAssociateDatabase.POND_USER_ROLE_2_USER,\r\n                                include: [\r\n                                    {\r\n                                        model: (this.models as any).sequelize.models.users,\r\n                                        as: ActionAssociateDatabase.USER_ROLES_2_USER,\r\n                                        where: {\r\n                                            userId: 103\r\n                                        }\r\n                                    }\r\n                                ],\r\n                                where: {\r\n                                    [this.Op.or]: [\r\n                                        {\r\n                                            roles: 0\r\n                                        },\r\n                                        {\r\n                                            roles: 1\r\n                                        }\r\n                                    ]\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            };\r\n            this.models.findAll(query).then(res => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n\r\n    testAll = (): Promise<any> => {\r\n        return new Promise((resolve, reject) => {\r\n            this.models.findOne({\r\n                order: [\r\n                    ['createdDate', 'DESC']\r\n                ]\r\n            }).then(res => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { pricesOptions } from '../models/objects';\r\n\r\nexport class PricesServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = pricesOptions;\r\n    constructor() {\r\n        super(PricesServices.optionsModel);\r\n        this.models = this.conn.pricesModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { provinceOptions } from '../models/objects';\r\n\r\nexport class ProvinceServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = provinceOptions;\r\n    constructor() {\r\n        super(ProvinceServices.optionsModel);\r\n        this.models = this.conn.provinceModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { ponduserrolesOptions } from '../models/objects';\r\n\r\nexport class PondUserRolesServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = ponduserrolesOptions;\r\n    constructor() {\r\n        super(PondUserRolesServices.optionsModel);\r\n        this.models = this.conn.ponduserrolesModel ;\r\n    }\r\n    testpr = (): Promise<any> => {\r\n        return new Promise((resolve, reject) => {\r\n            const query: any = {\r\n                include: [\r\n                    {\r\n                        model: (this.models as any).sequelize.models.userroles,\r\n                        // as: 'userroles'\r\n                        limit: 1\r\n                    }\r\n                ]\r\n            };\r\n            this.models.findAll(query).then(res => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { seasonOptions } from '../models/objects';\r\nimport { Promise } from '../lib';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport class SeasonServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = seasonOptions;\r\n    constructor() {\r\n        super(SeasonServices.optionsModel);\r\n        this.models = this.conn.seasonModel;\r\n    }\r\n\r\n    // getAll(options: any, criteria: any): Promise<any[]> {\r\n    //     return new Promise((resolve,reject) => {\r\n    //         const where: any = {\r\n    //             userId: criteria.userId\r\n    //         };\r\n    //         const query: any = { ...options, where };\r\n    //         this.models.findAll(query).then(res => {\r\n    //             resolve(res);\r\n    //         });\r\n    //     });\r\n    // }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { stockingdetailOptions } from '../models/objects';\r\n\r\nexport class StockingDetailsServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = stockingdetailOptions;\r\n    constructor() {\r\n        super(StockingDetailsServices.optionsModel);\r\n        this.models = this.conn.stockingdetailsModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { stockingOptions } from '../models/objects';\r\n\r\nexport class StockingServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = stockingOptions;\r\n    constructor() {\r\n        super(StockingServices.optionsModel);\r\n        this.models = this.conn.stockingModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { storagesOptions } from '../models/objects';\r\n\r\nexport class StoregeServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = storagesOptions;\r\n    constructor() {\r\n        super(StoregeServices.optionsModel);\r\n        this.models = this.conn.storagesModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { storageOwnerOptions } from '../models/objects';\r\n\r\nexport class StoregeOwnwerServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = storageOwnerOptions;\r\n    constructor() {\r\n        super(StoregeOwnwerServices.optionsModel);\r\n        this.models = this.conn.ownerStoragesModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { takecareOptions } from '../models/objects';\r\n\r\nexport class TakeCareServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = takecareOptions;\r\n    constructor() {\r\n        super(TakeCareServices.optionsModel);\r\n        this.models = this.conn.takecareModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { userrolesOptions } from '../models/objects';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport class UserRolesServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = userrolesOptions;\r\n    constructor() {\r\n        super(UserRolesServices.optionsModel);\r\n        this.models = this.conn.userRolesModel;\r\n    }\r\n\r\n    testUserAssociate = (): Promise<any> => {\r\n        return new Promise((resolve, reject) => {\r\n            const query: any = {\r\n                include: [\r\n                    {\r\n                        model: (this.models as any).sequelize.models.users,\r\n                        as: ActionAssociateDatabase.USER_ROLES_2_USER\r\n                    }\r\n                ]\r\n            };\r\n            this.models.findAll(query).then(res => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n\r\n    getQuery(criteria: any): any {\r\n        return {\r\n            where: criteria\r\n        };\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { usingfoodOptions } from '../models/objects';\r\n\r\nexport class UsingFoodsServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = usingfoodOptions;\r\n    constructor(\r\n    ) {\r\n        super(UsingFoodsServices.optionsModel);\r\n        this.models = this.conn.usingfoodsModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { usingveterinaryOptions } from '../models/objects';\r\n\r\nexport class UsingVeterinaryServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = usingveterinaryOptions;\r\n    constructor() {\r\n        super(UsingVeterinaryServices.optionsModel);\r\n        this.models = this.conn.usingVeterinaryModel;\r\n\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { wardOptions } from '../models/objects';\r\nimport { Promise } from '../lib';\r\n\r\nexport class WardServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = wardOptions;\r\n    constructor() {\r\n        super(WardServices.optionsModel);\r\n        this.models = this.conn.wardModel;\r\n    }\r\n\r\n    getAll(): Promise<any[]> {\r\n        return new Promise((resolve, reject) => {\r\n            this.models.findAll({\r\n                offset: 0,\r\n                limit: 50\r\n            }).then((obj: any) => {\r\n                resolve(obj);\r\n            });\r\n        });\r\n    }\r\n\r\n    getByDistrictId(id): Promise<any[]> {\r\n        return new Promise((resolve, reject) => {\r\n            this.models.findAll({\r\n                where: {\r\n                    districtid: id\r\n                }\r\n            }).then((obj: any) => {\r\n                resolve(obj);\r\n            });\r\n        });\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { seasonAndPondOptions } from '../models/objects';\r\n\r\nexport class SeasonAndPondServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = seasonAndPondOptions;\r\n    constructor() {\r\n        super(SeasonAndPondServices.optionsModel);\r\n        this.models = this.conn.seasonAndPondModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { incurredsOptions } from '../models/objects';\r\n\r\nexport class IncurredsServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = incurredsOptions;\r\n    constructor() {\r\n        super(IncurredsServices.optionsModel);\r\n        this.models = this.conn.incurredModel;\r\n    }\r\n}\r\n","// Unique ID creation requires a high quality random # generator.  In node.js\n// this is pretty straight-forward - we use the crypto API.\n\nvar crypto = require('crypto');\n\nmodule.exports = function nodeRNG() {\n  return crypto.randomBytes(16);\n};\n","module.exports = require(\"crypto\");","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([bth[buf[i++]], bth[buf[i++]], \n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]]]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","export * from './upload.route';\r\n","import { NextFunction, Request, Response } from 'express';\r\nimport { logger } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { GoogleDrive } from '../../googleAPI/drive.google';\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class UploadRoute extends BaseRoute {\r\n    public static path = '/uploads';\r\n    private static instance: UploadRoute;\r\n    /**\r\n     * @class UploadRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!UploadRoute.instance) {\r\n            UploadRoute.instance = new UploadRoute();\r\n        }\r\n        return UploadRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[UploadRoute] Creating upload route.');\r\n\r\n        // add route\r\n        this.router.post('/image', GoogleDrive.upload);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, UploadRoute.path);\r\n    }\r\n}\r\n","export * from './getFile.route';\r\n","import { logger } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { GoogleDrive } from '../../googleAPI/drive.google';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class GetFileRoute extends BaseRoute {\r\n    public static path = '/getFile';\r\n    private static instance: GetFileRoute;\r\n    /**\r\n     * @class GetFileRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!GetFileRoute.instance) {\r\n            GetFileRoute.instance = new GetFileRoute();\r\n        }\r\n        return GetFileRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[GetFileRoute] Creating get file route.');\r\n\r\n        // add route\r\n        this.router.get('/image/:fileId', GoogleDrive.getFile);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, GetFileRoute.path);\r\n    }\r\n}\r\n","export * from './province.route';\r\n","import { Request, Response } from 'express';\r\nimport { logger } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { Province } from '../../components/province';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class ProvinceRoute extends BaseRoute {\r\n    public static path = '/province';\r\n    private static instance: ProvinceRoute;\r\n    /**\r\n     * @class ProvinceRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!ProvinceRoute.instance) {\r\n            ProvinceRoute.instance = new ProvinceRoute();\r\n        }\r\n        return ProvinceRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[ProvinceRoute] Creating province route.');\r\n\r\n        // add route\r\n        this.router.get('/', this.getAllProvince);\r\n\r\n        // log endpoint\r\n        this.logEndpoints(this.router, ProvinceRoute.path);\r\n    }\r\n\r\n    private getAllProvince = async (request: Request, response: Response) => {\r\n        const province = new Province();\r\n        province.getAllProvince().then((res: any[]) => {\r\n            response.status(200).json(res);\r\n        });\r\n    }\r\n}\r\n","export * from './district.route';\r\n","import { Request, Response } from 'express';\r\nimport { logger } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { District } from '../../components/district';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class DistrictRoute extends BaseRoute {\r\n    public static path = '/district';\r\n    private static instance: DistrictRoute;\r\n    /**\r\n     * @class DistrictRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!DistrictRoute.instance) {\r\n            DistrictRoute.instance = new DistrictRoute();\r\n        }\r\n        return DistrictRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[DistrictRoute] Creating district route.');\r\n\r\n        // add route\r\n        this.router.get('/', this.getAllDistrict);\r\n\r\n        // log enpoint\r\n        this.logEndpoints(this.router, DistrictRoute.path);\r\n    }\r\n\r\n    private getAllDistrict = async (request: Request, response: Response) => {\r\n        const district = new District();\r\n        if (!request.headers.provinceid) {\r\n            district.getAllDistrict().then((res: any[]) => {\r\n                response.status(200).json(res);\r\n            });\r\n        } else {\r\n            district.getDistrictByProvinceId(request.headers.provinceid).then((res: any[]) => {\r\n                response.status(200).json(res);\r\n            });\r\n        }\r\n    }\r\n}\r\n","export * from './ward.route';\r\n","import { Request, Response } from 'express';\r\nimport { logger } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { Ward } from '../../components/ward';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class WardRoute extends BaseRoute {\r\n    public static path = '/ward';\r\n    private static instance: WardRoute;\r\n    /**\r\n     * @class WardRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!WardRoute.instance) {\r\n            WardRoute.instance = new WardRoute();\r\n        }\r\n        return WardRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[WardRoute] Creating ward route.');\r\n\r\n        // add route\r\n        this.router.get('/', this.getAllWard);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, WardRoute.path);\r\n    }\r\n\r\n    private getAllWard = async (request: Request, response: Response) => {\r\n        const ward = new Ward();\r\n        if (!request.headers.districtid) {\r\n            ward.getAllWard().then((res: any[]) => {\r\n                response.status(200).json(res);\r\n            });\r\n        } else {\r\n            ward.getDistrictByDistrictId(request.headers.districtid).then((res: any[]) => {\r\n                response.status(200).json(res);\r\n            });\r\n        }\r\n    }\r\n}\r\n","export * from './ponds.route';\r\n","import { Pond } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, UserServives, UserRolesServices, PondUserRolesServices, SeasonServices, PondsServices, SeasonAndPondServices } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { defaultImage, ActionAssociateDatabase } from '../../common';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { GoogleDrive } from '../../googleAPI/drive.google';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { Transaction, FindOptions } from 'sequelize';\r\nimport { addPondSchema } from '../../schemas';\r\nimport { DateUtil } from '../../lib';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class PondRoute extends BaseRoute {\r\n    public static path = '/ponds';\r\n    private static instance: PondRoute;\r\n    private userServives: UserServives = new UserServives();\r\n    private userRolesServices: UserRolesServices = new UserRolesServices();\r\n    private pondUserRolesServices: PondUserRolesServices = new PondUserRolesServices();\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private pondsServices: PondsServices = new PondsServices();\r\n    private seasonAndPondServices: SeasonAndPondServices = new SeasonAndPondServices();\r\n\r\n    /**\r\n     * @class PondRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!PondRoute.instance) {\r\n            PondRoute.instance = new PondRoute();\r\n        }\r\n        return PondRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[PondRoute] Creating pond route.');\r\n\r\n        // add route\r\n        this.router.get('/gets', Authentication.isLogin, this.getPonds); // get ponds\r\n        this.router.get('/get/:pondUUId', Authentication.isLogin, this.getPondByPondUUId);  // get với UUID\r\n        // this.router.get('/gets/withoutImage', Authentication.isLogin, this.getPondWithoutImages); // get all kèm với quyền - không hình [bỏ]\r\n        // this.router.get('/gets/employees', Authentication.isLogin, this.getEmployeePondRoles); // get nhân viên theo ao [không sử dụng]\r\n        // this.router.get('/gets/advanced', Authentication.isLogin, this.getPondAdvanceds); // [gộp vào gets]\r\n        // this.router.get('/gets/season/:seasonUUId', Authentication.isLogin, this.getPondBySeasonUUId); // get ao theo vụ nuôi với seasonUUId\r\n        this.router.get('/gets/boss', Authentication.isLogin, this.getPondOfBoss);\r\n        this.router.post('/add', Authentication.isLogin, this.addPond); // Thêm ao\r\n        // this.router.post('/gets/seasonUUId', Authentication.isLogin, this.getPostPondBySeasonUUId); // get ao theo vụ nuôi [nên đổi về phương thức get]\r\n        // this.router.post('/count', Authentication.isLogin, this.countPond); // đếm ao của user - [tích hwjp vào gets]\r\n        // this.router.post('/seasons/count', Authentication.isLogin, this.countSeasonWithPond); // nên tích hợp vào get pond\r\n        this.router.post('/get/notin/seasonAndPond', Authentication.isLogin, this.getPondNotInSeasonAndPond); // get số ao không có trong vụ [to GET]\r\n        this.router.post('/gets/ownerSeason/WithImage', Authentication.isLogin, this.getPondByOwnerSeasonWithImage); // /** Xem xét */get ao của người dùng hiện tại có hình ảnh\r\n        this.router.post('/gets/notEmployee', Authentication.isLogin, this.getPondWithUserNotManage); // Xem xét\r\n        this.router.post('/gets/not/manage', Authentication.isLogin, this.getPondWithoutManager); // Xem xét\r\n        this.router.put('/update', Authentication.isLogin, this.updatePondWithUUId); // Cập nhật [Ok]\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, PondRoute.path);\r\n    }\r\n\r\n    private addPond = async (request: any, response: Response, next: NextFunction) => {\r\n        const validate: any = this.validator(addPondSchema);\r\n        const dataCheck: any = {\r\n            pondName: request.body.pondName,\r\n            createCost: request.body.createCost - 0,\r\n            pondArea: request.body.pondArea - 0,\r\n            pondCreatedDate: new Date(request.body.pondCreatedDate).toJSON(),\r\n            pondDepth: request.body.pondDepth - 0,\r\n            pondLatitude: (request.body.pondLatitude - 0) || null,\r\n            pondLongitude: (request.body.pondLongitude - 0) || null,\r\n            status: request.body.status - 0\r\n        };\r\n        const validater: boolean = validate(dataCheck);\r\n        if(validater) {\r\n            const pond: Pond = new Pond();\r\n            const token: string = request.headers.authorization.split(' ')[1];\r\n            const deToken: any = Authentication.detoken(token);\r\n            const { pondName, pondCreatedDate, pondArea, pondDepth, createCost, pondLatitude, pondLongitude, status } = request.body;\r\n            if(pondCreatedDate > DateUtil.getNow()) {\r\n                return response.status(200).json({\r\n                    success: false,\r\n                    message: 'Ngày tạo ao không thể lớn hơn ngày hiện tại.'\r\n                });\r\n            } else {\r\n                if (request.files) {\r\n                    GoogleDrive.upload(request, response, next).then((data: any) => {\r\n                        if (data.fileId) {\r\n                            pond.setPond(null, uuidv4(), deToken.userId, pondName, pondArea, pondDepth, createCost, pondCreatedDate, status, status === 1 ? 1 : 0, status === 1 ? 1 : 0, data.fileId, pondLatitude !== '' ? pondLatitude : undefined, pondLongitude !== '' ? pondLongitude : undefined);\r\n                            pond.pondsServices.models.create(pond).then((pond$: Pond) => {\r\n                                response.status(200).json({\r\n                                    success: true,\r\n                                    message: 'Thêm ao mới thành công.'\r\n                                });\r\n                            }).catch(e => {\r\n                                response.status(200).json({\r\n                                    success: false,\r\n                                    message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n                                });\r\n                            });\r\n                        } else {\r\n                            response.status(200).json({\r\n                                success: false,\r\n                                message: 'Đã có lỗi xảy ra, xin vui lòng thử lại!'\r\n                            });\r\n                        }\r\n                    });\r\n                } else {\r\n                    pond.setPond(null, uuidv4(), deToken.userId, pondName, pondArea, pondDepth, createCost, pondCreatedDate, status, status === 1 ? 1 : 0, status === 1 ? 1 : 0, defaultImage.pondImage, pondLatitude !== '' ? pondLatitude : undefined, pondLongitude !== '' ? pondLongitude : undefined);\r\n                    pond.pondsServices.models.create(pond).then((pond$: Pond) => {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: 'Thêm ao mới thành công.'\r\n                        });\r\n                    }).catch(e => {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n        } else {\r\n            validate.error;\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Dữ liệu cung cấp không phù hợp, vui lòng kiếm tra và thử lại sau.'\r\n            });\r\n        }\r\n    }\r\n\r\n    private getEmployeePondRoles = async (request: Request, response: Response, next: NextFunction) => {\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const decodetoken: any = Authentication.detoken(token);\r\n        this.userRolesServices.models.findAll({\r\n            where: {\r\n                bossId: decodetoken.userId,\r\n                [this.userRolesServices.Op.and]: {\r\n                    roles: 1\r\n                }\r\n            },\r\n            include: [\r\n                {\r\n                    model: this.userServives.models,\r\n                    as: ActionAssociateDatabase.USER_ROLES_2_USER,\r\n                    attributes: ['userId', 'userUUId', 'lastname', 'firstname', 'username', 'createdDate', 'createdBy']\r\n                }\r\n            ]\r\n        })\r\n            .then(async (employees: any[]) => {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    employees\r\n                });\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi không mong muốn, vui lòng thử lại.'\r\n                });\r\n                throw e;\r\n            });\r\n    }\r\n\r\n    private getPonds = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonUUId, status, seasonId, all } = request.query;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        const seasonPresent: any = await this.seasonServices.models.findOne({\r\n            where: {\r\n                [this.sequeliz.Op.or]: [\r\n                    {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    },\r\n                    {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    }\r\n                ]\r\n            } as any\r\n        });\r\n        let query: FindOptions<any> = {};\r\n        if(((seasonPresent ? !!Object.keys(seasonPresent).length : false) && (seasonPresent.seasonId === seasonId || seasonPresent.seasonUUId === seasonUUId)) || Boolean(all) === true) {\r\n            query = {\r\n                include: [\r\n                    {\r\n                        model: this.userServives.models,\r\n                        as: ActionAssociateDatabase.POND_2_EMPLOYEE_MAYNY_ROLES,\r\n                        required: false,\r\n                        attributes: ['userId', 'username', 'firstname', 'lastname', 'userUUId']\r\n                    },\r\n                    {\r\n                        model: this.pondUserRolesServices.models,\r\n                        as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                        required: false,\r\n                        attributes: []\r\n                    },\r\n                    {\r\n                        model: this.seasonServices.models,\r\n                        as: ActionAssociateDatabase.POND_2_SEASON,\r\n                        required: (!!seasonUUId || !!seasonId),\r\n                        where: {\r\n                            userId: ownerId,\r\n                            status: 0\r\n                        },\r\n                        attributes: []\r\n                    },\r\n                    {\r\n                        model: this.seasonAndPondServices.models,\r\n                        as: ActionAssociateDatabase.POND_2_SEASON_AND_POND,\r\n                        required: false\r\n                    }\r\n                ],\r\n                where: {\r\n                    [this.sequeliz.Op.or]: [\r\n                        {\r\n                            userId: deToken.userId\r\n                        },\r\n                        {\r\n                            '$ponduserroles.userId$': deToken.userId\r\n                        }\r\n                    ]\r\n                } as any\r\n            };\r\n            if(!!seasonUUId) {\r\n                if(!isBoss) {\r\n                    return response.status(200).json({\r\n                        success: false,\r\n                        message: 'Bạn không có quyền thao tác này!'\r\n                    });\r\n                }\r\n                query = {\r\n                    include: [\r\n                        {\r\n                            model: this.userServives.models,\r\n                            as: ActionAssociateDatabase.POND_2_EMPLOYEE_MAYNY_ROLES,\r\n                            required: false,\r\n                            attributes: ['userId', 'username', 'firstname', 'lastname', 'userUUId']\r\n                        },\r\n                        {\r\n                            model: this.pondUserRolesServices.models,\r\n                            as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                            required: false,\r\n                            attributes: []\r\n                        },\r\n                        {\r\n                            model: this.seasonServices.models,\r\n                            as: ActionAssociateDatabase.POND_2_SEASON,\r\n                            where: {\r\n                                seasonUUId,\r\n                                userId: ownerId\r\n                            },\r\n                            attributes: []\r\n                        },\r\n                        {\r\n                            model: this.seasonAndPondServices.models,\r\n                            as: ActionAssociateDatabase.POND_2_SEASON_AND_POND,\r\n                            required: false\r\n                        }\r\n                    ],\r\n                    where: {\r\n                        [this.sequeliz.Op.or]: [\r\n                            {\r\n                                userId: deToken.userId\r\n                            },\r\n                            {\r\n                                '$ponduserroles.userId$': deToken.userId\r\n                            }\r\n                        ]\r\n                    } as any\r\n                };\r\n            }\r\n            if(!!seasonId) {\r\n                if(!isBoss) {\r\n                    return response.status(200).json({\r\n                        success: false,\r\n                        message: 'Bạn không có quyền thao tác này!'\r\n                    });\r\n                }\r\n                query = {\r\n                    include: [\r\n                        {\r\n                            model: this.userServives.models,\r\n                            as: ActionAssociateDatabase.POND_2_EMPLOYEE_MAYNY_ROLES,\r\n                            required: false,\r\n                            attributes: ['userId', 'username', 'firstname', 'lastname', 'userUUId']\r\n                        },\r\n                        {\r\n                            model: this.pondUserRolesServices.models,\r\n                            as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                            required: false,\r\n                            attributes: []\r\n                        },\r\n                        {\r\n                            model: this.seasonServices.models,\r\n                            as: ActionAssociateDatabase.POND_2_SEASON,\r\n                            where: {\r\n                                seasonId,\r\n                                userId: ownerId\r\n                            },\r\n                            attributes: []\r\n                        },\r\n                        {\r\n                            model: this.seasonAndPondServices.models,\r\n                            as: ActionAssociateDatabase.POND_2_SEASON_AND_POND,\r\n                            required: false\r\n                        }\r\n                    ],\r\n                    where: {\r\n                        [this.sequeliz.Op.or]: [\r\n                            {\r\n                                userId: deToken.userId\r\n                            },\r\n                            {\r\n                                '$ponduserroles.userId$': deToken.userId\r\n                            }\r\n                        ]\r\n                    } as any\r\n                };\r\n            }\r\n            if(!!status) {\r\n                if(status.includes('notnull')) /** Ao đang nuôi + đang nâng cấp */ {\r\n                    const notIn: any = {\r\n                        status: {\r\n                            [this.sequeliz.Op.notIn]: [0]\r\n                        }\r\n                    };\r\n                    query.where = {\r\n                        ...query.where,\r\n                        ...notIn\r\n                    };\r\n                } else if(status.includes('forPrepare')) /** Ao trống + đang nâng cấp */ {\r\n                    const condition: any = {\r\n                        status: {\r\n                            [this.sequeliz.Op.notIn]: [1]\r\n                        }\r\n                    };\r\n                    query.where = {\r\n                        ...query.where,\r\n                        ... condition\r\n                    };\r\n                } else if(status.includes('forStocking')) /** Ao trống + đang nuôi */ {\r\n                    const condition: any = {\r\n                        status: {\r\n                            [this.sequeliz.Op.notIn]: [2]\r\n                        }\r\n                    };\r\n                    query.where = {\r\n                        ...query.where,\r\n                        ... condition\r\n                    };\r\n                } else /** theo status gui len */ {\r\n                    query.where = {\r\n                        ...query.where,\r\n                        status: status as any - 0\r\n                    };\r\n                }\r\n            }\r\n        } else {\r\n            query = {\r\n                include: [\r\n                    {\r\n                        model: this.seasonAndPondServices.models,\r\n                        as: ActionAssociateDatabase.POND_2_SEASON_AND_POND,\r\n                        include: [\r\n                            {\r\n                                model: this.seasonServices.models,\r\n                                as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                                where: {\r\n                                    [this.sequeliz.Op.or]: [\r\n                                        {\r\n                                            seasonUUId\r\n                                        },\r\n                                        {\r\n                                            seasonId\r\n                                        }\r\n                                    ]\r\n                                }\r\n                            }\r\n                        ]\r\n                    },\r\n                    {\r\n                        model: this.pondUserRolesServices.models,\r\n                        as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                        required: false,\r\n                        attributes: []\r\n                    },\r\n                    {\r\n                        model: this.userServives.models,\r\n                        as: ActionAssociateDatabase.POND_2_EMPLOYEE_MAYNY_ROLES,\r\n                        required: false\r\n                    }\r\n                ],\r\n                where: {\r\n                    [this.sequeliz.Op.or]: [\r\n                        {\r\n                            userId: deToken.userId\r\n                        },\r\n                        {\r\n                            '$ponduserroles.userId$': deToken.userId\r\n                        }\r\n                    ]\r\n                } as any\r\n            };\r\n        }\r\n        this.pondsServices.models.findAll(query).then(async (res: any) => {\r\n            if(!Object.keys(res).length) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy ao.',\r\n                    ponds: []\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    ponds: res\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xãy ra, xin vui lòng thử lại!'\r\n            });\r\n        });\r\n    }\r\n\r\n    private getPondOfBoss = async (request: Request, response: Response, next: NextFunction) => {\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n\r\n        if (!isBoss) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Dừng lại! Truy cập là trái phép.'\r\n            });\r\n        } else {\r\n            this.pondsServices.models.findAll({\r\n                where: {\r\n                    userId\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n                });\r\n            }).then((res: any) => {\r\n                if (!res.length) {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Bạn không có ao nào trong hệ thống'\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: '',\r\n                        ponds: res\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private getPondWithoutImages = async (request: Request, response: Response, next: NextFunction) => {\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const pond: Pond = new Pond();\r\n        pond.pondsServices.models.findAll(({\r\n            include: [\r\n                {\r\n                    model: this.userServives.models,\r\n                    as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                    required: false,\r\n                    // attributes: ['userId', 'username', 'firstname', 'lastname', 'userUUId']\r\n                },\r\n                {\r\n                    model: this.pondUserRolesServices.models,\r\n                    as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                    required: false,\r\n                    attributes: []\r\n                }\r\n            ],\r\n            where: {\r\n                [this.sequeliz.Op.or]: [\r\n                    {\r\n                        userId: deToken.userId\r\n                    },\r\n                    {\r\n                        '$ponduserroles.userId$': deToken.userId\r\n                    }\r\n                ]\r\n            }\r\n        } as any)).then(async (res: any) => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                ponds: res\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xãy ra, xin vui lòng thử lại!',\r\n                e\r\n            });\r\n        });\r\n    }\r\n\r\n    private getPondNotInSeasonAndPond = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonUUId } = request.body;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            let ponds: any = await this.seasonAndPondServices.models.findAll({\r\n                include: [\r\n                    {\r\n                        model: this.seasonServices.models,\r\n                        as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                        where: {\r\n                            seasonUUId,\r\n                            userId: ownerId\r\n                        },\r\n                        attributes: []\r\n                    }\r\n                ],\r\n                attributes: ['pondId'],\r\n                transaction: t\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Lỗi đường truyền, vui lòng thử lại sau.'\r\n                });\r\n                return t.rollback();\r\n            });\r\n            if (ponds.length) {\r\n                ponds = ponds.map(element => {\r\n                    return element.pondId;\r\n                });\r\n                const p: any = await this.pondsServices.models.findAll({\r\n                    where: {\r\n                        pondId: {\r\n                            [this.sequeliz.Op.notIn]: ponds\r\n                        },\r\n                        userId: ownerId\r\n                    },\r\n                    transaction: t\r\n                }).catch(e => {\r\n                    e;\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Lỗi đường truyền, vui lòng thử lại sau.'\r\n                    });\r\n                    t.rollback();\r\n                });\r\n                if (!p) {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Không tìm thấy ao.'\r\n                    });\r\n                    t.rollback();\r\n                } else {\r\n                    t.commit();\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: '',\r\n                        ponds: p\r\n                    });\r\n                }\r\n            } else {\r\n                const p: any = await this.pondsServices.models.findAll({\r\n                    where: {\r\n                        userId: ownerId\r\n                    },\r\n                    transaction: t\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Lỗi đường truyền, vui lòng thử lại sau.'\r\n                    });\r\n                    t.rollback();\r\n                });\r\n                if (!p) {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Không tìm thấy ao.'\r\n                    });\r\n                    t.rollback();\r\n                } else {\r\n                    t.commit();\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: '',\r\n                        ponds: p\r\n                    });\r\n                }\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi đường truyền, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private getPondByPondUUId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const pond: Pond = new Pond();\r\n        const { pondUUId } = request.params;\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const decodetoken: any = Authentication.detoken(token);\r\n        const query: any = {\r\n            include: [\r\n                {\r\n                    model: this.pondUserRolesServices.models,\r\n                    as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                    required: false,\r\n                    include: [\r\n                        {\r\n                            model: this.userServives.models,\r\n                            as: ActionAssociateDatabase.POND_USER_ROLE_2_USER,\r\n                            attributes: ['userId', 'userUUId', 'lastname', 'firstname', 'username', 'createdDate', 'createdBy']\r\n                        }\r\n                    ]\r\n                }\r\n            ],\r\n            where: {\r\n                pondUUId,\r\n                [pond.pondsServices.Op.and]: {\r\n                    [this.sequeliz.Op.or]: [\r\n                        {\r\n                            userId: decodetoken.userId\r\n                        },\r\n                        {\r\n                            '$ponduserroles.userId$': decodetoken.userId\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        };\r\n        pond.pondsServices.models.findOne(query).then((pond$: any) => {\r\n            if (pond$) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    pond: pond$.dataValues\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Bạn không có quyền truy cập'\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private updatePondWithUUId = async (request: any, response: Response, next: NextFunction) => {\r\n        const pond: Pond = new Pond();\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        if (!isBoss) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Dừng lại! Truy cập là trái phép.'\r\n            });\r\n        }\r\n        const { pondUUId, pondName, pondCreatedDate, pondArea, pondDepth, createCost, pondLatitude, pondLongitude, status, isFed, isDiary } = request.body;\r\n        if (!pondUUId) {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Hành động không được phép, vui lòng thử lại sau!'\r\n            });\r\n        } else {\r\n            if (request.files) {\r\n                GoogleDrive.upload(request, response, next).then((data: any) => {\r\n                    if (data.fileId) {\r\n                        pond.setPond(null, uuidv4(), deToken.userId, pondName, pondArea, pondDepth, createCost, pondCreatedDate, status, status === 1 ? 1 : 0, status === 1 ? 1 : 0, data.fileId, pondLatitude !== '' ? pondLatitude : undefined, pondLongitude !== '' ? pondLongitude : undefined);\r\n                        pond.pondsServices.models.update({\r\n                            pondName, pondCreatedDate, pondArea, pondDepth, createCost, images:\r\n                                data.fileId, pondLatitude, pondLongitude, status, isFed, isDiary\r\n                        }, {\r\n                                where: {\r\n                                    pondUUId\r\n                                },\r\n                                returning: true\r\n                            }).then((pond$: any) => {\r\n                                response.status(200).json({\r\n                                    success: true,\r\n                                    message: 'Cập nhật thành công.'\r\n                                });\r\n                            }).catch(e => {\r\n                                response.status(200).json({\r\n                                    success: false,\r\n                                    message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n                                });\r\n                            });\r\n                    } else {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Đã có lỗi xảy ra, xin vui lòng thử lại!'\r\n                        });\r\n                    }\r\n                });\r\n            } else {\r\n                pond.pondsServices.models.update({\r\n                    pondName, pondCreatedDate, pondArea, pondDepth, createCost, pondLatitude, pondLongitude, status, isFed\r\n                }, {\r\n                        where: {\r\n                            pondUUId\r\n                        }\r\n                    }).then((pond$: any) => {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: 'Cập nhật thành công.'\r\n                        });\r\n                    }).catch(e => {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n                        });\r\n                    });\r\n            }\r\n        }\r\n    }\r\n\r\n    private getPondBySeasonUUId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonUUId } = request.params;\r\n        const pond: Pond = new Pond();\r\n        pond.pondsServices.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.POND_2_SEASON,\r\n                    where: {\r\n                        seasonUUId\r\n                    },\r\n                    attributes: []\r\n                }\r\n            ]\r\n        }).then((ponds: any) => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                ponds\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: '',\r\n                e\r\n            });\r\n        });\r\n    }\r\n\r\n    private getPostPondBySeasonUUId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonUUId, ownerId } = request.body;\r\n        const pond: Pond = new Pond();\r\n        pond.pondsServices.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.POND_2_SEASON,\r\n                    where: {\r\n                        seasonUUId\r\n                    },\r\n                    attributes: []\r\n                }\r\n            ],\r\n            where: {\r\n                userId: ownerId\r\n            }\r\n        }).then((ponds: any) => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                ponds\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: '',\r\n                e\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get ao các ao của vụ hiện tại\r\n     * có check status\r\n     */\r\n    private getPondByOwnerSeason = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { status } = request.body;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        const query: any = {\r\n            include: [\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    },\r\n                    attributes: []\r\n                },\r\n                {\r\n                    model: this.seasonAndPondServices.models,\r\n                    as: ActionAssociateDatabase.POND_2_SEASON_AND_POND,\r\n                    attributes: []\r\n                }\r\n            ],\r\n            where: {\r\n                userId: ownerId\r\n            }\r\n        };\r\n        if (status) {\r\n            const where: any = {\r\n                status\r\n            };\r\n            query.where = {\r\n                ...query.where,\r\n                ...where\r\n            };\r\n        }\r\n        this.pondsServices.models.findAll(query).then(res => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                ponds: res\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi đường truyền, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private getPondByOwnerSeasonWithImage = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { ownerId, status } = request.body;\r\n        const query: any = {\r\n            include: [\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    },\r\n                    attributes: []\r\n                },\r\n                {\r\n                    model: this.seasonAndPondServices.models,\r\n                    as: ActionAssociateDatabase.POND_2_SEASON_AND_POND,\r\n                    attributes: []\r\n                }\r\n            ],\r\n            where: {\r\n                userId: ownerId\r\n            }\r\n        };\r\n        if (status) {\r\n            const where: any = {\r\n                status\r\n            };\r\n            query.where = {\r\n                ...query.where,\r\n                ...where\r\n            };\r\n        }\r\n        this.pondsServices.models.findAll(query).then(async (res: any[]) => {\r\n            if (res.length > 0) {\r\n                const endData = [];\r\n                for (const e of res) {\r\n                    e[`images`] = await GoogleDrive.delayGetFileById(e.images);\r\n                    endData.push(e);\r\n                }\r\n                response.status(200).json({\r\n                    success: true,\r\n                    ponds: endData\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    ponds: []\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            e;\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xãy ra, xin vui lòng thử lại!'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get ao mà người dùng đó không có quyền - sử dụng cho chức năng phân quyền ao\r\n     * Get theo pondUserRolesId\r\n     * @method POST\r\n     */\r\n    private getPondWithoutManager = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { employeeId } = request.body;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        if (!isBoss) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Dừng lại! Truy cập là trái phép.'\r\n            });\r\n        } else {\r\n            if (employeeId) {\r\n                const pondByManage: any = await this.pondUserRolesServices.models.findAll({\r\n                    where: {\r\n                        userId: employeeId\r\n                    }\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Có lỗi xảy ra, vui lòng thử lại sau.'\r\n                    });\r\n                });\r\n                const query: FindOptions<any> = {\r\n                    include: [],\r\n                    where: {}\r\n                };\r\n                if (pondByManage.length) {\r\n                    query.where = {\r\n                        userId,\r\n                        [this.sequeliz.Op.notIn]: pondByManage\r\n                    };\r\n                } else {\r\n                    query.where = {\r\n                        userId,\r\n                    };\r\n                }\r\n                this.pondsServices.models.findAll(query).then(async (res: any[]) => {\r\n                    if (!res.length) {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: 'Không tìm thấy ao.',\r\n                            ponds: []\r\n                        });\r\n                    } else {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: '',\r\n                            ponds: res\r\n                        });\r\n                    }\r\n                }).catch(e => {\r\n                    e;\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã có lỗi xảy ra.'\r\n                    });\r\n                });\r\n            } else {\r\n                return response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra.'\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Đếm tổng số ao của người dùng\r\n     */\r\n    private countPond = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondOwner } = request.body;\r\n        const pond: Pond = new Pond();\r\n        pond.pondsServices.models.findAndCountAll({\r\n            where: {\r\n                userId: pondOwner\r\n            }\r\n        }).then(res => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                pondsQuantity: res.count\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @method GET\r\n     * Hàm lấy danh sách ao của người dùng đang đăng nhập\r\n     * request - token\r\n     * option - image: boolean get ao kèm thêm hình\r\n     * option - isnull: boolean get ao trống\r\n     * option - isnotnull: boolean get ao đang nuôi thả\r\n     * option - isupgrade: boolean get ao đang nâng cấp\r\n     * option - seasonid: string|number get ao theo vụ chỉ định\r\n     */\r\n    private getPondAdvanceds = async (request: Request, response: Response, next: NextFunction) => {\r\n        // flagged\r\n        const { image, isnull, isnotnull, isupgrade, seasonid, notRoles, userid, seasonuuid } = request.headers;\r\n\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        // init query\r\n        const query: FindOptions<any> = {\r\n            include: [],\r\n            where: {}\r\n        };\r\n        if (!isBoss) {\r\n            // vụ mặc định\r\n            const presentSeason: any = {\r\n                model: this.seasonServices.models,\r\n                as: ActionAssociateDatabase.POND_2_SEASON,\r\n                where: {\r\n                    userId: ownerId,\r\n                    status: 0\r\n                }\r\n            };\r\n            // các ao có quyền\r\n            const rule: any = {\r\n                model: this.pondUserRolesServices.models,\r\n                as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                where: {\r\n                    userId\r\n                }\r\n            };\r\n            query.include.push(presentSeason);\r\n            query.include.push(rule);\r\n        } else {\r\n            if (!seasonid) {\r\n                // load vụ mặc định\r\n                const presentSeason: any = {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    }\r\n                };\r\n                query.include.push(presentSeason);\r\n            } else if(seasonuuid) /* load theo id vụ yêu cầu */ {\r\n                const requestSeason: any = {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        seasonUUId: seasonuuid\r\n                    }\r\n                };\r\n                query.include.push(requestSeason);\r\n            } else  {\r\n                // load theo id vụ yêu cầu\r\n                const requestSeason: any = {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        seasonId: seasonid\r\n                    }\r\n                };\r\n                query.include.push(requestSeason);\r\n            }\r\n        }\r\n        if (isnull === 'true') {\r\n            // ao trống\r\n            query.where = {\r\n                status: 0\r\n            };\r\n        } else if (isnotnull === 'true') {\r\n            // ao đang nuôi\r\n            query.where = {\r\n                status: 1\r\n            };\r\n        } else if (isupgrade === 'true') {\r\n            // ao đang nâng cấp\r\n            query.where = {\r\n                status: 2\r\n            };\r\n        }\r\n        this.pondsServices.models.findAll(query).then(async (res: any[]) => {\r\n            if (!res.length) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy ao khả dụng.',\r\n                    ponds: []\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    ponds: res\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra.'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @method POST\r\n     * Đếm số vụ của ao chỉ định\r\n     */\r\n    private countSeasonWithPond = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondUUId } = request.body;\r\n        this.seasonAndPondServices.models.findAndCountAll({\r\n            include: [\r\n                {\r\n                    model: this.pondsServices.models,\r\n                    as: ActionAssociateDatabase.SEASON_AND_POND_2_POND,\r\n                    where: {\r\n                        pondUUId\r\n                    },\r\n                    attributes: []\r\n                }\r\n            ]\r\n        }).then(res => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                count: res.count\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Có lỗi xảy ra.'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get All pond mà người dùng chỉ định không có quản lý\r\n     * @method POST\r\n     * @param request.body.employeeId\r\n     */\r\n    private getPondWithUserNotManage = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { employeeId } = request.body;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        if (!isBoss) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Dừng lại! Truy cập là trái phép.'\r\n            });\r\n        } else {\r\n            if (employeeId) {\r\n                const pondByManage: any = await this.pondUserRolesServices.models.findAll({\r\n                    where: {\r\n                        userId: employeeId\r\n                    }\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Có lỗi xảy ra, vui lòng thử lại sau.'\r\n                    });\r\n                });\r\n                const query: FindOptions<any> = {\r\n                    include: [],\r\n                    where: {}\r\n                };\r\n                if (pondByManage.length) {\r\n                    query.where = {\r\n                        userId,\r\n                        pondId: {\r\n                            [this.sequeliz.Op.notIn]: pondByManage.map((e: any) => e.pondId)\r\n                        }\r\n                    };\r\n                } else {\r\n                    query.where = {\r\n                        userId,\r\n                    };\r\n                }\r\n                this.pondsServices.models.findAll(query).then(async (res: any[]) => {\r\n                    if (!res.length) {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: 'Không tìm thấy ao.',\r\n                            ponds: []\r\n                        });\r\n                    } else {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: '',\r\n                            ponds: res\r\n                        });\r\n                    }\r\n                }).catch(e => {\r\n                    e;\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã có lỗi xảy ra.'\r\n                    });\r\n                });\r\n            } else {\r\n                return response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra.'\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n","export const addPondPrepareSchema = {\r\n    type: 'object',\r\n    properties: {\r\n        pondId: {\r\n            required: true,\r\n            type: ['number', 'string']\r\n        },\r\n        ownerId: {\r\n            required: true,\r\n            type: ['number', 'string']\r\n        },\r\n        pondPrepareName: {\r\n            required: true,\r\n            type: 'string'\r\n        },\r\n        detailsOfPrepare: {\r\n            required: true,\r\n            type: 'array',\r\n            items: {\r\n                type: 'object',\r\n                properties: {\r\n                    storageId: 'number',\r\n                    quantity: {\r\n                        type: 'integer',\r\n                        minimum: 1\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    additionalProperties: false\r\n};\r\n","export const addSeasonSchema = {\r\n    type: 'object',\r\n    properties: {\r\n        seasonName: {\r\n            require: true,\r\n            type: ['string', 'number']\r\n        }\r\n    },\r\n    additionalProperties: false\r\n};\r\n\r\nexport const updateSeasonsSchema = {\r\n    type: 'object',\r\n    properties: {\r\n        seasonName: {\r\n            require: false,\r\n            type: ['string', 'number']\r\n        },\r\n        seasonId: {\r\n            require: false,\r\n            type: ['string', 'number'],\r\n            minimum: 0\r\n        },\r\n        seasonUUId: {\r\n            require: false,\r\n            type: ['string'],\r\n            minimum: 36,\r\n            maximum: 36\r\n        },\r\n        status: {\r\n            require: false,\r\n            type: ['string', 'number'],\r\n            enum: ['0', '1', 0, 1]\r\n        },\r\n        additionalProperties: false\r\n    }\r\n};\r\n","export const addPondSchema = {\r\n    type: 'object',\r\n    properties: {\r\n        pondName: {\r\n            required: true,\r\n            type: 'string',\r\n            maxlenght: 50\r\n        },\r\n        pondCreatedDate: {\r\n            required: true,\r\n            type: 'string',\r\n            pattern: /^(?![+-]?\\d{4,5}-?(?:\\d{2}|W\\d{2})T)(?:|(\\d{4}|[+-]\\d{5})-?(?:|(0\\d|1[0-2])(?:|-?([0-2]\\d|3[0-1]))|([0-2]\\d{2}|3[0-5]\\d|36[0-6])|W([0-4]\\d|5[0-3])(?:|-?([1-7])))(?:(?!\\d)|T(?=\\d)))(?:|([01]\\d|2[0-4])(?:|:?([0-5]\\d)(?:|:?([0-5]\\d)(?:|\\.(\\d{3})))(?:|[zZ]|([+-](?:[01]\\d|2[0-4]))(?:|:?([0-5]\\d)))))$/\r\n        },\r\n        pondArea: {\r\n            required: true,\r\n            type: 'number',\r\n            minimum: 0\r\n        },\r\n        pondDepth: {\r\n            required: true,\r\n            type: 'number',\r\n            minimum: 0\r\n        },\r\n        createCost: {\r\n            required: true,\r\n            type: 'number',\r\n            minimum: 0\r\n        },\r\n        pondLatitude: {\r\n            required: false,\r\n            type: ['number', null]\r\n        },\r\n        pondLongitude: {\r\n            required: false,\r\n            type: ['number', null]\r\n        },\r\n        status: {\r\n            required: true,\r\n            type: ['number'],\r\n            enum: [0, 1, 2]\r\n        }\r\n    },\r\n    additionalProperties: false\r\n};\r\n","import { isUUId4 } from '../common';\r\n\r\nexport const updatePondDiariesSchema = {\r\n    type: 'object',\r\n    properties: {\r\n        pondDiaryUUId: {\r\n            type: 'string',\r\n            required: true,\r\n            pattern: isUUId4\r\n        },\r\n        diaryName: {\r\n            required: false,\r\n            type: ['string']\r\n        },\r\n        fisheryQuantity: {\r\n            required: false,\r\n            type: ['number'],\r\n            minimum: 0\r\n        },\r\n        healthOfFishery: {\r\n            required: false,\r\n            type: ['string']\r\n        },\r\n        pondVolume: {\r\n            required: false,\r\n            type: ['number'],\r\n            minimum: 0\r\n        },\r\n        diedFishery: {\r\n            required: false,\r\n            type: ['integer'],\r\n            minimum: 0\r\n        },\r\n        notes: {\r\n            required: false,\r\n            type: ['string', 'null']\r\n        }\r\n    },\r\n    additionalProperties: true\r\n};\r\n","export * from './seasons.route';\r\n","import { Season } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, SeasonServices, UserRolesServices, UserServives, PondsServices } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { Transaction, FindOptions } from 'sequelize';\r\nimport { addSeasonSchema, updateSeasonsSchema } from '../../schemas';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class SeasonRoute extends BaseRoute {\r\n    public static path = '/seasons';\r\n    private static instance: SeasonRoute;\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private pondsServices: PondsServices = new PondsServices();\r\n    private userServives: UserServives = new UserServives();\r\n    private userRolesServices: UserRolesServices = new UserRolesServices();\r\n\r\n    /**\r\n     * @class SeasonRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!SeasonRoute.instance) {\r\n            SeasonRoute.instance = new SeasonRoute();\r\n        }\r\n        return SeasonRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[SeasonRoute] Creating season route.');\r\n\r\n        // add route\r\n        this.router.get('/gets', Authentication.isLogin, this.getSeasons);\r\n        this.router.get('/gets/:seasonUUId', Authentication.isLogin, this.getSeasonByUUId);\r\n        this.router.post('/add', Authentication.isLogin, Authentication.isBoss, this.addSeason);\r\n        this.router.put('/update', Authentication.isLogin, Authentication.isBoss, this.updateSeason);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, SeasonRoute.path);\r\n    }\r\n\r\n    /**\r\n     * Thêm mới vụ với điều kiện:\r\n     * - Mỗi user chỉ có 1 vụ có status 0 trong tổng số vụ\r\n     * - Tất cả ao đều được thu hoạch xong\r\n     *\r\n     * Cập nhật lại bảng Ponds:\r\n     * - status\r\n     * - isFed\r\n     * - isDiary\r\n     */\r\n    private addSeason = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonName } = request.body;\r\n        const validate: any = this.validator(addSeasonSchema);\r\n        const filter: any = this.validator.filter(addSeasonSchema);\r\n        const filtered: any = filter(request.body);\r\n        const validater: boolean = validate(filtered);\r\n        if (validater) {\r\n            // start authozation info\r\n            const token: string = request.headers.authorization.split(' ')[1];\r\n            const deToken: any = Authentication.detoken(token);\r\n            const { userId } = deToken;\r\n\r\n            const wasHarvest: any = await this.pondsServices.models.findAll({\r\n                where: {\r\n                    userId,\r\n                    status: 1\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, vui lòng thử lại sau!'\r\n                });\r\n            });\r\n            // Còn vụ chưa thu hoạch\r\n            if (!!wasHarvest.length) {\r\n                return response.status(200).json({\r\n                    success: false,\r\n                    message: 'Bạn không thể thêm vụ nuôi mới khi còn ao chưa thu hoạch.',\r\n                    wasHarvest: false\r\n                });\r\n            }\r\n            this.sequeliz.transaction().then(async (t: Transaction) => {\r\n                const resetStatus: any = await this.pondsServices.models.update({\r\n                    status: 0,\r\n                    isFed: 0,\r\n                    isDiary: 0\r\n                }, {\r\n                        where: {\r\n                            userId,\r\n                            status: 1\r\n                        },\r\n                        transaction: t\r\n                    }).catch(e => {\r\n                        return t.rollback();\r\n                    });\r\n                const onUpdate: any = await this.seasonServices.models.update({\r\n                    status: 1\r\n                }, {\r\n                        where: {\r\n                            userId,\r\n                            status: 0\r\n                        },\r\n                        returning: true,\r\n                        transaction: t\r\n                    }).catch(e => {\r\n                        return t.rollback();\r\n                    });\r\n\r\n                if (onUpdate) {\r\n                    const season = new Season();\r\n                    season.setSeason(null, uuidv4(), userId, seasonName, 0);\r\n                    season.seasonServices.models.create(season, {\r\n                        transaction: t\r\n                    }).then((res: any) => {\r\n                        if (res) {\r\n                            response.status(200).json({\r\n                                success: true,\r\n                                message: 'Thêm vụ thành công!',\r\n                                season: res\r\n                            });\r\n                            t.commit();\r\n                        }\r\n                    }).catch(e => {\r\n                        return t.rollback();\r\n                    });\r\n                } else {\r\n                    return t.rollback();\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Có lỗi xảy ra vui lòng kiểm tra lại!'\r\n                });\r\n            });\r\n        } else {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: 'Vui lòng cung cấp đúng tên vụ.'\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get All vụ theo user\r\n     * chức năng của admin\r\n     */\r\n    private getSeasons = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { present } = request.query;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n\r\n        const query: FindOptions<any> = {\r\n            where: {\r\n                userId: isBoss ? userId : ownerId\r\n            },\r\n            order: [\r\n                ['createdDate', 'DESC']\r\n            ]\r\n        };\r\n\r\n        if(!!present) {\r\n            query.where = {\r\n                ...query.where,\r\n                status: 0\r\n            };\r\n        }\r\n\r\n        this.seasonServices.models.findAll(query).then(ss => {\r\n            if (ss) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    seasons: ss\r\n                });\r\n\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Bạn không có vụ nào được kích hoạt, vui lòng kích hoạt một vụ mùa trong hệ thống.',\r\n                    seasons: null\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            e;\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xãy ra, xin vui lòng thử lại!'\r\n            });\r\n        });\r\n    }\r\n\r\n    private updateSeason = async (request: Request, response: Response, next: NextFunction) => {\r\n        // validate\r\n        const validate: any = this.validator(updateSeasonsSchema);\r\n        const filter: any = this.validator.filter(updateSeasonsSchema);\r\n        const filtered: any = filter(request.body);\r\n        const validater: boolean = validate(filtered);\r\n        if(validater) {\r\n            const { seasonId, seasonUUId, seasonName, status } = request.body;\r\n            const data: any = {\r\n                ...(seasonName ? {seasonName} : {}),\r\n                ...(status ? {status} : {}),\r\n            };\r\n            this.seasonServices.models.update(data, {\r\n                where: {\r\n                    [this.sequeliz.Op.or]: [\r\n                        {seasonId},\r\n                        {seasonUUId}\r\n                    ]\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, vui lòng thử lại sau!'\r\n                });\r\n            }).then(res => {\r\n                if(res) {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Cập nhật thành công!'\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Thất bại.'\r\n                    });\r\n                }\r\n            });\r\n        } else {\r\n            console.log(validate.error);\r\n        }\r\n    }\r\n\r\n    private getSeasonByUUId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonUUId } = request.params;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n\r\n        const season: Season = new Season();\r\n        season.seasonServices.models.findOne({\r\n            include: [\r\n                {\r\n                    model: this.userServives.models,\r\n                    as: ActionAssociateDatabase.SEASON_2_USER,\r\n                    include: [\r\n                        {\r\n                            model: this.userRolesServices.models,\r\n                            as: ActionAssociateDatabase.USER_2_ROLES_GET_EMPLOYEES,\r\n                            required: false,\r\n                            where: {\r\n                                [this.sequeliz.Op.or]: [\r\n                                    {\r\n                                        bossId: userId\r\n                                    },\r\n                                    {\r\n                                        userId\r\n                                    }\r\n                                ]\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            ],\r\n            where: {\r\n                seasonUUId,\r\n                userId: ownerId\r\n            }\r\n        }).then((res: Season) => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                season: res\r\n            });\r\n        }).catch(e => {\r\n            e;\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    // private getSeasonById = async (request: Request, response: Response, next: NextFunction) => {\r\n    //     const { seasonId } = request.body;\r\n    //     this.seasonServices.models.findById(seasonId).then((res: Season) => {\r\n    //         response.status(200).json({\r\n    //             success: true,\r\n    //             message: '',\r\n    //             season: res\r\n    //         });\r\n    //     }).catch(e => {\r\n    //         response.status(200).json({\r\n    //             success: false,\r\n    //             message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n    //         });\r\n    //     });\r\n    // }\r\n\r\n    // private getPresentSeason = async (request: Request, response: Response, next: NextFunction) => {\r\n    //     const { ownerid } = request.headers;\r\n    //     this.seasonServices.models.findOne({\r\n    //         where: {\r\n    //             userId: ownerid,\r\n    //             status: 0\r\n    //         }\r\n    //     }).then((res: any) => {\r\n    //         if (res) {\r\n    //             response.status(200).json({\r\n    //                 success: true,\r\n    //                 message: '',\r\n    //                 season: res.dataValues\r\n    //             });\r\n    //         } else {\r\n    //             response.status(200).json({\r\n    //                 success: false,\r\n    //                 message: 'Bạn không có vụ nào được kích hoạt, vui lòng kích hoạt một vụ mùa trong hệ thống.'\r\n    //             });\r\n    //         }\r\n    //     }).catch(e => {\r\n    //         response.status(200).json({\r\n    //             success: false,\r\n    //             message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n    //         });\r\n    //     });\r\n    // }\r\n}\r\n","export * from './pondPrepare.route';\r\n","import { PondPrepare, PondPrepareDetail, Storage, Pond, SeasonsAndPond, Incurred } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, PondPrepareServices, SeasonAndPondServices, SeasonServices, PondsServices, IncurredsServices, PondPrepareDetailsServices, StoregeServices, MaterialServives, UserServives } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { ActionAssociateDatabase, defaultImage } from '../../common';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { Transaction } from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport { addPondPrepareSchema } from '../../schemas';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class PondPrepareRoute extends BaseRoute {\r\n    public static path = '/pondPrepares';\r\n    private static instance: PondPrepareRoute;\r\n    private pondPrepareServices: PondPrepareServices = new PondPrepareServices();\r\n    private seasonAndPondServices: SeasonAndPondServices = new SeasonAndPondServices();\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private pondsServices: PondsServices = new PondsServices();\r\n    private incurredsServices: IncurredsServices = new IncurredsServices();\r\n    private pondPrepareDetailsServices: PondPrepareDetailsServices = new PondPrepareDetailsServices();\r\n    private storegeServices: StoregeServices = new StoregeServices();\r\n    private userServives: UserServives = new UserServives();\r\n    /**\r\n     * @class PondPrepareRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!PondPrepareRoute.instance) {\r\n            PondPrepareRoute.instance = new PondPrepareRoute();\r\n        }\r\n        return PondPrepareRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[PondPrepareRoute] Creating action preparing of pond route.');\r\n\r\n        // add route pond prepare\r\n        this.router.post('/add', Authentication.isLogin, this.addPrepare);\r\n        this.router.post('/addNew', Authentication.isLogin, this.addNewPrepare);\r\n        this.router.post('/add/exiting-pond', Authentication.isLogin, this.addPrepareOldPond);\r\n        this.router.post('/gets', Authentication.isLogin, this.getPondPrepares);\r\n        this.router.post('/gets/uuid', Authentication.isLogin, this.getPondPrepareByPondPrePareUUId);\r\n        this.router.put('/update', Authentication.isLogin, this.updatePondPrepare);\r\n\r\n        // add route incurred\r\n        this.router.post('/incurreds/add', Authentication.isLogin, this.addIncurred);\r\n        this.router.post('/incurreds/get/uuid', Authentication.isLogin, this.getIncurredByIncurredUUId);\r\n        this.router.put('/incurreds/update', Authentication.isLogin, this.updateIncurred);\r\n\r\n        // log enpoints\r\n        this.logEndpoints(this.router, PondPrepareRoute.path);\r\n    }\r\n\r\n    private getPondPrepares = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonId, pondId } = request.body;\r\n        this.pondPrepareServices.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.pondPrepareDetailsServices.models,\r\n                    as: ActionAssociateDatabase.POND_PREPARE_2_POND_PREPARE_DETAILS,\r\n                    required: false,\r\n                    include: [\r\n                        {\r\n                            model: this.storegeServices.models,\r\n                            as: ActionAssociateDatabase.POND_PREPARE_DETAIL_2_STORAGE\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    model: this.incurredsServices.models,\r\n                    required: false,\r\n                    as: ActionAssociateDatabase.POND_PREPARE_2_INCURREDS,\r\n                    include: [\r\n                        {\r\n                            model: this.userServives.models,\r\n                            as: ActionAssociateDatabase.INCURREDS_TO_USER,\r\n                            attributes: ['userId', 'userUUId', 'lastname', 'firstname', 'username', 'createdDate', 'createdBy']\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    model: this.seasonAndPondServices.models,\r\n                    as: ActionAssociateDatabase.POND_PREPARE_2_SEASON_AND_POND,\r\n                    where: {\r\n                        pondId,\r\n                        seasonId\r\n                    }\r\n                }\r\n            ]\r\n        }).then((res) => {\r\n            if (!res.length) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy nhật ký chuẩn bị ao của ao này.'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    pondPrepares: res\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private getPondPrepareByPondPrePareUUId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondPrepareUUId } = request.body;\r\n        this.pondPrepareServices.models.findOne({\r\n            where: {\r\n                pondPrepareUUId\r\n            }\r\n        }).then(res => {\r\n            if (!res) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy nhật ký chuẩn bị ao.'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    pondPrepare: res\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Chức năng click vào 1 đợt chuẩn bị cụ thể\r\n     */\r\n    private getById = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondprepareid } = request.headers;\r\n        const pondPrepare: PondPrepare = new PondPrepare();\r\n        pondPrepare.setPondPrepareId = (pondprepareid as any) - 0;\r\n        pondPrepare.getById(pondPrepare.getPondPrepareId).then(res => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                pondPrepare: res\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Không có thông tin của đợt chuẩn bị này, vui lòng kiểm tra lại, cảm ơn!'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Update tên vụ\r\n     */\r\n    private updatePondPrepare = async (request: Request, response: Response, next: NextFunction) => {\r\n        const pondPrepare: PondPrepare = new PondPrepare();\r\n        const { pondPrepareId, pondprepareName } = request.body;\r\n        if (!pondPrepareId) {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Hành động không khuyến khích, vui lòng quay lại sau.'\r\n            });\r\n            return response.end();\r\n        }\r\n        pondPrepare.setPondPrepareId = pondPrepareId;\r\n        pondPrepare.setPondprepareName = pondprepareName;\r\n        pondPrepare.update().then(res => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: 'Cập nhật thành công.'\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau, cảm ơn!'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Thêm hoạt động chuẩn bị - transaction cũ\r\n     */\r\n    private addPrepare = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondId, ownerId, pondPrepareId, storageId, quantity, seasonAndPondId } = request.body;\r\n        if (!seasonAndPondId) {\r\n            const seasonAndPond: any = await this.seasonAndPondServices.models.findOne({\r\n                include: [\r\n                    {\r\n                        model: this.seasonServices.models,\r\n                        as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                        where: {\r\n                            userId: ownerId,\r\n                            status: 0\r\n                        },\r\n                        attributes: []\r\n                    }\r\n                ],\r\n                where: {\r\n                    pondId\r\n                },\r\n                attributes: ['seasonAndPondId']\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                });\r\n            });\r\n            return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n                const storage: Storage = new Storage();\r\n                const str: any = await storage.storegeServices.models.update(\r\n                    {\r\n                        quantityStorages: this.sequeliz.literal(`quantityStorages - ${quantity}`)\r\n                    },\r\n                    {\r\n                        where: {\r\n                            storageId\r\n                        },\r\n                        transaction: t\r\n                    }\r\n                ).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã xảy ra lỗi vui lòng thử lại sau.',\r\n                    });\r\n                    t.rollback();\r\n                });\r\n                if (str) {\r\n                    const pondPrepareDetail: PondPrepareDetail = new PondPrepareDetail();\r\n                    pondPrepareDetail.setPondpreparedetails(null, uuidv4(), pondPrepareId, storageId, quantity);\r\n                    pondPrepareDetail.pondPrepareDetailsServices.models.create(pondPrepareDetail, {\r\n                        transaction: t\r\n                    }).then(res => {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: 'Thêm thành công.'\r\n                        });\r\n                        t.commit();\r\n                    }).catch(e => {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.',\r\n                            e\r\n                        });\r\n                        t.rollback();\r\n                    });\r\n                }\r\n            });\r\n        } else {\r\n            return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n                const storage: Storage = new Storage();\r\n                const str: any = await storage.storegeServices.models.update(\r\n                    {\r\n                        quantityStorages: this.sequeliz.literal(`quantityStorages - ${quantity}`)\r\n                    },\r\n                    {\r\n                        where: {\r\n                            storageId\r\n                        },\r\n                        transaction: t\r\n                    }\r\n                ).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã xảy ra lỗi vui lòng thử lại sau.',\r\n                    });\r\n                    t.rollback();\r\n                });\r\n                if (str) {\r\n                    const pondPrepareDetail: PondPrepareDetail = new PondPrepareDetail();\r\n                    pondPrepareDetail.setPondpreparedetails(null, uuidv4(), pondPrepareId, storageId, quantity);\r\n                    pondPrepareDetail.pondPrepareDetailsServices.models.create(pondPrepareDetail, {\r\n                        transaction: t\r\n                    }).then(res => {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: 'Thêm thành công.'\r\n                        });\r\n                        t.commit();\r\n                    }).catch(e => {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.',\r\n                            e\r\n                        });\r\n                        t.rollback();\r\n                    });\r\n                }\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    private addPrepareOldPond = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondId, ownerId, pondPrepareName, detailsOfPrepare } = request.body;\r\n        const validate: any = this.validator(addPondPrepareSchema);\r\n        const filter: any = this.validator.filter(addPondPrepareSchema);\r\n        const filtered: any = filter(request.body);\r\n        const validater: boolean = validate(filtered);\r\n        if (validater) {\r\n            const snp: any = await this.seasonAndPondServices.models.findOne({\r\n                include: [\r\n                    {\r\n                        model: this.seasonServices.models,\r\n                        as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                        where: {\r\n                            userId: ownerId,\r\n                            status: 0\r\n                        },\r\n                        attributes: []\r\n                    }\r\n                ],\r\n                where: {\r\n                    pondId\r\n                },\r\n                attributes: ['seasonAndPondId']\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                });\r\n            });\r\n            if (!snp) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                });\r\n            } else {\r\n                return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n                    const pondPrepare: PondPrepare = new PondPrepare();\r\n                    pondPrepare.setPondprepare(null, uuidv4(), snp.seasonAndPondId, pondPrepareName);\r\n                    const pp: any = await pondPrepare.pondPrepareServices.models.create(pondPrepare, {\r\n                        transaction: t\r\n                    }).catch(e => {\r\n                        t.rollback();\r\n                    });\r\n                    if (pp) {\r\n                        const successArr: any[] = [];\r\n                        for (const detail of detailsOfPrepare) {\r\n                            const storage: Storage = new Storage();\r\n                            const str: any = await storage.storegeServices.models.update(\r\n                                {\r\n                                    quantityStorages: this.sequeliz.literal(`quantityStorages - ${detail.quantity}`)\r\n                                },\r\n                                {\r\n                                    where: {\r\n                                        storageId: detail.storageId\r\n                                    },\r\n                                    transaction: t\r\n                                }\r\n                            ).catch(e => {\r\n                                if (e.message === 'FailQuantity') {\r\n                                    response.status(200).json({\r\n                                        success: false,\r\n                                        message: 'Số lượng cơ sở vật chất trong kho không đủ.'\r\n                                    });\r\n                                } else {\r\n                                    response.status(200).json({\r\n                                        success: false,\r\n                                        message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.',\r\n                                    });\r\n                                }\r\n                            });\r\n                            if (!!str) {\r\n                                const pondPrepareDetail: PondPrepareDetail = new PondPrepareDetail();\r\n                                pondPrepareDetail.setPondpreparedetails(null, uuidv4(), pp.pondPrepareId, detail.storageId, detail.quantity);\r\n                                const ppd: any = await pondPrepareDetail.pondPrepareDetailsServices.models.create(pondPrepareDetail, {\r\n                                    transaction: t\r\n                                });\r\n                                if (ppd) {\r\n                                    successArr.push(1);\r\n                                }\r\n                            }\r\n                        }\r\n                        if (detailsOfPrepare.length === successArr.length) {\r\n                            t.commit();\r\n                            response.status(200).json({\r\n                                success: true,\r\n                                message: 'Thêm thành công.'\r\n                            });\r\n                        } else {\r\n                            return t.rollback();\r\n                        }\r\n                    } else {\r\n                        return t.rollback();\r\n                    }\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.',\r\n                    });\r\n                });\r\n            }\r\n        } else {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Số lượng là số nguyên và lớn hơn 1, vui lòng nhập lại!'\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Thêm hoạt động chuẩn bị ao\r\n     * Sau khi quá trình thêm kết thúc người dùng sẽ có một ao mới\r\n     */\r\n    private addNewPrepare = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondPrepareId, pondPrepareName, detailsOfPrepare } = request.body; // init\r\n        const { pondName, pondArea, pondDepth, createCost, pondLatitude, pondLongitude, status } = request.body; // Thông tin của ao mới\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n\r\n        if (!isBoss) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Bạn không đủ quyền truy cập api này.'\r\n            });\r\n        }\r\n\r\n        /** Chuẩn bị cho ao mới */\r\n        if (!pondPrepareId) {\r\n            return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n                const pond: Pond = new Pond();\r\n                pond.setPond(null, uuidv4(), ownerId, pondName, pondArea, pondDepth, createCost, DateUtil.getUTCDateTime() as any, status, status === 1 ? 1 : 0, status === 1 ? 1 : 0, defaultImage.pondImage, pondLatitude !== '' ? pondLatitude : undefined, pondLongitude !== '' ? pondLongitude : undefined);\r\n                const p: any = await this.pondsServices.models.create(pond, {\r\n                    transaction: t\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                    });\r\n                    return t.rollback();\r\n                });\r\n                if (!p) {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Lỗi dữ liệu đường truyền, vui lòng thử lại sau'\r\n                    });\r\n                    return t.rollback();\r\n                } else {\r\n                    const ss: any = await this.seasonServices.models.findOne({\r\n                        where: {\r\n                            userId: ownerId,\r\n                            status: 0\r\n                        },\r\n                        transaction: t\r\n                    }).catch(e => {\r\n                        t.rollback();\r\n                    });\r\n                    if (!ss) {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Bạn không có vụ đang kích hoạt, vui lòng kích hoạt vụ mùa để tiếp tục sử dụng hệ thống.'\r\n                        });\r\n                        return t.rollback();\r\n                    } else {\r\n                        const seasonAndPond: SeasonsAndPond = new SeasonsAndPond();\r\n                        seasonAndPond.setSeasonsAndPond(null, ss.seasonId, p.pondId);\r\n                        const snp: any = await seasonAndPond.seasonAndPondServices.models.create(seasonAndPond, {\r\n                            transaction: t\r\n                        }).catch(e => {\r\n                            return t.rollback();\r\n                        });\r\n                        if (!snp) {\r\n                            return t.rollback();\r\n                        } else {\r\n                            const pondPrepare: PondPrepare = new PondPrepare();\r\n                            pondPrepare.setPondprepare(null, uuidv4(), snp.seasonAndPondId, pondPrepareName);\r\n                            const pp: any = await pondPrepare.pondPrepareServices.models.create(pondPrepare, {\r\n                                transaction: t\r\n                            }).catch(e => {\r\n                                return t.rollback();\r\n                            });\r\n                            if (pp) {\r\n                                const successArr: any[] = [];\r\n                                for (const detail of detailsOfPrepare) {\r\n                                    const storage: Storage = new Storage();\r\n                                    const str: any = await storage.storegeServices.models.update(\r\n                                        {\r\n                                            quantityStorages: this.sequeliz.literal(`quantityStorages - ${detail.quantity}`)\r\n                                        },\r\n                                        {\r\n                                            where: {\r\n                                                storageId: detail.storageId\r\n                                            },\r\n                                            transaction: t\r\n                                        }\r\n                                    ).catch(e => {\r\n                                        if(e.message.includes('FailQuantity')) {\r\n                                            response.status(200).json({\r\n                                                success: false,\r\n                                                message: 'Không đủ số lượng trong kho.'\r\n                                            });\r\n                                        }\r\n                                        return t.rollback();\r\n                                    });\r\n                                    if (!!str) {\r\n                                        const pondPrepareDetail: PondPrepareDetail = new PondPrepareDetail();\r\n                                        pondPrepareDetail.setPondpreparedetails(null, uuidv4(), pp.pondPrepareId, detail.storageId, detail.quantity);\r\n                                        const ppd: any = await pondPrepareDetail.pondPrepareDetailsServices.models.create(pondPrepareDetail, {\r\n                                            transaction: t\r\n                                        }).catch(e => {\r\n                                            response.status(200).json({\r\n                                                success: false,\r\n                                                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.',\r\n                                            });\r\n                                            return t.rollback();\r\n                                        });\r\n                                        if (ppd) {\r\n                                            successArr.push(1);\r\n                                        } else {\r\n                                            return t.rollback();\r\n                                        }\r\n                                    }\r\n                                }\r\n                                if (detailsOfPrepare.length === successArr.length) {\r\n                                    response.status(200).json({\r\n                                        success: true,\r\n                                        message: 'Thêm thành công.'\r\n                                    });\r\n                                    return t.commit();\r\n                                }\r\n                            } else {\r\n                                return t.rollback();\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            // .catch(e => {\r\n            //     if(e.message.includes('FailQuantity')) {\r\n            //         return response.status(200).json({\r\n            //             success: false,\r\n            //             message: 'Không đủ số lượng trong kho.'\r\n            //         });\r\n            //     } else {\r\n            //         return response.status(200).json({\r\n            //             success: false,\r\n            //             message: 'Đã xảy ra lỗi vui lòng thử lại sau.',\r\n            //         });\r\n            //     }\r\n            // });\r\n        }\r\n    }\r\n\r\n    private addIncurred = async (request: Request, response: Response, next: NextFunction) => {\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const { pondPrepareId, incurredName, value, notes } = request.body;\r\n        const incurred: Incurred = new Incurred();\r\n        incurred.setIncurred(null, uuidv4(), pondPrepareId, userId, incurredName, value, notes);\r\n        incurred.incurredsServices.models.create(incurred).then(res => {\r\n            if (!res) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: 'Thêm thành phí phát sinh thành công.'\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private updateIncurred = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { incurredUUId, incurredName, value, notes } = request.body;\r\n        this.incurredsServices.models.update({\r\n            incurredName, value, notes\r\n        }, {\r\n                where: {\r\n                    incurredUUId\r\n                },\r\n                returning: true\r\n            }).then(res => {\r\n                if (!res) {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Cập nhật thành công phí phát sinh thành công.'\r\n                    });\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                });\r\n            });\r\n    }\r\n\r\n    private getIncurredByIncurredUUId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { incurredUUId } = request.body;\r\n        this.incurredsServices.models.findOne({\r\n            where: {\r\n                incurredUUId\r\n            }\r\n        }).then(res => {\r\n            if (!res) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy thông tin chi phí phát sinh.'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    incurred: res\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './pondPrepareDetails.route';\r\n","import { PondPrepareDetail, Material } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { Transaction } from 'sequelize';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class PondPrepareDetailRoute extends BaseRoute {\r\n    public static path = '/PondPrepareDetails';\r\n    private static instance: PondPrepareDetailRoute;\r\n    /**\r\n     * @class PondPrepareDetailRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!PondPrepareDetailRoute.instance) {\r\n            PondPrepareDetailRoute.instance = new PondPrepareDetailRoute();\r\n        }\r\n        return PondPrepareDetailRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[PondPrepareDetailRoute] Creating details of preparing pond action route.');\r\n\r\n        // add route\r\n        this.router.post('/add', Authentication.isLogin, this.addDetail);\r\n        this.router.put('/update', Authentication.isLogin, this.updatePondPrepare);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, PondPrepareDetailRoute.path);\r\n    }\r\n\r\n    /**\r\n     * Thêm lần chuẩn bị\r\n     * @params [seasonAndPondId, pondprepareName, notes?, materialId]\r\n     */\r\n    private addDetail = async (request: Request, response: Response, next: NextFunction) => {\r\n        const pondPrepareDetail: PondPrepareDetail = new PondPrepareDetail();\r\n        const { pondPrepareId, materialId, quantity } = request.body;\r\n        pondPrepareDetail.setPondpreparedetails(undefined, uuidv4(), pondPrepareId, materialId, quantity);\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            const material = new Material();\r\n            return material.materialServives.models.update({\r\n                quantity: this.sequeliz.literal(`quantity - ${ quantity }`),\r\n            }, {\r\n                where: {\r\n                    materialId\r\n                },\r\n                transaction: t\r\n            }).then(async () => {\r\n                return pondPrepareDetail.pondPrepareDetailsServices.models.create(pondPrepareDetail, { transaction: t }).then(() => {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Thao tác thành công.'\r\n                    });\r\n                    return t.commit();\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Có lỗi xảy ra, chưa thêm được nhật ký chuẩn bị, xin thử lại, cảm ơn!'\r\n                    });\r\n                });\r\n            }).catch(e => {\r\n                t.rollback();\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Trong kho không đủ số lượng, vui lòng kiểm tra lại, cảm ơn!'\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    private updatePondPrepare = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { materialId, pondPrepareId, quantityOld, quantityNew, pondPrepareDetailId } = request.body;\r\n        const quantity = (quantityOld * 1) - (quantityNew * 1);\r\n        const pondPrepareDetail: PondPrepareDetail = new PondPrepareDetail();\r\n        pondPrepareDetail.setPondpreparedetails(pondPrepareDetailId, undefined, pondPrepareId, materialId, quantity);\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            const material = new Material();\r\n            return material.materialServives.models.update({\r\n                quantity: this.sequeliz.literal(`quantity + ${ quantity }`),\r\n            }, {\r\n                where: {\r\n                    materialId\r\n                },\r\n                transaction: t\r\n            }).then(async () => {\r\n                return pondPrepareDetail.pondPrepareDetailsServices.models.update(pondPrepareDetail, {\r\n                    where: {\r\n                        // pondPrepareDetailId: pondPrepareDetail.getPondPrepareDetailId,\r\n                        // [material.materialServives.Op.any]: {\r\n                        //     createdDate:\r\n                        // }\r\n                    },\r\n                    transaction: t\r\n                }).then(() => {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Cập nhật thành công!'\r\n                    });\r\n                    return t.commit();\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Có lỗi xảy ra, vui lòng thử lại, cảm ơn!'\r\n                    });\r\n                    t.rollback();\r\n                });\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Trong kho không đủ số lượng, vui lòng kiểm tra lại, cảm ơn!'\r\n                });\r\n                t.rollback();\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './storages.route';\r\n","import { Storage, Coupon, Material } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, StoregeServices, StoregeOwnwerServices, UserRolesServices, UserServives, SeasonServices, CouponServives, MaterialServives, BoughtBreedDetailsServives, BreedServives } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { Transaction, FindOptions } from 'sequelize';\r\n\r\n/**\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class StorageRoute extends BaseRoute {\r\n    public static path = '/storages';\r\n    private static instance: StorageRoute;\r\n    private storegeOwnwerServices: StoregeOwnwerServices = new StoregeOwnwerServices();\r\n    private userRolesServices: UserRolesServices = new UserRolesServices();\r\n    private userServives: UserServives = new UserServives();\r\n    private storegeServices: StoregeServices = new StoregeServices();\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private couponServives: CouponServives = new CouponServives();\r\n    private materialServives: MaterialServives = new MaterialServives();\r\n    private boughtBreedDetailsServives: BoughtBreedDetailsServives = new BoughtBreedDetailsServives();\r\n    private breedServives: BreedServives = new BreedServives();\r\n    /**\r\n     * @class StorageRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!StorageRoute.instance) {\r\n            StorageRoute.instance = new StorageRoute();\r\n        }\r\n        return StorageRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[StorageRoute] Creating storage route.');\r\n\r\n        // add route\r\n        this.router.get('/gets', Authentication.isLogin, this.getStorages);\r\n        this.router.get('/gets/:storageId', Authentication.isLogin, this.getStorageById);\r\n        this.router.get('/coupons/gets/:seasonId', Authentication.isLogin, this.getCoupon);\r\n        this.router.post('/add', Authentication.isLogin, this.addStorage);\r\n        this.router.put('/update', Authentication.isLogin, this.updateStorage);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, StorageRoute.path);\r\n    }\r\n\r\n    private addStorage = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { couponId, itemArr } = request.body;\r\n\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n\r\n        this.userServives.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.userRolesServices.models,\r\n                    as: ActionAssociateDatabase.USER_2_ROLES_GET_EMPLOYEES,\r\n                    required: false,\r\n                    where: {\r\n                        [this.sequeliz.Op.or]: [\r\n                            {\r\n                                userId\r\n                            },\r\n                            {\r\n                                bossId: userId\r\n                            },\r\n                        ],\r\n                        roles: 2\r\n                    } as any\r\n                },\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.USER_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    }\r\n                }\r\n            ]\r\n        } as any).then(res => {\r\n            if (!res.length) {\r\n                return response.status(200).json({\r\n                    success: false,\r\n                    message: 'Bạn không có vụ nào đang hoạt động, vui lòng thêm một vụ và quay lại sau.'\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Bạn không có quyền truy cập api này.'\r\n            });\r\n        });\r\n\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            const boss: any = await this.storegeOwnwerServices.models.findOne({\r\n                include: [\r\n                    {\r\n                        model: this.userServives.models,\r\n                        as: ActionAssociateDatabase.OWNER_TO_USER,\r\n                        include: [\r\n                            {\r\n                                model: this.seasonServices.models,\r\n                                as: ActionAssociateDatabase.USER_2_SEASON,\r\n                                where: {\r\n                                    userId: ownerId,\r\n                                    status: 0\r\n                                }\r\n                            },\r\n                            {\r\n                                model: this.userRolesServices.models,\r\n                                as: ActionAssociateDatabase.USER_2_ROLES_GET_EMPLOYEES,\r\n                                required: false,\r\n                                where: {\r\n                                    [this.sequeliz.Op.or]: [\r\n                                        {\r\n                                            userId\r\n                                        },\r\n                                        {\r\n                                            bossId: userId\r\n                                        },\r\n                                    ],\r\n                                    roles: 2\r\n                                } as any\r\n                            }\r\n                        ],\r\n                        attributes: ['userId', 'userUUId', 'lastname', 'firstname', 'username', 'createdDate', 'createdBy']\r\n                    }\r\n                ],\r\n                where: {\r\n                    userId: ownerId\r\n                },\r\n                transaction: t\r\n            });\r\n            if (boss && boss.user.seasons.length) {\r\n                const coupon: Coupon = new Coupon();\r\n                coupon.setUserId = userId;\r\n                coupon.setSeasonId = boss.user.seasons[0].seasonId;\r\n                const cp: any = await coupon.couponServives.models.create(coupon, {\r\n                    transaction: t\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Lỗi xác thực người dùng, vui lòng liên hệ nhà cung cấp để được hỗ trợ.'\r\n                    });\r\n                    t.rollback();\r\n                });\r\n                if (cp) {\r\n                    const result: any[] = [];\r\n                    for (const item of itemArr) {\r\n                        const storage: Storage = new Storage();\r\n                        if (typeof item.product === 'string')/* Là vật phẩm mới */ {\r\n                            storage.setStorages(null, uuidv4(), boss.storageOwnerId, item.product, item.quantity, item.unit, item.type, item.descriptions);\r\n                            const sto: any = await storage.storegeServices.models.create(storage, {\r\n                                transaction: t\r\n                            }).catch(e => {\r\n                                response.status(200).json({\r\n                                    success: false,\r\n                                    message: `Thực hiện không thành công, vui lòng kiểm tra và thử lại sau.`,\r\n                                    position: item.position,\r\n                                    couponId: cp.couponId\r\n                                });\r\n                                t.rollback();\r\n                            });\r\n                            if (sto) {\r\n                                const material: Material = new Material();\r\n                                material.setMaterial(null, uuidv4(), cp.couponId, sto.storageId, item.provider, item.providerAddress, item.quantity, item.unit, item.unitPrice);\r\n                                const mat: any = await material.materialServives.models.create(material, {\r\n                                    transaction: t\r\n                                }).catch(async e => {\r\n                                    if (e.message.includes('FailWithInsertQuantityOfMaterials')) {\r\n                                        response.status(200).json({\r\n                                            success: false,\r\n                                            message: 'Lỗi nhập liệu số lượng vui lòng kiểm tra lại.',\r\n                                            position: item.position,\r\n                                            couponId: cp.couponId\r\n                                        });\r\n                                    } else {\r\n                                        response.status(200).json({\r\n                                            success: false,\r\n                                            message: `Thực hiện không thành công, vui lòng kiểm tra và thử lại sau.`,\r\n                                            position: item.position,\r\n                                            couponId: cp.couponId\r\n                                        });\r\n                                    }\r\n                                    t.rollback();\r\n                                });\r\n                                if (mat) {\r\n                                    result.push(mat);\r\n                                } else {\r\n                                    response.status(200).json({\r\n                                        success: false,\r\n                                        message: `Thực hiện không thành công, vui lòng kiểm tra và thử lại sau.`,\r\n                                        position: item.position,\r\n                                        couponId: cp.couponId\r\n                                    });\r\n                                    t.rollback();\r\n                                }\r\n                            } else {\r\n                                response.status(200).json({\r\n                                    success: false,\r\n                                    message: 'Thực hiện không thành công, vui lòng kiểm tra và thử lại sau.'\r\n                                });\r\n                                t.rollback();\r\n                            }\r\n                        } else/** Vật phẩm cũ */ {\r\n                            const sUpdate: any = await storage.storegeServices.models.update({\r\n                                quantityStorages: this.sequeliz.literal(`quantityStorages + ${item.quantity}`)\r\n                            }, {\r\n                                    where: {\r\n                                        storageId: item.product.storageId,\r\n                                        unit: item.product.unit\r\n                                    },\r\n                                    transaction: t\r\n                                }).catch(e => {\r\n                                    response.status(200).json({\r\n                                        success: false,\r\n                                        message: 'Lỗi nhập liệu vui lòng kiểm tra lại.'\r\n                                    });\r\n                                    t.rollback();\r\n                                });\r\n                            if (sUpdate.length > 0) {\r\n                                const material: Material = new Material();\r\n                                material.setMaterial(null, uuidv4(), cp.couponId, item.product.storageId, item.provider, item.providerAddress, item.quantity, item.product.unit, item.unitPrice);\r\n                                const mat = await material.materialServives.models.create(material, { transaction: t }).catch(e => {\r\n                                    if (e.message.includes('FailWithInsertQuantityOfMaterials')) {\r\n                                        response.status(200).json({\r\n                                            success: false,\r\n                                            message: 'Lỗi nhập liệu số lượng vui lòng kiểm tra lại.',\r\n                                            position: item.position,\r\n                                            couponId: cp.couponId\r\n                                        });\r\n                                    } else {\r\n                                        response.status(200).json({\r\n                                            success: false,\r\n                                            message: `Thực hiện không thành công, vui lòng kiểm tra và thử lại sau.`,\r\n                                            position: item.position,\r\n                                            couponId: cp.couponId\r\n                                        });\r\n                                    }\r\n                                    t.rollback();\r\n                                });\r\n                                if (mat) {\r\n                                    result.push(mat);\r\n                                } else {\r\n                                    response.status(200).json({\r\n                                        success: false,\r\n                                        message: `Thực hiện không thành công, vui lòng kiểm tra và thử lại sau.`,\r\n                                        position: item.position,\r\n                                        couponId: cp.couponId\r\n                                    });\r\n                                    t.rollback();\r\n                                }\r\n                            } else {\r\n                                response.status(200).json({\r\n                                    success: false,\r\n                                    message: `Lỗi nhập liệu số lượng vui lòng kiểm tra lại.`,\r\n                                    position: item.position,\r\n                                    couponId: cp.couponId\r\n                                });\r\n                                t.rollback();\r\n                            }\r\n                        }\r\n                    }\r\n                    if (result.length === itemArr.length) {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: 'Thêm thành công.'\r\n                        });\r\n                        t.commit();\r\n                    } else {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Có lỗi xảy ra, vui lòng thử lại sau.',\r\n                            couponId: cp.couponId\r\n                        });\r\n                        t.rollback();\r\n                    }\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Thực hiện không thành công, vui lòng thử lại sau.'\r\n                    });\r\n                    t.rollback();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private getStorages = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { type } = request.headers;\r\n\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy === null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n\r\n        this.storegeServices.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.storegeOwnwerServices.models,\r\n                    as: ActionAssociateDatabase.STORAGE_2_OWNER,\r\n                    include: [\r\n                        {\r\n                            model: this.userServives.models,\r\n                            as: ActionAssociateDatabase.OWNER_TO_USER,\r\n                            include: [\r\n                                {\r\n                                    model: this.userRolesServices.models,\r\n                                    as: ActionAssociateDatabase.USER_2_ROLES_GET_EMPLOYEES,\r\n                                    required: false\r\n                                }\r\n                            ],\r\n                            attributes: ['userId', 'userUUId', 'lastname', 'firstname', 'username', 'createdDate', 'createdBy']\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    model: this.materialServives.models,\r\n                    as: ActionAssociateDatabase.STORAGE_2_MATERIAL,\r\n                    include: [\r\n                        {\r\n                            model: this.couponServives.models,\r\n                            as: ActionAssociateDatabase.MATERIAL_2_COUPON\r\n                        }\r\n                    ]\r\n                }\r\n            ],\r\n            where: {\r\n                [this.sequeliz.Op.or]: [\r\n                    {\r\n                        '$owner.userId$': userId,\r\n                    },\r\n                    {\r\n                        '$owner->user->employees.userId$': userId,\r\n                        '$owner->user->employees.roles$': 2\r\n                    },\r\n                    {\r\n                        '$owner->user->employees.userId$': userId,\r\n                        '$owner->user->employees.roles$': 1\r\n                    }\r\n                ],\r\n                type: (type as any) - 0\r\n            } as any\r\n        }).then((s: any) => {\r\n            if (!s.length) {\r\n                return response.status(200).json({\r\n                    success: false,\r\n                    message: 'Bạn không có vật phẩm nào trong kho của mình!',\r\n                    storages: s\r\n                });\r\n            }\r\n            return response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                storages: s\r\n            });\r\n        }).catch(e => {\r\n            e;\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Có lỗi xảy ra, vui lòng thử lại sau!'\r\n            });\r\n        });\r\n    }\r\n\r\n    private getStorageById =  async (request: Request, response: Response, next: NextFunction) => {\r\n        //\r\n    }\r\n\r\n    private updateStorage = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { storageUUId } = request.body;\r\n    }\r\n\r\n    /**\r\n     * @method POST\r\n     */\r\n    private getCoupon = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonId } = request.params;\r\n        const query: FindOptions<any> = {\r\n            include: [\r\n                {\r\n                    model: this.materialServives.models,\r\n                    as: ActionAssociateDatabase.COUPON_2_MATERIAL,\r\n                    required: false,\r\n                    include: [\r\n                        {\r\n                            model: this.storegeServices.models,\r\n                            as: ActionAssociateDatabase.MATERIAL_2_STORAGE\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    model: this.boughtBreedDetailsServives.models,\r\n                    as: ActionAssociateDatabase.COUPON_2_BOUGHT_BREED_DETAILS,\r\n                    required: false,\r\n                    include: [\r\n                        {\r\n                            model: this.breedServives.models,\r\n                            as: ActionAssociateDatabase.BOUGHT_BREED_DETAIL_2_BREED\r\n                        }\r\n                    ]\r\n                }\r\n            ],\r\n            where: {\r\n                seasonId\r\n            }\r\n        };\r\n        this.couponServives.models.findAll(query).then(res => {\r\n            if (!res.length) {\r\n                return response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy bất kỳ lịch sử nhập kho nào.',\r\n                    coupons: res\r\n                });\r\n            }\r\n            return response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                coupons: res\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.',\r\n                e\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './breed.route';\r\n","import { Coupon } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { BoughtBreed, Breed, BoughtBreedDetail } from '../../components';\r\nimport { logger, UserRolesServices, UserServives, BreedOwnwerServices, BreedServives, SeasonServices, BoughtBreedDetailsServives, CouponServives } from '../../services';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { Transaction, FindOptions } from 'sequelize';\r\nimport * as uuidv4 from 'uuid/v4';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class BreedRoute extends BaseRoute {\r\n    public static path = '/breeds';\r\n    private static instance: BreedRoute;\r\n    private breedOwnwerServices: BreedOwnwerServices = new BreedOwnwerServices();\r\n    private userRolesServices: UserRolesServices = new UserRolesServices();\r\n    private userServives: UserServives = new UserServives();\r\n    private breedServives: BreedServives = new BreedServives();\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private boughtBreedDetailsServives: BoughtBreedDetailsServives = new BoughtBreedDetailsServives();\r\n    private couponServives: CouponServives = new CouponServives();\r\n    /**\r\n     * @class BreedRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!BreedRoute.instance) {\r\n            BreedRoute.instance = new BreedRoute();\r\n        }\r\n        return BreedRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[BreedRoute] Creating breed route.');\r\n\r\n        // add route\r\n        this.router.get('/gets', Authentication.isLogin, this.getBreed);\r\n        this.router.post('/add', Authentication.isLogin, this.addBreed);\r\n\r\n        // Log path\r\n        this.logEndpoints(this.router, BreedRoute.path);\r\n    }\r\n\r\n    addBreed = async (request: Request, response: Response) => {\r\n        const { couponId, itemArr } = request.body;\r\n\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n\r\n        // this.userServives.models.findAll({\r\n        //     include: [\r\n        //         {\r\n        //             model: this.userRolesServices.models,\r\n        //             as: ActionAssociateDatabase.USER_2_ROLES_USER,\r\n        //             required: false,\r\n        //             where: {\r\n        //                 userId\r\n        //             }\r\n        //         },\r\n        //         {\r\n        //             model: this.userRolesServices.models,\r\n        //             as: ActionAssociateDatabase.USER_2_ROLES_GET_EMPLOYEES,\r\n        //             required: false,\r\n        //             where: {\r\n        //                 bossId: userId\r\n        //             }\r\n        //         },\r\n        //         {\r\n        //             model: this.seasonServices.models,\r\n        //             as: ActionAssociateDatabase.USER_2_SEASON,\r\n        //             where: {\r\n        //                 userId,\r\n        //                 status: 0\r\n        //             }\r\n        //         }\r\n        //     ]\r\n        // } as any).then(res => {\r\n        //     if (!res.length) {\r\n        //         return response.status(200).json({\r\n        //             success: false,\r\n        //             message: 'Bạn không có vụ nào đang hoạt động, vui lòng thêm một vụ và quay lại sau.'\r\n        //         });\r\n        //     }\r\n        // }).catch(e => {\r\n        //     return response.status(200).json({\r\n        //         success: false,\r\n        //         message: 'Bạn không có quyền truy cập api này.'\r\n        //     });\r\n        // });\r\n\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            const boss: any = await this.breedOwnwerServices.models.findOne({\r\n                include: [\r\n                    {\r\n                        model: this.userServives.models,\r\n                        as: ActionAssociateDatabase.OWNER_TO_USER,\r\n                        include: [\r\n                            {\r\n                                model: this.seasonServices.models,\r\n                                as: ActionAssociateDatabase.USER_2_SEASON,\r\n                                where: {\r\n                                    userId: ownerId,\r\n                                    status: 0\r\n                                }\r\n                            },\r\n                            {\r\n                                model: this.userRolesServices.models,\r\n                                as: ActionAssociateDatabase.USER_2_ROLES_GET_EMPLOYEES,\r\n                                required: false,\r\n                                where: {\r\n                                    [this.sequeliz.Op.or]: [\r\n                                        {\r\n                                            userId\r\n                                        },\r\n                                        {\r\n                                            bossId: userId\r\n                                        },\r\n                                    ],\r\n                                    roles: 2\r\n                                } as any\r\n                            }\r\n                        ],\r\n                        attributes: ['userId', 'userUUId', 'lastname', 'firstname', 'username', 'createdDate', 'createdBy']\r\n                    }\r\n                ],\r\n                where: {\r\n                    userId: ownerId\r\n                },\r\n                transaction: t\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n                });\r\n                t.rollback();\r\n            });\r\n            // Là chủ và phiên nhập mới\r\n            if (boss && boss.user.seasons.length) {\r\n                const coupon: Coupon = new Coupon();\r\n                coupon.setUserId = userId;\r\n                coupon.setSeasonId = boss.user.seasons[0].seasonId;\r\n                const cp: any = await coupon.couponServives.models.create(coupon, {\r\n                    transaction: t\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Lỗi xác thực người dùng, vui lòng liên hệ nhà cung cấp để được hỗ trợ.'\r\n                    });\r\n                    t.rollback();\r\n                });\r\n                if (cp) {\r\n                    const result: any[] = [];\r\n                    for (const item of itemArr) {\r\n                        const breed: Breed = new Breed();\r\n                        if (typeof item.breedName === 'string') {\r\n                            breed.setBreed(null, uuidv4(), boss.ownerId, item.breedName, item.quantity, item.unit, item.loopOfBreed);\r\n                            const bre: any = await breed.breedServives.models.create(breed, {\r\n                                transaction: t\r\n                            }).catch(e => {\r\n                                response.status(200).json({\r\n                                    success: false,\r\n                                    message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n                                });\r\n                                t.rollback();\r\n                            });\r\n                            if (bre) {\r\n                                const boughtBreedDetail: BoughtBreedDetail = new BoughtBreedDetail();\r\n                                boughtBreedDetail.setBoughtBreedDetails(null, uuidv4(),cp.couponId, bre.breedId, item.quantity, item.unit, item.unitPrice, item.soldAddress, item.testingAgency, item.testingAgency);\r\n                                const mat: any = await boughtBreedDetail.boughtBreedDetailsServives.models.create(boughtBreedDetail, {\r\n                                    transaction: t\r\n                                }).catch(async e => {\r\n                                    if (e.message.includes('FailQuantityBoughtBreedDetails')) {\r\n                                        response.status(200).json({\r\n                                            success: false,\r\n                                            message: 'Lỗi nhập liệu số lượng vui lòng kiểm tra lại.',\r\n                                            position: item.position,\r\n                                            couponId: cp.couponId\r\n                                        });\r\n                                    } else {\r\n                                        response.status(200).json({\r\n                                            success: false,\r\n                                            message: `Thực hiện không thành công, vui lòng kiểm tra và thử lại sau.`,\r\n                                            position: item.position,\r\n                                            couponId: cp.couponId\r\n                                        });\r\n                                    }\r\n                                    t.rollback();\r\n                                });\r\n                                if (mat) {\r\n                                    result.push(mat);\r\n                                }\r\n                            }\r\n                        } else {\r\n                            const sUpdate: any = await breed.breedServives.models.update({\r\n                                totalQuantity: this.sequeliz.literal(`totalQuantity + ${item.quantity}`)\r\n                            }, {\r\n                                    where: {\r\n                                        breedId: item.breedName.breedId,\r\n                                        unit: item.breedName.unit\r\n                                    },\r\n                                    returning: true,\r\n                                    transaction: t\r\n                                }).catch(e => {\r\n                                    if (e.message.includes('FailQuantityBreed')) {\r\n                                        response.status(200).json({\r\n                                            success: false,\r\n                                            message: 'Lỗi nhập liệu số lượng vui lòng kiểm tra lại.',\r\n                                            position: item.position,\r\n                                            couponId: cp.couponId\r\n                                        });\r\n                                    } else {\r\n                                        response.status(200).json({\r\n                                            success: false,\r\n                                            message: `Thực hiện không thành công, vui lòng kiểm tra và thử lại sau.`,\r\n                                            position: item.position,\r\n                                            couponId: cp.couponId\r\n                                        });\r\n                                    }\r\n                                    t.rollback();\r\n                                });\r\n                            if (sUpdate.length > 0) {\r\n                                const boughtBreedDetail: BoughtBreedDetail = new BoughtBreedDetail();\r\n                                boughtBreedDetail.setBoughtBreedDetails(null, uuidv4(), cp.couponId, item.breedName.breedId, item.quantity, item.breedName.unit, item.unitPrice, item.soldAddress, item.testingAgency, item.testingAgency);\r\n                                const boughtBre = await boughtBreedDetail.boughtBreedDetailsServives.models.create(boughtBreedDetail, { transaction: t }).catch(e => {\r\n                                    if (e.message.includes('FailQuantityBoughtBreedDetails')) {\r\n                                        response.status(200).json({\r\n                                            success: false,\r\n                                            message: 'Lỗi nhập liệu số lượng vui lòng kiểm tra lại.',\r\n                                            position: item.position,\r\n                                            couponId: cp.couponId\r\n                                        });\r\n                                    } else {\r\n                                        response.status(200).json({\r\n                                            success: false,\r\n                                            message: `Thực hiện không thành công, vui lòng kiểm tra và thử lại sau.`,\r\n                                            position: item.position,\r\n                                            couponId: cp.couponId\r\n                                        });\r\n                                    }\r\n                                    t.rollback();\r\n                                });\r\n                                result.push(boughtBre);\r\n                            } else {\r\n                                t.rollback();\r\n                                response.status(200).json({\r\n                                    success: false,\r\n                                    message: `Có lỗi xảy ra.`,\r\n                                    position: item.position,\r\n                                    couponId: cp.couponId\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                    if (result.length === itemArr.length) {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: 'Thao tác thành công.'\r\n                        });\r\n                        t.commit();\r\n                    } else {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Có lỗi xảy ra, vui lòng thử lại sau.',\r\n                            couponId: cp.couponId\r\n                        });\r\n                        t.rollback();\r\n                    }\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Thực hiện không thành công, vui lòng thử lại sau.'\r\n                    });\r\n                    t.rollback();\r\n                }\r\n            }\r\n            // // Nhân viên và phiên nhập mới\r\n            // else if (!boss && !boughtBreedId) {\r\n            //     boss = await this.userRolesServices.models.findOne({\r\n            //         where: {\r\n            //             userId: deToken.userId,\r\n            //             [this.userRolesServices.Op.and]: {\r\n            //                 roles: 2\r\n            //             }\r\n            //         },\r\n            //         include: [\r\n            //             {\r\n            //                 model: this.userServives.models,\r\n            //                 as: ActionAssociateDatabase.USER_ROLES_2_USER_BOSS,\r\n            //                 include: [\r\n            //                     {\r\n            //                         model: this.breedOwnwerServices.models,\r\n            //                         as: ActionAssociateDatabase.USER_2_OWNER_BREED\r\n            //                     }\r\n            //                 ],\r\n            //                 attributes: ['userId', 'userUUId', 'lastname', 'firstname', 'username', 'createdDate', 'createdBy']\r\n            //             }\r\n            //         ],\r\n            //         transaction: t\r\n            //     }).catch(e => {\r\n            //         response.status(200).json({\r\n            //             success: false,\r\n            //             message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n            //         });\r\n            //         t.rollback();\r\n            //     });\r\n            //     if (boss) {\r\n            //         const ss: any = await this.seasonServices.models.findOne({\r\n            //             where: {\r\n            //                 userId: deToken.userId,\r\n            //                 status: 0\r\n            //             }\r\n            //         }).catch(e => {\r\n            //             response.status(200).json({\r\n            //                 success: false,\r\n            //                 message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n            //             });\r\n            //             t.rollback();\r\n            //         });\r\n            //         if (!ss) {\r\n            //             response.status(200).json({\r\n            //                 success: false,\r\n            //                 message: 'Hiện tại bạn chưa có vụ nào được kích hoạt vui lòng thêm một vụ.'\r\n            //             });\r\n            //             t.rollback();\r\n            //         } else {\r\n            //             const boughtBreed: BoughtBreed = new BoughtBreed();\r\n            //             boughtBreed.setBoughtBreedUUId = uuidv4();\r\n            //             boughtBreed.setUserId = deToken.userId;\r\n            //             boughtBreed.setSeasonId = ss.seasonId;\r\n            //             const bb: any = await boughtBreed.boughtBreedServives.models.create(boughtBreed, {\r\n            //                 transaction: t\r\n            //             });\r\n            //             if (bb) {\r\n            //                 const result: any[] = [];\r\n            //                 for (const item of itemArr) {\r\n            //                     const breed: Breed = new Breed();\r\n            //                     if (typeof item.breedName === 'string') {\r\n            //                         breed.setBreed(null, uuidv4(), boss.ownerId, item.breedName, item.quantity, item.unit, item.loopOfBreed);\r\n            //                         const bre: any = await breed.breedServives.models.create(breed, {\r\n            //                             transaction: t\r\n            //                         }).catch(e => {\r\n            //                             response.status(200).json({\r\n            //                                 success: false,\r\n            //                                 message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n            //                             });\r\n            //                             t.rollback();\r\n            //                         });\r\n            //                         if (bre) {\r\n            //                             const boughtBreedDetail: BoughtBreedDetail = new BoughtBreedDetail();\r\n            //                             boughtBreedDetail.setBoughtBreedDetails(null, uuidv4(), bb.boughtBreedId, bre.breedId, item.quantity, item.unit, item.unitPrice, item.soldAddress, item.testingAgency, item.testingAgency);\r\n            //                             const mat: any = await boughtBreedDetail.boughtBreedDetailsServives.models.create(boughtBreedDetail, {\r\n            //                                 transaction: t\r\n            //                             }).catch(async e => {\r\n            //                                 response.status(200).json({\r\n            //                                     success: false,\r\n            //                                     message: `Thực hiện không thành công, bị lỗi ở form nhập thứ ${item.position + 1}.`,\r\n            //                                     couponId: bb.boughtBreedId\r\n            //                                 });\r\n            //                                 t.rollback();\r\n            //                             });\r\n            //                             if (mat) {\r\n            //                                 result.push(mat);\r\n            //                             }\r\n            //                         }\r\n            //                     } else {\r\n            //                         const sUpdate: any = await breed.breedServives.models.update({\r\n            //                             totalQuantity: this.sequeliz.literal(`totalQuantity + ${item.quantity}`)\r\n            //                         }, {\r\n            //                                 where: {\r\n            //                                     breedId: item.breedName.breedId\r\n            //                                 },\r\n            //                                 transaction: t\r\n            //                             }).catch(e => {\r\n            //                                 response.status(200).json({\r\n            //                                     success: false,\r\n            //                                     message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n            //                                 });\r\n            //                                 t.rollback();\r\n            //                             });\r\n            //                         if (sUpdate.length > 0) {\r\n            //                             const boughtBreedDetail: BoughtBreedDetail = new BoughtBreedDetail();\r\n            //                             boughtBreedDetail.setBoughtBreedDetails(null, uuidv4(), bb.boughtBreedId, item.breedName.breedId, item.quantity, item.unit, item.unitPrice, item.soldAddress, item.testingAgency, item.testingAgency);\r\n            //                             const boughtBre = await boughtBreedDetail.boughtBreedDetailsServives.models.create(boughtBreedDetail, { transaction: t }).catch(e => {\r\n            //                                 response.status(200).json({\r\n            //                                     success: false,\r\n            //                                     message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n            //                                 });\r\n            //                                 t.rollback();\r\n            //                             });\r\n            //                             result.push(boughtBre);\r\n            //                         } else {\r\n            //                             t.rollback();\r\n            //                             response.status(200).json({\r\n            //                                 success: false,\r\n            //                                 message: `Thực hiện không thành công, bị lỗi ở form nhập thứ ${item.position + 1}.`,\r\n            //                                 position: item.position,\r\n            //                                 couponId: bb.boughtBreedId\r\n            //                             });\r\n            //                         }\r\n            //                     }\r\n            //                 }\r\n            //                 if (result.length === itemArr.length) {\r\n            //                     response.status(200).json({\r\n            //                         success: true,\r\n            //                         message: 'Thêm thành công, vui lòng đợi...'\r\n            //                     });\r\n            //                     t.commit();\r\n            //                 } else {\r\n            //                     response.status(200).json({\r\n            //                         success: false,\r\n            //                         message: 'Có lỗi xảy ra, vui lòng thử lại sau.',\r\n            //                         couponId: bb.boughtBreedId\r\n            //                     });\r\n            //                     t.rollback();\r\n            //                 }\r\n            //             }\r\n            //         }\r\n            //     } else {\r\n            //         response.status(200).json({\r\n            //             success: false,\r\n            //             message: 'Bạn chưa đủ thẩm quyền thực hiện thao tác, vui lòng liên hệ với quản lý của bạn để được hỗ trợ.'\r\n            //         });\r\n            //     }\r\n            // }\r\n            // // Nhân viên và phiên nhập cũ\r\n            // else if (!boss && boughtBreedId) {\r\n            //     boss = await this.userRolesServices.models.findOne({\r\n            //         where: {\r\n            //             userId: deToken.userId,\r\n            //             [this.userRolesServices.Op.and]: {\r\n            //                 roles: 2\r\n            //             }\r\n            //         },\r\n            //         include: [\r\n            //             {\r\n            //                 model: this.userServives.models,\r\n            //                 as: ActionAssociateDatabase.USER_ROLES_2_USER_BOSS,\r\n            //                 include: [\r\n            //                     {\r\n            //                         model: this.breedOwnwerServices.models,\r\n            //                         as: ActionAssociateDatabase.USER_2_OWNER_BREED\r\n            //                     }\r\n            //                 ],\r\n            //                 attributes: ['userId', 'userUUId', 'lastname', 'firstname', 'username', 'createdDate', 'createdBy']\r\n            //             }\r\n            //         ],\r\n            //         transaction: t\r\n            //     }).catch(e => {\r\n            //         response.status(200).json({\r\n            //             success: false,\r\n            //             message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n            //         });\r\n            //         t.rollback();\r\n            //     });\r\n            //     if (boss) {\r\n            //         const result: any[] = [];\r\n            //         for (const item of itemArr) {\r\n            //             const breed: Breed = new Breed();\r\n            //             if (typeof item.breedName === 'string') {\r\n            //                 breed.setBreed(null, uuidv4(), boss.ownerId, item.breedName, item.quantity, item.unit, item.loopOfBreed);\r\n            //                 const bre: any = await breed.breedServives.models.create(breed, {\r\n            //                     transaction: t\r\n            //                 }).catch(e => {\r\n            //                     response.status(200).json({\r\n            //                         success: false,\r\n            //                         message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n            //                     });\r\n            //                     t.rollback();\r\n            //                 });\r\n            //                 if (bre) {\r\n            //                     const boughtBreedDetail: BoughtBreedDetail = new BoughtBreedDetail();\r\n            //                     boughtBreedDetail.setBoughtBreedDetails(null, uuidv4(), boughtBreedId, bre.breedId, item.quantity, item.unit, item.unitPrice, item.soldAddress, item.testingAgency, item.testingAgency);\r\n            //                     const mat: any = await boughtBreedDetail.boughtBreedDetailsServives.models.create(boughtBreedDetail, {\r\n            //                         transaction: t\r\n            //                     }).catch(async e => {\r\n            //                         response.status(200).json({\r\n            //                             success: false,\r\n            //                             message: `Thực hiện không thành công, bị lỗi ở form nhập thứ ${item.position + 1}.`,\r\n            //                             position: item.position,\r\n            //                             boughtBreedId\r\n            //                         });\r\n            //                         t.rollback();\r\n            //                     });\r\n            //                     if (mat) {\r\n            //                         result.push(mat);\r\n            //                     }\r\n            //                 }\r\n            //             } else {\r\n            //                 const sUpdate: any = await breed.breedServives.models.update({\r\n            //                     totalQuantity: this.sequeliz.literal(`totalQuantity + ${item.quantity}`)\r\n            //                 }, {\r\n            //                         where: {\r\n            //                             breedId: item.breedName.breedId\r\n            //                         },\r\n            //                         transaction: t\r\n            //                     }).catch(e => {\r\n            //                         response.status(200).json({\r\n            //                             success: false,\r\n            //                             message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n            //                         });\r\n            //                         t.rollback();\r\n            //                     });\r\n            //                 if (sUpdate.length > 0) {\r\n            //                     const boughtBreedDetail: BoughtBreedDetail = new BoughtBreedDetail();\r\n            //                     boughtBreedDetail.setBoughtBreedDetails(null, uuidv4(), boughtBreedId, item.breedName.breedId, item.quantity, item.unit, item.unitPrice, item.soldAddress, item.testingAgency, item.testingAgency);\r\n            //                     const boughtBre = await boughtBreedDetail.boughtBreedDetailsServives.models.create(boughtBreedDetail, { transaction: t }).catch(e => {\r\n            //                         response.status(200).json({\r\n            //                             success: false,\r\n            //                             message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n            //                         });\r\n            //                         t.rollback();\r\n            //                     });\r\n            //                     result.push(boughtBre);\r\n            //                 } else {\r\n            //                     t.rollback();\r\n            //                     response.status(200).json({\r\n            //                         success: false,\r\n            //                         message: `Thực hiện không thành công, bị lỗi ở form nhập thứ ${item.position + 1}.`,\r\n            //                         position: item.position,\r\n            //                         boughtBreedId\r\n            //                     });\r\n            //                 }\r\n            //             }\r\n            //         }\r\n            //         if (result.length === itemArr.length) {\r\n            //             response.status(200).json({\r\n            //                 success: true,\r\n            //                 message: 'Thêm thành công, vui lòng đợi...'\r\n            //             });\r\n            //             t.commit();\r\n            //         } else {\r\n            //             response.status(200).json({\r\n            //                 success: false,\r\n            //                 message: 'Có lỗi xảy ra, vui lòng thử lại sau.',\r\n            //                 boughtBreedId\r\n            //             });\r\n            //             t.rollback();\r\n            //         }\r\n            //     } else {\r\n            //         response.status(200).json({\r\n            //             success: false,\r\n            //             message: 'Bạn chưa đủ thẩm quyền thực hiện thao tác, vui lòng liên hệ với quản lý của bạn để được hỗ trợ.'\r\n            //         });\r\n            //     }\r\n            // }\r\n        });\r\n    }\r\n\r\n    getBreed = async (request: Request, response: Response) => {\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy === null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n\r\n        const query: FindOptions<any> = {\r\n            include: [\r\n                {\r\n                    model: this.breedOwnwerServices.models,\r\n                    as: ActionAssociateDatabase.BREED_2_OWNER_BREED,\r\n                    include: [\r\n                        {\r\n                            model: this.userServives.models,\r\n                            as: ActionAssociateDatabase.OWNER_BREED_TO_USER,\r\n                            include: [\r\n                                {\r\n                                    model: this.userRolesServices.models,\r\n                                    as: ActionAssociateDatabase.USER_2_ROLES_GET_EMPLOYEES,\r\n                                    required: false\r\n                                }\r\n                            ],\r\n                            attributes: ['userId', 'userUUId', 'lastname', 'firstname', 'username', 'createdDate', 'createdBy']\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    model: this.boughtBreedDetailsServives.models,\r\n                    as: ActionAssociateDatabase.BREED_2_BOUGHT_BREED_DETAIL,\r\n                    include: [\r\n                        {\r\n                            model: this.couponServives.models,\r\n                            as: ActionAssociateDatabase.BOUGHT_BREED_DETAIL_2_COUPON\r\n                        }\r\n                    ]\r\n                }\r\n            ],\r\n            where: {\r\n                [this.sequeliz.Op.or]: [\r\n                    {\r\n                        '$owner.userId$': userId,\r\n                    },\r\n                    {\r\n                        '$owner->user->employees.userId$': userId,\r\n                        '$owner->user->employees.roles$': 2\r\n                    },\r\n                    {\r\n                        '$owner->user->employees.userId$': userId,\r\n                        '$owner->user->employees.roles$': 2\r\n                    }\r\n                ]\r\n            } as any\r\n        };\r\n        this.breedServives.models.findAll(query).then((res: any) => {\r\n            if (!res.length) {\r\n                return response.status(200).json({\r\n                    success: false,\r\n                    message: 'Hiện tại trong kho không có giống nào.',\r\n                    breeds: res\r\n                });\r\n            }\r\n            return response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                breeds: res\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra!'\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './stocking.route';\r\n","import { Stocking, StockingDetail } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, SeasonServices, SeasonAndPondServices, BreedServives, StockingServices, StockingDetailsServices, PondsServices, UserServives, PondUserRolesServices } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { Transaction, FindOptions, UpdateOptions } from 'sequelize';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class StockingRoute extends BaseRoute {\r\n    public static path = '/stocking';\r\n    private static instance: StockingRoute;\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private seasonAndPondServices: SeasonAndPondServices = new SeasonAndPondServices();\r\n    private breedServives: BreedServives = new BreedServives();\r\n    private stockingServices: StockingServices = new StockingServices();\r\n    private stockingDetailsServices: StockingDetailsServices = new StockingDetailsServices();\r\n    private pondsServices: PondsServices = new PondsServices();\r\n    private userServives: UserServives = new UserServives();\r\n    private pondUserRolesServices: PondUserRolesServices = new PondUserRolesServices();\r\n    /**\r\n     * @class StockingRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!StockingRoute.instance) {\r\n            StockingRoute.instance = new StockingRoute();\r\n        }\r\n        return StockingRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[StockingRoute] Creating stocking route.');\r\n\r\n        // add route\r\n        this.router.post('/add', Authentication.isLogin, this.addStocking);\r\n        this.router.post('/gets', Authentication.isLogin, this.getStocking);\r\n        this.router.post('/get/stockingDetailUUId', Authentication.isLogin, this.getStockingDetailsByStockingDetailsUUId);\r\n        this.router.put('/update', Authentication.isLogin, this.updateStockingDetailsByStockingDetailsUUId);\r\n\r\n        // log endpoint\r\n        this.logEndpoints(this.router, StockingRoute.path);\r\n    }\r\n\r\n    private addStocking = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { ownerId, pondId, breedId, stockingQuantity, phFirst, salinityFirst, notes, createdDate } = request.body;\r\n        const seasonAndPond: any = await this.seasonAndPondServices.models.findOne({\r\n            include: [\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    },\r\n                    attributes: []\r\n                }\r\n            ],\r\n            where: {\r\n                pondId\r\n            },\r\n            attributes: ['seasonAndPondId']\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        });\r\n        this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            const stocking: Stocking = new Stocking();\r\n            stocking.setStocking(null, uuidv4(), seasonAndPond.seasonAndPondId, notes, createdDate);\r\n            const st: any = await stocking.stockingServices.models.create(stocking, {\r\n                transaction: t\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                });\r\n                t.rollback();\r\n            });\r\n            if (st) {\r\n                const onUpdate: any = await this.breedServives.models.update(\r\n                    {\r\n                        totalQuantity: this.sequeliz.literal(`totalQuantity - ${stockingQuantity}`)\r\n                    },\r\n                    {\r\n                        where: {\r\n                            breedId // lấy ra từ form select get từ api breed, chỉ có breed của owner hiện tại\r\n                        }\r\n                    }\r\n                ).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                    });\r\n                    t.rollback();\r\n                });\r\n                if (onUpdate) {\r\n                    const stockingDetail: StockingDetail = new StockingDetail();\r\n                    stockingDetail.setStockingdetails(uuidv4(), breedId, st.stockingId, stockingQuantity, phFirst, salinityFirst);\r\n                    const std: any = await stockingDetail.stockingDetailsServices.models.create(stockingDetail, {\r\n                        transaction: t\r\n                    }).catch(e => {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                        });\r\n                        t.rollback();\r\n                    });\r\n                    if(!!Object.keys(std).length) {\r\n                        this.pondsServices.models.update({\r\n                            status: 1\r\n                        }, {\r\n                            where: {\r\n                                pondId\r\n                            },\r\n                            transaction: t\r\n                        }).then(res => {\r\n                            if(!!Object.keys(res).length) {\r\n                                t.commit();\r\n                                return response.status(200).json({\r\n                                    success: true,\r\n                                    message: 'Thêm nhật ký thả nuôi thành công.'\r\n                                });\r\n                            } else {\r\n                                t.rollback();\r\n                                response.status(200).json({\r\n                                    success: false,\r\n                                    message: 'Không thể thêm nhật ký thả nuôi.'\r\n                                });\r\n                            }\r\n                        }).catch(e => {\r\n                            t.rollback();\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private getStocking = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonId, ownerId } = request.body;\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        this.stockingServices.models.findAll(({\r\n            include: [\r\n                {\r\n                    model: this.seasonAndPondServices.models,\r\n                    as: ActionAssociateDatabase.STOCKING_2_SEASON_AND_POND,\r\n                    where: {\r\n                        seasonId\r\n                    },\r\n                    include: [\r\n                        {\r\n                            model: this.seasonServices.models,\r\n                            as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                            where: {\r\n                                userId: ownerId\r\n                            },\r\n                            attributes: []\r\n                        },\r\n                        {\r\n                            model: this.pondsServices.models,\r\n                            as: ActionAssociateDatabase.SEASON_AND_POND_2_POND,\r\n                            include: [\r\n                                {\r\n                                    model: this.userServives.models,\r\n                                    as: ActionAssociateDatabase.POND_2_EMPLOYEE_MAYNY_ROLES,\r\n                                    required: false,\r\n                                    attributes: []\r\n                                },\r\n                                {\r\n                                    model: this.pondUserRolesServices.models,\r\n                                    as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                                    required: false,\r\n                                    attributes: []\r\n                                }\r\n                            ]\r\n                        }\r\n                    ],\r\n                },\r\n                {\r\n                    model: this.stockingDetailsServices.models,\r\n                    as: ActionAssociateDatabase.STOCKING_2_STOCKING_DETAILS,\r\n                    include: [\r\n                        {\r\n                            model: this.breedServives.models,\r\n                            as: ActionAssociateDatabase.STOCKING_DETAILS_2_BREED\r\n                        }\r\n                    ]\r\n                }\r\n            ],\r\n            where: {\r\n                [this.sequeliz.Op.or]: [\r\n                    {\r\n                        '$seasonAndPond->ponds.userId$': deToken.userId\r\n                    },\r\n                    {\r\n                        '$seasonAndPond->ponds->users->ponduserroles.userId$': deToken.userId\r\n                    }\r\n                ]\r\n            }\r\n        } as any)).then(res => {\r\n            if (!res.length) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy nhật ký thả ao.',\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    stocking: res\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.',\r\n                e\r\n            });\r\n        });\r\n    }\r\n\r\n    private getStockingDetailsByStockingDetailsUUId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { stockingDetailUUId } = request.body;\r\n        this.stockingDetailsServices.models.findOne({\r\n            where: {\r\n                stockingDetailUUId\r\n            }\r\n        }).then(res => {\r\n            if (!res) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy hoạt động thả nuôi.'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    stockingDetails: res\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Có lỗi xảy ra.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private updateStockingDetailsByStockingDetailsUUId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { stockingDetailUUId, breedId, stockingQuantity, oldValue } = request.body;\r\n        let onUpdate: any = {};\r\n        if(stockingQuantity >=  oldValue) {\r\n            onUpdate = {\r\n                totalQuantity: this.sequeliz.literal(`totalQuantity - ${ stockingQuantity - oldValue }`)\r\n            };\r\n        } else {\r\n            onUpdate = {\r\n                totalQuantity: this.sequeliz.literal(`totalQuantity + ${ oldValue - stockingQuantity }`)\r\n            };\r\n        }\r\n        this.breedServives.models.update(onUpdate, {\r\n            where: {\r\n                breedId\r\n            }\r\n        }).then(ok => {\r\n            this.stockingDetailsServices.models.update({\r\n                stockingQuantity\r\n            }, {\r\n                where: {\r\n                    stockingDetailUUId\r\n                },\r\n                returning: true\r\n            }).then(res => {\r\n                if (!res.length) {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Thất bại, vui lòng thử lại sau.'\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Cập nhật thành công!'\r\n                    });\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Có lỗi xảy ra.'\r\n                });\r\n            });\r\n        }).catch(e => {\r\n            e;\r\n            if(e.message.includes('FailQuantityBreed')) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Số lượng không phù hợp, vui lòng kiểm tra lại!'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, vui lòng thử lại sau!'\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n","export * from './diedFishery.route';\r\n","import { DiedFishery } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, SeasonAndPondServices, SeasonServices, DiedFisherysServives } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\n\r\n/**\r\n * @api {all} /ping Died Fishery Request customer object\r\n * @apiName Died Fishery\r\n * @apiGroup Died Fishery\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class DiedFisheryRoute extends BaseRoute {\r\n    public static path = '/diedFishery';\r\n    private static instance: DiedFisheryRoute;\r\n    private seasonAndPondServices: SeasonAndPondServices = new SeasonAndPondServices();\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private diedFisherysServives: DiedFisherysServives = new DiedFisherysServives();\r\n    /**\r\n     * @class DiedFisheryRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!DiedFisheryRoute.instance) {\r\n            DiedFisheryRoute.instance = new DiedFisheryRoute();\r\n        }\r\n        return DiedFisheryRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[DiedFisheryRoute] Creating Died Fishery route.');\r\n\r\n        // add route\r\n        this.router.post('/add', Authentication.isLogin, this.addDiedFishery);\r\n        this.router.post('/gets', Authentication.isLogin, this.getDiedFishery);\r\n        this.router.post('/get/diedFisheryUUId', Authentication.isLogin, this.getDiedFisheryByDiedFisheryUUId);\r\n        this.router.put('/update', Authentication.isLogin, this.updateDiedFisheryByDiedFisheryUUId);\r\n\r\n        // log path\r\n        this.logEndpoints(this.router, DiedFisheryRoute.path);\r\n    }\r\n\r\n    //  Add DiedFishery\r\n    private addDiedFishery = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondId, ownerId, card, quantity, solutions, employee } = request.body;\r\n        const seasonAndPond: any = await this.seasonAndPondServices.models.findOne({\r\n            include: [\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    },\r\n                    attributes: []\r\n                }\r\n            ],\r\n            where: {\r\n                pondId\r\n            },\r\n            attributes: ['seasonAndPondId']\r\n        }).catch(e => {\r\n            e;\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        });\r\n        if(!!Object.keys(seasonAndPond).length) {\r\n            const diedFishery: DiedFishery = new DiedFishery();\r\n            diedFishery.setDiedfisherys(null, uuidv4(), seasonAndPond.seasonAndPondId, card, quantity, solutions, employee);\r\n            diedFishery.diedFisherysServives.models.create(diedFishery).then(res => {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: 'Thêm thành công.'\r\n                });\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                });\r\n            });\r\n        } else {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi đường truyền!'\r\n            });\r\n        }\r\n    }\r\n\r\n    private getDiedFishery = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonId, pondId, ownerId } = request.body;\r\n        this.diedFisherysServives.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.seasonAndPondServices.models,\r\n                    as: ActionAssociateDatabase.DIED_FISHERY_2_SEASON_AND_POND,\r\n                    where: {\r\n                        seasonId,\r\n                        pondId\r\n                    }\r\n                }\r\n            ],\r\n            order: [\r\n                ['createdDate', 'DESC']\r\n            ]\r\n        }).then((wastes) => {\r\n            if(!wastes.length) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy nhật ký sử lý chất thải.'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    wastes\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi, vui lòng thử lại sau.',\r\n            });\r\n        });\r\n    }\r\n\r\n    private getDiedFisheryByDiedFisheryUUId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { diedFisheryUUId } = request.body;\r\n        this.diedFisherysServives.models.findOne({\r\n            where: {\r\n                diedFisheryUUId\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi đường truyền, vui lòng thử lại sau.'\r\n            });\r\n        }).then((res: any) => {\r\n            if(!res) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy.'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    waste: res.dataValues\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    private updateDiedFisheryByDiedFisheryUUId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { diedFisheryUUId, card, quantity, solutions, employee } = request.body;\r\n        const diedFishery: DiedFishery = new DiedFishery();\r\n        diedFishery.setDiedfisherys(null, diedFisheryUUId, undefined, card, quantity, solutions, employee);\r\n        this.diedFisherysServives.models.update({ card, quantity, solutions, employee }, {\r\n            where: {\r\n                diedFisheryUUId\r\n            },\r\n            returning: true\r\n        }).then((res: any) => {\r\n            if (!res.length) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, xin vui lòng thử lại sau!'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: 'Cập nhật thông tin tăng trưởng thành công!'\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau!'\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './growths.route';\r\n","import { Growth } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, SeasonAndPondServices, GrowthsServives, SeasonServices } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { Transaction } from 'sequelize';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class GrowthsRoute extends BaseRoute {\r\n    public static path = '/growths';\r\n    private static instance: GrowthsRoute;\r\n    private growthsServives: GrowthsServives = new GrowthsServives();\r\n    private seasonAndPondServices: SeasonAndPondServices = new SeasonAndPondServices();\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    /**\r\n     * @class GrowthsRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!GrowthsRoute.instance) {\r\n            GrowthsRoute.instance = new GrowthsRoute();\r\n        }\r\n        return GrowthsRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[GrowthsRoute] Creating growth route.');\r\n\r\n        // add route\r\n        this.router.post('/add', Authentication.isLogin, this.addGrowth);\r\n        this.router.post('/gets', Authentication.isLogin, this.getGrowths);\r\n        this.router.post('/get/growthUUId', Authentication.isLogin, this.getGrowthByUUId);\r\n        this.router.put('/update', Authentication.isLogin, this.updateGrowth);\r\n\r\n        // log enpoints\r\n        this.logEndpoints(this.router, GrowthsRoute.path);\r\n    }\r\n\r\n    // Get getgrowths\r\n    private getGrowths = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonId, pondId, ownerId } = request.body;\r\n        this.growthsServives.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.seasonAndPondServices.models,\r\n                    as: ActionAssociateDatabase.GROWTH_2_SEASON_AND_POND,\r\n                    where: {\r\n                        seasonId,\r\n                        pondId\r\n                    }\r\n                }\r\n            ],\r\n            order: [\r\n                ['createdDate', 'DESC']\r\n            ]\r\n        }).then((growths) => {\r\n            if(!!growths.length) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    growths\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy thông tin tăng trưởng.',\r\n                    growths: []\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi, vui lòng thử lại sau.',\r\n            });\r\n        });\r\n    }\r\n\r\n    //  Add addgrowth\r\n    private addGrowth = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondId, ownerId, averageDensity, averageMass, speedOdGrowth, livingRatio } = request.body;\r\n        const seasonAndPond: any = await this.seasonAndPondServices.models.findOne({\r\n            include: [\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    },\r\n                    attributes: []\r\n                }\r\n            ],\r\n            where: {\r\n                pondId\r\n            },\r\n            attributes: ['seasonAndPondId']\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        });\r\n        const growth: Growth = new Growth();\r\n        if(seasonAndPond) {\r\n            growth.setGrowths(null, uuidv4(), seasonAndPond.seasonAndPondId, averageDensity, averageMass, speedOdGrowth, livingRatio);\r\n            growth.growthsServives.models.create(growth).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                });\r\n            }).then(res => {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: 'Thêm thành công.'\r\n                });\r\n            });\r\n        } else {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        }\r\n    }\r\n\r\n    private getGrowthByUUId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { growthUUId } = request.body;\r\n        this.growthsServives.models.findOne({\r\n            where: {growthUUId}\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi đường truyền, vui lòng thử lại sau.'\r\n            });\r\n        }).then((res: any) => {\r\n            if(!res) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy.'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    growth: res.dataValues\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    // Update growth by Id\r\n    private updateGrowth = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { growthUUId, averageDensity, averageMass, speedOdGrowth, livingRatio } = request.body;\r\n        const growth: Growth = new Growth();\r\n        growth.setGrowthUUId = growthUUId;\r\n        if (!growthUUId) {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Hành động không được phép, vui lòng thử lại sau!'\r\n            });\r\n        } else {\r\n            growth.setGrowths(undefined, growthUUId, undefined, averageDensity, averageMass, speedOdGrowth, livingRatio, undefined, undefined, undefined, undefined, undefined);\r\n            growth.growthsServives.models.update(growth.getFields(growth), {\r\n                where: {\r\n                    growthUUId\r\n                },\r\n                returning: true\r\n            }).then((res: any) => {\r\n                if (!res) {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã có lỗi xảy ra, xin vui lòng thử lại sau!'\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Cập nhật thông tin tăng trưởng thành công!'\r\n                    });\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, vui lòng thử lại sau!'\r\n                });\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n}\r\n","export * from './harvest.route';\r\n","import { Harvest, HarvestDetail } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, SeasonAndPondServices, SeasonServices, HarvestsServives, HarvestDetailsServives, PondsServices, StockingServices, StockingDetailsServices, BreedServives } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { Transaction } from 'sequelize';\r\n\r\n/**\r\n * @api {all} /harvests Harvest Request customer object\r\n * @apiName Harvest\r\n * @apiGroup Harvest\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class HarvestRoute extends BaseRoute {\r\n    public static path = '/harvests';\r\n    private static instance: HarvestRoute;\r\n    private seasonAndPondServices: SeasonAndPondServices = new SeasonAndPondServices();\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private harvestsServives: HarvestsServives = new HarvestsServives();\r\n    private harvestDetailsServives: HarvestDetailsServives = new HarvestDetailsServives();\r\n    private pondsServices: PondsServices = new PondsServices();\r\n    private stockingServices: StockingServices = new StockingServices();\r\n    private stockingDetailsServices: StockingDetailsServices = new StockingDetailsServices();\r\n    private breedServives: BreedServives = new BreedServives();\r\n\r\n    /**\r\n     * @class HarvestRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!HarvestRoute.instance) {\r\n            HarvestRoute.instance = new HarvestRoute();\r\n        }\r\n        return HarvestRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[HarvestRoute] Creating harvest route.');\r\n\r\n        // add route\r\n        this.router.post('/add', Authentication.isLogin, this.addHarvest);\r\n        this.router.post('/gets', Authentication.isLogin, this.getHarvest);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, HarvestRoute.path);\r\n    }\r\n\r\n    // Get harvest\r\n    private addHarvest = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondId, ownerId, harvestId, harvestName, quantity, unitPrice } = request.body;\r\n        const seasonAndPond: any = await this.seasonAndPondServices.models.findOne({\r\n            include: [\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    },\r\n                    attributes: []\r\n                }\r\n            ],\r\n            where: {\r\n                pondId\r\n            },\r\n            attributes: ['seasonAndPondId']\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        });\r\n        // Lần thu hoạch mới\r\n        if(!harvestId) {\r\n            return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n                const harvest: Harvest = new Harvest();\r\n                harvest.setHarvests(null, uuidv4(), seasonAndPond.seasonAndPondId, harvestName);\r\n                const hv: any = await harvest.harvestsServives.models.create(harvest, {\r\n                    transaction: t\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                    });\r\n                    t.rollback();\r\n                });\r\n                if(hv) {\r\n                    const harvestDetail: HarvestDetail = new HarvestDetail();\r\n                    harvestDetail.setHarvestdetails(uuidv4(), hv.harvestId, quantity, unitPrice);\r\n                    harvestDetail.harvestDetailsServives.models.create(harvestDetail, {\r\n                        transaction: t\r\n                    }).catch(e => {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                        });\r\n                        t.rollback();\r\n                    }).then(res => {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: 'Thêm thành công.'\r\n                        });\r\n                        t.commit();\r\n                    });\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                });\r\n            });\r\n        } else {\r\n            const harvestDetail: HarvestDetail = new HarvestDetail();\r\n            harvestDetail.setHarvestdetails(uuidv4(), harvestId, quantity, unitPrice);\r\n            harvestDetail.harvestDetailsServives.models.create(harvestDetail).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                });\r\n            }).then(res => {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: 'Thêm thành công.'\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @method POST\r\n     */\r\n    private getHarvest = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonId, pondId } = request.body;\r\n        this.harvestsServives.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.seasonAndPondServices.models,\r\n                    as: ActionAssociateDatabase.HARVEST_2_SEASON_AND_POND,\r\n                    include: [\r\n                        {\r\n                            model: this.seasonServices.models,\r\n                            as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                            where: {\r\n                                seasonId\r\n                            }\r\n                        },\r\n                        {\r\n                            model: this.pondsServices.models,\r\n                            as: ActionAssociateDatabase.SEASON_AND_POND_2_POND,\r\n                            where: {\r\n                                pondId\r\n                            }\r\n                        },\r\n                        {\r\n                            model: this.stockingServices.models,\r\n                            as: ActionAssociateDatabase.SEASON_AND_POND_2_STOCKING,\r\n                            required: false,\r\n                            include: [\r\n                                {\r\n                                    model: this.stockingDetailsServices.models,\r\n                                    as: ActionAssociateDatabase.STOCKING_2_STOCKING_DETAILS,\r\n                                    include: [\r\n                                        {\r\n                                            model: this.breedServives.models,\r\n                                            as: ActionAssociateDatabase.STOCKING_DETAILS_2_BREED\r\n                                        }\r\n                                    ]\r\n                                }\r\n                            ]\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    model: this.harvestDetailsServives.models,\r\n                    as: ActionAssociateDatabase.HARVEST_2_HARVEST_DETAILS\r\n                }\r\n            ]\r\n        }).then(res => {\r\n            if(!res.length) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy nhật ký thu hoạch.'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    harvests: res\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            e;\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './userRoles.route';\r\n","import { NextFunction, Request, Response } from 'express';\r\nimport { logger, UserServives, UserRolesServices } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { UserRole } from '../../components';\r\nimport { Transaction, FindOptions } from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../../common';\r\n\r\n/**\r\n * @api {get} /user/roles UserRoles Request customer object\r\n * @apiName UserRoles\r\n * @apiGroup UserRoles\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class UserRoleRoute extends BaseRoute {\r\n    public static path = '/userRoles';\r\n    private static instance: UserRoleRoute;\r\n    private userServives: UserServives = new UserServives();\r\n    private userRolesServices: UserRolesServices = new UserRolesServices();\r\n    /**\r\n     * @class UserRoleRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!UserRoleRoute.instance) {\r\n            UserRoleRoute.instance = new UserRoleRoute();\r\n        }\r\n        return UserRoleRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[UserRoleRoute] Creating roles of user route.');\r\n\r\n        // add route\r\n        this.router.get('/gets', Authentication.isLogin, this.getAllMyEmployee);\r\n        this.router.get('/get/:roleId', Authentication.isLogin, this.getRoleByRoleId);\r\n        this.router.put('/delete', Authentication.isLogin, this.deleteRoles);\r\n        this.router.put('/upsert', Authentication.isLogin, this.upsertRoles);\r\n        this.router.put('/change', Authentication.isLogin, this.changeRoles);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, UserRoleRoute.path);\r\n    }\r\n\r\n    /**\r\n     * Get Employees with boss of farm\r\n     * @method GET\r\n     * @param request.headers\r\n     * ```\r\n     *      {\r\n     *          authorization: \"token\",\r\n     *          roles: '' || '1' || '2'\r\n     *      }\r\n     * ```\r\n     */\r\n    private getAllMyEmployee = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { roles } = request.headers;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        // create query\r\n        const query: FindOptions<any> = {\r\n            include: [],\r\n            where: {}\r\n        };\r\n\r\n        // get userInfo\r\n        const userInfo: any = {\r\n            model: this.userServives.models,\r\n            as: ActionAssociateDatabase.USER_ROLES_2_USER,\r\n            attributes: ['userId', 'userUUId', 'lastname', 'firstname', 'username', 'createdDate', 'createdBy']\r\n        };\r\n        query.include.push(userInfo);\r\n\r\n        // tmp where\r\n        // let where: any = {};\r\n        if (isBoss) {\r\n            if (roles) {\r\n                // get with roles\r\n                query.where = {\r\n                    bossId: userId,\r\n                    roles // 1 is pond using role\r\n                };\r\n            } else {\r\n                // get without roles\r\n                query.where = {\r\n                    bossId: userId\r\n                };\r\n            }\r\n        } else {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Dừng lại! Truy cập là trái phép.'\r\n            });\r\n        }\r\n        this.userRolesServices.models.findAll(query).then((res: any) => {\r\n            if (res) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    employees: res\r\n                });\r\n            } else {\r\n                if (roles === '1') {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Bạn không có nhân viên quản lý AO nào cả.'\r\n                    });\r\n                } else if (roles === '2') {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Bạn không có nhân viên quản lý KHO nào cả.'\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Bạn không có nhân viên nào cả. Vui lòng thêm tài khoản cho nhân viên và thử lại sau.'\r\n                    });\r\n                }\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xãy ra, xin vui lòng thử lại!'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get Role by roleId\r\n     * @method GET\r\n     * @param request.params {Request} The express Request object.\r\n     */\r\n    private getRoleByRoleId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { roleId } = request.params;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        if(!isBoss) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Dừng lại! Truy cập là trái phép.'\r\n            });\r\n        }\r\n        this.userRolesServices.models.findById(roleId).then((role: UserRole) => {\r\n                if (role) {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: '',\r\n                        role\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Không tìm thấy danh mục phân quyền này.'\r\n                    });\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n                });\r\n            });\r\n    }\r\n\r\n    private deleteRoles = async (request: Request, response: Response, next: NextFunction) => {\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const { rolesId } = request.body;\r\n        this.userRolesServices.models.destroy({\r\n            where: {\r\n                bossId: userId,\r\n                rolesId\r\n            }\r\n        }).then((res: any) => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: 'Thu hồi thành công!'\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi đường truyền, vui lòng thử lại sau!'\r\n            });\r\n        });\r\n    }\r\n\r\n    private upsertRoles = async (request: Request, response: Response, next: NextFunction) => {\r\n        const userRole: UserRole = new UserRole();\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId, roles, isDeleted } = request.body;\r\n        userRole.setBossId = deToken.userId;\r\n        userRole.setUserId = userId;\r\n        userRole.setRoles = roles;\r\n        userRole.setIsDeleted = isDeleted;\r\n        const main: any = await this.userRolesServices.models.findAll({\r\n            where: {\r\n                userId,\r\n                bossId: deToken.userId\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n        if(!main) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Bạn không có quyền thao tác này!'\r\n            });\r\n        }\r\n        userRole.userRolesServices.models.upsert(userRole.getFields(), {\r\n            fields: ['roles', 'isDeleted'],\r\n            returning: true\r\n        }).then((res: any) => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: 'Thao tác thành công.'\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private changeRoles = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { rolesId, userId, roles, isDeleted } = request.body;\r\n        let userRole: UserRole = new UserRole();\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            userRole = new UserRole();\r\n            userRole.setRolesId = rolesId;\r\n            userRole.setIsDeleted = 1;\r\n            userRole.userRolesServices.models.upsert(userRole.getFields(), {\r\n                fields: ['roles', 'isDeleted'],\r\n                returning: true,\r\n                transaction: t\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau!'\r\n                });\r\n                t.rollback();\r\n            }).then(async (result: any) => {\r\n                const token: string = request.headers.authorization.split(' ')[1];\r\n                const deToken: any = Authentication.detoken(token);\r\n                userRole = new UserRole();\r\n                userRole.setBossId = deToken.userId;\r\n                userRole.setUserId = userId;\r\n                userRole.setRoles = roles;\r\n                userRole.setIsDeleted = 0;\r\n                userRole.userRolesServices.models.upsert(userRole.getFields(), {\r\n                    fields: ['roles', 'isDeleted'],\r\n                    returning: true,\r\n                    transaction: t\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau!'\r\n                    });\r\n                    t.rollback();\r\n                }).then(async (res: any) => {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Thực hiện thành công.'\r\n                    });\r\n                    t.commit();\r\n                });\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './pondsUsersRoles.route';\r\n","import { PondUserRole } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, PondUserRolesServices, UserRolesServices, UserServives, PondsServices } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { ActionAssociateDatabase } from '../../common';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class PondUserRolesRoute extends BaseRoute {\r\n    public static path = '/pondUserRoles';\r\n    private static instance: PondUserRolesRoute;\r\n    private pondUserRolesServices: PondUserRolesServices = new PondUserRolesServices();\r\n    private userRolesServices: UserRolesServices = new UserRolesServices();\r\n    private userServives: UserServives = new UserServives();\r\n    private pondsServices: PondsServices = new PondsServices();\r\n    /**\r\n     * @class PondUserRolesRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!PondUserRolesRoute.instance) {\r\n            PondUserRolesRoute.instance = new PondUserRolesRoute();\r\n        }\r\n        return PondUserRolesRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[PondUserRolesRoute] Creating role pond of user route.');\r\n\r\n        // add route\r\n        this.router.post('/add', Authentication.isLogin, this.addPondRoles);\r\n        this.router.get('/gets', Authentication.isLogin, this.getUserManageWithPond);\r\n        this.router.put('/update', Authentication.isLogin, this.updateRoles);\r\n        this.router.put('/delete', Authentication.isLogin, this.deleteRoles);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, PondUserRolesRoute.path);\r\n    }\r\n\r\n    private addPondRoles = async (request: Request, response: Response, next: NextFunction) => {\r\n        const pondUserRole: PondUserRole = new PondUserRole();\r\n        const { userId, pondId } = request.body;\r\n        pondUserRole.setUserId = (userId as number) - 0;\r\n        pondUserRole.setPondId = pondId;\r\n        pondUserRole.pondUserRolesServices.models.create(pondUserRole.getFields(pondUserRole))\r\n        .then((res: any) => {\r\n            if(res) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: 'Thao tác thành công!',\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Người đã có quyền trên ao này.'\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            if(e) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Có lỗi xảy ra vui lòng kiểm tra và thử lại!'\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    private getUserManageWithPond = async (request: Request, response: Response, next: NextFunction) => {\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        if(!isBoss) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Dừng lại! Truy cập là trái phép.'\r\n            });\r\n        } else {\r\n            this.userRolesServices.models.findAll({\r\n                include: [\r\n                    {\r\n                        model: this.userServives.models,\r\n                        as: ActionAssociateDatabase.USER_ROLES_2_USER,\r\n                        include: [\r\n                            {\r\n                                model: this.pondUserRolesServices.models,\r\n                                as: ActionAssociateDatabase.USER_2_POND_USER_ROLE,\r\n                                required: false,\r\n                                include: [\r\n                                    {\r\n                                        model: this.pondsServices.models,\r\n                                        as: ActionAssociateDatabase.POND_USER_ROLE_2_POND,\r\n                                        required: false\r\n                                    }\r\n                                ]\r\n                            }\r\n                        ],\r\n                        attributes: ['userId', 'userUUId', 'lastname', 'firstname', 'username',  'createdDate', 'createdBy']\r\n                    }\r\n                ],\r\n                where: {\r\n                    bossId: userId,\r\n                    roles: 1\r\n                }\r\n            }).then((res: any) => {\r\n                if(!res.length) {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Bạn không có nhân viên vào.',\r\n                        employees: res\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: '',\r\n                        employees: res\r\n                    });\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    private updateRoles = async (request: Request, response: Response, next: NextFunction) => {\r\n        const pondUserRole: PondUserRole = new PondUserRole();\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const { pondUserRolesId, pondId } = request.body;\r\n        if(!pondId && !pondUserRolesId) {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Hành động không được phép, vui lòng thử lại sau!'\r\n            });\r\n        } else {\r\n            pondUserRole.setPondUserRolesId = pondUserRolesId;\r\n            pondUserRole.setPondId = pondId;\r\n            pondUserRole.pondUserRolesServices.models.update(pondUserRole.getFields(pondUserRole), {\r\n                where: {\r\n                    pondUserRolesId\r\n                }\r\n            }).then((res: any) => {\r\n                if(!res) {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã có lỗi xảy ra, xin vui lòng thử lại sau!'\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Cập nhật thành công!'\r\n                    });\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Nhân viên đã có quyền thao tác với ao này, vui lòng kiểm tra và thử lại sau!'\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    private deleteRoles = async (request: Request, response: Response, next: NextFunction) => {\r\n        const pondUserRole: PondUserRole = new PondUserRole();\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const { pondUserRolesId } = request.body;\r\n        pondUserRole.setIsDeleted = 1;\r\n        pondUserRole.pondUserRolesServices.models.destroy({\r\n            where: {\r\n                pondUserRolesId\r\n            }\r\n        }).then(res => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: 'Thao tác thành công!'\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi đường truyền, vui lòng thử lại sau!'\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './material.route';\r\n","import { NextFunction, Request, Response } from 'express';\r\nimport { logger } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { Material } from '../../components';\r\nimport { Transaction } from 'sequelize';\r\n/**\r\n * @api {get} /materials Material Request customer object\r\n * @apiName Material\r\n * @apiGroup Material\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class MaterialRoute extends BaseRoute {\r\n    public static path = '/materials';\r\n    private static instance: MaterialRoute;\r\n    /**\r\n     * @class MaterialRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!MaterialRoute.instance) {\r\n            MaterialRoute.instance = new MaterialRoute();\r\n        }\r\n        return MaterialRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[MaterialRoute] Creating materials route.');\r\n\r\n        // add index page route\r\n        this.router.get('/gets', this.getAll);\r\n    }\r\n\r\n    /**\r\n     * @class MaterialRoute\r\n     * @method get\r\n     * @param req {Request} The express Request object.\r\n     * @param res {Response} The express Response object.\r\n     * @param next {NextFunction} Execute the next method.\r\n     */\r\n    private getAll = async (request: Request, response: Response, next: NextFunction) => {\r\n        const material: Material = new Material();\r\n        material.materialServives.models.findAll().then(res => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                res\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './seasonAndPond.route';\r\n","import { NextFunction, Request, Response } from 'express';\r\nimport { logger, SeasonAndPondServices, SeasonServices, PondsServices } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { SeasonsAndPond } from '../../components';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport { Transaction } from 'sequelize';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { differenceWith, isEqual } from 'lodash';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class SeasonAndPondRoute extends BaseRoute {\r\n    public static path = '/seasonAndPond';\r\n    private static instance: SeasonAndPondRoute;\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private pondsServices: PondsServices = new PondsServices();\r\n    private seasonAndPondServices: SeasonAndPondServices = new SeasonAndPondServices();\r\n    /**\r\n     * @class SeasonAndPondRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!SeasonAndPondRoute.instance) {\r\n            SeasonAndPondRoute.instance = new SeasonAndPondRoute();\r\n        }\r\n        return SeasonAndPondRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[SeasonAndPondRoute] Creating season and pond associate route.');\r\n\r\n        // add route\r\n        this.router.post('/add', this.addSeasonAndPond);\r\n        this.router.put('/update', this.updateSeasonAndPond);\r\n        this.router.get('/count/pondWithSeason', this.countPondWithSeason);\r\n        this.router.get('/count/seasonWithPond', this.countSeasonOfPond);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, SeasonAndPondRoute.path);\r\n    }\r\n\r\n    /**\r\n     * @class SeasonAndPondRoute\r\n     * @method get\r\n     * @param req {Request} The express Request object.\r\n     * @param res {Response} The express Response object.\r\n     * @param next {NextFunction} Execute the next method.\r\n     */\r\n    private addSeasonAndPond = async (request: Request, response: Response) => {\r\n        const { seasonId, pondIdArr: pondArr } = request.body;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ponds: any = await this.pondsServices.models.findAll({\r\n            where: {\r\n                userId\r\n            },\r\n            attributes: ['pondId', 'userId']\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi xác thực người dùng.'\r\n            });\r\n        });\r\n        const diff: any = differenceWith(pondArr, ponds.map(e => {\r\n            return { pondId: e.pondId, userId: e.userId };\r\n        }), isEqual);\r\n        if(!!diff.length) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Ao không hợp lệ, vui lòng kiểm tra và thử lại.'\r\n            });\r\n        }\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            const result: any[] = [];\r\n            for (const pond of pondArr) {\r\n                const seasonsAndPond: SeasonsAndPond = new SeasonsAndPond();\r\n                seasonsAndPond.setSeasonsAndPond(null, seasonId, pond.pondId);\r\n                const snp: any = await seasonsAndPond.seasonAndPondServices.models.create(seasonsAndPond, {\r\n                    transaction: t\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã xảy ra lỗi vui lòng thử lại sau.',\r\n                    });\r\n                    t.rollback();\r\n                });\r\n                if (snp) {\r\n                    result.push(1);\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Thao tác bị lỗi, vui lòng thử lại sau.',\r\n                    });\r\n                    t.rollback();\r\n                }\r\n            }\r\n            if (pondArr.length !== 0 && pondArr.length === result.length) {\r\n                t.commit();\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: 'Thêm thành công!'\r\n                });\r\n            } else {\r\n                t.rollback();\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Thao tác bị lỗi, vui lòng thử lại sau.',\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.',\r\n            });\r\n        });\r\n        // if (Array.isArray(pondArr)) {\r\n        //     if(pondArr.length) {\r\n\r\n        //     } else {\r\n        //         response.status(200).json({\r\n        //             success: false,\r\n        //             message: 'Vui lòng cung cấp dữ liệu để tiếp tục.',\r\n        //         });\r\n        //     }\r\n        // } else {\r\n        //     const seasonsAndPond: SeasonsAndPond = new SeasonsAndPond();\r\n        //     seasonsAndPond.setSeasonsAndPond(null, seasonId, pondArr);\r\n        //     const snp: any = await seasonsAndPond.seasonAndPondServices.models.create(seasonsAndPond).catch(e => {\r\n        //         response.status(200).json({\r\n        //             success: false,\r\n        //             message: 'Đã xảy ra lỗi vui lòng thử lại sau.',\r\n        //         });\r\n        //     });\r\n        //     if(!snp) {\r\n        //         response.status(200).json({\r\n        //             success: false,\r\n        //             message: 'Lỗi đường truyền, vui lòng thử lại.'\r\n        //         });\r\n        //     } else {\r\n        //         response.status(200).json({\r\n        //             success: true,\r\n        //             message: 'Thêm thành công.'\r\n        //         });\r\n        //     }\r\n        // }\r\n    }\r\n\r\n    private updateSeasonAndPond = async (request: Request, response: Response) => {\r\n        const seasonsAndPond: SeasonsAndPond = new SeasonsAndPond();\r\n        const { seasonAndPondId, seasonId, pondId } = request.body;\r\n        seasonsAndPond.setSeasonAndPondId = seasonAndPondId;\r\n        seasonsAndPond.setSeasonId = seasonId;\r\n        seasonsAndPond.setPondId = pondId;\r\n\r\n        seasonsAndPond.update().then((res: any) => {\r\n            if (!res) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, không thể thực hiện yêu cầu, vui long thử lại sau!'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: 'Phân quyền thành công.'\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * đếm số ao theo vụ\r\n     */\r\n    private countPondWithSeason = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { ownerid, seasonid } = request.headers;\r\n        this.seasonAndPondServices.models.findAndCountAll({\r\n            include: [\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerid\r\n                    }\r\n                }\r\n            ],\r\n            where: {\r\n                seasonId: seasonid\r\n            }\r\n        }).then(res => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                result: res\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Đếm số vụ của ao\r\n     */\r\n    private countSeasonOfPond = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { ownerid, pondid } = request.headers;\r\n        this.seasonAndPondServices.models.findAndCountAll({\r\n            include: [\r\n                {\r\n                    model: this.pondsServices.models,\r\n                    as: ActionAssociateDatabase.SEASON_AND_POND_2_POND,\r\n                    where: {\r\n                        userId: ownerid\r\n                    }\r\n                }\r\n            ],\r\n            where: {\r\n                pondId: pondid\r\n            }\r\n        }).then(res => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                result: res\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './usingFood.route';\r\n","import { UsingFood, TakeCare } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, TakeCareServices, SeasonAndPondServices, SeasonServices, PondsServices, UsingFoodsServices, StoregeServices } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { Transaction, FindOptions } from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport { DateUtil } from '../../lib';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class UsingFoodRoute extends BaseRoute {\r\n    public static path = '/usingFoods';\r\n    private static instance: UsingFoodRoute;\r\n    private takeCareServices: TakeCareServices = new TakeCareServices();\r\n    private seasonAndPondServices: SeasonAndPondServices = new SeasonAndPondServices();\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private usingFoodsServices: UsingFoodsServices = new UsingFoodsServices();\r\n    private storegeServices: StoregeServices = new StoregeServices();\r\n    private pondsServices: PondsServices = new PondsServices();\r\n    /**\r\n     * @class UsingFoodRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!UsingFoodRoute.instance) {\r\n            UsingFoodRoute.instance = new UsingFoodRoute();\r\n        }\r\n        return UsingFoodRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[UsingFoodRoute] Creating Using Food route.');\r\n\r\n        // add route\r\n        this.router.post('/add', Authentication.isLogin, this.addUsingFood);\r\n        this.router.post('/gets', Authentication.isLogin, this.getUsingFood);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, UsingFoodRoute.path);\r\n    }\r\n\r\n    /**\r\n     * usingFood - take care type is 0\r\n     * usingVeterinary - take care type is 1\r\n     */\r\n    private addUsingFood = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondId, takeCareName, massOfFishery, feedingRate, storageId, quantity } = request.body;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const seasonAndPond: any = await this.seasonAndPondServices.models.findOne({\r\n            include: [\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    },\r\n                    attributes: []\r\n                }\r\n            ],\r\n            where: {\r\n                pondId\r\n            },\r\n            attributes: ['seasonAndPondId']\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        });\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            const onUpdate: any = await this.storegeServices.models.update({\r\n                quantityStorages: this.sequeliz.literal(`quantityStorages - ${ quantity }`)\r\n            }, {\r\n                where: {\r\n                    storageId\r\n                },\r\n                transaction: t,\r\n                returning: true\r\n            }).catch(e => {\r\n                if(e.message === 'FailQuantity') {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Số lượng thức ăn trong kho không đủ.'\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                    });\r\n                }\r\n                t.rollback();\r\n            });\r\n            if(onUpdate) {\r\n                const takeCare: TakeCare = new TakeCare();\r\n                takeCare.setTakecare(null, uuidv4(), seasonAndPond.seasonAndPondId, 0, takeCareName);\r\n                const tk: any = await this.takeCareServices.models.create(takeCare, {\r\n                    transaction: t\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                    });\r\n                    t.rollback();\r\n                });\r\n                if (tk) {\r\n                    const usingFood: UsingFood = new UsingFood();\r\n                    usingFood.setUsingFoods(null, uuidv4(), storageId, tk.takeCareId, massOfFishery, feedingRate, quantity);\r\n                    usingFood.usingFoodsServices.models.create(usingFood, {\r\n                        transaction: t\r\n                    }).catch(e => {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                        });\r\n                        t.rollback();\r\n                    }).then(res => {\r\n                        this.pondsServices.models.update({\r\n                            isFed: 1\r\n                        }, {\r\n                            where: {\r\n                                pondId\r\n                            },\r\n                            transaction: t\r\n                        }).then(res$ => {\r\n                            if(!res$) {\r\n                                t.rollback();\r\n                                response.status(200).json({\r\n                                    success: false,\r\n                                    message: 'Thất bại.'\r\n                                });\r\n                            } else {\r\n                                response.status(200).json({\r\n                                    success: true,\r\n                                    message: 'Thêm thành công.',\r\n                                    res\r\n                                });\r\n                                t.commit();\r\n                            }\r\n                        }).catch(e => {\r\n                            t.rollback();\r\n                        });\r\n                    });\r\n                }\r\n            } else {\r\n                t.rollback();\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get Cho ăn\r\n     * @method POST\r\n     */\r\n    private getUsingFood = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondId, seasonId, options } = request.body;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        const query: FindOptions<any> = {\r\n            include: [\r\n                {\r\n                    model: this.usingFoodsServices.models,\r\n                    as: ActionAssociateDatabase.TAKE_CARE_2_USING_FOOD,\r\n                    where: {\r\n                        createdDate: {\r\n                            [this.sequeliz.Op.between]: [\r\n                                DateUtil.getUTCDateTime(DateUtil.startOf(DateUtil.parse(options.timeOut || new Date()), options.unitOfTime)),\r\n                                DateUtil.getUTCDateTime(DateUtil.endOf(DateUtil.parse(options.timeOut || new Date()), options.unitOfTime))\r\n                            ]\r\n                        }\r\n                    },\r\n                    include: [\r\n                        {\r\n                            model: this.storegeServices.models,\r\n                            as: ActionAssociateDatabase.USING_FOOD_2_STORAGE\r\n                        }\r\n                    ],\r\n                    required: false\r\n                }\r\n            ],\r\n            where: {\r\n                type: 0\r\n            }\r\n        };\r\n\r\n        if (isBoss) {\r\n            query.include.push({\r\n                model: this.seasonAndPondServices.models,\r\n                as: ActionAssociateDatabase.TAKE_CARE_2_SEASON_AND_POND,\r\n                where: {\r\n                    seasonId,\r\n                    pondId\r\n                },\r\n                attributes: []\r\n            });\r\n        } else {\r\n            query.include.push({\r\n                model: this.seasonAndPondServices.models,\r\n                as: ActionAssociateDatabase.TAKE_CARE_2_SEASON_AND_POND,\r\n                where: {\r\n                    seasonId,\r\n                    pondId\r\n                },\r\n                include: [\r\n                    {\r\n                        model: this.seasonServices.models,\r\n                        as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                        where: {\r\n                            status: 0\r\n                        }\r\n                    }\r\n                ],\r\n                attributes: []\r\n            });\r\n        }\r\n\r\n        this.takeCareServices.models.findAll(query).then(res => {\r\n            if (res) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    takeCare: res\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy nhật ký cho ăn của ao này'\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './pondDiary.route';\r\n","import { PondDiary } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, SeasonServices, SeasonAndPondServices, PondDiaryServices, PondsServices, UserServives, UserRolesServices } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\n// import { Transaction } from 'sequelize';\r\nimport { ActionAssociateDatabase, isUUId4 } from '../../common';\r\nimport { DateUtil } from '../../lib';\r\nimport { UpdateOptions } from 'sequelize';\r\nimport { updatePondDiariesSchema } from '../../schemas';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class PondDiaryRoute extends BaseRoute {\r\n    public static path = '/pondDiaries';\r\n    private static instance: PondDiaryRoute;\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private pondsServices: PondsServices = new PondsServices();\r\n    private seasonAndPondServices: SeasonAndPondServices = new SeasonAndPondServices();\r\n    private pondDiaryServices: PondDiaryServices = new PondDiaryServices();\r\n    private userServives: UserServives = new UserServives();\r\n    private userRolesServices: UserRolesServices = new UserRolesServices();\r\n    /**\r\n     * @class PondDiaryRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!PondDiaryRoute.instance) {\r\n            PondDiaryRoute.instance = new PondDiaryRoute();\r\n        }\r\n        return PondDiaryRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[PondDiaryRoute] Creating diary route.');\r\n\r\n        // add route\r\n        this.router.get('/gets', Authentication.isLogin, this.getPondDiaries);\r\n        this.router.get('/gets/:pondDiaryUUId', Authentication.isLogin, this.getPondDiariesByUUId);\r\n        this.router.post('/add', Authentication.isLogin, this.addPondDiary);\r\n        this.router.put('/update', Authentication.isLogin, this.updatePondDiary);\r\n        this.router.delete('/delete/:primary', Authentication.isLogin, this.deletePondDiary);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, PondDiaryRoute.path);\r\n    }\r\n\r\n    private addPondDiary = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondId, ownerId, fisheryQuantity, healthOfFishery, pondVolume, diedFishery, notes, diaryName } = request.body;\r\n        const seasonAndPond: any = await this.seasonAndPondServices.models.findOne({\r\n            include: [\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    },\r\n                    attributes: []\r\n                }\r\n            ],\r\n            where: {\r\n                pondId\r\n            },\r\n            attributes: ['seasonAndPondId']\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        });\r\n        if (seasonAndPond) {\r\n            const pondDiary: PondDiary = new PondDiary();\r\n            pondDiary.setPonddiary(null, uuidv4(), seasonAndPond.seasonAndPondId, diaryName, fisheryQuantity, healthOfFishery, pondVolume, diedFishery, notes);\r\n            pondDiary.insert().then((res: any) => {\r\n                if (res) {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Thêm nhật ký thành công!'\r\n                    });\r\n                }\r\n            }).catch(e => {\r\n                if (e) {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Có lỗi xảy ra vui lòng kiểm tra lại!'\r\n                    });\r\n                }\r\n            });\r\n        } else {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Bạn không có quyền vui liên hệ với quản lý của bạn để được hỗ trợ.'\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get theo tháng, theo user join từ vự\r\n     * @param request\r\n     * @param response\r\n     * @param next\r\n     */\r\n    private getPondDiaries = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondId, seasonId, timeOut, unitOfTime } = request.query;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n\r\n        this.pondDiaryServices.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.seasonAndPondServices.models,\r\n                    as: ActionAssociateDatabase.POND_DIARY_2_SEASON_AND_POND,\r\n                    include: [\r\n                        {\r\n                            model: this.pondsServices.models,\r\n                            as: ActionAssociateDatabase.SEASON_AND_POND_2_POND,\r\n                            include: [\r\n                                {\r\n                                    model: this.userServives.models,\r\n                                    as: ActionAssociateDatabase.POND_2_USER,\r\n                                    include: [\r\n                                        {\r\n                                            model: this.userRolesServices.models,\r\n                                            as: ActionAssociateDatabase.USER_2_ROLES_GET_EMPLOYEES,\r\n                                            required: false,\r\n                                            where: {\r\n                                                [this.sequeliz.Op.or]: [\r\n                                                    {\r\n                                                        bossId: userId\r\n                                                    },\r\n                                                    {\r\n                                                        userId,\r\n                                                        roles: 2\r\n                                                    }\r\n                                                ]\r\n                                            }\r\n                                        }\r\n                                    ]\r\n                                }\r\n                            ],\r\n                            where: {\r\n                                userId: ownerId\r\n                            }\r\n                        },\r\n                        {\r\n                            model: this.seasonServices.models,\r\n                            as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                            include: [\r\n                                {\r\n                                    model: this.userServives.models,\r\n                                    as: ActionAssociateDatabase.SEASON_2_USER,\r\n                                    include: [\r\n                                        {\r\n                                            model: this.userRolesServices.models,\r\n                                            as: ActionAssociateDatabase.USER_2_ROLES_GET_EMPLOYEES,\r\n                                            required: false,\r\n                                            where: {\r\n                                                [this.sequeliz.Op.or]: [\r\n                                                    {\r\n                                                        bossId: userId\r\n                                                    },\r\n                                                    {\r\n                                                        userId,\r\n                                                        roles: 2\r\n                                                    }\r\n                                                ]\r\n                                            }\r\n                                        }\r\n                                    ]\r\n                                }\r\n                            ],\r\n                            where: {\r\n                                userId: ownerId\r\n                            }\r\n                        }\r\n                    ],\r\n                    where: {\r\n                        seasonId,\r\n                        pondId\r\n                    }\r\n                }\r\n            ],\r\n            where: {\r\n                createdDate: {\r\n                    [this.sequeliz.Op.between]: [\r\n                        DateUtil.getUTCDateTime(DateUtil.startOf(DateUtil.parse(timeOut || new Date()), unitOfTime)),\r\n                        DateUtil.getUTCDateTime(DateUtil.endOf(DateUtil.parse(timeOut || new Date()), unitOfTime))\r\n                    ]\r\n                }\r\n            }\r\n        }).then(res => {\r\n            if (res) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    diaries: res\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy nhật ký cho ăn của ao này'\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private getPondDiariesByUUId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondDiaryUUId } = request.params;\r\n        const g: RegExp = new RegExp(isUUId4);\r\n        if(g.test(pondDiaryUUId)) {\r\n            this.pondDiaryServices.models.findOne({\r\n                where: {\r\n                    pondDiaryUUId\r\n                }\r\n            }).then(res => {\r\n                if(!!Object.keys(res).length) {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: '',\r\n                        pondDiary: res\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Không tìm thấy nhật ký.'\r\n                    });\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, vui lòng thử lại sau!'\r\n                });\r\n            });\r\n        } else {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Hiện tại chúng tôi không hỗ trợ api này.'\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get theo ngày\r\n     */\r\n    private deletePondDiary = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { primary } = request.params;\r\n        const g: RegExp = new RegExp(isUUId4);\r\n        const query: UpdateOptions = {\r\n            where: {}\r\n        };\r\n        if (g.test(primary)) {\r\n            query.where = {\r\n                pondDiaryUUId: primary\r\n            };\r\n        } else {\r\n            query.where = {\r\n                pondDiaryId: primary\r\n            };\r\n        }\r\n        this.pondDiaryServices.models.update({\r\n            isDeleled: 1\r\n        }, query).then(res => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: 'Đã xoá!',\r\n                results: null\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau!'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sửa đổi\r\n     */\r\n    private updatePondDiary = async (request: Request, response: Response, next: NextFunction) => {\r\n        const validate: any = this.validator(updatePondDiariesSchema);\r\n        const isValid: any = validate({\r\n            ...request.body,\r\n            fisheryQuantity: Number(request.body.fisheryQuantity)\r\n        });\r\n\r\n        if (!isValid) {\r\n            if(validate.error.includes('pondDiaryUUId')) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Chúng tôi không hỗ trợ API này.'\r\n                });\r\n            }\r\n            if(validate.error.includes('diaryName')) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Tên gợi nhắc không hợp lệ.'\r\n                });\r\n            }\r\n            if(validate.error.includes('fisheryQuantity')) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Số lượng thuỷ sản không hợp lệ.'\r\n                });\r\n            }\r\n            if(validate.error.includes('healthOfFishery')) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Tình trạng sức khoẻ không hợp lệ.'\r\n                });\r\n            }\r\n            if(validate.error.includes('pondVolume')) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Thể tích ao không hợp lệ.'\r\n                });\r\n            }\r\n            if(validate.error.includes('diedFishery')) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Số lượng cá chết không hợp lệ.'\r\n                });\r\n            }\r\n            if(validate.error.includes('notes')) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Ghi chú không hợp lệ.'\r\n                });\r\n            }\r\n        } else {\r\n            const { diaryName, fisheryQuantity, healthOfFishery, pondVolume, diedFishery, notes } = request.body;\r\n            this.pondDiaryServices.models.update({\r\n                diaryName, fisheryQuantity, healthOfFishery, pondVolume, diedFishery, notes\r\n            }).then(res => {\r\n                if (!res) {\r\n                    return response.status(200).json({\r\n                        success: false,\r\n                        message: 'Thất bại.'\r\n                    });\r\n                }\r\n                return response.status(200).json({\r\n                    success: true,\r\n                    message: 'Cập nhật thành công.',\r\n                    results: null\r\n                });\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, vui lòng thử lại sau!'\r\n                });\r\n            });\r\n        }\r\n    }\r\n}\r\n","export * from './takeCare.route';\r\n","// import { UsingFood, TakeCare } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, TakeCareServices, SeasonAndPondServices, SeasonServices, PondsServices, PondUserRolesServices, UsingFoodsServices, UsingVeterinaryServices, StoregeServices } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { FindOptions } from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport { DateUtil } from '../../lib';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class TakeCareRoute extends BaseRoute {\r\n    public static path = '/takeCare';\r\n    private static instance: TakeCareRoute;\r\n    private takeCareServices: TakeCareServices = new TakeCareServices();\r\n    private seasonAndPondServices: SeasonAndPondServices = new SeasonAndPondServices();\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private pondsServices: PondsServices = new PondsServices();\r\n    private pondUserRolesServices: PondUserRolesServices = new PondUserRolesServices();\r\n    private usingFoodsServices: UsingFoodsServices = new UsingFoodsServices();\r\n    private usingVeterinaryServices: UsingVeterinaryServices = new UsingVeterinaryServices();\r\n    private storegeServices: StoregeServices = new StoregeServices();\r\n    /**\r\n     * @class TakeCareRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!TakeCareRoute.instance) {\r\n            TakeCareRoute.instance = new TakeCareRoute();\r\n        }\r\n        return TakeCareRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[TakeCareRoute] Creating Take Care route.');\r\n\r\n        // add route\r\n        this.router.post('/gets', Authentication.isLogin, this.getTakeCare);\r\n        this.router.get('/get', this.test);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, TakeCareRoute.path);\r\n    }\r\n\r\n    /**\r\n     * @method POST\r\n     *\r\n     * Get using food or using veterinay option\r\n     * ```\r\n     * {\r\n     *      seasonId: number, // required\r\n     *      pondId: number, // required\r\n     *      type: number<0 | 1> // required 0 = Food | 1 = Veterinary\r\n     *      options: {\r\n     *          timeOut: Date,\r\n     *          unitOfTime: string\r\n     *      }\r\n     * }\r\n     * ```\r\n     */\r\n    private getTakeCare = async (request: Request, response: Response, next: NextFunction) => {\r\n        // init search\r\n        const {\r\n            pondId, seasonId,\r\n            type, // type of take care\r\n            /**\r\n             * default (30 days from present)\r\n             * 'days' - get by days\r\n             * 'months' - get by months\r\n             * ```json\r\n             * {\r\n             *      \"timeOut\": \"Thời gian cần get\",\r\n             *      \"unitOfTime\": \"Đơn vị tính: days, months\"\r\n             * }\r\n             * ```\r\n             */\r\n            options // search options\r\n        } = request.body;\r\n\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        // create query\r\n        const query: FindOptions<any> = {\r\n            include: [],\r\n            where: {}\r\n        };\r\n\r\n        // tmp where\r\n        let where: any = {};\r\n\r\n        // init query\r\n        const init: any = {\r\n            model: this.seasonAndPondServices.models,\r\n            as: ActionAssociateDatabase.TAKE_CARE_2_SEASON_AND_POND,\r\n            where: {\r\n                pondId, seasonId\r\n            },\r\n            include: [\r\n                {\r\n                    model: this.pondsServices.models,\r\n                    as: ActionAssociateDatabase.SEASON_AND_POND_2_POND,\r\n                    include: [\r\n                        {\r\n                            model: this.pondUserRolesServices.models,\r\n                            as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                            where: {\r\n                                userId\r\n                            },\r\n                            attributes: []\r\n                        }\r\n                    ],\r\n                    where: {\r\n                        userId: ownerId\r\n                    },\r\n                    attributes: []\r\n                },\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId\r\n                    },\r\n                    attributes: []\r\n                }\r\n            ],\r\n            attributes: []\r\n        };\r\n        query.include.push(init);\r\n\r\n        // get using Food or veterinary\r\n        let getType: any = {};\r\n        if (type === 0) {\r\n            getType = {\r\n                model: this.usingFoodsServices.models,\r\n                as: ActionAssociateDatabase.TAKE_CARE_2_USING_FOOD,\r\n                required: false,\r\n                include: [\r\n                    {\r\n                        model: this.storegeServices.models,\r\n                        as: ActionAssociateDatabase.USING_FOOD_2_STORAGE,\r\n                        required: false\r\n                    }\r\n                ]\r\n            };\r\n\r\n            // options date\r\n            if (options ? options.unitOfTime : false) {\r\n                where = {\r\n                    ...{\r\n                        '$usingFoods.createdDate$': {\r\n                            [this.sequeliz.Op.between]: [\r\n                                DateUtil.getUTCDateTime(DateUtil.startOf(DateUtil.parse(options.timeOut ? options.timeOut : new Date()), options.unitOfTime)),\r\n                                DateUtil.getUTCDateTime(DateUtil.endOf(DateUtil.parse(options.timeOut ? options.timeOut : new Date()), options.unitOfTime))\r\n                            ]\r\n                        }\r\n                    }\r\n                };\r\n                query.where = {\r\n                    ...query.where,\r\n                    ...where\r\n                };\r\n            } else {\r\n                where = {\r\n                    '$usingFoods.createdDate$': {\r\n                        [this.sequeliz.Op.between]: [\r\n                            DateUtil.getUTCDateTime(DateUtil.startOf(DateUtil.subtract(DateUtil.parse(new Date()), 30, 'days'), 'days')),\r\n                            DateUtil.getUTCDateTime(DateUtil.parse(new Date()))\r\n                        ]\r\n                    }\r\n                };\r\n                query.where = {\r\n                    ...query.where,\r\n                    ...where\r\n                };\r\n            }\r\n        }\r\n        if (type === 1) {\r\n            getType = {\r\n                model: this.usingVeterinaryServices.models,\r\n                as: ActionAssociateDatabase.TAKE_CARE_2_USING_VETERINARY,\r\n                required: false,\r\n                include: [\r\n                    {\r\n                        model: this.storegeServices.models,\r\n                        as: ActionAssociateDatabase.USING_VETERINARY_2_STORAGE,\r\n                        required: false\r\n                    }\r\n                ]\r\n            };\r\n\r\n            // options date\r\n            if (options ? options.unitOfTime : false) {\r\n                where = {\r\n                    ...{\r\n                        '$usingVeterinary.createdDate$': {\r\n                            [this.sequeliz.Op.between]: [\r\n                                DateUtil.getUTCDateTime(DateUtil.startOf(DateUtil.parse(options.timeOut ? options.timeOut : new Date()), options.unitOfTime)),\r\n                                DateUtil.getUTCDateTime(DateUtil.endOf(DateUtil.parse(options.timeOut ? options.timeOut : new Date()), options.unitOfTime))\r\n                            ]\r\n                        }\r\n                    }\r\n                };\r\n                query.where = {\r\n                    ...query.where,\r\n                    ...where\r\n                };\r\n            } else {\r\n                where = {\r\n                    '$usingVeterinary.createdDate$': {\r\n                        [this.sequeliz.Op.between]: [\r\n                            DateUtil.getUTCDateTime(DateUtil.startOf(DateUtil.subtract(DateUtil.parse(new Date()), 30, 'days'), 'days')),\r\n                            DateUtil.getUTCDateTime(DateUtil.parse(new Date()))\r\n                        ]\r\n                    }\r\n                };\r\n                query.where = {\r\n                    ...query.where,\r\n                    ...where\r\n                };\r\n            }\r\n        }\r\n        query.include.push(getType);\r\n\r\n        // sure type\r\n        where = {\r\n            type\r\n        };\r\n        query.where = {\r\n            ...query.where,\r\n            ...where\r\n        };\r\n\r\n        // check isBoss\r\n        if (!isBoss) {\r\n            where = {\r\n                ...{\r\n                    '$seasonAndPond->ponds->pondUserRoles.userId$': userId,\r\n                    '$seasonAndPond->ponds->pondUserRoles.pondId$': pondId\r\n                }\r\n            };\r\n            query.where = {\r\n                ...query.where,\r\n                ...where\r\n            };\r\n        }\r\n\r\n        // execute\r\n        this.takeCareServices.models.findAll(query).then(res => {\r\n            if (!res.length) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: 'Không tìm thấy hoạt động chăm sóc.',\r\n                    takeCare: res\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    takeCare: res\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.',\r\n                e\r\n            });\r\n        });\r\n    }\r\n\r\n    private test = async (req, response, next) => {\r\n        const { date } = req.headers;\r\n        response.status(200).json({\r\n            'success': true,\r\n            'message': '',\r\n            'parse': DateUtil.parse(date ? date : null).toLocaleDateString() + ' ' + DateUtil.parse(date).toLocaleTimeString(),\r\n            'start-of-date': DateUtil.startOf(new Date(), 'day').toLocaleDateString() + ' ' + DateUtil.startOf(new Date(), 'day').toLocaleTimeString(),\r\n            'end-of-date': DateUtil.endOf(new Date(), 'day').toLocaleDateString() + ' ' + DateUtil.endOf(new Date(), 'day').toLocaleTimeString(),\r\n            'start-of-week': DateUtil.startOf(new Date(), 'week').toLocaleDateString() + ' ' + DateUtil.startOf(new Date(), 'day').toLocaleTimeString(),\r\n            'end-of-week': DateUtil.endOf(new Date(), 'week').toLocaleDateString() + ' ' + DateUtil.endOf(new Date(), 'day').toLocaleTimeString(),\r\n            'start-of-month': DateUtil.startOf(new Date(), 'month').toLocaleDateString() + ' ' + + ' ' + DateUtil.startOf(new Date(), 'month').toLocaleTimeString(),\r\n            'end-of-month': DateUtil.endOf(new Date(), 'month').toLocaleDateString() + ' ' + + ' ' + DateUtil.endOf(new Date(), 'month').toLocaleTimeString(),\r\n            'add-day': DateUtil.add(new Date(), 1, 'day').toLocaleDateString() + ' ' + DateUtil.add(new Date(), 1, 'day').toLocaleTimeString(),\r\n            'add-months': DateUtil.add(new Date(), 1, 'month').toLocaleDateString() + ' ' + DateUtil.add(new Date(), 1, 'month').toLocaleTimeString(),\r\n            'subtract-day': DateUtil.subtract(new Date(), 1, 'day').toLocaleDateString() + ' ' + DateUtil.subtract(new Date(), 1, 'day').toLocaleTimeString(),\r\n            'subtract-months': DateUtil.subtract(new Date(), 1, 'month').toLocaleDateString() + ' ' + DateUtil.subtract(new Date(), 1, 'month').toLocaleTimeString(),\r\n        });\r\n    }\r\n}\r\n","export * from './usingVeterinary.route';\r\n","import { UsingVeterinary, TakeCare } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, TakeCareServices, SeasonAndPondServices, SeasonServices, UsingVeterinaryServices, StoregeServices } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { Transaction, FindOptions } from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport { DateUtil } from '../../lib';\r\n\r\n/**\r\n * @api {all} /usingVeterinary UsingVeterinary Request customer object\r\n * @apiName UsingVeterinary\r\n * @apiGroup UsingVeterinary\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class UsingVeterinaryRoute extends BaseRoute {\r\n    public static path = '/usingVeterinary';\r\n    private static instance: UsingVeterinaryRoute;\r\n    private takeCareServices: TakeCareServices = new TakeCareServices();\r\n    private seasonAndPondServices: SeasonAndPondServices = new SeasonAndPondServices();\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private usingVeterinaryServices: UsingVeterinaryServices = new UsingVeterinaryServices();\r\n    private storegeServices: StoregeServices = new StoregeServices();\r\n    /**\r\n     * @class UsingVeterinaryRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!UsingVeterinaryRoute.instance) {\r\n            UsingVeterinaryRoute.instance = new UsingVeterinaryRoute();\r\n        }\r\n        return UsingVeterinaryRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[UsingVeterinaryRoute] Creating Using Veterinary route.');\r\n\r\n        // add route\r\n        this.router.post('/add', Authentication.isLogin, this.addUsingVeterinary);\r\n        this.router.post('/gets', Authentication.isLogin, this.getUsingVeterinary);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, UsingVeterinaryRoute.path);\r\n    }\r\n\r\n    /**\r\n     * usingFood - take care type is 0\r\n     * usingVeterinary - take care type is 1\r\n     */\r\n    private addUsingVeterinary = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondId, takeCareName, causesNSymptoms, averageSize, totalBiomass, result, latestHarvestDate, mentor, storageId, quantity } = request.body;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const seasonAndPond: any = await this.seasonAndPondServices.models.findOne({\r\n            include: [\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    },\r\n                    attributes: []\r\n                }\r\n            ],\r\n            where: {\r\n                pondId\r\n            },\r\n            attributes: ['seasonAndPondId']\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        });\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            const onUpdate: any = await this.storegeServices.models.update({\r\n                quantityStorages: this.sequeliz.literal(`quantityStorages - ${quantity}`)\r\n            }, {\r\n                    where: {\r\n                        storageId\r\n                    },\r\n                    transaction: t,\r\n                    returning: true\r\n                }).catch(e => {\r\n                    if (e.message === 'FailQuantity') {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Số lượng thuốc & dược phẩm trong kho không đủ.'\r\n                        });\r\n                    } else {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                        });\r\n                    }\r\n                    t.rollback();\r\n                });\r\n            if (onUpdate) {\r\n                const takeCare: TakeCare = new TakeCare();\r\n                takeCare.setTakecare(null, uuidv4(), seasonAndPond.seasonAndPondId, 1, takeCareName);\r\n                const tk: any = await this.takeCareServices.models.create(takeCare, {\r\n                    transaction: t\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                    });\r\n                    t.rollback();\r\n                });\r\n                if (tk) {\r\n                    const usingVeterinary: UsingVeterinary = new UsingVeterinary();\r\n                    usingVeterinary.setUsingveterinary(null, uuidv4(), tk.takeCareId, storageId, causesNSymptoms, averageSize, totalBiomass, quantity, result, latestHarvestDate, mentor);\r\n                    usingVeterinary.usingVeterinaryServices.models.create(usingVeterinary, {\r\n                        transaction: t\r\n                    }).catch(e => {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                        });\r\n                        t.rollback();\r\n                    }).then(res => {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: 'Thêm thành công.'\r\n                        });\r\n                        t.commit();\r\n                    });\r\n                }\r\n            } else {\r\n                t.rollback();\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get Cho ăn\r\n     * @method POST\r\n     */\r\n    private getUsingVeterinary = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondId, seasonId, options } = request.body;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        const query: FindOptions<any> = {\r\n            include: [\r\n                {\r\n                    model: this.usingVeterinaryServices.models,\r\n                    as: ActionAssociateDatabase.TAKE_CARE_2_USING_VETERINARY,\r\n                    where: {\r\n                        createdDate: {\r\n                            [this.sequeliz.Op.between]: [\r\n                                DateUtil.getUTCDateTime(DateUtil.startOf(DateUtil.parse(options.timeOut || new Date()), options.unitOfTime)),\r\n                                DateUtil.getUTCDateTime(DateUtil.endOf(DateUtil.parse(options.timeOut || new Date()), options.unitOfTime))\r\n                            ]\r\n                        }\r\n                    },\r\n                    include: [\r\n                        {\r\n                            model: this.storegeServices.models,\r\n                            as: ActionAssociateDatabase.USING_VETERINARY_2_STORAGE\r\n                        }\r\n                    ],\r\n                    required: false\r\n                }\r\n            ],\r\n            where: {\r\n                type: 1\r\n            }\r\n        };\r\n\r\n        if (isBoss) {\r\n            query.include.push({\r\n                model: this.seasonAndPondServices.models,\r\n                as: ActionAssociateDatabase.TAKE_CARE_2_SEASON_AND_POND,\r\n                where: {\r\n                    seasonId,\r\n                    pondId\r\n                },\r\n                attributes: []\r\n            });\r\n        } else {\r\n            query.include.push({\r\n                model: this.seasonAndPondServices.models,\r\n                as: ActionAssociateDatabase.TAKE_CARE_2_SEASON_AND_POND,\r\n                where: {\r\n                    seasonId,\r\n                    pondId\r\n                },\r\n                include: [\r\n                    {\r\n                        model: this.seasonServices.models,\r\n                        as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                        where: {\r\n                            status: 0\r\n                        }\r\n                    }\r\n                ],\r\n                attributes: []\r\n            });\r\n        }\r\n\r\n        this.takeCareServices.models.findAll(query).then(res => {\r\n            if (res) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    takeCare: res\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy nhật ký cho ăn của ao này'\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './costs.route';\r\n","import { Request, Response, NextFunction } from 'express';\r\nimport { logger, MaterialServives, CouponServives, StoregeServices, BoughtBreedDetailsServives, BreedServives, HarvestDetailsServives, HarvestsServives, SeasonAndPondServices, SeasonServices, StockingServices, StockingDetailsServices, PondsServices } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport { FindOptions, Transaction } from 'sequelize';\r\nimport { sumBy, groupBy, uniqBy } from 'lodash';\r\n\r\n/**\r\n * @api {get} /costs Cost Request customer object\r\n * @apiName Cost\r\n * @apiGroup Cost\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class CostsRoute extends BaseRoute {\r\n    public static path = '/costs';\r\n    private static instance: CostsRoute;\r\n    private materialServives: MaterialServives = new MaterialServives();\r\n    private couponServives: CouponServives = new CouponServives();\r\n    private storegeServices: StoregeServices = new StoregeServices();\r\n    private boughtBreedDetailsServives: BoughtBreedDetailsServives = new BoughtBreedDetailsServives();\r\n    private breedServives: BreedServives = new BreedServives();\r\n    private harvestDetailsServives: HarvestDetailsServives = new HarvestDetailsServives();\r\n    private harvestsServives: HarvestsServives = new HarvestsServives();\r\n    private seasonAndPondServices: SeasonAndPondServices = new SeasonAndPondServices();\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private stockingServices: StockingServices = new StockingServices();\r\n    private stockingDetailsServices: StockingDetailsServices = new StockingDetailsServices();\r\n    private pondsServices: PondsServices = new PondsServices();\r\n    /**\r\n     * @class CostsRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!CostsRoute.instance) {\r\n            CostsRoute.instance = new CostsRoute();\r\n        }\r\n        return CostsRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[CostsRoute] Creating prices route.');\r\n\r\n        // add route\r\n        // this.router.get('/gets/:seasonId', this.getAllPrices);\r\n        this.router.get('/gets/storage/:seasonUUId', this.storageCost);\r\n        this.router.get('/gets/breed/:seasonUUId', this.breedCost);\r\n        this.router.get('/gets/harvest/:seasonUUId', this.harvestCalculator);\r\n\r\n        // log endpoint\r\n        this.logEndpoints(this.router, CostsRoute.path);\r\n    }\r\n\r\n    private getAllPrices = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonId } = request.params;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n\r\n        const mat: any = await this.materialServives.models.findAll({\r\n            attributes: [[this.sequeliz.literal('SUM(quantity*unitPrice)'), 'totalPrices']] as any,\r\n            include: [\r\n                {\r\n                    model: this.couponServives.models,\r\n                    as: ActionAssociateDatabase.MATERIAL_2_COUPON,\r\n                    include: [\r\n                        {\r\n                            model: this.seasonServices.models,\r\n                            as: ActionAssociateDatabase.COUPON_2_SEASON,\r\n                            where: {\r\n                                userId\r\n                            }\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    model: this.storegeServices.models,\r\n                    as: ActionAssociateDatabase.MATERIAL_2_STORAGE\r\n                }\r\n            ],\r\n            group: ['type']\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n\r\n        const bre: any = await this.boughtBreedDetailsServives.models.findAll({\r\n            attributes: [[this.sequeliz.literal('SUM(quantity*unitPrice)'), 'totalPrices']] as any,\r\n            include: [\r\n                {\r\n                    model: this.couponServives.models,\r\n                    as: ActionAssociateDatabase.BOUGHT_BREED_DETAIL_2_COUPON,\r\n                    include: [\r\n                        {\r\n                            model: this.seasonServices.models,\r\n                            as: ActionAssociateDatabase.COUPON_2_SEASON,\r\n                            where: {\r\n                                userId\r\n                            }\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    model: this.breedServives.models,\r\n                    as: ActionAssociateDatabase.BOUGHT_BREED_DETAIL_2_BREED\r\n                }\r\n            ]\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n\r\n        const har: any = await this.harvestDetailsServives.models.findAll({\r\n            attributes: [[this.sequeliz.literal('SUM(quantity*unitPrice)'), 'totalPrices']] as any,\r\n            include: [\r\n                {\r\n                    model: this.harvestsServives.models,\r\n                    as: ActionAssociateDatabase.HARVEST_DETAIL_2_HARVEST,\r\n                    include: [\r\n                        {\r\n                            model: this.seasonAndPondServices.models,\r\n                            as: ActionAssociateDatabase.HARVEST_2_SEASON_AND_POND,\r\n                            include: [\r\n                                {\r\n                                    model: this.seasonServices.models,\r\n                                    as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                                    where: {\r\n                                        userId\r\n                                    }\r\n                                }\r\n                            ]\r\n                        }\r\n                    ]\r\n                }\r\n            ],\r\n            group: ['harvest.seasonAndPondId']\r\n        }).catch(e => {\r\n            e;\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n\r\n        if(!!mat.length && !!bre.length && !!har.length) {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                storages: mat,\r\n                breeds: bre,\r\n                harvest: har\r\n            });\r\n        } else {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Không tìm thấy thông tin chi phí của vụ nuôi này.',\r\n                results: []\r\n            });\r\n        }\r\n    }\r\n\r\n    private storageCost = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonUUId } = request.params;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            const query: FindOptions<any> = {\r\n                include: [\r\n                    {\r\n                        model: this.materialServives.models,\r\n                        as: ActionAssociateDatabase.COUPON_2_MATERIAL,\r\n                        include: [\r\n                            {\r\n                                model: this.storegeServices.models,\r\n                                as: ActionAssociateDatabase.MATERIAL_2_STORAGE\r\n                            }\r\n                        ]\r\n                    },\r\n                    {\r\n                        model: this.seasonServices.models,\r\n                        as: ActionAssociateDatabase.COUPON_2_SEASON,\r\n                        where: {\r\n                            userId,\r\n                            seasonUUId\r\n                        }\r\n                    }\r\n                ],\r\n                transaction: t\r\n            };\r\n            const tables: any = await this.couponServives.models.findAll(query);\r\n\r\n            query.attributes =  [\r\n                [this.sequeliz.literal(`SUM(materials.quantity*materials.unitPrice)`), 'totals'],\r\n                'createdDate'\r\n            ];\r\n            query.group = [\r\n                this.sequeliz.fn('YEAR', this.sequeliz.fn('CONVERT_TZ',this.sequeliz.col('coupons.createdDate'),'UTC','vi-VN')),\r\n                this.sequeliz.fn('MONTH', this.sequeliz.fn('CONVERT_TZ',this.sequeliz.col('coupons.createdDate'),'UTC','vi-VN')),\r\n                this.sequeliz.fn('DAY', this.sequeliz.fn('CONVERT_TZ',this.sequeliz.col('coupons.createdDate'),'UTC','vi-VN')),\r\n                this.sequeliz.col('materials->storage.type')\r\n            ];\r\n\r\n            const charts: any = await this.couponServives.models.findAll(query);\r\n\r\n            const labels: any = uniqBy(charts, (u: any) => {\r\n                const d: Date = new Date(u.createdDate);\r\n                return d.getDate() + d.getMonth() + d.getFullYear();\r\n            });\r\n\r\n            return new Promise((resolve, reject) => {\r\n                t.commit();\r\n                if(!!tables.length && !!charts.length) {\r\n                    resolve({\r\n                        tables,\r\n                        charts,\r\n                        labels: labels.map(e => e.createdDate)\r\n                    });\r\n                } else {\r\n                    resolve({\r\n                        success: false,\r\n                        message: 'Không tìm thấy thông tin NHẬP KHO.',\r\n                        tables: [],\r\n                        charts: [],\r\n                        labels: []\r\n                    });\r\n                }\r\n            });\r\n        }).then(res => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                ...res\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau!'\r\n            });\r\n        });\r\n    }\r\n\r\n    private breedCost = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonUUId } = request.params;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            const query: FindOptions<any> = {\r\n                include: [\r\n                    {\r\n                        model: this.boughtBreedDetailsServives.models,\r\n                        as: ActionAssociateDatabase.COUPON_2_BOUGHT_BREED_DETAILS,\r\n                        include: [\r\n                            {\r\n                                model: this.breedServives.models,\r\n                                as: ActionAssociateDatabase.BOUGHT_BREED_DETAIL_2_BREED\r\n                            }\r\n                        ]\r\n                    },\r\n                    {\r\n                        model: this.seasonServices.models,\r\n                        as: ActionAssociateDatabase.COUPON_2_SEASON,\r\n                        where: {\r\n                            userId,\r\n                            seasonUUId\r\n                        }\r\n                    }\r\n                ],\r\n                transaction: t\r\n            };\r\n            const tables: any = await this.couponServives.models.findAll(query);\r\n\r\n            query.attributes =  [\r\n                [this.sequeliz.literal(`SUM(boughtBreedDetails.quantity*boughtBreedDetails.unitPrice)`), 'totals'],\r\n                'createdDate'\r\n            ];\r\n            query.group = [\r\n                this.sequeliz.fn('YEAR', this.sequeliz.fn('CONVERT_TZ',this.sequeliz.col('coupons.createdDate'),'UTC','vi-VN')),\r\n                this.sequeliz.fn('MONTH', this.sequeliz.fn('CONVERT_TZ',this.sequeliz.col('coupons.createdDate'),'UTC','vi-VN')),\r\n                this.sequeliz.fn('DAY', this.sequeliz.fn('CONVERT_TZ',this.sequeliz.col('coupons.createdDate'),'UTC','vi-VN'))\r\n            ];\r\n\r\n            const charts: any = await this.couponServives.models.findAll(query);\r\n\r\n            let labels: any = uniqBy(charts, (u: any) => {\r\n                const d: Date = new Date(u.createdDate);\r\n                return d.getDate() + d.getMonth() + d.getFullYear();\r\n            });\r\n\r\n            labels = labels.map(e => {\r\n                const dL: Date = new Date(e.createdDate);\r\n                const isDL: number = dL.getDate() + dL.getMonth() + dL.getFullYear();\r\n                const sum: number = sumBy(charts, (u: any) => {\r\n                    const dS: Date = new Date(u.createdDate);\r\n                    const isDS: number = dS.getDate() + dS.getMonth() + dS.getFullYear();\r\n                    if(isDL === isDS) {\r\n                        return u.quantity * u.unitPrice;\r\n                    } else {\r\n                        false;\r\n                    }\r\n                });\r\n                e[`totals`] = sum;\r\n                return e;\r\n            });\r\n\r\n            return new Promise((resolve, reject) => {\r\n                t.commit();\r\n                if(!!tables.length && !!charts.length) {\r\n                    resolve({\r\n                        tables,\r\n                        charts,\r\n                        labels\r\n                    });\r\n                } else {\r\n                    resolve({\r\n                        success: false,\r\n                        message: 'Không tìm thấy thông tin NHẬP GIỐNG.',\r\n                        tables: [],\r\n                        charts: [],\r\n                        labels: []\r\n                    });\r\n                }\r\n            });\r\n        }).then(res => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                ...res\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi đường truyền, vui lòng thử lại sau!'\r\n            });\r\n        });\r\n    }\r\n\r\n    /** 8da8abfa-bf60-4f9f-ada7-9fcbdf905ef5 */\r\n    private harvestCalculator = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonUUId } = request.params;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            let charts: any = await this.harvestsServives.models.findAll({\r\n                include: [\r\n                    {\r\n                        model: this.harvestDetailsServives.models,\r\n                        as: ActionAssociateDatabase.HARVEST_2_HARVEST_DETAILS\r\n                    },\r\n                    {\r\n                        model: this.seasonAndPondServices.models,\r\n                        as: ActionAssociateDatabase.HARVEST_2_SEASON_AND_POND,\r\n                        required: true,\r\n                        include: [\r\n                            {\r\n                                model: this.stockingServices.models,\r\n                                as: ActionAssociateDatabase.SEASON_AND_POND_2_STOCKING,\r\n                                include: [\r\n                                    {\r\n                                        model: this.stockingDetailsServices.models,\r\n                                        as: ActionAssociateDatabase.STOCKING_2_STOCKING_DETAILS,\r\n                                        include: [\r\n                                            {\r\n                                                model: this.breedServives.models,\r\n                                                as: ActionAssociateDatabase.STOCKING_DETAILS_2_BREED\r\n                                            }\r\n                                        ]\r\n                                    }\r\n                                ]\r\n                            },\r\n                            {\r\n                                model: this.seasonServices.models,\r\n                                as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                                required: true,\r\n                                where: {\r\n                                    userId,\r\n                                    seasonUUId\r\n                                }\r\n                            },\r\n                            {\r\n                                model: this.pondsServices.models,\r\n                                as: ActionAssociateDatabase.SEASON_AND_POND_2_POND\r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            });\r\n\r\n            return new Promise((resolve, reject) => {\r\n                t.commit();\r\n                charts = charts.map((e: any) => {\r\n                    const dL: Date = new Date(e.createdDate);\r\n                    const isDL: number = dL.getDate() + dL.getMonth() + dL.getFullYear();\r\n                    for(const e$ of charts) {\r\n                        const dS: Date = new Date(e$.createdDate);\r\n                        const isDS: number = dS.getDate() + dS.getMonth() + dS.getFullYear();\r\n                        if(isDL === isDS) {\r\n                            e.dataValues[`totals`] = e.details[0].quantity * e.details[0].unitPrice;\r\n                            return e.dataValues;\r\n                        }\r\n                    }\r\n                });\r\n                return resolve(charts);\r\n                // if(!!tables.length && !!charts.length) {\r\n                //     resolve({\r\n                //         tables,\r\n                //         charts\r\n                //     });\r\n                // } else {\r\n                //     resolve({\r\n                //         success: false,\r\n                //         message: 'Không tìm thấy thông tin NHẬP GIỐNG.'\r\n                //     });\r\n                // }\r\n            });\r\n        }).then((res: any) => {\r\n            if(!!res.length) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    charts: res\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy thông tin THU HOẠCH.',\r\n                    charts: []\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            e;\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau!'\r\n            });\r\n        });\r\n    }\r\n}\r\n","import * as SocketIO from 'socket.io';\r\nimport { BaseSocketServer } from './BaseSocket';\r\nimport { TaskScheduler } from './task-scheduler.socket';\r\n\r\nexport class SocketBuild extends BaseSocketServer {\r\n    constructor(protected io: SocketIO.Server) {\r\n        super(io);\r\n        new TaskScheduler(this.io);\r\n    }\r\n}\r\n","import * as SocketIO from 'socket.io';\r\nimport { BaseSocketServer } from './BaseSocket';\r\nimport { PondsServices } from '../services';\r\nimport * as schedule from 'node-schedule';\r\nimport { DateUtil } from '../lib';\r\n\r\nexport class TaskScheduler extends BaseSocketServer {\r\n\r\n    private pondsServices: PondsServices = new PondsServices();\r\n\r\n    constructor(protected io: SocketIO.Server) {\r\n        super(io);\r\n        const timeToUpdate: any = DateUtil.endOf(new Date(), 'dates');\r\n        // const timeToUpdate: any = new Date(2018,11,10,17,11,0);\r\n\r\n        schedule.scheduleJob(timeToUpdate, async () => {\r\n            await this.pondsServices.models.update({\r\n                isFed: 0\r\n            });\r\n            this.io.sockets.emit('update-using-food-status', {\r\n                success: true\r\n            });\r\n        });\r\n    }\r\n}\r\n","module.exports = require(\"node-schedule\");","module.exports = require(\"debug\");","module.exports = require(\"greenlock-express\");"],"sourceRoot":""}