{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./services/index.ts","webpack:///./common/index.ts","webpack:///./lib/index.ts","webpack:///external \"lodash\"","webpack:///external \"sequelize\"","webpack:///./models/objects/index.ts","webpack:///./services/base.services.ts","webpack:///./components/baseComponents.ts","webpack:///./models/objects/base.model.ts","webpack:///./routes/BaseRoute.ts","webpack:///./components/index.ts","webpack:///./helpers/login-helpers.ts","webpack:///../node_modules/uuid/v4.js","webpack:///./config/index.ts","webpack:///./googleAPI/drive.google.ts","webpack:///./helpers/db-helpers.ts","webpack:///./schemas/index.ts","webpack:///external \"fs\"","webpack:///external \"express\"","webpack:///external \"moment-timezone\"","webpack:///./lib/promise.ts","webpack:///external \"bluebird\"","webpack:///./models/ponduserroles.associate.ts","webpack:///./services/logger.ts","webpack:///./services/user.services.ts","webpack:///./components/district/index.ts","webpack:///./components/province/index.ts","webpack:///./components/ward/index.ts","webpack:///external \"jsonwebtoken\"","webpack:///./socketServer/BaseSocket.ts","webpack:///./index.ts","webpack:///./app.ts","webpack:///./bin/setEnvironment.ts","webpack:///external \"dotenv\"","webpack:///external \"body-parser\"","webpack:///external \"cookie-parser\"","webpack:///external \"http-errors\"","webpack:///external \"compression\"","webpack:///external \"errorhandler\"","webpack:///external \"cors\"","webpack:///external \"express-status-monitor\"","webpack:///external \"helmet\"","webpack:///external \"method-override\"","webpack:///external \"morgan\"","webpack:///external \"path\"","webpack:///external \"express-fileupload\"","webpack:///external \"socket.io\"","webpack:///external \"http\"","webpack:///external \"googleapis\"","webpack:///./common/constant.ts","webpack:///./lib/date-util.ts","webpack:///./lib/enscrypts.ts","webpack:///external \"bcryptjs\"","webpack:///./lib/stream.ts","webpack:///external \"stream\"","webpack:///external \"os\"","webpack:///./models/model-builder.ts","webpack:///./models/index.ts","webpack:///./models/boughtbreeddetails.associate.ts","webpack:///./models/boughtbreeds.associate.ts","webpack:///./models/breeds.associate.ts","webpack:///./models/ownerBreed.associate.ts","webpack:///./models/costs.associate.ts","webpack:///./models/coupon.associate.ts","webpack:///./models/diedfisherys.associate.ts","webpack:///./models/growths.associate.ts","webpack:///./models/harvestdetails.associate.ts","webpack:///./models/harvests.associate.ts","webpack:///./models/material.associate.ts","webpack:///./models/ponddiary.associate.ts","webpack:///./models/pondenvironments.associate.ts","webpack:///./models/pondprepare.associate.ts","webpack:///./models/pondpreparedetails.associate.ts","webpack:///./models/ponds.associate.ts","webpack:///./models/prices.associate.ts","webpack:///./models/season.associate.ts","webpack:///./models/seasonandpond.associate.ts","webpack:///./models/stocking.associate.ts","webpack:///./models/stockingdetails.associate.ts","webpack:///./models/storages.associate.ts","webpack:///./models/storageOwner.associate.ts","webpack:///./models/takecare.associate.ts","webpack:///./models/users.associate.ts","webpack:///./models/userRoles.associate.ts","webpack:///./models/usingfoods.associate.ts","webpack:///./models/usingveterinary.associate.ts","webpack:///./models/province.associate.ts","webpack:///./models/district.associate.ts","webpack:///./models/ward.associate.ts","webpack:///./models/incurreds.associate.ts","webpack:///./models/objects/boughtbreeddetails.ts","webpack:///./models/objects/boughtbreeds.ts","webpack:///./models/objects/breeds.ts","webpack:///./models/objects/costs.ts","webpack:///./models/objects/coupons.ts","webpack:///./models/objects/diedfisherys.ts","webpack:///./models/objects/district.ts","webpack:///./models/objects/growths.ts","webpack:///./models/objects/harvestdetails.ts","webpack:///./models/objects/harvests.ts","webpack:///./models/objects/material.ts","webpack:///./models/objects/ownerBreed.model.ts","webpack:///./models/objects/ponddiary.ts","webpack:///./models/objects/pondenvironments.ts","webpack:///./models/objects/pondprepare.ts","webpack:///./models/objects/pondpreparedetails.ts","webpack:///./models/objects/ponds.ts","webpack:///./models/objects/ponduserroles.ts","webpack:///./models/objects/prices.ts","webpack:///./models/objects/province.ts","webpack:///./models/objects/seasons.ts","webpack:///./models/objects/incurreds.model.ts","webpack:///./models/objects/seasonandpond.ts","webpack:///./models/objects/stocking.ts","webpack:///./models/objects/stockingdetails.ts","webpack:///./models/objects/storages.model.ts","webpack:///./models/objects/storageOwner.model.ts","webpack:///./models/objects/takecare.ts","webpack:///./models/objects/users.ts","webpack:///./models/objects/userRoles.ts","webpack:///./models/objects/usingfoods.ts","webpack:///./models/objects/usingveterinary.ts","webpack:///./models/objects/ward.ts","webpack:///./routes/index.ts","webpack:///external \"http-status-codes\"","webpack:///external \"is-my-json-valid\"","webpack:///./routes/users/index.ts","webpack:///./routes/users/users.route.ts","webpack:///external \"winston\"","webpack:///./services/upload.ts","webpack:///external \"del\"","webpack:///./components/boughtBreed/index.ts","webpack:///./components/boughtBreed/boughtBreed.ts","webpack:///./components/boughtBreedDetail/index.ts","webpack:///./components/boughtBreedDetail/boughtBreedDetail.ts","webpack:///./components/breed/index.ts","webpack:///./components/breed/breed.ts","webpack:///./components/breedOwner/index.ts","webpack:///./components/breedOwner/breedOwner.ts","webpack:///./components/cost/index.ts","webpack:///./components/cost/cost.ts","webpack:///./components/coupon/index.ts","webpack:///./components/coupon/coupon.ts","webpack:///./components/diedFishery/index.ts","webpack:///./components/diedFishery/diedFishery.ts","webpack:///./components/district/district.ts","webpack:///./components/growth/index.ts","webpack:///./components/growth/growth.ts","webpack:///./components/harvestDetail/index.ts","webpack:///./components/harvestDetail/harvestDetail.ts","webpack:///./components/harvest/index.ts","webpack:///./components/harvest/harvest.ts","webpack:///./components/material/index.ts","webpack:///./components/material/material.ts","webpack:///./components/pondEnvironment/index.ts","webpack:///./components/pondEnvironment/pondEnvironment.ts","webpack:///./components/pondUserRole/index.ts","webpack:///./components/pondUserRole/pondUserRole.ts","webpack:///./components/pondDiary/index.ts","webpack:///./components/pondDiary/pondDiary.ts","webpack:///./components/pondPrepare/index.ts","webpack:///./components/pondPrepare/pondPrepare.ts","webpack:///./components/pondPrepareDetails/index.ts","webpack:///./components/pondPrepareDetails/pondPrepareDetails.ts","webpack:///./components/pond/index.ts","webpack:///./components/pond/pond.ts","webpack:///./components/price/index.ts","webpack:///./components/price/price.ts","webpack:///./components/province/province.ts","webpack:///./components/season/index.ts","webpack:///./components/season/season.ts","webpack:///./components/seasonsAndPond/index.ts","webpack:///./components/seasonsAndPond/seasonsAndPond.ts","webpack:///./components/stocking/index.ts","webpack:///./components/stocking/stocking.ts","webpack:///./components/stockingDetail/index.ts","webpack:///./components/stockingDetail/stockingDetail.ts","webpack:///./components/storage/index.ts","webpack:///./components/storage/storage.ts","webpack:///./components/storageOwner/index.ts","webpack:///./components/storageOwner/storageOwner.ts","webpack:///./components/takeCare/index.ts","webpack:///./components/takeCare/takeCare.ts","webpack:///./components/userRole/index.ts","webpack:///./components/userRole/userRole.ts","webpack:///./components/user/index.ts","webpack:///./components/user/user.ts","webpack:///./components/usingFood/index.ts","webpack:///./components/usingFood/usingFood.ts","webpack:///./components/usingVeterinary/index.ts","webpack:///./components/usingVeterinary/usingVeterinary.ts","webpack:///./components/ward/ward.ts","webpack:///./components/incurreds/index.ts","webpack:///./components/incurreds/incurreds.ts","webpack:///./services/bought-breed-details.services.ts","webpack:///./services/bought-breeds.services.ts","webpack:///./services/breeds.services.ts","webpack:///./services/breedOwner.services.ts","webpack:///./services/costs.services.ts","webpack:///./services/coupon.services.ts","webpack:///./services/died-fisherys.services.ts","webpack:///./services/district.services.ts","webpack:///./services/growths.services.ts","webpack:///./services/harvest-details.services.ts","webpack:///./services/harvests.services.ts","webpack:///./services/material.services.ts","webpack:///./services/pond-diary.services.ts","webpack:///./services/pond-environments.services.ts","webpack:///./services/pond-prepare-details.services.ts","webpack:///./services/pond-prepare.services.ts","webpack:///./services/ponds.services.ts","webpack:///./services/prices.services.ts","webpack:///./services/province.services.ts","webpack:///./services/pondUserRoles.services.ts","webpack:///./services/season.services.ts","webpack:///./services/stocking-details.services.ts","webpack:///./services/stocking.services.ts","webpack:///./services/storages.services.ts","webpack:///./services/storagesOwner.services.ts","webpack:///./services/take-care.services.ts","webpack:///./services/usersRoles.services.ts","webpack:///./services/using-foods.services.ts","webpack:///./services/using-veterinary.services.ts","webpack:///./services/ward.services.ts","webpack:///./services/seasonAndPond.services.ts","webpack:///./services/incurreds.services.ts","webpack:///../node_modules/uuid/lib/rng.js","webpack:///external \"crypto\"","webpack:///../node_modules/uuid/lib/bytesToUuid.js","webpack:///./routes/upload/index.ts","webpack:///./routes/upload/upload.route.ts","webpack:///./routes/getFile/index.ts","webpack:///./routes/getFile/getFile.route.ts","webpack:///./routes/province/index.ts","webpack:///./routes/province/province.route.ts","webpack:///./routes/district/index.ts","webpack:///./routes/district/district.route.ts","webpack:///./routes/ward/index.ts","webpack:///./routes/ward/ward.route.ts","webpack:///./routes/ponds/index.ts","webpack:///./routes/ponds/ponds.route.ts","webpack:///./schemas/pondPrepare.schema.ts","webpack:///./schemas/seasons.schema.ts","webpack:///./schemas/ponds.schema.ts","webpack:///./schemas/pondDiary.schema.ts","webpack:///./routes/seasons/index.ts","webpack:///./routes/seasons/seasons.route.ts","webpack:///./routes/pondPrepare/index.ts","webpack:///./routes/pondPrepare/pondPrepare.route.ts","webpack:///./routes/pondPrepareDetail/index.ts","webpack:///./routes/pondPrepareDetail/pondPrepareDetails.route.ts","webpack:///./routes/storages/index.ts","webpack:///./routes/storages/storages.route.ts","webpack:///./routes/breed/index.ts","webpack:///./routes/breed/breed.route.ts","webpack:///./routes/stocking/index.ts","webpack:///./routes/stocking/stocking.route.ts","webpack:///./routes/diedFishery/index.ts","webpack:///./routes/diedFishery/diedFishery.route.ts","webpack:///./routes/growths/index.ts","webpack:///./routes/growths/growths.route.ts","webpack:///./routes/harvest/index.ts","webpack:///./routes/harvest/harvest.route.ts","webpack:///./routes/userRoles/index.ts","webpack:///./routes/userRoles/userRoles.route.ts","webpack:///./routes/pondUserRoles/index.ts","webpack:///./routes/pondUserRoles/pondsUsersRoles.route.ts","webpack:///./routes/material/index.ts","webpack:///./routes/material/material.route.ts","webpack:///./routes/seasonAndPond/index.ts","webpack:///./routes/seasonAndPond/seasonAndPond.route.ts","webpack:///./routes/usingFood/index.ts","webpack:///./routes/usingFood/usingFood.route.ts","webpack:///./routes/pondDiary/index.ts","webpack:///./routes/pondDiary/pondDiary.route.ts","webpack:///./routes/takeCare/index.ts","webpack:///./routes/takeCare/takeCare.route.ts","webpack:///./routes/usingVeterinary/index.ts","webpack:///./routes/usingVeterinary/usingVeterinary.route.ts","webpack:///./routes/costs/index.ts","webpack:///./routes/costs/costs.route.ts","webpack:///./socketServer/index.ts","webpack:///./socketServer/task-scheduler.socket.ts","webpack:///external \"node-schedule\"","webpack:///external \"debug\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","__export","require","Sequeliz","db_helpers_1","lib_1","BaseServices","optionsModel","tableName","attributes","options","this","Op","conn","default","getById","id","userId","_this","Promise","resolve","reject","models","findById","then","obj","dataValues","getAll","query","findAll","getQuery","catch","e","insert","data","record","update","md","where","primaryFieldName","primaryKeyField","res","findAndCountAll","criteria","BaseComponent","criteriaQuery","offset","pageIndex","Number","limit","pageSizes","__assign","getFields","that","undefined","match","services","gets","condition","gotOptions","baseModel","createdAt","updatedAt","deletedAt","defaultScope","isDeleted","scopes","deletedRecord","hooks","express_1","config_1","validator","BaseRoute","router","Router","connection","sequeliz","sequelize","logEndpoints","path","_i","_a","stack","length","endpoints","keys","route","methods","toLocaleUpperCase","console","log","method","colorCli","MAGENTA","post","YELLOW","put","CYAN","RED","RESET","host","port","APIVersion","v1","countEndpoints","jwt","fs_1","lodash_1","Authentication","isLogin","request","response","next","token","headers","authorization","split","status","json","success","message","verify","cert","algorithms","err","isBoss","deToken","detoken","ownerId","createdBy","roles","bossId","isPondRole","find","isStorageRole","decode","readFileSync","process","cwd","rng","bytesToUuid","v4","buf","Array","rnds","random","ii","moment","os","environment","Dialect","env","trim","development","isProd","reg","RegExp","wifi","networkInterfaces","test","address","toString","hostname","databaseName","PORT","pool","acquire","idle","max","min","authdb","password","username","replication","read","write","timezone","utc","format","configDB","dialect","mysql","operatorsAliases","config","rootEndpoint","googleapis_1","common_1","GoogleDrive","drive","google","JSON","parse","GOOGLE_API_KEY","jwtToken","auth","JWT","client_email","private_key","authorize","GREEN","upload","image","files","images","requestBody","parents","folderDrive","uploadImageVNF","media","mediaType","mimetype","body","CustomStream","BufferToStream","file","fileId","delayGetFileById","alt","responseType","type","prefix","base64","getFile","__awaiter","params","error","config_2","model_builder_1","DBHelper","forEach","element","toModel","getDatabaseConnection","authenticate","modelName","model","deleteMode","define","modelBuilder","ModelBuilder","usersAssociate","boughtbreedsAssociate","boughtbreeddetailsAssociate","breedOwnerAssociate","provinceAssociate","districtAssociate","wardAssociate","breedsAssociate","costsAssociate","couponAssociate","diedfisherysAssociate","growthsAssociate","harvestdetailsAssociate","harvestsAssociate","materialAssociate","ponddiaryAssociate","pondenvironmentAssociate","pondprepareAssociate","pondpreparedetailsAssociate","incurredAssociate","pondsAssociate","pricesAssociate","ponduserrolesAssociate","userRolesAssociate","usingveterinaryAssociate","usingfoodsAssociate","takecareAssociate","storagesAssociate","storageOwnerAssociate","stockingdetailsAssociate","stockingAssociate","seasonAssociate","seasonAndPondAssociate","warnings","wForgottenReturn","ponduserrolesToPond","thatmodel","belongsTo","as","ActionAssociateDatabase","POND_USER_ROLE_2_POND","foreignKey","field","ponduserrolesToUser","POND_USER_ROLE_2_USER","fs","winston","PATHS","LOG","LOG_ERROR","LOG_INFO","existsSync","mkdirSync","logger","exitOnError","transports","File","colorize","filename","handleExceptions","level","maxFiles","maxsize","Console","base_services_1","objects_1","components_1","UserServives","_super","__extends","usersModel","register","entity","transaction","autocommit","user","userRoles","UserRole","setUserId","setRoles","userRolesServices","getUserByUsername","userCriteria","findOne","joinQuery","getUsername","registerChild","updateMyProfile","changePassword","enity","userQuery","include","province","USER_2_PRO","district","USER_2_DIS","ward","USER_2_WAR","getSeasonWithUser","seasons","USER_2_SEASON","order","userOptions","logger_1","BaseSocketServer","io","on","socket","socketConnection","info","reason","app_1","Debug","debug","server","ServerExpress","bootstrap","listen","WHITE","setEnvironment_1","bodyParser","cookieParser","createError","compression","errorHandler","express","cors","expressStatusMonitor","helmet","methodOverride","morgan","fileUpload","SocketIO","http_1","drive_google_1","routes_1","services_1","index_1","handleErr","app","use","req","locals","render","routes","ApiRoutes","createServer","SocketBuild","static","join","__dirname","set","stream","urlencoded","extended","limits","fileSize","dotenv","setEnvironment","ContentType","Gzip","Json","JsonUtf8","apig","logLevel","metricsEnabled","origin","AccessExposeHeaders","IdDataTypes","Integer","UuidV1","UuidV4","defaultImage","isUUId4","DateUtil","getNow","toDate","getNowByTimeZone","timeZone","tz","getUTCDateTime","date","formatDate","isUTC","ignoreConvert","replace","str","refFormatDate","newFormat","diffDate","unitOfTime","diff","add","amount","subtract","endOf","startOf","bcryptjs","promise_1","Enscrypts","reCryptToken","tokenBCrypt","slice","Math","floor","extractToken","tokenCheck","getSalt","rounds","genSalt","getSaltSync","genSaltSync","hashing","text","salt","hash","hashingSync","hashSync","compare","candidate","compareSync","Stream","bluebird_1","buffer","Duplex","push","StreamToBuffer","buffers","Buffer","concat","associations","couponModel","breedsModel","boughtbreeddetailsToCoupon","boughtbreeddetailsToBreeds","seasonModel","boughtbreedsToSeason","boughtbreedsToUser","boughtBreedDetailsModel","stockingDetailsModel","breedOwnerModel","breedToBoughBreedDetails","breedsToStockingDetails","breedsToOwnerBreed","pondPrepareModel","costsToPondPrepare","materialModel","couponToMaterial","couponToBoughtBreedDetails","couponToUsers","couponToSeason","seasonAndPondModel","diedfisherysToSeasonAndPond","userModel","districtToUser","growthsToSeasonAndPond","harvestsModel","harvestdetailsToHarvests","harvestDetailModel","harvestsToHarvestDetails","harvestsToSeasonAndPond","incurredsToPondPrepare","incurredsToUser","storageModel","usingFoodModel","usingVeterinayModel","materialToCoupon","materialToPondPrepare","materialToStorages","materialToUsingFood","materialToUsingVeterinary","ponddiaryToSeasonAndPond","seasonAndModel","pondenvironmenToSeasonAndPond","costsModel","pondPrepareDetailModel","incurredModel","pondprepareToCosts","pondprepareToPondPrepareDetails","pondprepareToSeasonAndPond","pondprepareToIncurred","pondpreparedetailsToStorage","pondpreparedetailsToPondPrepare","pondUserRolesModel","pondsToPondUserRoles","pondsToSeasonAndPond","pondsToUser","pondsToUserEmployee","pondToSeason","pondsModel","pricesToSeason","provinceToUser","boughtBreedModel","priceModel","rolesUserModel","seasonToBoughtBreed","seasonToPrice","seasonToUser","seasonToSNP","seasonToPond","seasonToUserRoles","seasonToCoupon","diedFishModel","growthModel","harvestModel","pondDiary","pondEnvironmentModel","stockingModel","takeCareModel","withDiedFish","withGrowths","withHarvest","withPondDiary","withPondEnv","withPondPrepare","withPond","withSeason","withStocking","withTakeCare","stockingdetailsModel","stockingToSNP","stockingToStockingdetails","stockingdetailsToBreeds","stockingdetailsToStocking","materialsModel","storageOwnerModel","usingveterinaryModel","storagesToMaterial","storagesToOwner","storagesToPondPrePareDetail","storagesToUsingFood","storagesToUsingVeterinary","ownerToStorage","ownerToUser","breedModel","ownerBreedToBreed","ownerBreedToUser","usingfoodsModel","takecareToSNP","takecareToUsingfoods","takecareToUsingveterinary","userrolesToPondUserRoles","userrolesToUsers","userrolesToUsersBoss","userrolesToSeason","districtModel","boughtbreedsModel","provinceModel","wardModel","ownerStorageModel","userToDistrict","userToRolesUser","userToPond","userToPondRolesBelongMany","userToCoupon","userToBoughtBreeds","userToProvince","userToSeason","userToWard","userToRolesBoss","userToOwnerStorage","userToOwnerBreed","userToPondUserRoles","userToIncurred","takecareModel","usingfoodsToStorage","usingfoodsToTakecare","usingveterinaryToStorage","usingveterinaryToTakecare","wardToUser","BOUGHT_BREED_DETAIL_2_COUPON","BOUGHT_BREED_DETAIL_2_BREED","BOUGHT_BREED_2_SEASON","BOUGHT_BREED_2_USER","hasMany","BREED_2_BOUGHT_BREED_DETAIL","BREED_2_STOKING_DETAIL","BREED_2_OWNER_BREED","OWNER_BREED_TO_BREED","OWNER_BREED_TO_USER","COST_2_POND_PREPARE","COUPON_2_MATERIAL","COUPON_2_BOUGHT_BREED_DETAILS","COUPON_2_USER","COUPON_2_SEASON","DIED_FISHERY_2_SEASON_AND_POND","GROWTH_2_SEASON_AND_POND","HARVEST_DETAIL_2_HARVEST","HARVEST_2_HARVEST_DETAILS","HARVEST_2_SEASON_AND_POND","MATERIAL_2_COUPON","MATERIAL_2_POND_PREPARE","MATERIAL_2_STORAGE","MATERIAL_2_USING_FOOD","MATERIAL_2_USING_VETERINARY","POND_DIARY_2_SEASON_AND_POND","POND_ENVIRONMENT_2_SEASON_AND_POND","POND_PREPARE_2_COST","POND_PREPARE_2_SEASON_AND_POND","POND_PREPARE_2_POND_PREPARE_DETAILS","POND_PREPARE_2_INCURREDS","POND_PREPARE_DETAIL_2_STORAGE","POND_PREPARE_DETAIL_2_POND_PREPARE","POND_2_POND_USER_ROLE","POND_2_SEASON_AND_POND","POND_2_USER","belongsToMany","POND_2_EMPLOYEE_MAYNY_ROLES","through","otherKey","POND_2_SEASON","PRICE_2_SEASON","SEASON_2_BOUGHT_BREED","SEASON_2_PRICE","SEASON_2_USER","SEASON_2_USER_ROLES","SEASON_2_SEASON_AND_POND","SEASON_2_COUPON","SEASON_2_POND","SEASON_AND_POND_2_DIED_FISH","SEASON_AND_POND_2_GROWTH","SEASON_AND_POND_2_HARVEST","SEASON_AND_POND_2_POND_DIARY","SEASON_AND_POND_2_POND_ENV","SEASON_AND_POND_2_POND_PREPARE","SEASON_AND_POND_2_SEASON","SEASON_AND_POND_2_POND","SEASON_AND_POND_2_STOCKING","SEASON_AND_POND_2_TAKE_CARE","STOCKING_2_SEASON_AND_POND","hasOne","STOCKING_2_STOCKING_DETAILS","STOCKING_DETAILS_2_BREED","STOCKING_DETAILS_2_STOCKING","STORAGE_2_OWNER","STORAGE_2_MATERIAL","STORAGE_2_POND_PREPARE_DETAILS","STORAGE_2_USING_FOOD","STORAGE_2_USING_VETERINARY","OWNER_TO_STORAGE","OWNER_TO_USER","TAKE_CARE_2_SEASON_AND_POND","TAKE_CARE_2_USING_FOOD","TAKE_CARE_2_USING_VETERINARY","USER_2_BOUGHT_BREED","USER_2_ROLES_USER","USER_2_POND","USER_2_POND_MANY_ROLES","USER_2_COUPON","USER_2_ROLES_GET_EMPLOYEES","USER_2_POND_USER_ROLE","USER_2_OWNER_STORAGE","USER_2_OWNER_BREED","USER_2_INCURREDS","USER_ROLES_2_POND_USER_ROLE","USER_ROLES_2_USER","USER_ROLES_2_USER_BOSS","USER_ROLES_2_SEASON","USING_FOOD_2_STORAGE","USING_FOOD_2_TAKE_CARE","USING_VETERINARY_2_STORAGE","USING_VETERINARY_2_TAKE_CARE","PROVINCE_2_USER","DISTRICT_2_USER","WARD_2_USER","INCURREDS_TO_POND_PREPARE","INCURREDS_TO_USER","Sequelize","_","base_model_1","boughtbreeddetailsOptions","merge","boughtBreedDetailId","autoIncrement","BIGINT","primaryKey","boughtBreedDetailUUId","STRING","unique","allowNull","couponId","breedId","quantity","FLOAT","unit","INTEGER","unitPrice","soldAddress","testingAgency","descriptions","TEXT","defaultValue","cloneDeep","boughtbreedOptions","boughtBreedId","boughtBreedUUId","seasonId","createdDate","DATE","breedOptions","breedUUId","breedName","totalQuantity","loopOfBreed","tips","costsOptions","costId","costUUId","pondPrepareId","label","responsible","notes","updatedBy","updatedDate","couponOptions","diedfisherysOptions","diedFisheryId","diedFisheryUUId","seasonAndPondId","card","solutions","employee","districtOptions","districtid","location","provinceid","growthOptions","growthId","growthUUId","averageDensity","averageMass","speedOdGrowth","livingRatio","harvestdetailOptions","harvestDetailUUId","harvestId","harvestOptions","harvestUUId","harvestName","materialOptions","materialId","materialUUId","storageId","provider","providerAddress","DOUBLE","ownerBreedOptions","ponddiaryOptions","pondDiaryId","pondDiaryUUId","diaryName","fisheryQuantity","healthOfFishery","pondVolume","diedFishery","pondenvironmentsOptions","pondEnvironmentId","pondEnvironmentUUId","oxyMorning","oxyAfternoon","phMorning","phAfternoon","transparent","salinity","h2s","nh3","bazo","pondprepareOptions","pondPrepareUUId","pondprepareName","pondpreparedetailOptions","pondPrepareDetailId","pondPrepareDetailUUId","pondOptions","pondId","pondUUId","pondName","pondArea","pondDepth","createCost","pondCreatedDate","isFed","isDiary","pondLatitude","pondLongitude","ponduserrolesOptions","pondUserRolesId","pricesOptions","priceId","priceUUId","totalCost","totalProfit","provinceOptions","seasonOptions","seasonUUId","seasonName","incurredsOptions","incurredId","incurredUUId","incurredName","seasonAndPondOptions","stockingOptions","stockingId","stockingUUId","stockingdetailOptions","stockingDetailUUId","stockingQuantity","phFirst","salinityFirst","storagesOptions","storageUUId","productName","quantityStorages","storageOwnerOptions","storageOwnerId","takecareOptions","takeCareId","takeCareUUId","takeCareName","userUUId","firstname","lastname","birthday","addressContact","town","phone","email","userrolesOptions","rolesId","index","usingfoodOptions","usingFoodId","usingFoodUUId","massOfFishery","feedingRate","totalFood","usingveterinaryOptions","usingVeterinaryId","usingVeterinaryUUId","causesNSymptoms","averageSize","totalBiomass","result","latestHarvestDate","mentor","wardOptions","wardid","httpStatusCode","BaseRoute_1","users_1","upload_1","getFile_1","province_1","district_1","ward_1","ponds_1","seasons_1","pondPrepare_1","pondPrepareDetail_1","storages_1","breed_1","stocking_1","diedFishery_1","growths_1","harvest_1","userRoles_1","pondUserRoles_1","material_1","seasonAndPond_1","usingFood_1","pondDiary_1","takeCare_1","usingVeterinary_1","costs_1","init","instance","BreedRoute","CostsRoute","DiedFisheryRoute","DistrictRoute","GetFileRoute","GrowthsRoute","HarvestRoute","MaterialRoute","PondDiaryRoute","PondPrepareRoute","PondPrepareDetailRoute","PondRoute","PondUserRolesRoute","ProvinceRoute","SeasonAndPondRoute","SeasonRoute","StockingRoute","StorageRoute","TakeCareRoute","UploadRoute","UserRoleRoute","UserRoute","UsingFoodRoute","UsingVeterinaryRoute","WardRoute","OK","uuidv4","common_2","login_helpers_1","UserRolesServices","provinceServices","ProvinceServices","districtServives","DistrictServives","wardServices","WardServices","pondsServices","PondsServices","userServives","pondUserRolesServices","PondUserRolesServices","User","setUserUUId","setFirstname","setLastname","setUsername","hashPassword","setPassword","setImages","userImage","userServices","rollback","userCreated","sent","storageOwner","OwnerStorage","setOwnerStorages","breedOwner","OwnerBreed","setOwnerBreed","storegeOwnwerServices","sOwner","breedOwnwerServices","bOwner","commit","login","required","u","getPassword","isMatch","content","sign","algorithm","getUserInfo","decodeToken","user$","getUserInfoWithUpdate","updateUserProfile","decodetoken","setUser","isArray","updateUserPassword","oldPassword","newPassword","data$","regiterEmployee","setCreatedBy","setUserRoles","role","getEmployee","and","_b","ne","employees","getEmplyeeById","rolesid","insertOnlyRole","setBossId","upsert","updateEmployee","setRolesId","setIsDeleted","getEmployeesPondRole","getAllPondAndEmployees","getEmployeesWithoutIsDelete","vertify","vertifyBoss","vertifyPondRoles","or","$roles.roles$","vertifyStorageRoles","vertifyRolesOfPond","del","fileFilter","cb","originalname","Error","cleanFolder","folderPath","sync","baseComponents_1","BoughtBreed","boughtBreedServives","BoughtBreedServives","setBoughtBreeds","setBoughtBreedId","setBoughtBreedUUId","setSeasonId","setCreatedDate","BoughtBreedDetail","boughtBreedDetailsServives","BoughtBreedDetailsServives","setBoughtBreedDetails","setBoughtBreedDetailId","setBoughtBreedDetailUUId","setCouponId","setBreedId","setQuantity","setUnit","setUnitPrice","setSoldAddress","setTestingAgency","setDescriptions","Breed","breedServives","BreedServives","setBreed","setBreedUUId","setOwnerId","setBreedName","setTotalQuantity","setLoopOfBreed","setTips","BreedOwnwerServices","Cost","costsServives","CostsServives","setCost","setCostId","setCostUUId","setPondPrepareId","setLabel","setValue","setResponsible","setNotes","setUpdatedBy","setUpdatedDate","Coupon","couponServives","CouponServives","setCoupon","DiedFishery","diedFisherysServives","DiedFisherysServives","setDiedfisherys","setDiedFisheryId","setDiedFisheryUUId","setSeasonAndPondId","setCard","setSolutions","setEmployee","District","setDistrictid","setName","setType","setLocation","setProvinceid","getAllDistrict","getDistrictByProvinceId","proId","getByProviceId","Growth","growthsServives","GrowthsServives","setGrowths","setGrowthId","setGrowthUUId","setAverageDensity","setAverageMass","setSpeedOdGrowth","setLivingRatio","HarvestDetail","harvestDetailsServives","HarvestDetailsServives","harvestIdDetailUUId","setHarvestdetails","setHarvestIdDetailUUId","setHarvestId","Harvest","harvestsServives","HarvestsServives","setHarvests","setHarvestUUId","setHarvestName","Material","materialServives","MaterialServives","setMaterial","setMaterialId","setMaterialUUId","setStorageId","setProvider","setProviderAddress","PondEnvironment","pondEnvironmentsServices","PondEnvironmentsServices","setPondenvironments","setPondEnvironmentId","setPondEnvironmentUUId","setOxyMorning","setOxyAfternoon","setPhMorning","setPhAfternoon","setTransparent","setSalinity","setH2s","setNh3","setBazo","PondUserRole","setPondUserRoles","setPondUserRolesId","setPondId","PondDiary","pondDiaryServices","PondDiaryServices","setPonddiary","setPondDiaryId","setPondDiaryUUId","setDiaryName","setFisheryQuantity","setHealthOfFishery","setPondVolume","setDiedFishery","getPondDiaryId","PondPrepare","pondPrepareServices","PondPrepareServices","setPondprepare","setPondPrepareUUId","setPondprepareName","PondPrepareDetail","pondPrepareDetailsServices","PondPrepareDetailsServices","setPondpreparedetails","setPondPrepareDetailUUId","setPondPrepareDetailId","Pond","setPond","setPondUUId","setPondName","setPondArea","setPondDepth","setCreateCost","setStatus","setIsFed","setIsDiary","setPondLatitude","setPondLongitude","setPondCreatedDate","Price","pricesServices","PricesServices","setPrices","setPriceId","setPriceUUId","setTotalCost","setTotalProfit","Province","setProvince","getAllProvince","Season","seasonServices","SeasonServices","setSeason","setSeasonUUId","setSeasonName","SeasonsAndPond","seasonAndPondServices","SeasonAndPondServices","setSeasonsAndPond","Stocking","stockingServices","StockingServices","setStocking","setStockingId","setStockingUUId","StockingDetail","stockingDetailsServices","StockingDetailsServices","setStockingdetails","setStockingDetailUUId","setStockingQuantity","setPhFirst","setSalinityFirst","Storage","storegeServices","StoregeServices","setStorages","setStorageUUId","setProductName","setQuantityStorages","StoregeOwnwerServices","setStorageOwnerId","TakeCare","takeCareServices","TakeCareServices","setTakecare","setTakeCareId","setTakeCareUUId","setTakeType","setTakeCareName","lib_2","pass","primary","toLowerCase","setBirthday","setEmail","setPhone","setAddressContact","setTown","setDistrict","UsingFood","usingFoodsServices","UsingFoodsServices","setUsingFoods","setUsingFoodId","setUsingFoodUUId","setMassOfFishery","setFeedingRate","setTotalFood","UsingVeterinary","usingVeterinaryServices","UsingVeterinaryServices","setUsingveterinary","setUsingVeterinaryId","setUsingVeterinaryUUId","setCausesNSymptoms","setAverageSize","setTotalBiomass","setResult","setLatestHarvestDate","setMentor","Ward","getAllWard","getDistrictByDistrictId","disId","getByDistrictId","Incurred","incurredsServices","IncurredsServices","setIncurred","setIncurredId","setIncurredUUId","setIncurredName","boughtbreeddetailsModel","diedfisherysModel","growthsModel","harvestdetailsModel","ponddiaryModel","pondenvironmentsModel","pondpreparedetailsModel","pondprepareModel","_1","users","testAll","pond","pondUserRole","ponds","pondUserRoles","pricesModel","testpr","userroles","ponduserrolesModel","storagesModel","ownerStoragesModel","testUserAssociate","userRolesModel","usingVeterinaryModel","crypto","nodeRNG","randomBytes","byteToHex","substr","bth","schemas_1","addPond","validate","addPondSchema","dataCheck","Date","toJSON","validater","pond_1","deToken_1","pondName_1","pondCreatedDate_1","pondArea_1","pondDepth_1","createCost_1","pondLatitude_1","pondLongitude_1","status_1","pond$","pondImage","getEmployeePondRoles","getPonds","_k","all","seasonPresent","_l","Boolean","$ponduserroles.userId$","_c","_d","includes","notIn","_e","_f","_g","_h","_j","getPondOfBoss","getPondWithoutImages","getPondNotInSeasonAndPond","map","getPondByPondUUId","updatePondWithUUId","returning","getPondBySeasonUUId","getPostPondBySeasonUUId","getPondByOwnerSeason","getPondByOwnerSeasonWithImage","endData","res_1","getPondWithoutManager","employeeId","pondByManage","countPond","pondOwner","pondsQuantity","count","getPondAdvanceds","isnull","isnotnull","isupgrade","seasonid","notRoles","userid","seasonuuid","presentSeason","rule","requestSeason","countSeasonWithPond","getPondWithUserNotManage","addPondPrepareSchema","properties","pondPrepareName","detailsOfPrepare","items","minimum","additionalProperties","addSeasonSchema","updateSeasonsSchema","maximum","enum","maxlenght","pattern","updatePondDiariesSchema","addSeason","filter","filtered","userId_1","wasHarvest","resetStatus","onUpdate","season","getSeasons","present","ss","updateSeason","getSeasonByUUId","getPondPrepares","pondPrepares","getPondPrepareByPondPrePareUUId","pondPrepare","pondprepareid","getPondPrepareId","updatePondPrepare","end","addPrepare","seasonAndPond","storage","literal","pondPrepareDetail","addPrepareOldPond","snp_1","pp","successArr","detailsOfPrepare_1","detail","ppd","addNewPrepare","snp","detailsOfPrepare_2","addIncurred","incurred","updateIncurred","getIncurredByIncurredUUId","addDetail","material","quantityOld","quantityNew","addStorage","itemArr","boss","coupon","cp_1","item","product","position","sto","mat","this_1","sUpdate","itemArr_1","getStorages","$owner.userId$","$owner->user->employees.userId$","$owner->user->employees.roles$","storages","getStorageById","updateStorage","getCoupon","coupons","components_2","addBreed","breed","bre","boughtBreedDetail","boughtBre","getBreed","breeds","addStocking","stocking","st","stockingDetail","std","getStocking","$seasonAndPond->ponds.userId$","$seasonAndPond->ponds->users->ponduserroles.userId$","getStockingDetailsByStockingDetailsUUId","stockingDetails","updateStockingDetailsByStockingDetailsUUId","oldValue","ok","addDiedFishery","getDiedFishery","wastes","getDiedFisheryByDiedFisheryUUId","waste","updateDiedFisheryByDiedFisheryUUId","getGrowths","growths","addGrowth","growth","getGrowthByUUId","updateGrowth","addHarvest","harvest","hv","harvestDetail","getHarvest","harvests","getAllMyEmployee","userInfo","getRoleByRoleId","roleId","deleteRoles","destroy","upsertRoles","userRole","main","fields","changeRoles","addPondRoles","getUserManageWithPond","updateRoles","addSeasonAndPond","pondArr","pondIdArr","differenceWith","isEqual","pondArr_1","seasonsAndPond","updateSeasonAndPond","countPondWithSeason","ownerid","countSeasonOfPond","pondid","addUsingFood","takeCare","tk","usingFood","res$","getUsingFood","between","timeOut","addPondDiary","getPondDiaries","diaries","getPondDiariesByUUId","g","deletePondDiary","isDeleled","results","updatePondDiary","isValid","delete","getTakeCare","getType","$usingFoods.createdDate$","$usingVeterinary.createdDate$","$seasonAndPond->ponds->pondUserRoles.userId$","$seasonAndPond->ponds->pondUserRoles.pondId$","toLocaleDateString","toLocaleTimeString","start-of-date","end-of-date","start-of-week","end-of-week","start-of-month","end-of-month","add-day","add-months","subtract-day","subtract-months","addUsingVeterinary","usingVeterinary","getUsingVeterinary","getAllPrices","group","har","storageCost","tables","fn","col","charts","labels","uniqBy","getDate","getMonth","getFullYear","breedCost","dL","isDL","sum","sumBy","dS","isDS","harvestCalculator","charts_1","e$","details","BaseSocket_1","task_scheduler_socket_1","TaskScheduler","schedule","timeToUpdate","scheduleJob","sockets","emit"],"mappings":"aACA,IAAAA,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GAAA,CACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,IACAG,EAAAH,EACAI,EAAA,MACAH,YAIAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,EAAA,KAGA,OAAAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACA,IAAAZ,EAAAa,EAAAX,EAAAS,GAAA,CACAG,OAAAC,eAAAb,EAAAS,GAA0CK,WAAA,KAAAC,IAAAL,MAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,UAAAiB,SAAA,aAAAA,OAAAC,YAAA,CACAN,OAAAC,eAAAb,EAAAiB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,MAAA,QAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GACA,GAAAA,EAAA,EAAAF,EAAArB,EAAAqB,GACA,GAAAE,EAAA,SAAAF,EACA,GAAAE,EAAA,UAAAF,IAAA,UAAAA,KAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MACA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,WAAA,KAAAK,UACzC,GAAAE,EAAA,UAAAF,GAAA,iBAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,SAAAM,IAA2B,OAAA3B,EAAA,YAC3B,SAAA4B,IAAiC,OAAA5B,GACjCH,EAAAU,EAAAE,EAAA,IAAAA,GACA,OAAAA,GAIAZ,EAAAa,EAAA,SAAAmB,EAAAC,GAAsD,OAAAnB,OAAAoB,UAAAC,eAAA5B,KAAAyB,EAAAC,IAGtDjC,EAAAoC,EAAA,GAIA,OAAApC,IAAAqC,EAAA,sJClFAC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,IACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,sJCpCAsC,EAAAtC,EAAA,qJCAAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,oBCHAG,EAAAD,QAAAqC,QAAA,yBCAApC,EAAAD,QAAAqC,QAAA,6JCCAD,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EA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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 30);\n","export * from './logger';\r\nexport * from './base.services';\r\nexport * from './upload';\r\nexport * from './user.services';\r\nexport * from './bought-breed-details.services';\r\nexport * from './bought-breeds.services';\r\nexport * from './breeds.services';\r\nexport * from './breedOwner.services';\r\nexport * from './costs.services';\r\nexport * from './coupon.services';\r\nexport * from './died-fisherys.services';\r\nexport * from './district.services';\r\nexport * from './growths.services';\r\nexport * from './harvest-details.services';\r\nexport * from './harvests.services';\r\nexport * from './material.services';\r\nexport * from './pond-diary.services';\r\nexport * from './pond-environments.services';\r\nexport * from './pond-prepare-details.services';\r\nexport * from './pond-prepare.services';\r\nexport * from './ponds.services';\r\nexport * from './prices.services';\r\nexport * from './province.services';\r\nexport * from './pondUserRoles.services';\r\nexport * from './season.services';\r\nexport * from './stocking-details.services';\r\nexport * from './stocking.services';\r\nexport * from './storages.services';\r\nexport * from './storagesOwner.services';\r\nexport * from './take-care.services';\r\nexport * from './user.services';\r\nexport * from './usersRoles.services';\r\nexport * from './using-foods.services';\r\nexport * from './using-veterinary.services';\r\nexport * from './ward.services';\r\nexport * from './seasonAndPond.services';\r\nexport * from './incurreds.services';\r\n","export * from './constant';\r\n","export * from './date-util';\r\nexport * from './enscrypts';\r\nexport * from './promise';\r\nexport * from './stream';\r\n","module.exports = require(\"lodash\");","module.exports = require(\"sequelize\");","// export * from './base.model'; // always first\r\nexport * from './boughtbreeddetails';\r\nexport * from './boughtbreeds';\r\nexport * from './breeds';\r\nexport * from './costs';\r\nexport * from './coupons';\r\nexport * from './diedfisherys';\r\nexport * from './district';\r\nexport * from './growths';\r\nexport * from './harvestdetails';\r\nexport * from './harvests';\r\nexport * from './material';\r\nexport * from './ownerBreed.model';\r\nexport * from './ponddiary';\r\nexport * from './pondenvironments';\r\nexport * from './pondprepare';\r\nexport * from './pondpreparedetails';\r\nexport * from './ponds';\r\nexport * from './ponduserroles';\r\nexport * from './prices';\r\nexport * from './province';\r\nexport * from './seasons';\r\nexport * from './incurreds.model';\r\nexport * from './seasonandpond';\r\nexport * from './stocking';\r\nexport * from './stockingdetails';\r\nexport * from './storages.model';\r\nexport * from './storageOwner.model';\r\nexport * from './takecare';\r\nexport * from './users';\r\nexport * from './userRoles';\r\nexport * from './usingfoods';\r\nexport * from './usingveterinary';\r\nexport * from './ward';\r\n","import * as Sequeliz from 'sequelize';\r\nimport DBHelper from '../helpers/db-helpers';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { Promise } from '../lib';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport abstract class BaseServices {\r\n    public conn: DBHelper;\r\n    public models: Sequeliz.Model<{}, any>;\r\n    public Op: Sequeliz.Operators = Sequeliz.Op;\r\n    public fn: Sequeliz.fn;\r\n    constructor(protected optionsModel: IOptionsModelDB = {\r\n        tableName: '',\r\n        attributes: {},\r\n        options: {}\r\n    }) {\r\n        this.conn = new DBHelper(this.optionsModel);\r\n    }\r\n\r\n    public getById(id: any, userId?: number): Promise<{}> {\r\n        return new Promise((resolve, reject) => {\r\n            this.models.findById(id).then((obj: any) => {\r\n                if (obj) {\r\n                    resolve(obj.dataValues);\r\n                } else {\r\n                    resolve(obj);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    public getAll(query: Sequeliz.FindOptions<any>): Promise<any[]> {\r\n        if(query) {\r\n            return new Promise((resolve, reject) => {\r\n                this.models.findAll(this.getQuery(query)).then((obj: any[]) => {\r\n                    resolve(obj);\r\n                }).catch(e => {\r\n                    reject(e);\r\n                });\r\n            });\r\n        } else {\r\n            return new Promise((resolve, reject) => {\r\n                this.models.findAll().then((obj: any[]) => {\r\n                    resolve(obj);\r\n                }).catch(e => {\r\n                    reject(e);\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    public get(query: any): Promise<any[]> {\r\n        return this.models.findAll(query);\r\n    }\r\n\r\n    insert(data: any): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            this.models.create(data).then((record: any) => {\r\n                resolve(record);\r\n            });\r\n        });\r\n    }\r\n\r\n    update(value: any): Promise<any> {\r\n        const md: any = this.models;\r\n        const where: any = {};\r\n        return new Promise((resolve, reject) => {\r\n            const primaryFieldName: string = md.primaryKeyField;\r\n            where[primaryFieldName] = value[primaryFieldName];\r\n            this.models.update(value, {where}).then((res: any) => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n\r\n    findAndCountAll(query: any): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            if(query) {\r\n                this.models.findAndCountAll(query).then((res: any) => {\r\n                    resolve(res);\r\n                });\r\n            } else {\r\n                this.models.findAndCountAll().then((res: any) => {\r\n                    resolve(res);\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    getQuery(criteria: object): object {\r\n        return {\r\n            where: criteria\r\n        };\r\n    }\r\n}\r\n","import { ISearchOptions } from '../common';\r\nimport { Promise } from '../lib';\r\nimport { BaseServices } from '../services';\r\nimport { FindOptions } from 'sequelize';\r\n\r\nexport class BaseComponent {\r\n    protected services: BaseServices;\r\n    protected primary: object;\r\n    protected foreignKey: any;\r\n    public constructor() { }\r\n\r\n    protected criteriaQuery(options: ISearchOptions) {\r\n        const offset: any = options.pageIndex ? Number(options.pageIndex) - 1 : null;\r\n        const limit: any = options.pageSizes ? Number(options.pageSizes) : null;\r\n        // const order: any[] = options.orderBy && options.orderType ? [\r\n        //     [options.orderBy, options.orderType]\r\n        // ] : options.orderBy && !options.orderType ? [\r\n        //     [options.orderBy]\r\n        // ] : null;\r\n        return { ...offset, ...limit };\r\n    }\r\n\r\n    /**\r\n     * remove null and undefine field, usually use to update action\r\n     * @param obj\r\n     */\r\n    public getFields(obj?: any): string[] {\r\n        const that: any = this;\r\n        const object: any = {};\r\n        for (const key in that) {\r\n            if (that[key] !== null && that[key] !== undefined && typeof that[key] !== 'object' && typeof that[key] !== 'function' && !key.match(/^ge[t].+$/) || that[key] === 0) {\r\n                if (that[key] || that[key] === 0) {\r\n                    object[key] = that[key];\r\n                }\r\n            }\r\n        }\r\n        return object;\r\n    }\r\n\r\n    // upsert(action: any): Promise<any> {\r\n    //     const that: any = this;\r\n    //     if(action === ActionServer.UPDATE) {\r\n    //         const query = {};\r\n    //         // this.createQuery({\r\n    //         //     action,\r\n    //         //     primary: that.getPrimary,\r\n    //         //     data: this\r\n    //         // });\r\n    //         // return new Promise((resolve, reject) => {\r\n    //         //     this.services.update(this, query).then((res: any) => {\r\n    //         //         resolve(res);\r\n    //         //     });\r\n    //         // });\r\n    //     }\r\n    // }\r\n\r\n    insert(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            this.services.insert(this).then((res: any) => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n\r\n    update(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            this.services.update(this.getFields(this)).then(res => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n\r\n    gets(condition: FindOptions<any>, options?: ISearchOptions): Promise<any> {\r\n        const gotOptions = this.criteriaQuery(options);\r\n        return new Promise((resolve, reject) => {\r\n            this.services.getAll({\r\n                ...condition,\r\n                ...gotOptions\r\n            }).then(res => {\r\n                resolve(res);\r\n            }).catch(e => {\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    getById(id: number, userId?: number): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            this.services.getById(id, userId).then(res => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n}\r\n","export const baseModel: any = {\r\n    options: {\r\n        createdAt: false,\r\n        updatedAt: false,\r\n        deletedAt: false,\r\n        defaultScope: {\r\n            where: {\r\n                isDeleted: 0\r\n            }\r\n        },\r\n        scopes: {\r\n            deletedRecord: {\r\n                where: {\r\n                    isDeleted: 1\r\n                }\r\n            }\r\n        },\r\n        hooks: {}\r\n    }\r\n};\r\n","import { Router } from 'express';\r\nimport { Sequelize } from 'sequelize';\r\nimport DBHelper from '../helpers/db-helpers';\r\nimport { host, port, colorCli, method, APIVersion } from '../config';\r\nimport * as validator from 'is-my-json-valid';\r\n\r\nexport abstract class BaseRoute {\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @class BaseRoute\r\n     * @constructor\r\n     */\r\n    public static path = '/api/v1';\r\n    protected router = Router();\r\n    protected connection: any = {};\r\n    public static countEndpoints: number = 0;\r\n    protected sequeliz: Sequelize = DBHelper.sequelize;\r\n    protected validator: any = validator;\r\n\r\n    protected logEndpoints(router?: Router, path?: string) {\r\n        if(path) {\r\n            for(const stack of router.stack) {\r\n                const endpoints: string = Object.keys(stack.route.methods)[0].toLocaleUpperCase();\r\n                console.log(`[${\r\n                    endpoints === method.get ? colorCli.MAGENTA : endpoints === method.post ? colorCli.YELLOW : endpoints === method.put ? colorCli.CYAN : colorCli.RED\r\n                }${ endpoints }${ colorCli.RESET }]\\thttp://${ host }:${ port }${ BaseRoute.path }${ APIVersion.v1 }${ path }${ stack.route.path }`);\r\n                BaseRoute.countEndpoints++;\r\n            }\r\n            console.log('');\r\n        }\r\n    }\r\n}\r\n","export * from './boughtBreed';\r\nexport * from './boughtBreedDetail';\r\nexport * from './breed';\r\nexport * from './breedOwner';\r\nexport * from './cost';\r\nexport * from './coupon';\r\nexport * from './diedFishery';\r\nexport * from './district';\r\nexport * from './growth';\r\nexport * from './harvestDetail';\r\nexport * from './harvest';\r\nexport * from './material';\r\nexport * from './pondEnvironment';\r\nexport * from './pondUserRole';\r\nexport * from './pondDiary';\r\nexport * from './pondPrepare';\r\nexport * from './pondPrepareDetails';\r\nexport * from './pond';\r\nexport * from './price';\r\nexport * from './province';\r\nexport * from './season';\r\nexport * from './seasonsAndPond';\r\nexport * from './stocking';\r\nexport * from './stockingDetail';\r\nexport * from './storage';\r\nexport * from './storageOwner';\r\nexport * from './takeCare';\r\nexport * from './userRole';\r\nexport * from './user';\r\nexport * from './usingFood';\r\nexport * from './usingVeterinary';\r\nexport * from './ward';\r\nexport * from './incurreds';\r\n","import { NextFunction, Request, Response } from 'express';\r\nimport * as jwt from 'jsonwebtoken';\r\nimport { readFileSync } from 'fs';\r\nimport { find } from 'lodash';\r\n\r\nexport class Authentication {\r\n    static cert: Buffer = readFileSync(process.cwd() + '/authKey/jwtRS256.key.pub');\r\n    constructor() {}\r\n    static isLogin(request: Request, response: Response, next: NextFunction) {\r\n        const token: string = request.headers.authorization ? request.headers.authorization.split(' ')[1] : null;\r\n        if(!token) {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Dừng lại, truy cập là không được phép!'\r\n            });\r\n        } else {\r\n            jwt.verify(token, Authentication.cert, {\r\n                algorithms: ['RS512', 'RS256']\r\n            }, (err, data) => {\r\n                if(err) {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Bạn cần đăng nhập để tiếp tục.'\r\n                    });\r\n                } else {\r\n                    next();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    static isBoss(request: Request, response: Response, next: NextFunction) {\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        if(!isBoss) {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Bạn không có quyền truy cập.'\r\n            });\r\n        } else {\r\n            next();\r\n        }\r\n    }\r\n\r\n    static isPondRole(request: Request, response: Response, next: NextFunction) {\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        const isPondRole: boolean = !!find(deToken.roles, e => e.roles === 1) || !deToken.roles.length;\r\n        if(isPondRole || isBoss) {\r\n            next();\r\n        } else {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Bạn không có quyền truy cập.'\r\n            });\r\n        }\r\n    }\r\n\r\n    static isStorageRole(request: Request, response: Response, next: NextFunction) {\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        const isStorageRole: boolean = !!find(deToken.roles, e => e.roles === 2) || !deToken.roles.length;\r\n        if(isBoss && isStorageRole) {\r\n            next();\r\n        } else {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Bạn không có quyền truy cập.'\r\n            });\r\n        }\r\n    }\r\n\r\n    static detoken(token: string) {\r\n        return jwt.decode(token,{json: true});\r\n    }\r\n}\r\n/**\r\n * Phần authen có thể dùng cho MEAN Stack\r\n */\r\n// import * as passport from 'passport';\r\n// import * as localStrategy from 'passport-local';\r\n// const LocalStrategy = localStrategy.Strategy;\r\n// import * as jwtStrategy from 'passport-jwt';\r\n// const JwtStrategy = jwtStrategy.Strategy;\r\n// const ExtractJwt = jwtStrategy.ExtractJwt;\r\n// import { UserServives } from '../services';\r\n// import * as constants from '../common';\r\n// import { User } from '../components/users';\r\n\r\n// export class LoginHelper {\r\n//     private userServices: UserServives = new UserServives();\r\n//     public static token: string;\r\n//     constructor() {\r\n//         this.usingPassport();\r\n//         this.serializeUser();\r\n//         this.deserializeUser();\r\n//     }\r\n\r\n//     private usingPassport(): void {\r\n//         const opts: any = {};\r\n//         opts.jwtFromRequest = ExtractJwt.fromAuthHeaderWithScheme('jwt');\r\n//         opts.secretOrKey = constants.secret;\r\n//         passport.use(new JwtStrategy(opts, (jwtPayload, done) => {\r\n//             this.userServices.getUserByUsername(this.getQuery({username: jwtPayload.username})).then(user => {\r\n//                 done(null, user);\r\n//             }).catch(err => {\r\n//                 if(err) {\r\n//                     return done(err, false);\r\n//                 }\r\n//                 done(null, false);\r\n//             });\r\n//         }));\r\n//         /*\r\n//         passport.use(new LocalStrategy((username, password, done) => {\r\n//             this.userServices.getUserByUsername(this.getQuery({username})).then((result: any) => {\r\n//                 Enscrypts.compare(password, result.password).then((isMatch: boolean) => {\r\n//                     console.log(isMatch);\r\n//                     if(typeof isMatch === typeof Error) {\r\n//                         throw isMatch;\r\n//                     }\r\n//                     else if (isMatch) {\r\n//                         TokenHelper.sign(result.username)\r\n//                         .then((token) => {\r\n//                             LoginHelper.token = token;\r\n//                             return done(null, result);\r\n//                         });\r\n//                     }\r\n//                     else {\r\n//                         return done(null, false);\r\n//                     }\r\n//                 });\r\n//             }).catch(() => {\r\n//                 return done(null, false);\r\n//             });\r\n//         }));\r\n//         */\r\n//     }\r\n\r\n//     private serializeUser(): void {\r\n//         passport.serializeUser((user: User, done: any) => {\r\n//             done(null, user);\r\n//         });\r\n//     }\r\n\r\n//     private deserializeUser(): void {\r\n//         passport.deserializeUser((user: User, done: any) => {\r\n//             this.userServices.getUserByUsername(this.getQuery({username: user.username})).then((result: User) => {\r\n//                 return done(null, result);\r\n//             }).catch(() => {\r\n//                 return done(null, false);\r\n//             });\r\n//         });\r\n//     }\r\n\r\n//     private getQuery(where: any): any {\r\n//         return {\r\n//             where\r\n//         };\r\n//     }\r\n\r\n//     public static isLoggedIn(req: Request, res: Response, next: NextFunction) {\r\n//         if (req.isAuthenticated()) {\r\n//             res.cookie('vietnamfishery', LoginHelper.token, {\r\n//                 maxAge: 365 * 24 * 60 * 60 * 1000\r\n//             });\r\n//             return next();\r\n//         }\r\n//         res.redirect('/api/user/login/failure');\r\n//     }\r\n\r\n//     public static notLoggedIn(req: Request, res: Response, next: NextFunction) {\r\n//         if (!req.isAuthenticated()) {\r\n//             return next();\r\n//         }\r\n//         res.redirect('/api/user/login');\r\n//     }\r\n\r\n//     // public authenticate(successRedirect: string, failureRedirect: string): any {\r\n//     //     return passport.authenticate('local', {\r\n//     //         successRedirect,\r\n//     //         failureRedirect\r\n//     //     });\r\n//     // }\r\n// }\r\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","import { Options, PoolOptions, ReplicationOptions } from 'sequelize';\r\nimport * as moment from 'moment-timezone';\r\nimport * as os from 'os';\r\nimport { find } from 'lodash';\r\n\r\nexport enum environment {\r\n    development = 'development',\r\n    production = 'production'\r\n}\r\n\r\nexport enum Dialect {\r\n    mysql = 'mysql',\r\n    sqlite = 'sqlite',\r\n    postgres = 'postgres',\r\n    mssql = 'mssql'\r\n}\r\n\r\nexport interface ISequelizeConfig {\r\n    dialect?: Dialect;\r\n    operatorsAliases?: boolean;\r\n    pool?: PoolOptions;\r\n    replication?: ReplicationOptions;\r\n}\r\n\r\nconst env = process.env.NODE_ENV.trim() || environment.development;\r\nconst isProd = env === 'production';\r\n\r\nconst reg: RegExp = new RegExp(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/);\r\n\r\nconst wifi: any = find(os.networkInterfaces()[`Wi-Fi`], e => reg.test(e.address.toString())) || {};\r\n\r\nexport const host: string = wifi.address || os.hostname() || 'localhost';\r\n\r\nexport const databaseName = 'fisheriesdatabase';\r\n\r\n/**\r\n * @var PORT from evironment - config in cli run start project\r\n * @var DEVELOPMENT from evironment - port config with development stage, value: 7979\r\n * @var PRODUCTION from evironment - port config with production stage, value: 9999\r\n */\r\nexport const port = process.env.PORT || env === environment.development ? 7979 : 9999;\r\n\r\nconst pool: PoolOptions = {\r\n    acquire: 30000,\r\n    idle: 10000,\r\n    max: 5,\r\n    min: 0\r\n};\r\n\r\nexport const authdb: any = {\r\n    host: 'localhost',\r\n    password: 'J%:dTva*#9c>k@L6',\r\n    username: 'fisherier'\r\n};\r\n\r\nconst replication: ReplicationOptions = {\r\n    read: authdb,\r\n    write: authdb\r\n};\r\n\r\nconst timezone: string = moment().utc().format('Z');\r\nexport const configDB: Options = {\r\n    dialect: Dialect.mysql,\r\n    operatorsAliases: false,\r\n    pool,\r\n    port: 3306,\r\n    replication,\r\n    timezone,\r\n};\r\n\r\nexport const config: Options = {\r\n    dialect: Dialect.mysql,\r\n    operatorsAliases: false,\r\n    pool,\r\n    replication\r\n};\r\n\r\n/**\r\n * color of console.log\r\n */\r\nexport enum colorCli {\r\n    RESET = '\\x1b[0m',\r\n    BRIGHT = '\\x1b[1m',\r\n    DIM = '\\x1b[2m',\r\n    UNDERSCORE = '\\x1b[4m',\r\n    BLINK = '\\x1b[5m',\r\n    REVERSE = '\\x1b[7m',\r\n    HIDDEN = '\\x1b[8m',\r\n    BLACK = '\\x1b[30m',\r\n    RED = '\\x1b[31m',\r\n    GREEN = '\\x1b[32m',\r\n    YELLOW = '\\x1b[33m',\r\n    BLUE = '\\x1b[34m',\r\n    MAGENTA = '\\x1b[35m',\r\n    CYAN = '\\x1b[36m', // xanh biển\r\n    WHITE = '\\x1b[37m',\r\n    CRIMSON = '\\x1b[38m', // not working\r\n    BG_BLACK = '\\x1b[40m',\r\n    BG_RED = '\\x1b[41m',\r\n    BG_GREEN = '\\x1b[42m',\r\n    BG_YELLOW = '\\x1b[43m',\r\n    BG_BLUE = '\\x1b[44m',\r\n    BG_MAGENTA = '\\x1b[45m',\r\n    BG_CYAN = '\\x1b[46m',\r\n    BG_WHITE = '\\x1b[47m',\r\n    BG_CRIMSON = '\\x1b[48m', // not working\r\n    // color 256\r\n    /**\r\n     * ```js\r\n     *  for(let i = 0; i < 16; i++) {\r\n     *      for(let j = 0; j < 16; j++) {\r\n     *          const code = (i * 16 + j);\r\n     *          console.log(colorCli.TEMPLATE + code + 'm', code + '\\t');\r\n     *      }\r\n     *  }\r\n     * ```\r\n     */\r\n    TEMPLATE = '\\u001b[38;5;',\r\n}\r\n\r\nexport const rootEndpoint = '/api';\r\n\r\nexport enum APIVersion {\r\n    v1 = '/api/v1'\r\n}\r\n\r\n/**\r\n * Method of http\r\n */\r\nexport enum method {\r\n    get = 'GET',\r\n    post = 'POST',\r\n    put = 'PUT',\r\n    delete = 'DELETE'\r\n}\r\n","import { google, drive_v3 } from 'googleapis';\r\nimport { JWT } from 'google-auth-library';\r\nimport { folderDrive } from '../common';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { CustomStream } from '../lib';\r\nimport { colorCli } from '../config';\r\n\r\nexport class GoogleDrive {\r\n    private static drive: drive_v3.Drive;\r\n    private static key: any;\r\n    private static jwtToken: JWT;\r\n    constructor() {\r\n        GoogleDrive.drive = google.drive('v3');\r\n        GoogleDrive.key = JSON.parse(process.env.GOOGLE_API_KEY);\r\n        GoogleDrive.jwtToken = new google.auth.JWT(GoogleDrive.key.client_email, null, GoogleDrive.key.private_key, ['https://www.googleapis.com/auth/drive'], null);\r\n        GoogleDrive.jwtToken.authorize(err => {\r\n            if (err) {\r\n                console.log(`${ colorCli.RED }Google authorization not accorded: `,err);\r\n                return;\r\n            } else {\r\n                console.log(`${ colorCli.GREEN }Google authorization accorded.${ colorCli.RESET }`);\r\n            }\r\n        });\r\n    }\r\n\r\n    public static upload(request: any, response: Response, next: NextFunction): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            const image: any = (request.files as any).image || (request.files as any).images;\r\n            const requestBody = {\r\n                name: image.name,\r\n                parents: [folderDrive.uploadImageVNF]\r\n            };\r\n\r\n            const media = {\r\n                mediaType: image.mimetype,\r\n                body: CustomStream.BufferToStream(image.data as Buffer)\r\n            };\r\n\r\n            GoogleDrive.drive.files.create({\r\n                auth: GoogleDrive.jwtToken,\r\n                requestBody,\r\n                media\r\n            }, (err, file) => {\r\n                if (err) {\r\n                    resolve({\r\n                        success: false,\r\n                        message: 'Can not upload files. Please try again later.'\r\n                    });\r\n                } else {\r\n                    resolve({\r\n                        success: true,\r\n                        message: 'Upload file successful!',\r\n                        fileId: file.data.id\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    public static getFile = async (request: Request, response: Response, next: NextFunction) => {\r\n        const options: any = {\r\n            auth: GoogleDrive.jwtToken,\r\n            fileId: request.params.fileId,\r\n            alt: 'media'\r\n        };\r\n        GoogleDrive.drive.files.get(options, {\r\n            responseType: 'arraybuffer'\r\n        }, (err, file: any) => {\r\n            if (err) {\r\n                response.status(200).json({ error: err.toString() });\r\n            }\r\n            if (file) {\r\n                const type = file.headers[`content-type`];\r\n                const prefix = 'data:' + type + ';base64,';\r\n                const base64 = file.data.toString('base64');\r\n                const data = prefix + base64;\r\n                response.status(200).json({ data });\r\n            }\r\n        });\r\n    }\r\n\r\n    public static delayGetFileById(fileId: any): Promise<any> {\r\n        const options: any = {\r\n            auth: GoogleDrive.jwtToken,\r\n            fileId,\r\n            alt: 'media'\r\n        };\r\n        return new Promise((resolve, reject) => {\r\n            GoogleDrive.drive.files.get(options, {\r\n                responseType: 'arraybuffer'\r\n            }, (err, file: any) => {\r\n                if (file) {\r\n                    const type = file.headers[`content-type`];\r\n                    const prefix = 'data:' + type + ';base64,';\r\n                    const base64 = file.data.toString('base64');\r\n                    const data = prefix + base64;\r\n                    resolve(data);\r\n                } else if(err) {\r\n                    resolve(err);\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n","import { Sequelize } from 'sequelize';\r\nimport * as Sequeliz from 'sequelize';\r\nimport { configDB, colorCli } from '../config';\r\nimport { databaseName } from '../config';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { ModelBuilder } from '../models/model-builder';\r\nimport * as options from '../models/objects';\r\n\r\nexport default class DBHelper {\r\n    public static sequelize: Sequelize = new Sequeliz(databaseName, null, null, {\r\n        ...configDB\r\n    });\r\n    private models: any = {};\r\n\r\n    constructor(private optionsModel: IOptionsModelDB) {\r\n        Object.keys(options).forEach(element => {\r\n            this.models[element] = this.toModel(options[element].tableName, options[element].attributes, options[element].options);\r\n        });\r\n    }\r\n\r\n    public static getDatabaseConnection() {\r\n        DBHelper.sequelize.authenticate().then(() => {\r\n            console.log(`${ colorCli.GREEN }Connection with database has been established successfully.`);\r\n        })\r\n        .catch(err => {\r\n            console.error(`${ colorCli.RED }Unable to connect to the database:`, err);\r\n        });\r\n    }\r\n\r\n    private toModel (modelName: string, model: any, deleteMode: any) {\r\n        return DBHelper.sequelize.define(modelName, model, deleteMode);\r\n    }\r\n\r\n    private get modelName () {\r\n        return this.optionsModel.tableName;\r\n    }\r\n\r\n    private get deleteMode () {\r\n        return this.optionsModel.options;\r\n    }\r\n\r\n    private get model () {\r\n        return DBHelper.sequelize.define(this.modelName, this.optionsModel.attributes, this.deleteMode);\r\n    }\r\n\r\n    public get usersModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.usersAssociate(\r\n            this.models[`districtOptions`],\r\n            this.models[`userrolesOptions`],\r\n            this.models[`pondOptions`],\r\n            this.models[`couponOptions`],\r\n            this.models[`boughtbreedOptions`],\r\n            this.models[`provinceOptions`],\r\n            this.models[`seasonOptions`],\r\n            this.models[`wardOptions`],\r\n            this.models[`storageOwnerOptions`],\r\n            this.models[`ownerBreedOptions`],\r\n            this.models[`ponduserrolesOptions`],\r\n            this.models[`incurredsOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get boughtbreedsModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.boughtbreedsAssociate(\r\n            this.models[`seasonOptions`],\r\n            this.models[`userOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get boughtbreeddetailsModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.boughtbreeddetailsAssociate(\r\n            this.models[`couponOptions`],\r\n            this.models[`breedOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get breedOwnerModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.breedOwnerAssociate(\r\n            this.models[`breedOptions`],\r\n            this.models[`userOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get provinceModel() {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.provinceAssociate(this.models[`userOptions`]);\r\n        return md;\r\n    }\r\n\r\n    public get districtModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.districtAssociate(this.models[`userOptions`]);\r\n        return md;\r\n    }\r\n\r\n    public get wardModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.wardAssociate(this.models[`userOptions`]);\r\n        return md;\r\n    }\r\n\r\n    public get breedsModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.breedsAssociate(\r\n            this.models[`boughtbreeddetailsOptions`],\r\n            this.models[`stockingdetailOptions`],\r\n            this.models[`ownerBreedOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get costsModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.costsAssociate(this.models[`pondprepareOptions`]);\r\n        return md;\r\n    }\r\n\r\n    public get couponModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.couponAssociate(\r\n            this.models[`materialOptions`],\r\n            this.models[`userOptions`],\r\n            this.models[`seasonOptions`],\r\n            this.models[`boughtbreeddetailsOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get diedfisherysModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.diedfisherysAssociate(this.models[`seasonAndPondOptions`]);\r\n        return md;\r\n    }\r\n\r\n    public get growthsModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.growthsAssociate(this.models[`seasonAndPondOptions`]);\r\n        return md;\r\n    }\r\n\r\n    public get harvestdetailsModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.harvestdetailsAssociate(this.models[`harvestOptions`]);\r\n        return md;\r\n    }\r\n\r\n    public get harvestModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.harvestsAssociate(this.models[`harvestdetailOptions`], this.models[`seasonAndPondOptions`]);\r\n        return md;\r\n    }\r\n\r\n    public get materialModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.materialAssociate(\r\n            this.models[`couponOptions`],\r\n            this.models[`pondprepareOptions`],\r\n            this.models[`storagesOptions`],\r\n            this.models[`usingfoodOptions`],\r\n            this.models[`usingveterinaryOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get ponddiaryModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.ponddiaryAssociate(\r\n            this.models[`seasonAndPondOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get pondenvironmentsModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.pondenvironmentAssociate(this.models[`seasonAndPondOptions`]);\r\n        return md;\r\n    }\r\n\r\n    public get pondprepareModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.pondprepareAssociate(\r\n            this.models[`seasonAndPondOptions`],\r\n            this.models[`costsOptions`],\r\n            this.models[`pondpreparedetailOptions`],\r\n            this.models[`incurredsOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get pondpreparedetailsModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.pondpreparedetailsAssociate(this.models[`pondprepareOptions`],\r\n        this.models[`storagesOptions`]);\r\n        return md;\r\n    }\r\n\r\n    public get incurredModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.incurredAssociate(\r\n            this.models[`pondprepareOptions`],\r\n            this.models[`userOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get pondsModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.pondsAssociate(\r\n            this.models[`ponduserrolesOptions`],\r\n            this.models[`seasonAndPondOptions`],\r\n            this.models[`userOptions`],\r\n            this.models[`seasonOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get pricesModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.pricesAssociate(this.models[`seasonOptions`]);\r\n        return md;\r\n    }\r\n\r\n    public get ponduserrolesModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.ponduserrolesAssociate(\r\n            this.models[`userOptions`],\r\n            this.models[`pondOptions`],\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get userRolesModel() {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.userRolesAssociate(\r\n            this.models[`ponduserrolesOptions`],\r\n            this.models[`userOptions`],\r\n            this.models[`seasonOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get usingVeterinaryModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.usingveterinaryAssociate(\r\n            this.models[`storagesOptions`],\r\n            this.models[`takecareOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get usingfoodsModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.usingfoodsAssociate(\r\n            this.models[`storagesOptions`],\r\n            this.models[`takecareOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get takecareModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.takecareAssociate(\r\n            this.models[`usingveterinaryOptions`],\r\n            this.models[`usingfoodOptions`],\r\n            this.models[`seasonAndPondOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get storagesModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.storagesAssociate(\r\n            this.models[`materialOptions`],\r\n            this.models[`storageOwnerOptions`],\r\n            this.models[`pondpreparedetailOptions`],\r\n            this.models[`usingfoodOptions`],\r\n            this.models[`usingveterinaryOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get ownerStoragesModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.storageOwnerAssociate(\r\n            this.models[`storagesOptions`],\r\n            this.models[`userOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get stockingdetailsModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.stockingdetailsAssociate(\r\n            this.models[`stockingOptions`],\r\n            this.models[`breedOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get stockingModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.stockingAssociate(\r\n            this.models[`stockingdetailOptions`],\r\n            this.models[`seasonAndPondOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get seasonModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.seasonAssociate(\r\n            this.models[`boughtbreedOptions`],\r\n            this.models[`pricesOptions`],\r\n            this.models[`userOptions`],\r\n            this.models[`seasonAndPondOptions`],\r\n            this.models[`pondOptions`],\r\n            this.models[`userrolesOptions`],\r\n            this.models[`couponOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get seasonAndPondModel() {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.seasonAndPondAssociate(\r\n            this.models[`diedfisherysOptions`],\r\n            this.models[`growthOptions`],\r\n            this.models[`harvestOptions`],\r\n            this.models[`ponddiaryOptions`],\r\n            this.models[`pondenvironmentsOptions`],\r\n            this.models[`pondprepareOptions`],\r\n            this.models[`pondOptions`],\r\n            this.models[`seasonOptions`],\r\n            this.models[`stockingOptions`],\r\n            this.models[`takecareOptions`]\r\n        );\r\n        return md;\r\n    }\r\n}\r\n","export * from './pondPrepare.schema';\r\nexport * from './seasons.schema';\r\nexport * from './ponds.schema';\r\nexport * from './pondDiary.schema';\r\n","module.exports = require(\"fs\");","module.exports = require(\"express\");","module.exports = require(\"moment-timezone\");","/*\r\n* The Promise module using bluebird\r\n*/\r\n\r\nimport * as Promise from 'bluebird';\r\nPromise.config({\r\n    warnings: {\r\n        wForgottenReturn: false\r\n    }\r\n});\r\n\r\nexport { Promise };\r\n","module.exports = require(\"bluebird\");","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function ponduserrolesToPond(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.POND_USER_ROLE_2_POND,\r\n        foreignKey: {\r\n            name: 'pondId',\r\n            field: 'pondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function ponduserrolesToUser(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.POND_USER_ROLE_2_USER,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as fs from 'fs';\r\nimport * as winston from 'winston';\r\n\r\nconst PATHS = {\r\n  LOG: `${process.cwd()}/logs`,\r\n  LOG_ERROR: `${process.cwd()}/logs/_error.log`,\r\n  LOG_INFO: `${process.cwd()}/logs/_info.log`,\r\n};\r\n// ensure log directory exists\r\n(() => fs.existsSync(PATHS.LOG) || fs.mkdirSync(PATHS.LOG))();\r\n\r\nexport const logger = new (winston.Logger)({\r\n  exitOnError: false,\r\n  transports: [\r\n    new winston.transports.File({\r\n      colorize: false,\r\n      filename: PATHS.LOG_INFO,\r\n      handleExceptions: true,\r\n      json: true,\r\n      level: 'info',\r\n      maxFiles: 2,\r\n      maxsize: 5242880, // 5MB\r\n      name: 'info',\r\n    }),\r\n    new (winston.transports.File)({\r\n      colorize: false,\r\n      filename: PATHS.LOG_ERROR,\r\n      handleExceptions: true,\r\n      json: true,\r\n      level: 'error',\r\n      maxFiles: 2,\r\n      maxsize: 5242880, // 5MB\r\n      name: 'error',\r\n    }),\r\n    new winston.transports.Console({\r\n      colorize: true,\r\n      handleExceptions: true,\r\n      json: false,\r\n      level: 'debug',\r\n      name: 'debug',\r\n    }),\r\n  ],\r\n});\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { userOptions } from '../models/objects';\r\nimport { Promise } from '../lib';\r\nimport DBHelper from '../helpers/db-helpers';\r\nimport { Sequelize, Transaction } from 'sequelize';\r\nimport { UserRole } from '../components';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport class UserServives extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = userOptions;\r\n    constructor() {\r\n        super(UserServives.optionsModel);\r\n        this.models = this.conn.usersModel;\r\n    }\r\n\r\n    public register(entity: any): Promise<any> {\r\n        const sequeliz: Sequelize = DBHelper.sequelize;\r\n        return new Promise((resolve, reject) => {\r\n            sequeliz.transaction({autocommit: true},(t: Transaction) => {\r\n                return this.models.create(entity.user);\r\n            }).catch(e => {\r\n                return resolve(e);\r\n            }).then((user: any) => {\r\n                if(user) {\r\n                    const userRoles: UserRole = new UserRole();\r\n                    userRoles.setUserId = user.userId;\r\n                    userRoles.setRoles = entity.roles;\r\n                    return userRoles.userRolesServices.models.create(userRoles);\r\n                }\r\n            }).catch(e => {\r\n                return resolve(e);\r\n            }).\r\n            then((res: any) => {\r\n                resolve(res ? res.dataValues : null);\r\n            });\r\n        });\r\n    }\r\n\r\n    public getUserByUsername(userCriteria: any): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            this.models.findOne(this.joinQuery(this.getQuery(userCriteria.getUsername))).then((user: any) => {\r\n                if(user) {\r\n                    resolve(user.dataValues);\r\n                } else {\r\n                    resolve(user);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    public registerChild(entity: any): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            this.models.create(entity).then((user) => {\r\n                resolve(user);\r\n            }).catch(err => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    public updateMyProfile(entity: any, options: any): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            this.models.update(entity, options).then((user: any) => {\r\n                resolve(user);\r\n            });\r\n        });\r\n    }\r\n\r\n    public changePassword(enity: any, query: any): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            this.models.update(enity, query).then((data: any) => {\r\n                resolve(data);\r\n            });\r\n        });\r\n    }\r\n\r\n    private joinQuery(userQuery: any): any {\r\n        const include =  {\r\n            include: [\r\n                {\r\n                    model: (this.models as any).sequelize.models.province,\r\n                    as: ActionAssociateDatabase.USER_2_PRO,\r\n                    require: true\r\n                },\r\n                {\r\n                    model: (this.models as any).sequelize.models.district,\r\n                    as: ActionAssociateDatabase.USER_2_DIS,\r\n                    require: true\r\n                },\r\n                {\r\n                    model: (this.models as any).sequelize.models.ward,\r\n                    as: ActionAssociateDatabase.USER_2_WAR,\r\n                    require: true\r\n                }\r\n            ],\r\n            attributes: [`userId`, `userUUId`, `firstname`, `lastname`, `username`, `password`, `birthday`, `town`, `district`, `province`, `status`, `phone`, `email`, `images`, `createdBy`, `createdDate`, `updatedBy`, `updatedDate`, `isDeleted`]\r\n        };\r\n        return { ...userQuery, ...include };\r\n    }\r\n\r\n    getSeasonWithUser(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            const query: any = {\r\n                include: [\r\n                    {\r\n                        model: (this.models as any).sequelize.models.seasons,\r\n                        as: ActionAssociateDatabase.USER_2_SEASON,\r\n                        limit: 1,\r\n                        order: [\r\n                            ['seasonId', 'DESC']\r\n                        ]\r\n                    }\r\n                ]\r\n            };\r\n            this.models.findAll(query).then(res => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n\r\n    getQuery(username: any): any {\r\n        return {\r\n            where: {\r\n                username\r\n            }\r\n        };\r\n    }\r\n}\r\n","export * from './district';\r\n","export * from './province';\r\n","export * from './ward';\r\n","module.exports = require(\"jsonwebtoken\");","import * as SocketIO from 'socket.io';\r\nimport { logger } from '../services/logger';\r\n\r\nexport class BaseSocketServer {\r\n    protected socketConnection: SocketIO.Socket;\r\n    constructor(protected io: SocketIO.Server) {\r\n        this.io.on('connection', (socket: SocketIO.Socket) => {\r\n            this.socketConnection = socket;\r\n            logger.info(`${ socket.id } is connected.`);\r\n            socket.on('disconnect', (reason) => {\r\n                logger.info(`${ socket.id } is disconnected. [Reason] is ${ reason }`);\r\n            });\r\n        });\r\n    }\r\n}\r\n","import { ServerExpress } from './app';\r\nimport { colorCli, port, host } from './config';\r\nimport * as Debug from 'debug';\r\nconst debug = Debug('express:server');\r\n\r\n// create http server port\r\nexport const server = ServerExpress.bootstrap().server;\r\nserver.listen(process.env.PORT || port, () => {\r\n    console.log(`${colorCli.WHITE}App listening on host ${colorCli.MAGENTA}http://${host}:${process.env.PORT || port}${colorCli.RESET}`);\r\n});\r\n","import setEnvironment from './bin/setEnvironment';\r\nsetEnvironment();\r\nimport * as bodyParser from 'body-parser';\r\nimport * as cookieParser from 'cookie-parser';\r\nimport * as createError from 'http-errors';\r\nimport * as compression from 'compression';\r\nimport * as errorHandler from 'errorhandler';\r\nimport * as express from 'express';\r\nimport * as cors from 'cors';\r\nimport * as expressStatusMonitor from 'express-status-monitor';\r\nimport * as helmet from 'helmet';\r\nimport * as methodOverride from 'method-override';\r\nimport * as morgan from 'morgan';\r\nimport * as path from 'path';\r\nimport * as fileUpload from 'express-fileupload';\r\nimport * as SocketIO from 'socket.io';\r\nimport { createServer, Server } from 'http';\r\nimport { GoogleDrive } from './googleAPI/drive.google';\r\nimport DBHelper from './helpers/db-helpers';\r\n\r\n// socket import\r\nimport { BaseSocketServer } from './socketServer/BaseSocket';\r\n// import { PhSocket } from './socketServer/phSocket';\r\n\r\nimport { ApiRoutes } from './routes';\r\nimport { logger } from './services';\r\n\r\nimport { SocketBuild } from './socketServer/index';\r\n\r\n// import './services/connectionDB';\r\n\r\n/**\r\n * The server.\r\n *\r\n * @class Server\r\n */\r\nexport class ServerExpress {\r\n    /**\r\n     * Bootstrap the application.\r\n     *\r\n     * @class Server\r\n     * @method bootstrap\r\n     * @static\r\n     */\r\n    public static bootstrap(): ServerExpress {\r\n        return new ServerExpress();\r\n    }\r\n\r\n    public app: express.Application;\r\n    public server: Server;\r\n    public io: SocketIO.Server;\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @class Server\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        // create expressjs application\r\n        this.app = express();\r\n        // create server for socket io\r\n        this.server = createServer(this.app);\r\n        // Add socket server\r\n        this.io = SocketIO(this.server);\r\n        // socket client in /socket.io/socket.io.js\r\n        new SocketBuild(this.io);\r\n\r\n        // Google Drive API\r\n        new GoogleDrive();\r\n\r\n        // configure application\r\n        this.config();\r\n        // add routes\r\n        this.routes();\r\n\r\n        // handle error 404, ...etc\r\n        this.handleErr();\r\n\r\n        // using Database\r\n        DBHelper.getDatabaseConnection();\r\n    }\r\n\r\n    /**\r\n     * Configure application\r\n     *\r\n     * @class Server\r\n     * @method config\r\n     */\r\n    public async config() {\r\n        this.app.use(cors());\r\n\r\n        // add static paths\r\n        this.app.use('/assets', express.static(path.join(__dirname, '../public')));\r\n\r\n        // set template\r\n        this.app.set('views', path.join(__dirname, '../views'));\r\n        this.app.set('view engine', 'ejs');\r\n\r\n        // mount logger\r\n        this.app.use(morgan('tiny', {\r\n            stream: {\r\n                write: (message: string) => logger.info(message.trim()),\r\n            },\r\n        } as morgan.Options));\r\n\r\n        // mount urlencode parser\r\n        this.app.use(bodyParser.json({\r\n            limit: '50mb',\r\n        }));\r\n\r\n        // mount urlencode parser\r\n        this.app.use(bodyParser.urlencoded({\r\n            extended: false            \r\n        }));\r\n\r\n        // mount query string parser\r\n        this.app.use(cookieParser());\r\n\r\n        // mount override?\r\n        this.app.use(helmet());\r\n        this.app.use(compression());\r\n        this.app.use(methodOverride());\r\n        this.app.use(expressStatusMonitor());\r\n        this.app.use(fileUpload({\r\n            limits: { fileSize: 50 * 1024 * 1024 },\r\n        }));\r\n\r\n        // this.app.use(function (req, res, next) {\r\n        //     res.header('Access-Control-Allow-Origin', '*:*');\r\n        //     res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\r\n        //     next();\r\n        // });\r\n        // this.handleErr();\r\n    }\r\n\r\n    private handleErr = () => {\r\n        // catch 404 and forward to error handler\r\n        this.app.use((req: express.Request, res: express.Response, next: express.NextFunction) => {\r\n            next(createError(404));\r\n        });\r\n\r\n        // catch 404 and forward to error handler\r\n        this.app.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) => {\r\n            // err.status = 404;\r\n            // next(err);\r\n            // set locals, only providing error in development\r\n            res.locals.message = err.message;\r\n            res.locals.error = req.app.get('env') === 'development' ? err : {};\r\n\r\n            // render the error page\r\n            res.status(err.status || 500);\r\n            res.render('error');\r\n        });\r\n\r\n        // error handling\r\n        this.app.use(errorHandler());\r\n    }\r\n\r\n    /**\r\n     * Create and return Router.\r\n     *\r\n     * @class Server\r\n     * @method routes\r\n     * @return void\r\n     */\r\n    private routes = async () => {\r\n        this.app.use(ApiRoutes.path, ApiRoutes.router);\r\n    }\r\n}\r\n","import * as path from 'path';\r\nimport * as dotenv from 'dotenv';\r\nexport default function setEnvironment() {\r\n    if (process.env.NODE_ENV.trim() === 'debug') {\r\n        dotenv.config({\r\n            path: process.cwd() + '/debug.env'\r\n        });\r\n    }\r\n    else if (process.env.NODE_ENV.trim() === 'development') {\r\n        dotenv.config({\r\n            path: process.cwd() + '/.env'\r\n        });\r\n    } else if (process.env.NODE_ENV.trim() === 'production') {\r\n        dotenv.config({\r\n            path: process.cwd() + '/production.env'\r\n        });\r\n    }\r\n}\r\n","module.exports = require(\"dotenv\");","module.exports = require(\"body-parser\");","module.exports = require(\"cookie-parser\");","module.exports = require(\"http-errors\");","module.exports = require(\"compression\");","module.exports = require(\"errorhandler\");","module.exports = require(\"cors\");","module.exports = require(\"express-status-monitor\");","module.exports = require(\"helmet\");","module.exports = require(\"method-override\");","module.exports = require(\"morgan\");","module.exports = require(\"path\");","module.exports = require(\"express-fileupload\");","module.exports = require(\"socket.io\");","module.exports = require(\"http\");","module.exports = require(\"googleapis\");","export const ContentType = {\r\n    Gzip: 'application/gzip',\r\n    Json: 'application/json',\r\n    JsonUtf8: 'application/json; charset=utf8',\r\n};\r\n\r\nexport const apig = {\r\n    logLevel: 'INFO',\r\n    metricsEnabled: true,\r\n    origin: '*',\r\n};\r\n\r\nexport const AccessExposeHeaders = 'X-Pagination-Index,X-Pagination-Size,X-Pagination-TotalCount';\r\n\r\nexport interface IOptionsHttpResponse {\r\n    err?: any;\r\n    message?: any;\r\n    data?: any;\r\n    status?: number;\r\n    excludeStack?: any;\r\n    code?: string;\r\n    details?: any;\r\n}\r\n\r\nexport const IdDataTypes = {\r\n    Integer: 'Integer',\r\n    UuidV1: 'UuidV1',\r\n    UuidV4: 'UuidV4',\r\n};\r\n\r\nexport enum folderDrive {\r\n    uploadImageVNF = '1zh74DklADISZbcEYVix2nDDKd5wtt0-Z'\r\n}\r\n\r\nexport enum defaultImage {\r\n    userImage = '1pL4I4TNcKOf5kD2YTNXXJjuWtyJSBDE2',\r\n    pondImage = '1EVRh5NePZkOBxfKFDAD1RZ3AjHSWJ12W'\r\n}\r\n\r\nexport const isUUId4: RegExp = /^[0-9A-F]{8}-[0-9A-F]{4}-[4][0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i;\r\n\r\nexport interface ISearchOptions {\r\n    pageSizes?: string;\r\n    pageIndex?: string;\r\n    // order?: Array<[]>;\r\n    orderBy?: string;\r\n    orderType?: string;\r\n    between?: string[];\r\n    count?: string;\r\n    userId?: string;\r\n}\r\n\r\n/**\r\n * Những hạng mục đã được đánh dấu [✔] vui lòng không sửa đổi,\r\n * Nếu không sẽ xảy ra lỗi rất nghiêm trọng không fix nổi\r\n */\r\nexport enum ActionAssociateDatabase {\r\n\r\n    BOUGHT_BREED_DETAIL_2_COUPON = 'coupon', // ✔\r\n    BOUGHT_BREED_DETAIL_2_BREED = 'breed', // ✔\r\n\r\n    BOUGHT_BREED_2_BOUGHT_BREED_DETAIL = 'boughtbreedsToBoughtBreedDetails',\r\n    BOUGHT_BREED_2_USER = 'users',\r\n    BOUGHT_BREED_2_SEASON = 'season',\r\n\r\n    BREED_2_BOUGHT_BREED_DETAIL = 'boughBreedDetail',\r\n    BREED_2_STOKING_DETAIL = 'stockingDetails',\r\n    BREED_2_OWNER_BREED = 'owner',\r\n\r\n    COST_2_POND_PREPARE = 'costs',\r\n\r\n    COUPON_2_MATERIAL = 'materials',\r\n    COUPON_2_BOUGHT_BREED_DETAILS = 'boughtBreedDetails', // ✔\r\n    COUPON_2_SEASON = 'season', // ✔\r\n    COUPON_2_USER = 'user',\r\n\r\n    DIED_FISHERY_2_SEASON_AND_POND = 'seasonAndPond',\r\n\r\n    DISTRICT_2_USER = 'districtsToUser',\r\n\r\n    GROWTH_2_SEASON_AND_POND = 'seasonAndPond',\r\n\r\n    HARVEST_DETAIL_2_HARVEST = 'harvest', // ✔\r\n\r\n    HARVEST_2_HARVEST_DETAILS = 'details',\r\n    HARVEST_2_SEASON_AND_POND = 'harvestsnp', // ✔\r\n\r\n    MATERIAL_2_COUPON = 'coupon',\r\n    MATERIAL_2_POND_PREPARE = 'materialToPondPrepare',\r\n    MATERIAL_2_STORAGE = 'storage', // ✔\r\n    MATERIAL_2_USING_FOOD = 'usingFoods',\r\n    MATERIAL_2_USING_VETERINARY = 'usingVeterinay',\r\n\r\n    POND_DIARY_2_SEASON_AND_POND = 'snp', // ✔\r\n\r\n    POND_ENVIRONMENT_2_SEASON_AND_POND = 'environments',\r\n\r\n    POND_PREPARE_2_SEASON_AND_POND = 'seasonAndPond',\r\n    POND_PREPARE_2_COST = 'pondPrepare',\r\n    POND_PREPARE_2_POND_PREPARE_DETAILS = 'details',\r\n    POND_PREPARE_2_INCURREDS = 'incurreds',\r\n\r\n    POND_PREPARE_DETAIL_2_POND_PREPARE = 'pondPrepare',\r\n    POND_PREPARE_DETAIL_2_STORAGE = 'storages',\r\n    POND_PREPARE_DETAIL_2_COST = 'detailCost',\r\n\r\n    INCURREDS_TO_POND_PREPARE = 'pondPrepare',\r\n    INCURREDS_TO_USER = 'user',\r\n\r\n    POND_2_POND_USER_ROLE = 'pondUserRoles', // ✔\r\n    POND_2_SEASON = 'seasons',\r\n    POND_2_USER = 'user', // ✔\r\n    POND_2_EMPLOYEE_MAYNY_ROLES = 'users', // ✔\r\n    POND_2_SEASON_AND_POND = 'seasonsnp', // ✔\r\n\r\n    POND_USER_ROLE_2_USER = 'user', // ✔\r\n    POND_USER_ROLE_2_USER_ROLE = 'userRole',\r\n    POND_USER_ROLE_2_POND = 'pond',\r\n\r\n    PRICE_2_SEASON = 'prices',\r\n\r\n    PROVINCE_2_USER = 'provinces',\r\n\r\n    SEASON_AND_POND_2_SEASON = 'seasons',\r\n    SEASON_AND_POND_2_POND = 'ponds',\r\n    SEASON_AND_POND_2_GROWTH = 'seasonNPondToGrowth',\r\n    SEASON_AND_POND_2_DIED_FISH = 'diedFishSeason',\r\n    SEASON_AND_POND_2_HARVEST = 'toHarvests',\r\n    SEASON_AND_POND_2_POND_DIARY = 'seasonWithDiary',\r\n    SEASON_AND_POND_2_POND_PREPARE = 'withPondPrepare',\r\n    SEASON_AND_POND_2_TAKE_CARE = 'takeCares',\r\n    SEASON_AND_POND_2_STOCKING = 'stocking',\r\n    SEASON_AND_POND_2_POND_ENV = 'seasonWithEnvironment',\r\n\r\n    SEASON_2_BOUGHT_BREED = 'boughtBreed',\r\n    SEASON_2_PRICE = 'price',\r\n    SEASON_2_COUPON = 'coupon',\r\n    SEASON_2_USER = 'user', // ✔\r\n    SEASON_2_USER_ROLES = 'roles',\r\n    SEASON_2_POND = 'ponds',\r\n    SEASON_2_SEASON_AND_POND = 'seasonToSeasonNPond',\r\n    SEASON_2_STORAGE = 'storage',\r\n\r\n    STOCKING_2_STOCKING_DETAILS = 'details',\r\n    STOCKING_2_SEASON_AND_POND = 'seasonAndPond',\r\n\r\n    STOCKING_DETAILS_2_STOCKING = 'stocking',\r\n    STOCKING_DETAILS_2_BREED = 'breed',\r\n\r\n    STORAGE_2_POND_PREPARE_DETAILS = 'pondPrepareDetails', // ✔\r\n    STORAGE_2_MATERIAL = 'materials',\r\n    STORAGE_2_SEASON = 'storagesToSeason',\r\n    STORAGE_2_PRICE = 'storagesToPrices',\r\n    STORAGE_2_USING_FOOD = 'usingFoods',\r\n    STORAGE_2_USING_VETERINARY = 'usingveterinary',\r\n    STORAGE_2_OWNER = 'owner',\r\n\r\n    OWNER_TO_STORAGE = 'storages',\r\n    OWNER_TO_USER = 'user',\r\n\r\n    OWNER_BREED_TO_BREED = 'breeds',\r\n    OWNER_BREED_TO_USER = 'user',\r\n\r\n    TAKE_CARE_2_USING_FOOD = 'usingFoods',\r\n    TAKE_CARE_2_USING_VETERINARY = 'usingVeterinary',\r\n    TAKE_CARE_2_SEASON_AND_POND = 'seasonAndPond',\r\n\r\n    USER_ROLES_2_USER = 'userInfo',\r\n    USER_ROLES_2_SEASON = 'seasonRoles',\r\n    USER_ROLES_2_USER_BOSS = 'employees', // ✔\r\n    USER_ROLES_2_POND_USER_ROLE = 'pondUserRoles', // ✔\r\n\r\n    USER_2_ROLES_USER = 'roles', // ✔\r\n    USER_2_POND = 'ponds',\r\n    USER_2_POND_MANY_ROLES = 'pondsBy',\r\n    USER_2_COUPON = 'coupons',\r\n    USER_2_SEASON = 'seasons', // ✔\r\n    USER_2_BOUGHT_BREED = 'userToBoughtBreeds',\r\n    USER_2_PRO = 'provinces',\r\n    USER_2_DIS = 'districts',\r\n    USER_2_WAR = 'wards',\r\n    USER_2_ROLES_GET_EMPLOYEES = 'employees', // ✔\r\n    USER_2_POND_USER_ROLE = 'pondUserRole',\r\n    USER_2_OWNER_STORAGE = 'user',\r\n    USER_2_OWNER_BREED = 'ownerBreed',\r\n    USER_2_INCURREDS = 'incurreds',\r\n\r\n    USING_FOOD_2_STORAGE = 'storages',\r\n    USING_FOOD_2_TAKE_CARE = 'usingFoods',\r\n\r\n    USING_VETERINARY_2_STORAGE = 'storages',\r\n    USING_VETERINARY_2_TAKE_CARE = 'usingVeterinaryTakeCare',\r\n\r\n    WARD_2_USER = 'wards',\r\n}\r\n","/**\r\n * @description :: Custom library to process date time format\r\n * like get date, month, year or concat time together\r\n */\r\n\r\n/**\r\n * Module dependencies.\r\n */\r\n// import 'moment-timezone'\r\nimport * as moment from 'moment-timezone';\r\n\r\n/**\r\n * Define a DateUtil that supports some functions to work with date time\r\n */\r\nexport class DateUtil {\r\n\r\n   /**\r\n    * Get current datetime using moment\r\n    * @return {Date} The current date\r\n    */\r\n    public static getNow(): Date {\r\n        return moment().toDate();\r\n    }\r\n\r\n   /**\r\n    * Get current datetime for specify time zone\r\n    * @param {String} timeZone  The time zone name\r\n    * @param {String} format    The format pattern to be used\r\n    * @return {Date}            The current date in specify time zone\r\n    */\r\n    public static getNowByTimeZone(timeZone: string, format: string): string {\r\n        return moment().tz(timeZone).format(format);\r\n    }\r\n\r\n    /**\r\n     * Get current UTC datetime using moment\r\n     * @return {String} A string that represent curent UTC datetime (i.e. 2016-11-13T04:40:08Z)\r\n     */\r\n    public static getUTCDateTime(date?: Date): string {\r\n        return moment(date).utc().format();\r\n    }\r\n\r\n    /**\r\n     * Converts the given date with the format pattern\r\n     * @param {String} date             The date to be converted\r\n     * @param {String} format           The format pattern to be used\r\n     * @param {boolean} isUTC           The boolean value to specific the date is UTC or not\r\n     * @param {boolean} ignoreConvert   The flag to specific the date is convert to server time or not\r\n     * @return {String}                 The formatted date\r\n     */\r\n    public static formatDate(date: moment.MomentInput, format: string, isUTC?: boolean, ignoreConvert: boolean = false): string {\r\n        if (!date) {\r\n            return null;\r\n        }\r\n\r\n        if (isUTC) {\r\n            return moment.utc(date).format(format);\r\n        }\r\n\r\n        // Remove Z character from the date value to ignore convert to local time\r\n        if (ignoreConvert && typeof date === 'string') {\r\n            date = date.replace(new RegExp('Z', 'g'), '');\r\n        }\r\n\r\n        return moment(date).format(format);\r\n    }\r\n\r\n    /**\r\n     * Gets the date from the formatted date string\r\n     * @param {String} str The formatted date to be converted\r\n     * @param {String} format The format pattern is using\r\n     * @return {String} Return the date from the formatted date string\r\n     */\r\n    public static parse(str: moment.MomentInput, format?: moment.MomentFormatSpecification): Date {\r\n        if (str === null || str === '') {\r\n            return null;\r\n        }\r\n        return moment(str, format).toDate();\r\n    }\r\n\r\n    /**\r\n     * Converts the formatted date to the new format\r\n     * @param {String} str          The formatted date to be converted\r\n     * @param {String} format       The format pattern is using\r\n     * @param {String} newFormat    The new format pattern to be used\r\n     * @return {String} Return the new formatted date\r\n     */\r\n    public static refFormatDate(str: moment.MomentInput, format: moment.MomentFormatSpecification, newFormat: string): string {\r\n        const date: Date = this.parse(str, format);\r\n        return DateUtil.formatDate(date, newFormat);\r\n    }\r\n\r\n    /**\r\n     * To get the difference in another unit of measurement, pass that measurement as the second argument.\r\n     * @param {Date} date           The date to difference\r\n     * @param {Date} diffDate       The date to be diff\r\n     * @param {String} unitOfTime   The unit of time (months, years, days, etc... )\r\n     * @return {String} The difference in another unit of measurement\r\n     */\r\n    public static diffDate(date: moment.MomentInput, diffDate: moment.MomentInput, unitOfTime: moment.unitOfTime.Diff): number {\r\n        return moment(date).diff(diffDate, unitOfTime);\r\n    }\r\n\r\n    /**\r\n     * To add amount unit of time to specified date\r\n     * @param {Date} date           The input date\r\n     * @param {Date} amount         The amount unit that the input date will add\r\n     * @param {String} unitOfTime   The unit of time (months, years, days, etc... )\r\n     * @return {Date} The date after added amount of unit of time.\r\n     */\r\n    public static add(date: moment.MomentInput, amount: moment.DurationInputArg1, unitOfTime: moment.unitOfTime.DurationConstructor): Date {\r\n        return moment(date).add(amount, unitOfTime).toDate();\r\n    }\r\n\r\n    /**\r\n     * To subtract amount unit of time to specified date\r\n     * @param {Date} date           The input date\r\n     * @param {Date} amount         The amount unit that the input date will substract\r\n     * @param {String} unitOfTime   The unit of time (months, years, days, etc... )\r\n     * @return {Date} The date after subtracted amount of unit of time.\r\n     */\r\n    public static subtract(date: moment.MomentInput, amount: moment.DurationInputArg1, unitOfTime: moment.unitOfTime.DurationConstructor): Date {\r\n        return moment(date).subtract(amount, unitOfTime).toDate();\r\n    }\r\n\r\n    /**\r\n     * Calculate the date end of unit of time to specified date\r\n     * @param {Date} date           The input date\r\n     * @param {String} unitOfTime   The unit of time (months, years, days, etc... )\r\n     * @return {Date} The date end of unit of time.\r\n     */\r\n    public static endOf(date: moment.MomentInput, unitOfTime: moment.unitOfTime.StartOf): Date {\r\n        return moment(date).endOf(unitOfTime).toDate();\r\n    }\r\n\r\n    /**\r\n     * Calculate the date start of unit of time to specified date\r\n     * @param {Date} date           The input date\r\n     * @param {String} unitOfTime   The unit of time (months, years, days, etc... )\r\n     * @return {Date} The date end of unit of time.\r\n     */\r\n    public static startOf(date: moment.MomentInput, unitOfTime: moment.unitOfTime.StartOf): Date {\r\n        return moment(date).startOf(unitOfTime).toDate();\r\n    }\r\n}\r\n","import * as bcryptjs from 'bcryptjs';\r\nimport { Promise } from './promise';\r\n\r\nexport class Enscrypts {\r\n    public static getSalt(rounds: number): Promise<string> {\r\n        return Promise.resolve(bcryptjs.genSalt(rounds));\r\n    }\r\n\r\n    public static getSaltSync(rounds: number) {\r\n        return bcryptjs.genSaltSync(rounds);\r\n    }\r\n\r\n    public static hashing(text: string, salt: number | string): Promise<string> {\r\n        return Promise.resolve(bcryptjs.hash(text, salt));\r\n    }\r\n\r\n    public static hashingSync(text: string, salt: number | string): string {\r\n        return bcryptjs.hashSync(text, salt);\r\n    }\r\n\r\n    public static compare(candidate: string, hash: string): Promise<boolean> {\r\n        return Promise.resolve(bcryptjs.compare(candidate, hash));\r\n    }\r\n\r\n    public static compareSync(candidate: string, hash: string): boolean {\r\n        return bcryptjs.compareSync(candidate, hash);\r\n    }\r\n\r\n    /**\r\n     * Enscrypts.hashingSync('vietnamfishery', Enscrypts.getSaltSync(Math.floor((Math.random() * 12) + 1))) + '100%<3' +\r\n     */\r\n    protected reCryptToken = (tokenBCrypt: string, isBoss: boolean): string => {\r\n        const token = tokenBCrypt.split('.');\r\n        if (!isBoss) {\r\n            return token[0] + '.' + (token[1].slice(0, token[1].length - 1) + Math.floor((Math.random() * 9) + 1) + token[1][token[1].length - 1]) + '.' + token[2];\r\n        } else {\r\n            return token[0] + '.' + (token[1].slice(0, token[1].length - 1) + 0 + token[1][token[1].length - 1]) + '.' + token[2];\r\n        }\r\n    }\r\n\r\n    protected extractToken = (token: string): string => {\r\n        const tokenCheck = token.split('.');\r\n        return tokenCheck[0] + '.' + (tokenCheck[1].slice(0, tokenCheck[1].length - 1) + tokenCheck[1][tokenCheck[1].length]) + '.' + tokenCheck[2];\r\n    }\r\n}\r\n","module.exports = require(\"bcryptjs\");","import * as Stream from 'stream';\r\nimport { Promise } from 'bluebird';\r\n\r\nexport class CustomStream extends Stream {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    public static BufferToStream(buffer: Buffer) {\r\n        const stream = new this.Duplex();\r\n        stream.push(buffer);\r\n        stream.push(null);\r\n        return stream;\r\n    }\r\n\r\n    public static StreamToBuffer(stream: Stream) {\r\n        return new Promise((resolve, reject) => {\r\n            const buffers: Buffer[] = [];\r\n            stream.on('error', reject);\r\n            stream.on('data', (data) => buffers.push(data));\r\n            stream.on('end', () => resolve(Buffer.concat(buffers)));\r\n        });\r\n    }\r\n}\r\n","module.exports = require(\"stream\");","module.exports = require(\"os\");","import * as Sequeliz from 'sequelize';\r\n\r\nimport * as associations from './';\r\n\r\nexport class ModelBuilder {\r\n    constructor(private model: Sequeliz.Model<{}, any>) { }\r\n\r\n    boughtbreeddetailsAssociate(couponModel: any, breedsModel: any) {\r\n        associations.boughtbreeddetailsToCoupon(this.model, couponModel);\r\n        associations.boughtbreeddetailsToBreeds(this.model, breedsModel);\r\n    }\r\n\r\n    boughtbreedsAssociate(\r\n        seasonModel: any,\r\n        usersModel: any\r\n    ) {\r\n        associations.boughtbreedsToSeason(this.model, seasonModel);\r\n        associations.boughtbreedsToUser(this.model, usersModel);\r\n    }\r\n\r\n    breedsAssociate(\r\n        boughtBreedDetailsModel: any,\r\n        stockingDetailsModel: any,\r\n        breedOwnerModel: any\r\n    ) {\r\n        associations.breedToBoughBreedDetails(this.model, boughtBreedDetailsModel);\r\n        associations.breedsToStockingDetails(this.model, stockingDetailsModel);\r\n        associations.breedsToOwnerBreed(this.model, breedOwnerModel);\r\n    }\r\n\r\n    costsAssociate(pondPrepareModel: any) {\r\n        associations.costsToPondPrepare(this.model, pondPrepareModel);\r\n    }\r\n\r\n    couponAssociate(\r\n        materialModel: any,\r\n        usersModel: any,\r\n        seasonModel: any,\r\n        boughtBreedDetailsModel: any\r\n    ) {\r\n        associations.couponToMaterial(this.model, materialModel);\r\n        associations.couponToBoughtBreedDetails(this.model, boughtBreedDetailsModel);\r\n        associations.couponToUsers(this.model, usersModel);\r\n        associations.couponToSeason(this.model, seasonModel);\r\n    }\r\n\r\n    diedfisherysAssociate(seasonAndPondModel: any) {\r\n        associations.diedfisherysToSeasonAndPond(this.model, seasonAndPondModel);\r\n    }\r\n\r\n    districtAssociate(userModel: any) {\r\n        associations.districtToUser(this.model, userModel);\r\n    }\r\n\r\n    growthsAssociate(seasonAndPondModel: any) {\r\n        associations.growthsToSeasonAndPond(this.model, seasonAndPondModel);\r\n    }\r\n\r\n    harvestdetailsAssociate(harvestsModel: any) {\r\n        associations.harvestdetailsToHarvests(this.model, harvestsModel);\r\n    }\r\n\r\n    harvestsAssociate(harvestDetailModel: any, seasonAndPondModel: any) {\r\n        associations.harvestsToHarvestDetails(this.model, harvestDetailModel);\r\n        associations.harvestsToSeasonAndPond(this.model, seasonAndPondModel);\r\n    }\r\n\r\n    incurredAssociate(pondPrepareModel: any, userModel: any) {\r\n        associations.incurredsToPondPrepare(this.model, pondPrepareModel);\r\n        associations.incurredsToUser(this.model, userModel);\r\n    }\r\n\r\n    materialAssociate(\r\n        couponModel: any,\r\n        pondPrepareModel: any,\r\n        storageModel: any,\r\n        usingFoodModel: any,\r\n        usingVeterinayModel: any\r\n    ) {\r\n        associations.materialToCoupon(this.model, couponModel);\r\n        associations.materialToPondPrepare(this.model, pondPrepareModel);\r\n        associations.materialToStorages(this.model, storageModel);\r\n        associations.materialToUsingFood(this.model, usingFoodModel);\r\n        associations.materialToUsingVeterinary(this.model, usingVeterinayModel);\r\n    }\r\n\r\n    ponddiaryAssociate(seasonAndPondModel: any) {\r\n        associations.ponddiaryToSeasonAndPond(this.model, seasonAndPondModel);\r\n    }\r\n\r\n    pondenvironmentAssociate(seasonAndModel: any) {\r\n        associations.pondenvironmenToSeasonAndPond(this.model, seasonAndModel);\r\n    }\r\n\r\n    pondprepareAssociate(\r\n        seasonAndPondModel: any,\r\n        costsModel: any,\r\n        pondPrepareDetailModel: any,\r\n        incurredModel: any\r\n    ) {\r\n        associations.pondprepareToCosts(this.model, costsModel);\r\n        associations.pondprepareToPondPrepareDetails(this.model, pondPrepareDetailModel);\r\n        associations.pondprepareToSeasonAndPond(this.model, seasonAndPondModel);\r\n        associations.pondprepareToIncurred(this.model, incurredModel);\r\n    }\r\n\r\n    pondpreparedetailsAssociate(pondPrepareModel: any, storageModel: any) {\r\n        associations.pondpreparedetailsToStorage(this.model, storageModel);\r\n        associations.pondpreparedetailsToPondPrepare(this.model, pondPrepareModel);\r\n    }\r\n\r\n    pondsAssociate(pondUserRolesModel: any, seasonAndPondModel: any, userModel: any, seasonModel: any) {\r\n        associations.pondsToPondUserRoles(this.model, pondUserRolesModel);\r\n        associations.pondsToSeasonAndPond(this.model, seasonAndPondModel);\r\n        associations.pondsToUser(this.model, userModel);\r\n        associations.pondsToUserEmployee(this.model, userModel);\r\n        associations.pondToSeason(this.model, seasonModel);\r\n    }\r\n\r\n    ponduserrolesAssociate(\r\n        userModel: any,\r\n        pondsModel: any\r\n    ) {\r\n        associations.ponduserrolesToUser(this.model, userModel);\r\n        associations.ponduserrolesToPond(this.model, pondsModel);\r\n    }\r\n\r\n    pricesAssociate(seasonModel: any) {\r\n        associations.pricesToSeason(this.model, seasonModel);\r\n    }\r\n\r\n    provinceAssociate(userModel: any) {\r\n        associations.provinceToUser(this.model, userModel);\r\n    }\r\n\r\n    seasonAssociate(\r\n        boughtBreedModel: any,\r\n        priceModel: any,\r\n        userModel: any,\r\n        seasonAndPondModel: any,\r\n        pondsModel: any,\r\n        rolesUserModel: any,\r\n        couponModel: any\r\n    ) {\r\n        associations.seasonToBoughtBreed(this.model, boughtBreedModel);\r\n        associations.seasonToPrice(this.model, priceModel);\r\n        associations.seasonToUser(this.model, userModel);\r\n        associations.seasonToSNP(this.model, seasonAndPondModel);\r\n        associations.seasonToPond(this.model, pondsModel);\r\n        associations.seasonToUserRoles(this.model, rolesUserModel);\r\n        associations.seasonToCoupon(this.model, couponModel);\r\n    }\r\n\r\n    seasonAndPondAssociate(\r\n        diedFishModel: any,\r\n        growthModel: any,\r\n        harvestModel: any,\r\n        pondDiary: any,\r\n        pondEnvironmentModel: any,\r\n        pondPrepareModel: any,\r\n        pondsModel: any,\r\n        seasonModel: any,\r\n        stockingModel: any,\r\n        takeCareModel: any\r\n    ) {\r\n        associations.withDiedFish(this.model, diedFishModel);\r\n        associations.withGrowths(this.model, growthModel);\r\n        associations.withHarvest(this.model, harvestModel);\r\n        associations.withPondDiary(this.model, pondDiary);\r\n        associations.withPondEnv(this.model, pondEnvironmentModel);\r\n        associations.withPondPrepare(this.model, pondPrepareModel);\r\n        associations.withPond(this.model, pondsModel);\r\n        associations.withSeason(this.model, seasonModel);\r\n        associations.withStocking(this.model, stockingModel);\r\n        associations.withTakeCare(this.model, takeCareModel);\r\n    }\r\n\r\n    stockingAssociate(stockingdetailsModel: any, seasonAndPondModel: any) {\r\n        associations.stockingToSNP(this.model, seasonAndPondModel);\r\n        associations.stockingToStockingdetails(this.model, stockingdetailsModel);\r\n    }\r\n\r\n    stockingdetailsAssociate(stockingModel: any, breedsModel: any) {\r\n        associations.stockingdetailsToBreeds(this.model, breedsModel);\r\n        associations.stockingdetailsToStocking(this.model, stockingModel);\r\n    }\r\n\r\n    storagesAssociate(\r\n        materialsModel: any,\r\n        storageOwnerModel: any,\r\n        pondPrepareDetailModel: any,\r\n        usingFoodModel: any,\r\n        usingveterinaryModel: any\r\n    ) {\r\n        associations.storagesToMaterial(this.model, materialsModel);\r\n        associations.storagesToOwner(this.model, storageOwnerModel);\r\n        associations.storagesToPondPrePareDetail(this.model, pondPrepareDetailModel);\r\n        associations.storagesToUsingFood(this.model, usingFoodModel);\r\n        associations.storagesToUsingVeterinary(this.model, usingveterinaryModel);\r\n    }\r\n\r\n    storageOwnerAssociate(\r\n        storageModel: any,\r\n        userModel: any,\r\n    ) {\r\n        associations.ownerToStorage(this.model, storageModel);\r\n        associations.ownerToUser(this.model, userModel);\r\n    }\r\n\r\n    breedOwnerAssociate(\r\n        breedModel: any,\r\n        userModel: any\r\n    ) {\r\n        associations.ownerBreedToBreed(this.model, breedModel);\r\n        associations.ownerBreedToUser(this.model, userModel);\r\n    }\r\n\r\n    takecareAssociate(usingveterinaryModel: any, usingfoodsModel: any, seasonAndPondModel: any) {\r\n        associations.takecareToSNP(this.model, seasonAndPondModel);\r\n        associations.takecareToUsingfoods(this.model, usingfoodsModel);\r\n        associations.takecareToUsingveterinary(this.model, usingveterinaryModel);\r\n    }\r\n\r\n    userRolesAssociate(\r\n        pondUserRolesModel: any,\r\n        userModel: any,\r\n        seasonModel: any\r\n    ) {\r\n        associations.userrolesToPondUserRoles(this.model, pondUserRolesModel);\r\n        associations.userrolesToUsers(this.model, userModel);\r\n        associations.userrolesToUsersBoss(this.model, userModel);\r\n        associations.userrolesToSeason(this.model, seasonModel);\r\n    }\r\n\r\n    usersAssociate(\r\n        districtModel: any,\r\n        rolesUserModel: any,\r\n        pondsModel: any,\r\n        couponModel: any,\r\n        boughtbreedsModel: any,\r\n        provinceModel: any,\r\n        seasonModel: any,\r\n        wardModel: any,\r\n        ownerStorageModel: any,\r\n        breedOwnerModel: any,\r\n        pondUserRolesModel: any,\r\n        incurredModel: any\r\n    ) {\r\n        associations.userToDistrict(this.model, districtModel);\r\n        associations.userToRolesUser(this.model, rolesUserModel);\r\n        associations.userToPond(this.model, pondsModel);\r\n        associations.userToPondRolesBelongMany(this.model, pondsModel);\r\n        associations.userToCoupon(this.model, couponModel);\r\n        associations.userToBoughtBreeds(this.model, boughtbreedsModel);\r\n        associations.userToProvince(this.model, provinceModel);\r\n        associations.userToSeason(this.model, seasonModel);\r\n        associations.userToWard(this.model, wardModel);\r\n        associations.userToRolesBoss(this.model, rolesUserModel);\r\n        associations.userToOwnerStorage(this.model, ownerStorageModel);\r\n        associations.userToOwnerBreed(this.model, breedOwnerModel);\r\n        associations.userToPondUserRoles(this.model, pondUserRolesModel);\r\n        associations.userToIncurred(this.model, incurredModel);\r\n    }\r\n\r\n    usingfoodsAssociate(storageModel: any, takecareModel: any) {\r\n        associations.usingfoodsToStorage(this.model, storageModel);\r\n        associations.usingfoodsToTakecare(this.model, takecareModel);\r\n    }\r\n\r\n    usingveterinaryAssociate(storageModel: any, takecareModel: any) {\r\n        associations.usingveterinaryToStorage(this.model, storageModel);\r\n        associations.usingveterinaryToTakecare(this.model, takecareModel);\r\n    }\r\n\r\n    wardAssociate(userModel: any) {\r\n        associations.wardToUser(this.model, userModel);\r\n    }\r\n}\r\n","export * from './boughtbreeddetails.associate';\r\nexport * from './boughtbreeds.associate';\r\nexport * from './breeds.associate';\r\nexport * from './ownerBreed.associate';\r\nexport * from './costs.associate';\r\nexport * from './coupon.associate';\r\nexport * from './diedfisherys.associate';\r\nexport * from './growths.associate';\r\nexport * from './harvestdetails.associate';\r\nexport * from './harvests.associate';\r\nexport * from './material.associate';\r\nexport * from './ponddiary.associate';\r\nexport * from './pondenvironments.associate';\r\nexport * from './pondprepare.associate';\r\nexport * from './pondpreparedetails.associate';\r\nexport * from './ponds.associate';\r\nexport * from './ponduserroles.associate';\r\nexport * from './prices.associate';\r\nexport * from './ponduserroles.associate';\r\nexport * from './season.associate';\r\nexport * from './seasonandpond.associate';\r\nexport * from './stocking.associate';\r\nexport * from './stockingdetails.associate';\r\nexport * from './storages.associate';\r\nexport * from './storageOwner.associate';\r\nexport * from './takecare.associate';\r\nexport * from './users.associate';\r\nexport * from './userRoles.associate';\r\nexport * from './usingfoods.associate';\r\nexport * from './usingveterinary.associate';\r\nexport * from './province.associate';\r\nexport * from './district.associate';\r\nexport * from './ward.associate';\r\nexport * from './incurreds.associate';\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function boughtbreeddetailsToCoupon(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.BOUGHT_BREED_DETAIL_2_COUPON,\r\n        foreignKey: {\r\n            name: 'couponId',\r\n            field: 'couponId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function boughtbreeddetailsToBreeds(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.BOUGHT_BREED_DETAIL_2_BREED,\r\n        foreignKey: {\r\n            name: 'breedId',\r\n            field: 'breedId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function boughtbreedsToSeason(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.BOUGHT_BREED_2_SEASON,\r\n        foreignKey: {\r\n            name: 'seasonId',\r\n            field: 'seasonId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function boughtbreedsToUser(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.BOUGHT_BREED_2_USER,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function breedToBoughBreedDetails(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.BREED_2_BOUGHT_BREED_DETAIL,\r\n        foreignKey: {\r\n            name: 'breedId',\r\n            field: 'breedId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function breedsToStockingDetails(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.BREED_2_STOKING_DETAIL,\r\n        foreignKey: {\r\n            name: 'breedId',\r\n            field: 'breedId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function breedsToOwnerBreed(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.BREED_2_OWNER_BREED,\r\n        foreignKey: {\r\n            name: 'ownerId',\r\n            field: 'ownerId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function ownerBreedToBreed(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.OWNER_BREED_TO_BREED,\r\n        foreignKey: {\r\n            name: 'ownerId',\r\n            field: 'ownerId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function ownerBreedToUser(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.OWNER_BREED_TO_USER,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function costsToPondPrepare(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.COST_2_POND_PREPARE,\r\n        foreignKey: {\r\n            name: 'pondPrepareId',\r\n            field: 'pondPrepareId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function couponToMaterial(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.COUPON_2_MATERIAL,\r\n        foreignKey: {\r\n            name: 'couponId',\r\n            field: 'couponId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function couponToBoughtBreedDetails(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.COUPON_2_BOUGHT_BREED_DETAILS,\r\n        foreignKey: {\r\n            name: 'couponId',\r\n            field: 'couponId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function couponToUsers(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.COUPON_2_USER,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function couponToSeason(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.COUPON_2_SEASON,\r\n        foreignKey: {\r\n            name: 'seasonId',\r\n            field: 'seasonId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function diedfisherysToSeasonAndPond(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.DIED_FISHERY_2_SEASON_AND_POND,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function growthsToSeasonAndPond(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.GROWTH_2_SEASON_AND_POND,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function harvestdetailsToHarvests(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.HARVEST_DETAIL_2_HARVEST,\r\n        foreignKey: {\r\n            name: 'harvestId',\r\n            field: 'harvestId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function harvestsToHarvestDetails(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.HARVEST_2_HARVEST_DETAILS,\r\n        foreignKey: {\r\n            name: 'harvestId',\r\n            field: 'harvestId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function harvestsToSeasonAndPond(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.HARVEST_2_SEASON_AND_POND,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function materialToCoupon(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.MATERIAL_2_COUPON,\r\n        foreignKey: {\r\n            name: 'couponId',\r\n            field: 'couponId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function materialToPondPrepare(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.MATERIAL_2_POND_PREPARE,\r\n        foreignKey: {\r\n            name: 'materialId',\r\n            field: 'materialId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function materialToStorages(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.MATERIAL_2_STORAGE,\r\n        foreignKey: {\r\n            name: 'storageId',\r\n            field: 'storageId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function materialToUsingFood(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.MATERIAL_2_USING_FOOD,\r\n        foreignKey: {\r\n            name: 'materialId',\r\n            field: 'materialId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function materialToUsingVeterinary(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.MATERIAL_2_USING_VETERINARY,\r\n        foreignKey: {\r\n            name: 'materialId',\r\n            field: 'materialId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function ponddiaryToSeasonAndPond(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.POND_DIARY_2_SEASON_AND_POND,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function pondenvironmenToSeasonAndPond(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.POND_ENVIRONMENT_2_SEASON_AND_POND,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function pondprepareToCosts(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.POND_PREPARE_2_COST,\r\n        foreignKey: {\r\n            name: 'pondPrepareId',\r\n            field: 'pondPrepareId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function pondprepareToSeasonAndPond(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.POND_PREPARE_2_SEASON_AND_POND,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function pondprepareToPondPrepareDetails(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.POND_PREPARE_2_POND_PREPARE_DETAILS,\r\n        foreignKey: {\r\n            name: 'pondPrepareId',\r\n            field: 'pondPrepareId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function pondprepareToIncurred(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.POND_PREPARE_2_INCURREDS,\r\n        foreignKey: {\r\n            name: 'pondPrepareId',\r\n            field: 'pondPrepareId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function pondpreparedetailsToStorage(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.POND_PREPARE_DETAIL_2_STORAGE,\r\n        foreignKey: {\r\n            name: 'storageId',\r\n            field: 'storageId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function pondpreparedetailsToPondPrepare(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.POND_PREPARE_DETAIL_2_POND_PREPARE,\r\n        foreignKey: {\r\n            name: 'pondPrepareId',\r\n            field: 'pondPrepareId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function pondsToPondUserRoles(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n        foreignKey: {\r\n            name: 'pondId',\r\n            field: 'pondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function pondsToSeasonAndPond(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.POND_2_SEASON_AND_POND,\r\n        foreignKey: {\r\n            name: 'pondId',\r\n            field: 'pondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function pondsToUser(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.POND_2_USER,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function pondsToUserEmployee(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsToMany(model, {\r\n        as: ActionAssociateDatabase.POND_2_EMPLOYEE_MAYNY_ROLES,\r\n        through: 'ponduserroles',\r\n        foreignKey: {\r\n            name: 'pondId',\r\n            field: 'pondId'\r\n        },\r\n        otherKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function pondToSeason(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsToMany(model, {\r\n        as: ActionAssociateDatabase.POND_2_SEASON,\r\n        through: 'seasonsandpond',\r\n        foreignKey: {\r\n            name: 'pondId',\r\n            field: 'pondId'\r\n        },\r\n        otherKey: {\r\n            name: 'seasonId',\r\n            field: 'seasonId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function pricesToSeason(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.PRICE_2_SEASON,\r\n        foreignKey: {\r\n            name: 'seasonId',\r\n            field: 'seasonId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function seasonToBoughtBreed(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_2_BOUGHT_BREED,\r\n        foreignKey: {\r\n            name: 'seasonId',\r\n            field: 'seasonId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function seasonToPrice(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_2_PRICE,\r\n        foreignKey: {\r\n            name: 'seasonId',\r\n            field: 'seasonId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function seasonToUser(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.SEASON_2_USER,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function seasonToUserRoles(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.SEASON_2_USER_ROLES,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function seasonToSNP(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_2_SEASON_AND_POND,\r\n        foreignKey: {\r\n            name: 'seasonId',\r\n            field: 'seasonId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function seasonToCoupon(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_2_COUPON,\r\n        foreignKey: {\r\n            name: 'seasonId',\r\n            field: 'seasonId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function seasonToPond(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsToMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_2_POND,\r\n        through: 'seasonsandpond',\r\n        foreignKey: {\r\n            name: 'seasonId',\r\n            field: 'seasonId'\r\n        },\r\n        otherKey: {\r\n            name: 'pondId',\r\n            field: 'pondId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function withDiedFish(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_AND_POND_2_DIED_FISH,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function withGrowths(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_AND_POND_2_GROWTH,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function withHarvest(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_AND_POND_2_HARVEST,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function withPondDiary(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_AND_POND_2_POND_DIARY,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function withPondEnv(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_AND_POND_2_POND_ENV,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function withPondPrepare(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_AND_POND_2_POND_PREPARE,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function withSeason(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n        foreignKey: {\r\n            name: 'seasonId',\r\n            field: 'seasonId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function withPond(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.SEASON_AND_POND_2_POND,\r\n        foreignKey: {\r\n            name: 'pondId',\r\n            field: 'pondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function withStocking(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_AND_POND_2_STOCKING,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function withTakeCare(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_AND_POND_2_TAKE_CARE,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function stockingToSNP(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.STOCKING_2_SEASON_AND_POND,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n\r\nexport function stockingToStockingdetails(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasOne(model, {\r\n        as: ActionAssociateDatabase.STOCKING_2_STOCKING_DETAILS,\r\n        foreignKey: {\r\n            name: 'stockingId',\r\n            field: 'stockingId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function stockingdetailsToBreeds(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.STOCKING_DETAILS_2_BREED,\r\n        foreignKey: {\r\n            name: 'breedId',\r\n            field: 'breedId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function stockingdetailsToStocking(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.STOCKING_DETAILS_2_STOCKING,\r\n        foreignKey: {\r\n            name: 'stockingId',\r\n            field: 'stockingId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function storagesToOwner(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.STORAGE_2_OWNER,\r\n        foreignKey: {\r\n            name: 'ownerId',\r\n            field: 'ownerId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function storagesToMaterial(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.STORAGE_2_MATERIAL,\r\n        foreignKey: {\r\n            name: 'storageId',\r\n            field: 'storageId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function storagesToPondPrePareDetail(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.STORAGE_2_POND_PREPARE_DETAILS,\r\n        foreignKey: {\r\n            name: 'storageId',\r\n            field: 'storageId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function storagesToUsingFood(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.STORAGE_2_USING_FOOD,\r\n        foreignKey: {\r\n            name: 'storageId',\r\n            field: 'storageId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function storagesToUsingVeterinary(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.STORAGE_2_USING_VETERINARY,\r\n        foreignKey: {\r\n            name: 'storageId',\r\n            field: 'storageId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function ownerToStorage(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.OWNER_TO_STORAGE,\r\n        foreignKey: {\r\n            name: 'ownerId',\r\n            field: 'ownerId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function ownerToUser(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.OWNER_TO_USER,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function takecareToSNP(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.TAKE_CARE_2_SEASON_AND_POND,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function takecareToUsingfoods(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.TAKE_CARE_2_USING_FOOD,\r\n        foreignKey: {\r\n            name: 'takeCareId',\r\n            field: 'takeCareId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n\r\nexport function takecareToUsingveterinary(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.TAKE_CARE_2_USING_VETERINARY,\r\n        foreignKey: {\r\n            name: 'takeCareId',\r\n            field: 'takeCareId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function userToBoughtBreeds(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.USER_2_BOUGHT_BREED,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n\r\nexport function userToDistrict(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.USER_2_DIS,\r\n        foreignKey: {\r\n            field: 'district',\r\n            name: 'district'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userToRolesUser(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.USER_2_ROLES_USER,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userToPond(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.USER_2_POND,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userToPondRolesBelongMany(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsToMany(model, {\r\n        as: ActionAssociateDatabase.USER_2_POND_MANY_ROLES,\r\n        through: 'ponduserroles',\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        },\r\n        otherKey: {\r\n            name: 'pondId',\r\n            field: 'pondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userToCoupon(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.USER_2_COUPON,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userToProvince(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.USER_2_PRO,\r\n        foreignKey: {\r\n            name: 'province',\r\n            field: 'province'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userToSeason(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.USER_2_SEASON,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userToWard(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.USER_2_WAR,\r\n        foreignKey: {\r\n            name: 'town',\r\n            field: 'town'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userToRolesBoss(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.USER_2_ROLES_GET_EMPLOYEES,\r\n        foreignKey: {\r\n            name: 'bossId',\r\n            field: 'bossId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userToPondUserRoles(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.USER_2_POND_USER_ROLE,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userToOwnerStorage(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasOne(model, {\r\n        as: ActionAssociateDatabase.USER_2_OWNER_STORAGE,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userToOwnerBreed(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasOne(model, {\r\n        as: ActionAssociateDatabase.USER_2_OWNER_BREED,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userToIncurred(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.USER_2_INCURREDS,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function userrolesToPondUserRoles(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.USER_ROLES_2_POND_USER_ROLE,\r\n        foreignKey: {\r\n            name: 'rolesId',\r\n            field: 'rolesId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userrolesToUsers(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.USER_ROLES_2_USER,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userrolesToUsersBoss(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.USER_ROLES_2_USER_BOSS,\r\n        foreignKey: {\r\n            name: 'bossId',\r\n            field: 'bossId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userrolesToSeason(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.USER_ROLES_2_SEASON,\r\n        foreignKey: {\r\n            name: 'bossId',\r\n            field: 'bossId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function usingfoodsToStorage(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.USING_FOOD_2_STORAGE,\r\n        foreignKey: {\r\n            name: 'storageId',\r\n            field: 'storageId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function usingfoodsToTakecare(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.USING_FOOD_2_TAKE_CARE,\r\n        foreignKey: {\r\n            name: 'takeCareId',\r\n            field: 'takeCareId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function usingveterinaryToStorage(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.USING_VETERINARY_2_STORAGE,\r\n        foreignKey: {\r\n            name: 'storageId',\r\n            field: 'storageId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function usingveterinaryToTakecare(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.USING_VETERINARY_2_TAKE_CARE,\r\n        foreignKey: {\r\n            name: 'takeCareId',\r\n            field: 'takeCareId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function provinceToUser(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.PROVINCE_2_USER,\r\n        foreignKey: {\r\n            name: 'provinceid',\r\n            field: 'provinceid'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function districtToUser(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.DISTRICT_2_USER,\r\n        foreignKey: {\r\n            name: 'districtid',\r\n            field: 'districtid'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function wardToUser(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.WARD_2_USER,\r\n        foreignKey: {\r\n            name: 'wardid',\r\n            field: 'wardid'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function incurredsToPondPrepare(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.INCURREDS_TO_POND_PREPARE,\r\n        foreignKey: {\r\n            name: 'pondPrepareId',\r\n            field: 'pondPrepareId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function incurredsToUser(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.INCURREDS_TO_USER,\r\n        foreignKey: {\r\n            name: 'ownerId',\r\n            field: 'ownerId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequelize from 'sequelize';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const boughtbreeddetailsOptions: any = _.merge({\r\n    tableName: 'boughtbreeddetails'\r\n},\r\n{\r\n    attributes: {\r\n        boughtBreedDetailId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n        },\r\n        boughtBreedDetailUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n        },\r\n        couponId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n        },\r\n        breedId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n        },\r\n        quantity: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: false,\r\n        },\r\n        unit: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: false\r\n        },\r\n        unitPrice: {\r\n            allowNull: false,\r\n            type: Sequelize.FLOAT,\r\n            // field: 'unitPrice'\r\n        },\r\n        soldAddress: {\r\n            type: Sequelize.STRING,\r\n            allowNull: true,\r\n        },\r\n        testingAgency: {\r\n            type: Sequelize.STRING,\r\n            allowNull: true,\r\n        },\r\n        descriptions: {\r\n            type: Sequelize.TEXT,\r\n            allowNull: true,\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true,\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'boughtbreeddetails'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const boughtbreedOptions: any = _.merge({\r\n    tableName: 'boughtbreeds'\r\n},\r\n{\r\n    attributes: {\r\n        boughtBreedId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n        },\r\n        boughtBreedUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n        },\r\n        userId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n        },\r\n        seasonId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n        },\r\n        createdBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true,\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: true,\r\n            defaultValue: 0,\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'boughtbreeds'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const breedOptions: any = _.merge({\r\n    tableName: 'breeds'\r\n},\r\n{\r\n    attributes: {\r\n        breedId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n        },\r\n        breedUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n        },\r\n        ownerId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n        },\r\n        breedName: {\r\n            type: Sequelize.STRING(80),\r\n        },\r\n        totalQuantity: {\r\n            type: Sequelize.BIGINT(20),\r\n        },\r\n        unit: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: false\r\n        },\r\n        loopOfBreed: {\r\n            type: Sequelize.INTEGER(11),\r\n            allowNull: false,\r\n        },\r\n        tips: {\r\n            type: Sequelize.TEXT,\r\n            allowNull: true,\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: true,\r\n            defaultValue: 0,\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'breeds'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const costsOptions: any = _.merge({\r\n    tableName: 'costs'\r\n},\r\n{\r\n    attributes: {\r\n        costId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n            // field: 'costId'\r\n        },\r\n        costUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n            // field: 'costUUId'\r\n        },\r\n        pondPrepareId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            // field: 'pondPrepareId'\r\n        },\r\n        label: {\r\n            type: Sequelize.STRING(100),\r\n            // field: 'label'\r\n        },\r\n        value: {\r\n            type: Sequelize.FLOAT,\r\n            // field: 'value'\r\n        },\r\n        responsible: {\r\n            type: Sequelize.STRING(100),\r\n            // field: 'responsible'\r\n        },\r\n        notes: {\r\n            type: Sequelize.TEXT,\r\n            allowNull: true,\r\n            // field: 'notes'\r\n        },\r\n        createdBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true,\r\n            // field: 'createdBy'\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'createdDate'\r\n        },\r\n        updatedBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true,\r\n            // field: 'updatedBy'\r\n        },\r\n        updatedDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'updatedDate'\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: true,\r\n            defaultValue: 0,\r\n            // field: 'isDeleted'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'costs'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const couponOptions: any = _.merge({\r\n    tableName: 'coupons'\r\n},\r\n{\r\n    attributes: {\r\n        couponId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true\r\n        },\r\n        userId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false\r\n        },\r\n        seasonId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            unique: true\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            }\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: true,\r\n            defaultValue: 0,\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'coupons'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const diedfisherysOptions: any = _.merge({\r\n    tableName: 'diedfisherys'\r\n},\r\n{\r\n    attributes: {\r\n        diedFisheryId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n            // field: 'diedFisheryId'\r\n        },\r\n        diedFisheryUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n            // field: 'diedFisheryUUId'\r\n        },\r\n        seasonAndPondId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            // field: 'seasonAndPondId'\r\n        },\r\n        card: {\r\n            type: Sequelize.INTEGER(1),\r\n            // field: 'card'\r\n        },\r\n        quantity: {\r\n            type: Sequelize.FLOAT,\r\n            // field: 'quantity'\r\n        },\r\n        solutions: {\r\n            type: Sequelize.TEXT,\r\n            allowNull: true,\r\n            // field: 'solutions'\r\n        },\r\n        employee: {\r\n            type: Sequelize.STRING(50),\r\n            allowNull: true,\r\n            // field: 'employee'\r\n        },\r\n        createdBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true,\r\n            // field: 'createdBy'\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'createdDate'\r\n        },\r\n        updatedBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true,\r\n            // field: 'updatedBy'\r\n        },\r\n        updatedDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'updatedDate'\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: true,\r\n            defaultValue: 0,\r\n            // field: 'isDeleted'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'diedfisherys'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport * as _ from 'lodash';\r\n\r\nexport const districtOptions: any = _.merge({\r\n    tableName: 'district'\r\n},\r\n{\r\n    attributes: {\r\n        districtid: {\r\n            type: Sequelize.STRING(5),\r\n            primaryKey: true,\r\n            // field: 'districtid'\r\n        },\r\n        name: {\r\n            type: Sequelize.STRING(100),\r\n            // field: 'name'\r\n        },\r\n        type: {\r\n            type: Sequelize.STRING(30),\r\n            // field: 'type'\r\n        },\r\n        location: {\r\n            type: Sequelize.STRING(30),\r\n            // field: 'location'\r\n        },\r\n        provinceid: {\r\n            type: Sequelize.STRING(5),\r\n            allowNull: false,\r\n            // field: 'provinceid'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'district',\r\n        createdAt: false,\r\n        updatedAt: false,\r\n        deletedAt: false,\r\n        defaultScope: {},\r\n        scopes: {}\r\n    }\r\n});\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const growthOptions: any = _.merge({\r\n    tableName: 'growths'\r\n},\r\n{\r\n    attributes: {\r\n        growthId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n            // field: 'growthId'\r\n        },\r\n        growthUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n            // field: 'growthUUId'\r\n        },\r\n        seasonAndPondId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            // field: 'seasonAndPondId'\r\n        },\r\n        averageDensity: {\r\n            type: Sequelize.FLOAT,\r\n            // field: 'averageDensity'\r\n        },\r\n        averageMass: {\r\n            type: Sequelize.FLOAT,\r\n            // field: 'averageMass'\r\n        },\r\n        speedOdGrowth: {\r\n            type: Sequelize.FLOAT,\r\n            // field: 'speedOdGrowth'\r\n        },\r\n        livingRatio: {\r\n            type: Sequelize.FLOAT,\r\n            // field: 'livingRatio'\r\n        },\r\n        createdBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true,\r\n            // field: 'createdBy'\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'createdDate'\r\n        },\r\n        updatedBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true,\r\n            // field: 'updatedBy'\r\n        },\r\n        updatedDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'updatedDate'\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: true,\r\n            defaultValue: 0,\r\n            // field: 'isDeleted'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'growths'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const harvestdetailOptions: any = _.merge({\r\n    tableName: 'harvestdetails'\r\n},\r\n{\r\n    attributes: {\r\n        harvestDetailUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n            // field: 'harvestIdDetailUUId'\r\n        },\r\n        harvestId: {\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n            // field: 'harvestId'\r\n        },\r\n        quantity: {\r\n            type: Sequelize.FLOAT,\r\n            // field: 'quantity'\r\n        },\r\n        unitPrice: {\r\n            type: Sequelize.FLOAT,\r\n            // field: 'unitPrice'\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: true,\r\n            defaultValue: 0,\r\n            // field: 'isDeleted'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'harvestdetails'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const harvestOptions: any = _.merge({\r\n    tableName: 'harvests'\r\n},\r\n{\r\n    attributes: {\r\n        harvestId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true\r\n        },\r\n        harvestUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false\r\n        },\r\n        seasonAndPondId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false\r\n        },\r\n        harvestName: {\r\n            type: Sequelize.STRING(50),\r\n            allowNull: true\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            }\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: true,\r\n            defaultValue: 0,\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'harvests'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const materialOptions: any = _.merge({\r\n    tableName: 'materials'\r\n},\r\n{\r\n    attributes: {\r\n        materialId : {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n            // field: 'materialId'\r\n        },\r\n        materialUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n            // field: 'materialUUId'\r\n        },\r\n        couponId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            // field: 'couponId'\r\n        },\r\n        storageId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            // field: 'storageId'\r\n        },\r\n        provider: {\r\n            type: Sequelize.STRING(100),\r\n            // field: 'provider'\r\n        },\r\n        providerAddress: {\r\n            type: Sequelize.STRING,\r\n            // field: 'providerAddress'\r\n        },\r\n        quantity: {\r\n            type: Sequelize.DOUBLE,\r\n            // field: 'quantity'\r\n        },\r\n        unit: {\r\n            type: Sequelize.INTEGER(1),\r\n            // field: 'unit'\r\n        },\r\n        unitPrice: {\r\n            type: Sequelize.FLOAT,\r\n            // field: 'unitPrice'\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: true,\r\n            defaultValue: 0,\r\n            // field: 'isDeleted'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'materials'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const ownerBreedOptions: any = _.merge({\r\n    tableName: 'ownerbreed'\r\n},\r\n{\r\n    attributes: {\r\n        ownerId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n        },\r\n        userId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'ownerbreed'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const ponddiaryOptions: any = _.merge({\r\n    tableName: 'ponddiary'\r\n},\r\n{\r\n    attributes: {\r\n        pondDiaryId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true\r\n        },\r\n        pondDiaryUUId: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: false,\r\n            unique: true\r\n        },\r\n        seasonAndPondId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false\r\n        },\r\n        diaryName: {\r\n            type: Sequelize.STRING(100)\r\n        },\r\n        fisheryQuantity: {\r\n            type: Sequelize.FLOAT\r\n        },\r\n        healthOfFishery: {\r\n            type: Sequelize.STRING(36)\r\n        },\r\n        pondVolume: {\r\n            type: Sequelize.FLOAT\r\n        },\r\n        diedFishery: {\r\n            type: Sequelize.INTEGER(11)\r\n        },\r\n        notes: {\r\n            type: Sequelize.TEXT\r\n        },\r\n        createdBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n        },\r\n        updatedBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true\r\n        },\r\n        updatedDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            }\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'ponddiary'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const pondenvironmentsOptions: any = _.merge({\r\n    tableName: 'pondenvironments'\r\n},\r\n{\r\n    attributes: {\r\n        pondEnvironmentId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n            // field: 'pondEnvironmentId'\r\n        },\r\n        pondEnvironmentUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n            // field: 'pondEnvironmentUUId'\r\n        },\r\n        seasonAndPondId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            // field: 'seasonAndPondId'\r\n        },\r\n        oxyMorning: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: true,\r\n            // field: 'oxyMorning'\r\n        },\r\n        oxyAfternoon: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: true,\r\n            // field: 'oxyAfternoon'\r\n        },\r\n        phMorning: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: true,\r\n            // field: 'phMorning'\r\n        },\r\n        phAfternoon: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: true,\r\n            // field: 'phAfternoon'\r\n        },\r\n        transparent: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: true,\r\n            // field: 'transparent'\r\n        },\r\n        salinity: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: true,\r\n            // field: 'salinity'\r\n        },\r\n        h2s: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: true,\r\n            // field: 'h2s'\r\n        },\r\n        nh3: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: true,\r\n            // field: 'nh3'\r\n        },\r\n        bazo: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: true,\r\n            // field: 'bazo'\r\n        },\r\n        createdBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true,\r\n            // field: 'createdBy'\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'createdDate'\r\n        },\r\n        updatedBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true,\r\n            // field: 'updatedBy'\r\n        },\r\n        updatedDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'updatedDate'\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n            // field: 'isDeleted'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'pondenvironments'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const pondprepareOptions: any = _.merge({\r\n    tableName: 'pondprepare'\r\n},\r\n{\r\n    attributes: {\r\n        pondPrepareId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n            // field: 'pondPrepareId'\r\n        },\r\n        pondPrepareUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n            // field: 'pondPrepareUUId'\r\n        },\r\n        seasonAndPondId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            // field: 'seasonAndPondId'\r\n        },\r\n        pondprepareName: {\r\n            type: Sequelize.STRING(50),\r\n            // field: 'pondprepareName'\r\n        },\r\n        // notes: {\r\n        //     type: Sequelize.TEXT,\r\n        //     allowNull: true,\r\n        //     // field: 'notes'\r\n        // },\r\n        createdBy: {\r\n            type: Sequelize.STRING(36),\r\n            // field: 'createdBy'\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'createdDate'\r\n        },\r\n        updatedBy: {\r\n            type: Sequelize.STRING(36),\r\n            // field: 'updatedBy'\r\n        },\r\n        updatedDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'updatedDate'\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n            // field: 'isDeleted'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'pondprepare'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const pondpreparedetailOptions: any = _.merge({\r\n    tableName: 'pondpreparedetails'\r\n},\r\n{\r\n    attributes: {\r\n        pondPrepareDetailId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n        },\r\n        pondPrepareDetailUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n        },\r\n        storageId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n        },\r\n        pondPrepareId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n        },\r\n        quantity: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: false,\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'pondpreparedetails',\r\n        createdBy: false,\r\n        updatedBy: false\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const pondOptions: any = _.merge({\r\n    tableName: 'ponds'\r\n},\r\n{\r\n    attributes: {\r\n        pondId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true\r\n        },\r\n        pondUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false\r\n        },\r\n        userId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false\r\n        },\r\n        pondName: {\r\n            type: Sequelize.STRING(50)\r\n        },\r\n        pondArea: {\r\n            type: Sequelize.FLOAT\r\n        },\r\n        pondDepth: {\r\n            type: Sequelize.FLOAT\r\n        },\r\n        createCost: {\r\n            type: Sequelize.FLOAT\r\n        },\r\n        pondCreatedDate: {\r\n            type: Sequelize.DATE\r\n        },\r\n        status: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: false,\r\n            defaultValue: 0\r\n        },\r\n        isFed: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: true,\r\n            defaultValue: 0\r\n        },\r\n        isDiary: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: true,\r\n            defaultValue: 0\r\n        },\r\n        images: {\r\n            type: Sequelize.TEXT({ length: '1000' }),\r\n            allowNull: true\r\n        },\r\n        pondLatitude: {\r\n            type: Sequelize.DOUBLE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return null;\r\n            }\r\n        },\r\n        pondLongitude: {\r\n            type: Sequelize.DOUBLE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return null;\r\n            }\r\n        },\r\n        createdBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            }\r\n        },\r\n        updatedBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true\r\n        },\r\n        updatedDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            }\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'ponds'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const ponduserrolesOptions: any = _.merge({\r\n    tableName: 'ponduserroles'\r\n},\r\n    {\r\n        attributes: {\r\n            pondUserRolesId: {\r\n                type: Sequelize.BIGINT(20),\r\n                autoIncrement: true,\r\n                primaryKey: true,\r\n                allowNull: false,\r\n            },\r\n            userId: {\r\n                type: Sequelize.BIGINT(20),\r\n                unique: true,\r\n                field: 'userId'\r\n            },\r\n            pondId: {\r\n                type: Sequelize.BIGINT(20),\r\n                unique: true,\r\n                field: 'pondId'\r\n            },\r\n            createdDate: {\r\n                type: Sequelize.DATE,\r\n                allowNull: true,\r\n                defaultValue: () => {\r\n                    return DateUtil.getUTCDateTime();\r\n                },\r\n                // field: 'createdDate'\r\n            },\r\n            isDeleted: {\r\n                type: Sequelize.INTEGER(1),\r\n                defaultValue: 0,\r\n                allowNull: true\r\n                // field: 'isDeleted'\r\n            }\r\n        },\r\n        options: {\r\n            tableName: 'ponduserroles',\r\n            defaultScope: {},\r\n            scopes: {}\r\n        }\r\n    }, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const pricesOptions: any = _.merge({\r\n    tableName: 'prices'\r\n},\r\n{\r\n    attributes: {\r\n        priceId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n            // field: 'priceId'\r\n        },\r\n        priceUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n            // field: 'priceUUId'\r\n        },\r\n        seasonId: {\r\n            type: Sequelize.BIGINT(20),\r\n            unique: true,\r\n            allowNull: false,\r\n            // field: 'seasonId'\r\n        },\r\n        totalCost: {\r\n            type: Sequelize.DOUBLE,\r\n            // field: 'totalCost'\r\n        },\r\n        totalProfit: {\r\n            type: Sequelize.DOUBLE,\r\n            // field: 'totalProfit'\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'createdDate'\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n            // field: 'isDeleted'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'prices'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const provinceOptions: any = _.merge({\r\n    tableName: 'province'\r\n},\r\n{\r\n    attributes: {\r\n        provinceid: {\r\n            type: Sequelize.STRING(5),\r\n            primaryKey: true,\r\n            // field: 'provinceid'\r\n        },\r\n        name: {\r\n            type: Sequelize.STRING(100),\r\n            // field: 'name'\r\n        },\r\n        type: {\r\n            type: Sequelize.STRING(30),\r\n            // field: 'type'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'province',\r\n        createdAt: false,\r\n        updatedAt: false,\r\n        deletedAt: false,\r\n        defaultScope: {},\r\n        scopes: {}\r\n    }\r\n});\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const seasonOptions: any = _.merge({\r\n    tableName: 'seasons'\r\n},\r\n{\r\n    attributes: {\r\n        seasonId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n            // field: 'seasonId'\r\n        },\r\n        seasonUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n            // field: 'seasonUUId'\r\n        },\r\n        userId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            // field: 'userId'\r\n        },\r\n        seasonName: {\r\n            type: Sequelize.STRING(100),\r\n            // field: 'seasonName'\r\n        },\r\n        status: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            // field: 'seasonName'\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'createdDate'\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n            // field: 'isDeleted'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'seasons'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const incurredsOptions: any = _.merge({\r\n    tableName: 'incurreds'\r\n},\r\n{\r\n    attributes: {\r\n        incurredId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n        },\r\n        incurredUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n        },\r\n        pondPrepareId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n        },\r\n        ownerId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n        },\r\n        incurredName: {\r\n            type: Sequelize.STRING(100),\r\n            allowNull: false,\r\n        },\r\n        value: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: false,\r\n        },\r\n        notes: {\r\n            type: Sequelize.STRING(255),\r\n            allowNull: true,\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'incurreds',\r\n        createdBy: false,\r\n        updatedBy: false\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport * as _ from 'lodash';\r\n\r\nexport const seasonAndPondOptions: any = _.merge({\r\n    tableName: 'seasonsandpond'\r\n},\r\n{\r\n    attributes: {\r\n        seasonAndPondId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true\r\n        },\r\n        seasonId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            unique: true\r\n        },\r\n        pondId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            unique: true\r\n        }\r\n    },\r\n    options: {\r\n        createdAt: false,\r\n        updatedAt: false,\r\n        deletedAt: false,\r\n        hooks: {},\r\n        tableName: 'seasonsandpond'\r\n    }\r\n});\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const stockingOptions: any = _.merge({\r\n    tableName: 'stocking'\r\n},\r\n{\r\n    attributes: {\r\n        stockingId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n            // field: 'stockingId'\r\n        },\r\n        stockingUUId: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: false,\r\n            unique: true,\r\n            // field: 'stockingUUId'\r\n        },\r\n        seasonAndPondId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            // field: 'seasonAndPondId'\r\n        },\r\n        notes: {\r\n            type: Sequelize.TEXT,\r\n            allowNull: true,\r\n            // field: 'notes'\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'createdDate'\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n            // field: 'isDeleted'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'stocking'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const stockingdetailOptions: any = _.merge({\r\n    tableName: 'stockingdetails'\r\n},\r\n{\r\n    attributes: {\r\n        stockingDetailUUId: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: false,\r\n            unique: true,\r\n        },\r\n        breedId: {\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n        },\r\n        stockingId: {\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n        },\r\n        stockingQuantity: {\r\n            type: Sequelize.BIGINT(20),\r\n        },\r\n        phFirst: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: true,\r\n        },\r\n        salinityFirst: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: true,\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'stockingdetails'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const storagesOptions: any = _.merge({\r\n    tableName: 'storages'\r\n},\r\n{\r\n    attributes: {\r\n        storageId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true\r\n        },\r\n        storageUUId: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: false,\r\n            unique: true\r\n        },\r\n        ownerId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false\r\n        },\r\n        productName: {\r\n            type: Sequelize.STRING(100)\r\n        },\r\n        quantityStorages: {\r\n            type: Sequelize.DOUBLE\r\n        },\r\n        unit: {\r\n            type: Sequelize.INTEGER(1)\r\n        },\r\n        type: {\r\n            type: Sequelize.INTEGER(1)\r\n        },\r\n        descriptions: {\r\n            type: Sequelize.TEXT\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            }\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'storages'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const storageOwnerOptions: any = _.merge({\r\n    tableName: 'storageowner'\r\n},\r\n{\r\n    attributes: {\r\n        storageOwnerId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n        },\r\n        userId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'storageowner'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const takecareOptions: any = _.merge({\r\n    tableName: 'takecare'\r\n},\r\n{\r\n    attributes: {\r\n        takeCareId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true\r\n        },\r\n        takeCareUUId: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: false,\r\n            unique: true\r\n        },\r\n        seasonAndPondId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false\r\n        },\r\n        type: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: false\r\n        },\r\n        takeCareName: {\r\n            type: Sequelize.STRING(100),\r\n            allowNull: true\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            }\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'takecare'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const userOptions: any = _.merge({\r\n    tableName: 'users'\r\n},\r\n{\r\n    attributes: {\r\n        userId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n            // field: 'userId'\r\n        },\r\n        userUUId: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: false,\r\n            unique: true,\r\n            // field: 'userUUId'\r\n        },\r\n        firstname: {\r\n            type: Sequelize.STRING(50),\r\n            // field: 'firstname'\r\n        },\r\n        lastname: {\r\n            type: Sequelize.STRING(50),\r\n            // field: 'lastname'\r\n        },\r\n        birthday: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            // field: 'birthday'\r\n        },\r\n        addressContact: {\r\n            type: Sequelize.STRING,\r\n            allowNull: true,\r\n            // field: 'addressContact'\r\n        },\r\n        username: {\r\n            type: Sequelize.STRING(50),\r\n            allowNull: false,\r\n            unique: true,\r\n            // field: 'username'\r\n        },\r\n        password: {\r\n            type: Sequelize.STRING(100),\r\n            // field: 'password'\r\n        },\r\n        town: {\r\n            type: Sequelize.STRING(50),\r\n            allowNull: true,\r\n            // field: 'town'\r\n        },\r\n        district: {\r\n            type: Sequelize.STRING(50),\r\n            allowNull: true,\r\n            // field: 'district'\r\n        },\r\n        province: {\r\n            type: Sequelize.STRING(5),\r\n            allowNull: true,\r\n            // field: 'province'\r\n        },\r\n        status: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: false,\r\n            defaultValue: 0,\r\n            // field: 'status'\r\n        },\r\n        phone: {\r\n            type: Sequelize.STRING(15),\r\n            allowNull: true,\r\n            // field: 'phone'\r\n        },\r\n        email: {\r\n            type: Sequelize.STRING(100),\r\n            allowNull: true,\r\n            // field: 'email'\r\n        },\r\n        images: {\r\n            type: Sequelize.TEXT({ length: '1000' }),\r\n            allowNull: true,\r\n            // field: 'images'\r\n        },\r\n        createdBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true,\r\n            // field: 'createdBy'\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'createdDate'\r\n        },\r\n        updatedBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true,\r\n            // field: 'updatedBy'\r\n        },\r\n        updatedDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'updatedDate'\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n            // field: 'isDeleted'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'users'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const userrolesOptions: any = _.merge({\r\n    tableName: 'userroles'\r\n},\r\n{\r\n    attributes: {\r\n        rolesId: {\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n            autoIncrement: true,\r\n        },\r\n        bossId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            unique: true,\r\n            index: true\r\n        },\r\n        userId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            unique: true,\r\n        },\r\n        roles: {\r\n            type: Sequelize.INTEGER(11),\r\n            unique: true,\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n        },\r\n        updatedBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true,\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'userroles'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const usingfoodOptions: any = _.merge({\r\n    tableName: 'usingfoods'\r\n},\r\n{\r\n    attributes: {\r\n        usingFoodId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true\r\n        },\r\n        usingFoodUUId: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: false,\r\n            unique: true\r\n        },\r\n        takeCareId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false\r\n        },\r\n        storageId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false\r\n        },\r\n        massOfFishery: {\r\n            type: Sequelize.FLOAT\r\n        },\r\n        feedingRate: {\r\n            type: Sequelize.FLOAT\r\n        },\r\n        totalFood: {\r\n            type: Sequelize.FLOAT\r\n        },\r\n        createdBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            }\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'usingfoods'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const usingveterinaryOptions: any = _.merge({\r\n    tableName: 'usingveterinary'\r\n},\r\n{\r\n    attributes: {\r\n        usingVeterinaryId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true\r\n        },\r\n        usingVeterinaryUUId: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: false,\r\n            unique: true\r\n        },\r\n        takeCareId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false\r\n        },\r\n        storageId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false\r\n        },\r\n        causesNSymptoms: {\r\n            type: Sequelize.STRING\r\n        },\r\n        averageSize: {\r\n            type: Sequelize.FLOAT\r\n        },\r\n        totalBiomass: {\r\n            type: Sequelize.FLOAT\r\n        },\r\n        quantity: {\r\n            type: Sequelize.FLOAT\r\n        },\r\n        result: {\r\n            type: Sequelize.STRING(100),\r\n        },\r\n        latestHarvestDate: {\r\n            type: Sequelize.INTEGER(11),\r\n            allowNull: true\r\n        },\r\n        mentor: {\r\n            type: Sequelize.STRING(50),\r\n            allowNull: true\r\n        },\r\n        createdBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            }\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'usingveterinary'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport * as _ from 'lodash';\r\n\r\nexport const wardOptions: any = _.merge({\r\n    tableName: 'ward'\r\n},\r\n{\r\n    attributes: {\r\n        wardid: {\r\n            type: Sequelize.STRING(5),\r\n            primaryKey: true,\r\n            // field: 'wardid'\r\n        },\r\n        name: {\r\n            type: Sequelize.STRING(100),\r\n            // field: 'name'\r\n        },\r\n        type: {\r\n            type: Sequelize.STRING(30),\r\n            // field: 'type'\r\n        },\r\n        location: {\r\n            type: Sequelize.STRING(30),\r\n            // field: 'location'\r\n        },\r\n        districtid: {\r\n            type: Sequelize.STRING(5),\r\n            allowNull: false,\r\n            // field: 'districtid'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'ward',\r\n        createdAt: false,\r\n        updatedAt: false,\r\n        deletedAt: false,\r\n        defaultScope: {},\r\n        scopes: {}\r\n    }\r\n});\r\n","import { NextFunction, Request, Response, Router } from 'express';\r\nimport * as httpStatusCode from 'http-status-codes';\r\nimport { colorCli } from '../config';\r\n\r\nimport { BaseRoute } from './BaseRoute';\r\nimport { logger } from '../services';\r\nimport { PingRoute } from './ping';\r\nimport { UserRoute } from './users';\r\nimport { UploadRoute } from './upload';\r\nimport { GetFileRoute } from './getFile';\r\nimport { ProvinceRoute } from './province';\r\nimport { DistrictRoute } from './district';\r\nimport { WardRoute } from './ward';\r\nimport { PondRoute } from './ponds';\r\nimport { SeasonRoute } from './seasons';\r\nimport { PondPrepareRoute } from './pondPrepare';\r\nimport { PondPrepareDetailRoute } from './pondPrepareDetail';\r\nimport { StorageRoute } from './storages';\r\nimport { BreedRoute } from './breed';\r\nimport { StockingRoute } from './stocking';\r\nimport { DiedFisheryRoute } from './diedFishery';\r\nimport { GrowthsRoute } from './growths';\r\nimport { HarvestRoute } from './harvest';\r\nimport { UserRoleRoute } from './userRoles';\r\nimport { PondUserRolesRoute } from './pondUserRoles';\r\nimport { MaterialRoute } from './material';\r\nimport { SeasonAndPondRoute } from './seasonAndPond';\r\nimport { UsingFoodRoute } from './usingFood';\r\nimport { PondDiaryRoute } from './pondDiary';\r\nimport { TakeCareRoute } from './takeCare';\r\nimport { UsingVeterinaryRoute } from './usingVeterinary';\r\nimport { CostsRoute } from './costs';\r\n/**\r\n * / route\r\n *\r\n * @class User\r\n */\r\nexport class ApiRoutes extends BaseRoute {\r\n    public static path = '/api/v1';\r\n    private static instance: ApiRoutes;\r\n\r\n    /**\r\n     * @class ApiRoutes\r\n     * @constructor\r\n     */\r\n    private constructor () {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    /**\r\n     * @class ApiRoute\r\n     * @method getRouter\r\n     * @returns {Router}\r\n     */\r\n    static get router (): Router {\r\n        if (!this.instance) {\r\n            this.instance = new ApiRoutes();\r\n        }\r\n        return this.instance.router;\r\n    }\r\n\r\n    /**\r\n     * @class ApiRoute\r\n     * @method init\r\n     */\r\n    private init () {\r\n        // console.log('\\x1b[36m%s\\x1b[0m', 'I am cyan');\r\n        console.log(`\\n${ colorCli.YELLOW }###################################################\\n${ colorCli.YELLOW }##         WELCOME TO VIETNAM FISHERY API        ##\\n${ colorCli.YELLOW }##             Creating api routes...            ##\\n${ colorCli.YELLOW }###################################################\\n`);\r\n\r\n        // add index page route\r\n        this.router.get('/', this.get);\r\n        this.router.use(BreedRoute.path, BreedRoute.router);\r\n        this.router.use(CostsRoute.path, CostsRoute.router);\r\n        this.router.use(DiedFisheryRoute.path, DiedFisheryRoute.router);\r\n        this.router.use(DistrictRoute.path, DistrictRoute.router);\r\n        this.router.use(GetFileRoute.path, GetFileRoute.router);\r\n        this.router.use(GrowthsRoute.path, GrowthsRoute.router);\r\n        this.router.use(HarvestRoute.path, HarvestRoute.router);\r\n        this.router.use(MaterialRoute.path, MaterialRoute.router);\r\n        // this.router.use(PingRoute.path, PingRoute.router);\r\n        this.router.use(PondDiaryRoute.path, PondDiaryRoute.router);\r\n        this.router.use(PondPrepareRoute.path, PondPrepareRoute.router);\r\n        this.router.use(PondPrepareDetailRoute.path, PondPrepareDetailRoute.router);\r\n        this.router.use(PondRoute.path, PondRoute.router);\r\n        this.router.use(PondUserRolesRoute.path, PondUserRolesRoute.router);\r\n        this.router.use(ProvinceRoute.path, ProvinceRoute.router);\r\n        this.router.use(SeasonAndPondRoute.path, SeasonAndPondRoute.router);\r\n        this.router.use(SeasonRoute.path, SeasonRoute.router);\r\n        this.router.use(StockingRoute.path, StockingRoute.router);\r\n        this.router.use(StorageRoute.path, StorageRoute.router);\r\n        this.router.use(TakeCareRoute.path, TakeCareRoute.router);\r\n        this.router.use(UploadRoute.path, UploadRoute.router);\r\n        this.router.use(UserRoleRoute.path, UserRoleRoute.router);\r\n        this.router.use(UserRoute.path, UserRoute.router);\r\n        this.router.use(UsingFoodRoute.path, UsingFoodRoute.router);\r\n        this.router.use(UsingVeterinaryRoute.path, UsingVeterinaryRoute.router);\r\n        this.router.use(WardRoute.path, WardRoute.router);\r\n\r\n        // log total endpoint\r\n        console.log(`\\n${ colorCli.CYAN }###################################################\\n${ colorCli.CYAN }##        Total endpoints of api is: ${ colorCli.YELLOW }${ BaseRoute.countEndpoints }${ colorCli.CYAN }         ##\\n${ colorCli.CYAN }###################################################\\n`);\r\n    }\r\n\r\n    /**\r\n     * @class ApiRoute\r\n     * @method index\r\n     * @param req {Request} The express Request object.\r\n     * @param res {Response} The express Response object.\r\n     * @param next {NextFunction} Execute the next method.\r\n     */\r\n    private async get (req: Request, res: Response, next: NextFunction) {\r\n        res.status(httpStatusCode.OK).render('index');\r\n    }\r\n}\r\n","module.exports = require(\"http-status-codes\");","module.exports = require(\"is-my-json-valid\");","export * from './users.route';\r\n","import { NextFunction, Request, Response } from 'express';\r\nimport { logger, UserRolesServices, ProvinceServices, DistrictServives, WardServices, PondsServices, UserServives , PondUserRolesServices} from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { User, UserRole, OwnerBreed, OwnerStorage } from '../../components';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Enscrypts } from '../../lib';\r\nimport * as jwt from 'jsonwebtoken';\r\nimport { GoogleDrive } from '../../googleAPI/drive.google';\r\nimport { defaultImage } from '../../common';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { Transaction } from 'sequelize';\r\nimport { readFileSync } from 'fs';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class UserRoute extends BaseRoute {\r\n    public static path = '/user';\r\n    private static instance: UserRoute;\r\n    private cert: Buffer = readFileSync(process.cwd() + '/authKey/jwtRS256.key');\r\n    private userRolesServices: UserRolesServices = new UserRolesServices();\r\n    private provinceServices: ProvinceServices = new ProvinceServices();\r\n    private districtServives: DistrictServives = new DistrictServives();\r\n    private wardServices: WardServices = new WardServices();\r\n    private pondsServices: PondsServices = new PondsServices();\r\n    private userServives: UserServives = new UserServives();\r\n    private pondUserRolesServices: PondUserRolesServices = new PondUserRolesServices();\r\n    /**\r\n     * @class UserRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!UserRoute.instance) {\r\n            UserRoute.instance = new UserRoute();\r\n        }\r\n        return UserRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[UserRoute] Creating user route.');\r\n\r\n        // vertify login\r\n        this.router.get('/vertify', this.vertify);\r\n        this.router.get('/vertify/boss', this.vertifyBoss);\r\n        this.router.get('/vertify/roles/storage', this.vertifyStorageRoles);\r\n        this.router.get('/vertify/roles/pond', this.vertifyPondRoles);\r\n        this.router.get('/vertify/roles/pond/:pondUUId', this.vertifyRolesOfPond);\r\n\r\n        // add route boss\r\n        this.router.post('/register', this.register);\r\n        this.router.post('/login', this.login);\r\n        this.router.get('/get', Authentication.isLogin, this.getUserInfo);\r\n        this.router.get('/getWithUpdate', Authentication.isLogin, this.getUserInfoWithUpdate);\r\n        this.router.put('/update', Authentication.isLogin, this.updateUserProfile);\r\n        this.router.put('/update/password', Authentication.isLogin, this.updateUserPassword);\r\n\r\n        // employees\r\n        this.router.post('/register/employee', Authentication.isLogin, this.regiterEmployee);\r\n        this.router.get('/gets/employees', Authentication.isLogin, this.getEmployee);\r\n        this.router.get('/gets/employees/withoutIsDelete', Authentication.isLogin, this.getEmployeesWithoutIsDelete);\r\n        this.router.get('/get/employee', Authentication.isLogin, this.getEmplyeeById);\r\n        this.router.get('/gets/employees/pond', Authentication.isLogin, this.getEmployeesPondRole);\r\n        this.router.get('/gets/all/employees/pond', Authentication.isLogin, this.getAllPondAndEmployees);\r\n        this.router.put('/update/employee', Authentication.isLogin, this.updateEmployee);\r\n        this.router.post('/insert/employee/role', Authentication.isLogin, this.insertOnlyRole);\r\n\r\n        // log endPoint\r\n        this.logEndpoints(this.router, UserRoute.path);\r\n    }\r\n\r\n    private register = async (request: Request, response: Response, next: NextFunction) => {\r\n        const user: User = new User();\r\n        const { firstname, lastname, username, password } = request.body;\r\n        user.setUserUUId = uuidv4();\r\n        user.setFirstname = firstname;\r\n        user.setLastname = lastname;\r\n        user.setUsername = username;\r\n        const hash = user.hashPassword(password);\r\n        user.setPassword = hash;\r\n        user.setImages = defaultImage.userImage;\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            const userCreated: any = await user.userServices.models.create(user, {\r\n                transaction: t\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Tên người dùng đã được sử dụng, vui lòng thử tên khác.'\r\n                });\r\n                t.rollback();\r\n            });\r\n            if(userCreated.userId) {\r\n                const storageOwner: OwnerStorage = new OwnerStorage();\r\n                storageOwner.setOwnerStorages(null, userCreated.userId);\r\n                const breedOwner: OwnerBreed = new OwnerBreed();\r\n                breedOwner.setOwnerBreed(null, userCreated.userId);\r\n                const sOwner: any = await storageOwner.storegeOwnwerServices.models.create(storageOwner, { transaction: t })\r\n                    .catch(e => {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Có lỗi xảy ra, vui lòng thực hiện lại.'\r\n                        });\r\n                        t.rollback();\r\n                    });\r\n                const bOwner: any = await breedOwner.breedOwnwerServices.models.create(breedOwner, { transaction: t })\r\n                    .catch(e => {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Có lỗi xảy ra, vui lòng thực hiện lại.'\r\n                        });\r\n                        t.rollback();\r\n                    });\r\n                if(sOwner && bOwner) {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Tạo tài khoản thành công, vui lòng đợi trong khi chúng tôi chuyển bạn về trang trước...'\r\n                    });\r\n                    t.commit();\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Có lỗi xảy ra, vui lòng thực hiện lại.'\r\n                    });\r\n                    t.rollback();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private login = async (request: Request, response: Response, next: NextFunction) => {\r\n        const user: User = new User();\r\n        const { username, password } = request.body;\r\n        user.setUsername = username;\r\n        user.setPassword = password;\r\n        user.userServices.models.findOne({\r\n            include: [\r\n                {\r\n                    model: this.userRolesServices.models,\r\n                    as: ActionAssociateDatabase.USER_2_ROLES_USER,\r\n                    required: false,\r\n                    attributes: ['userId', 'roles', 'bossId']\r\n                },\r\n                {\r\n                    model: this.userRolesServices.models,\r\n                    as: ActionAssociateDatabase.USER_2_ROLES_GET_EMPLOYEES,\r\n                    required: false,\r\n                    attributes: ['userId', 'roles']\r\n                },\r\n                {\r\n                    model: this.pondUserRolesServices.models,\r\n                    as: ActionAssociateDatabase.USER_2_POND_USER_ROLE,\r\n                    required: false,\r\n                    attributes: ['userId', 'pondId'],\r\n                    include: [\r\n                        {\r\n                            model: this.pondsServices.models,\r\n                            as: ActionAssociateDatabase.POND_USER_ROLE_2_POND,\r\n                            attributes: ['pondUUId']\r\n                        }\r\n                    ]\r\n                }\r\n            ],\r\n            where: {\r\n                username\r\n            },\r\n            attributes: ['userId', 'userUUId', 'lastname', 'firstname', 'username', 'password', 'createdDate', 'createdBy']\r\n        }).then((u: any) => {\r\n            if(!u) {\r\n                response.json({\r\n                    success: false,\r\n                    message: 'Sai tài khoản, mật khẩu, vui lòng thử lại!'\r\n                });\r\n            } else {\r\n                Enscrypts.compare(user.getPassword, u.password).then((isMatch: boolean) => {\r\n                    if(isMatch) {\r\n                        delete u.dataValues.password;\r\n                        const content: any = u.dataValues;\r\n                        content.isLogin = true;\r\n                        const token: any = jwt.sign(content, this.cert, {\r\n                            algorithm: 'RS512'\r\n                        });\r\n                        response.json({\r\n                            success: true,\r\n                            token\r\n                        });\r\n                    } else {\r\n                        response.json({\r\n                            success: false,\r\n                            message: 'Sai tài khoản, mật khẩu, vui lòng thử lại!'\r\n                        });\r\n                    }\r\n                }).catch(err => {\r\n                    response.json({\r\n                        success: false,\r\n                        message: 'Sai tài khoản, mật khẩu, vui lòng thử lại!'\r\n                    });\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            response.json({\r\n                success: false,\r\n                message: 'Sai tài khoản, mật khẩu, vui lòng thử lại!'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * get cho chức năng xem thông tin\r\n     */\r\n    private getUserInfo = async (request: Request, response: Response) => {\r\n        const user: User = new User();\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const decodeToken: any = Authentication.detoken(token);\r\n        const { userId } = decodeToken;\r\n        user.userServices.models.findOne({\r\n            include: [\r\n                {\r\n                    model: this.provinceServices.models,\r\n                    as: ActionAssociateDatabase.USER_2_PRO\r\n                },\r\n                {\r\n                    model: this.districtServives.models,\r\n                    as: ActionAssociateDatabase.USER_2_DIS,\r\n                },\r\n                {\r\n                    model: this.wardServices.models,\r\n                    as: ActionAssociateDatabase.USER_2_WAR\r\n                }\r\n            ],\r\n            where: {\r\n                userId\r\n            }\r\n        })\r\n        .then((user$: any) => {\r\n            if(!user$) {\r\n                response.json({\r\n                    success: false,\r\n                    message: 'Có lỗi xảy ra vui lòng thử lại!'\r\n                });\r\n            } else {\r\n                delete user$.dataValues[`password`];\r\n                response.json(user$.dataValues);\r\n            }\r\n        }).catch(err => {\r\n            response.json({\r\n                success: false,\r\n                message: 'Có lỗi xảy ra vui lòng thử lại!'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * get cho chưc năng update, khong can join tinh huyen xa\r\n     */\r\n    private getUserInfoWithUpdate = async (request: Request, response: Response, next: NextFunction) => {\r\n        const user: User = new User();\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const decodeToken: any = Authentication.detoken(token);\r\n        user.setUsername = decodeToken.username;\r\n        user.login().then((user$: any) => {\r\n            if(!user$) {\r\n                response.json({\r\n                    success: false,\r\n                    message: 'Có lỗi xảy ra vui lòng thử lại!'\r\n                });\r\n            } else {\r\n                delete user$[`password`];\r\n                response.json(user$);\r\n            }\r\n        }).catch(err => {\r\n            response.json({\r\n                success: false,\r\n                message: 'Có lỗi xảy ra vui lòng thử lại!'\r\n            });\r\n        });\r\n    }\r\n\r\n    private updateUserProfile = async (request: any, response: Response, next: NextFunction) => {\r\n        const user: User = new User();\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const decodetoken: any = Authentication.detoken(token);\r\n        const { firstname, lastname, birthday, email, phone, town, district, province, images } = request.body;\r\n        user.setUser(decodetoken.userId,undefined,firstname,lastname,undefined,null,birthday,email,phone,undefined,town,district,province,null,images,undefined,undefined,undefined,undefined,undefined);\r\n        if(request.files) {\r\n            GoogleDrive.upload(request,response,next).then((data: any) => {\r\n                if(data.fileId) {\r\n                    user.setImages = data.fileId;\r\n                    user.updateMyProfile().then(res => {\r\n                        if(Array.isArray(res)) {\r\n                            response.status(200).json({\r\n                                success: true,\r\n                                fileId: data.fileId,\r\n                                message: 'Hồ sơ đã được cập nhật.'\r\n                            });\r\n                        } else {\r\n                            response.status(200).json({\r\n                                success: false,\r\n                                message: 'Đã có lỗi xảy ra, xin vui lòng thử lại!'\r\n                    });\r\n                        }\r\n                    }).catch(e => {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Đã có lỗi xảy ra, xin vui lòng thử lại!',\r\n                            error: e\r\n                        });\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã có lỗi xảy ra, xin vui lòng thử lại!'\r\n                    });\r\n                }\r\n            });\r\n        } else {\r\n            user.updateMyProfile().then(res => {\r\n                if(Array.isArray(res)) {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Hồ sơ đã được cập nhật.'\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã có lỗi xảy ra, xin vui lòng thử lại!'\r\n                    });\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, xin vui lòng thử lại!',\r\n                    error: e\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    private updateUserPassword = async (request: Request, response: Response, next: NextFunction) => {\r\n        const user: User = new User();\r\n        const { oldPassword, newPassword } = request.body;\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const decodeToken: any = Authentication.detoken(token);\r\n        user.setUsername = decodeToken.username;\r\n        user.login().then((data: any) => {\r\n            Enscrypts.compare(oldPassword, data.password).then((isMatch: boolean) => {\r\n                if(!isMatch) {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Sai mật khẩu cũ!'\r\n                    });\r\n                } else {\r\n                    user.setUserId = decodeToken.userId;\r\n                    user.setPassword = newPassword;\r\n                    user.changePassword().then((data$: any) => {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: 'Thực hiện thành công, vui lòng đợi hệ thống chuyển sang trang trước.'\r\n                        });\r\n                    }).catch(e => {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Có lỗi xảy ra vui lòng thử lại!',\r\n                            error: e\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    private regiterEmployee = async (request: Request, response: Response, next: NextFunction) => {\r\n        const user: User = new User();\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { username, password, firstname, lastname, roles } = request.body;\r\n        user.setUserUUId = uuidv4();\r\n        user.setFirstname = firstname;\r\n        user.setLastname = lastname;\r\n        user.setUsername = username;\r\n        const hash = user.hashPassword(password);\r\n        user.setPassword = hash;\r\n        user.setImages = defaultImage.userImage;\r\n        user.setCreatedBy = deToken.userUUId;\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            const userCreated: any = await user.userServices.models.create(user, {\r\n                transaction: t\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Tên người dùng đã được sử dụng, vui lòng thử tên khác.'\r\n                });\r\n            });\r\n            if(userCreated) {\r\n                const userRoles: UserRole = new UserRole();\r\n                userRoles.setUserRoles(null, deToken.userId, userCreated.userId, roles);\r\n                const role: any = await userRoles.userRolesServices.models.create(userRoles, {\r\n                    transaction: t\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Có lỗi xảy ra, vui lòng thực hiện lại.'\r\n                    });\r\n                    t.rollback();\r\n                });\r\n                if(role) {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Tạo tài khoản thành công, vui lòng đợi trong khi chúng tôi chuyển bạn về trang trước...'\r\n                    });\r\n                    t.commit();\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Có lỗi xảy ra, vui lòng thực hiện lại.'\r\n                    });\r\n                    t.rollback();\r\n                }\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Có lỗi xảy ra, vui lòng thực hiện lại.'\r\n                });\r\n                t.rollback();\r\n            }\r\n        });\r\n    }\r\n\r\n    private getEmployee = async (request: Request, response: Response, next: NextFunction) => {\r\n        const user: User = new User();\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const decodetoken: any = Authentication.detoken(token);\r\n        user.userServices.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.userRolesServices.models,\r\n                    as: ActionAssociateDatabase.USER_2_ROLES_USER,\r\n                    where: {\r\n                        bossId: decodetoken.userId,\r\n                        [this.userRolesServices.Op.and]: {\r\n                            userId: {\r\n                                [this.userRolesServices.Op.ne]: decodetoken.userId\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            ]\r\n        }).then(async (employees: any[]) => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                employees\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi không mong muốn, vui lòng thử lại.'\r\n            });\r\n            throw e;\r\n        });\r\n    }\r\n\r\n    private getEmplyeeById = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { rolesid }: any = request.headers;\r\n        const user: User = new User();\r\n        this.userRolesServices.models.findOne({\r\n            include: [\r\n                {\r\n                    model: user.userServices.models,\r\n                    as: ActionAssociateDatabase.USER_ROLES_2_USER\r\n                }\r\n            ],\r\n            where: {\r\n                rolesId: (rolesid * 1)\r\n            }\r\n        }).then(roles => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                roles\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thực hiện lại...'\r\n            });\r\n        });\r\n    }\r\n\r\n    private insertOnlyRole = async (request: Request, response: Response, next: NextFunction) => {\r\n        const userRoles: UserRole = new UserRole();\r\n        const { userId, roles } = request.body;\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        userRoles.setBossId = deToken.userId;\r\n        userRoles.setUserId = userId;\r\n        userRoles.setRoles = roles;\r\n        userRoles.userRolesServices.models.upsert(userRoles.getFields(userRoles))\r\n        .then((res: any) => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: 'Phân quyền thành công.'\r\n            });\r\n        }).catch(e => {\r\n            e;\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thực hiện lại...'\r\n            });\r\n        });\r\n    }\r\n\r\n    private updateEmployee = async (request: Request, response: Response, next: NextFunction) => {\r\n        const userRoles: UserRole = new UserRole();\r\n        const { rolesId, roles, isDeleted } = request.body;\r\n        userRoles.setRolesId = rolesId;\r\n        userRoles.setRoles = roles;\r\n        userRoles.setIsDeleted = isDeleted;\r\n        userRoles.update().then((res: any) => {\r\n            if(res.length > 0) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: 'Cập nhật thành công.'\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thực hiện lại...'\r\n            });\r\n        });\r\n    }\r\n\r\n    private getEmployeesPondRole = async (request: Request, response: Response, next: NextFunction) => {\r\n        const user: User = new User();\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        user.userServices.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.pondsServices.models,\r\n                    through: {\r\n                        where: {\r\n                            isDeleted: 0\r\n                        }\r\n                    },\r\n                    as: ActionAssociateDatabase.USER_2_POND_MANY_ROLES,\r\n                    where: {\r\n                        userId: deToken.userId\r\n                    }\r\n                }\r\n            ]\r\n        }).then((res: any) => {\r\n            if(res.length > 0) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    employees: res\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Bạn không có nhân viên có quyền quản lý ao.'\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private getAllPondAndEmployees = async (request: Request, response: Response, next: NextFunction) => {\r\n        const user: User = new User();\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        user.userServices.models.findOne({\r\n            include: [\r\n                {\r\n                    model: this.userRolesServices.models,\r\n                    as: ActionAssociateDatabase.USER_ROLES_2_USER_BOSS,\r\n                    where: {\r\n                        roles: 1\r\n                    },\r\n                    attributes: ['userId'],\r\n                    include: [\r\n                        {\r\n                            model: user.userServices.models,\r\n                            as: ActionAssociateDatabase.USER_ROLES_2_USER,\r\n                            attributes: ['userId', 'userUUId', 'username', 'lastname', 'firstname']\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    model: this.pondsServices.models,\r\n                    as: ActionAssociateDatabase.USER_2_POND\r\n                }\r\n            ],\r\n            where: {\r\n                userId: deToken.userId\r\n            },\r\n            attributes: []\r\n        }).then((res: any) => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                user: res\r\n            });\r\n        }).catch(e => {\r\n            console.log(e);\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private getEmployeesWithoutIsDelete = async (request: Request, response: Response, next: NextFunction) => {\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const user: User = new User();\r\n        user.userServices.models.findAll({\r\n            where: {\r\n                createdBy: deToken.userUUId\r\n            }\r\n        }).then(employees => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                employees\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private vertify = async (request: Request, response: Response, next: NextFunction) => {\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        jwt.verify(token, Authentication.cert, {\r\n            algorithms: ['RS512', 'RS256']\r\n        }, (err, data) => {\r\n            if(err) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Bạn cần đăng nhập để tiếp tục.'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: 'Đăng nhập thành công!'\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    private vertifyBoss = async (request: Request, response: Response, next: NextFunction) => {\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        if(!token) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: '',\r\n                isBoss: false\r\n            });\r\n        }\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        this.userServives.models.findOne({\r\n            where: {\r\n                userId,\r\n                createdBy: null\r\n            }\r\n        }).then(res => {\r\n            if(res) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    isBoss: true\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: '',\r\n                    isBoss: false\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi xác thực người dùng.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private vertifyPondRoles = async (request: Request, response: Response, next: NextFunction) => {\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        if(!token) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: ''\r\n            });\r\n        }\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        this.userServives.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.userRolesServices.models,\r\n                    as: ActionAssociateDatabase.USER_2_ROLES_USER,\r\n                    required: false\r\n                }\r\n            ],\r\n            where: {\r\n                [this.sequeliz.Op.or]: [\r\n                    {\r\n                        '$roles.roles$': 1,\r\n                        userId\r\n                    },\r\n                    {\r\n                        userId,\r\n                        createdBy: null\r\n                    }\r\n                ]\r\n            } as any\r\n        }).then((res: any) => {\r\n            if(res.length) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: ''\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: ''\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            e;\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi xác thực người dùng.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private vertifyStorageRoles = async (request: Request, response: Response, next: NextFunction) => {\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        if(!token) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: ''\r\n            });\r\n        }\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        this.userServives.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.userRolesServices.models,\r\n                    as: ActionAssociateDatabase.USER_2_ROLES_USER,\r\n                    required: false\r\n                }\r\n            ],\r\n            where: {\r\n                [this.sequeliz.Op.or]: [\r\n                    {\r\n                        '$roles.roles$': 2,\r\n                        userId\r\n                    },\r\n                    {\r\n                        userId,\r\n                        createdBy: null\r\n                    }\r\n                ]\r\n            } as any\r\n        }).then((res: any) => {\r\n            if(res.length) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: ''\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: ''\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi xác thực người dùng.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private vertifyRolesOfPond = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondUUId } = request.params;\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        if(!token) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi xác thực người dùng.'\r\n            });\r\n        }\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        this.pondUserRolesServices.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.pondsServices.models,\r\n                    as: ActionAssociateDatabase.POND_USER_ROLE_2_POND,\r\n                    where: {\r\n                        pondUUId\r\n                    }\r\n                }\r\n            ],\r\n            where: {\r\n                userId\r\n            }\r\n        }).then((res: any) => {\r\n            if(res.length) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: ''\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: ''\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi xác thực người dùng.'\r\n            });\r\n        });\r\n    }\r\n}\r\n","module.exports = require(\"winston\");","import * as del from 'del';\r\n\r\nexport const fileFilter = (req, file, cb) => {\r\n  // accept image only\r\n  if (!file.originalname.match(/\\.(jpg|jpeg|png|gif|xlsx|xls|csv|zip)$/)) {\r\n    return cb(new Error('File format not allowed!'), false);\r\n  }\r\n  cb(undefined, true);\r\n};\r\n\r\nexport const cleanFolder = (folderPath: string) => {\r\n  // delete files inside folder but not the folder itself\r\n  del.sync([`${folderPath}/**`, `!${folderPath}`]);\r\n};\r\n","module.exports = require(\"del\");","export * from './boughtBreed';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { BoughtBreedServives } from '../../services'; // import services\r\n\r\nexport class BoughtBreed extends BaseComponent {\r\n    public boughtBreedServives: BoughtBreedServives;\r\n    private boughtBreedId: number;\r\n    private boughtBreedUUId: string;\r\n    private userId: number;\r\n    private seasonId: number;\r\n    private createdBy: string;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.boughtBreedServives = new BoughtBreedServives();\r\n        this.services = this.boughtBreedServives;\r\n    }\r\n\r\n    public set setBoughtBreedId(boughtBreedId: number) {\r\n        this.boughtBreedId = boughtBreedId ? boughtBreedId : null;\r\n    }\r\n\r\n    public set setBoughtBreedUUId(boughtBreedUUId: string) {\r\n        this.boughtBreedUUId = boughtBreedUUId;\r\n    }\r\n\r\n    public set setUserId(userId: number) {\r\n        this.userId = userId;\r\n    }\r\n\r\n    public set setSeasonId(seasonId: number) {\r\n        this.seasonId = seasonId;\r\n    }\r\n\r\n    public set setCreatedBy(createdBy: string) {\r\n        this.createdBy =  createdBy;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setBoughtBreeds(\r\n        boughtBreedId: number,\r\n        boughtBreedUUId: string,\r\n        userId: number,\r\n        seasonId: number,\r\n        createdBy?: string,\r\n        createdDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setBoughtBreedId = boughtBreedId;\r\n        this.setBoughtBreedUUId = boughtBreedUUId;\r\n        this.setUserId = userId;\r\n        this.setSeasonId = seasonId;\r\n        this.setCreatedBy = createdBy;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getBoughtBreedId(): number {\r\n        return this.boughtBreedId;\r\n    }\r\n\r\n    public get getBoughtBreedUUId(): string {\r\n        return this.boughtBreedUUId;\r\n    }\r\n\r\n    public get getUserId(): number {\r\n        return this.userId;\r\n    }\r\n\r\n    public get getSeasonId(): number {\r\n        return this.seasonId;\r\n    }\r\n\r\n    public get getCreatedBy(): string {\r\n        return this.createdBy;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './boughtBreedDetail';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { BoughtBreedDetailsServives } from '../../services'; // import services\r\n\r\nexport class BoughtBreedDetail extends BaseComponent {\r\n    public boughtBreedDetailsServives: BoughtBreedDetailsServives;\r\n    private boughtBreedDetailId: number;\r\n    private boughtBreedDetailUUId: string;\r\n    private couponId: number;\r\n    private breedId: number;\r\n    private quantity: number;\r\n    private unit: number;\r\n    private unitPrice: number;\r\n    private soldAddress: string;\r\n    private testingAgency: string;\r\n    private descriptions: string;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.boughtBreedDetailsServives = new BoughtBreedDetailsServives();\r\n        this.services = this.boughtBreedDetailsServives;\r\n    }\r\n\r\n    public set setBoughtBreedDetailId(boughtBreedDetailId: number) {\r\n        this.boughtBreedDetailId = boughtBreedDetailId;\r\n    }\r\n\r\n    public set setBoughtBreedDetailUUId(boughtBreedDetailUUId: string) {\r\n        this.boughtBreedDetailUUId = boughtBreedDetailUUId;\r\n    }\r\n\r\n    public set setCouponId(couponId: number) {\r\n        this.couponId = couponId;\r\n    }\r\n\r\n    public set setBreedId(breedId: number) {\r\n        this.breedId = breedId;\r\n    }\r\n\r\n    public set setQuantity(quantity: number) {\r\n        this.quantity = quantity;\r\n    }\r\n\r\n    public set setUnit(unit: number) {\r\n        this.unit = unit;\r\n    }\r\n\r\n    public set setUnitPrice(unitPrice: number) {\r\n        this.unitPrice = unitPrice;\r\n    }\r\n\r\n    public set setSoldAddress(soldAddress: string) {\r\n        this.soldAddress = soldAddress;\r\n    }\r\n\r\n    public set setTestingAgency(testingAgency: string) {\r\n        this.testingAgency = testingAgency;\r\n    }\r\n\r\n    public set setDescriptions(descriptions: string) {\r\n        this.descriptions = descriptions;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setBoughtBreedDetails(\r\n        boughtBreedDetailId: number,\r\n        boughtBreedDetailUUId: string,\r\n        couponId: number,\r\n        breedId: number,\r\n        quantity: number,\r\n        unit: number,\r\n        unitPrice: number,\r\n        soldAddress?: string,\r\n        testingAgency?: string,\r\n        descriptions?: string,\r\n        isDeleted?: number,\r\n    ) {\r\n        this.setBoughtBreedDetailId = boughtBreedDetailId;\r\n        this.setBoughtBreedDetailUUId = boughtBreedDetailUUId;\r\n        this.setCouponId = couponId;\r\n        this.setBreedId = breedId;\r\n        this.setQuantity = quantity;\r\n        this.setUnit = unit;\r\n        this.setUnitPrice = unitPrice;\r\n        this.setSoldAddress = soldAddress;\r\n        this.setTestingAgency = testingAgency;\r\n        this.setDescriptions = descriptions;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getBoughtBreedDetailId(): number {\r\n        return this.boughtBreedDetailId;\r\n    }\r\n\r\n    public get getBoughtBreedDetailUUId(): string {\r\n        return this.boughtBreedDetailUUId;\r\n    }\r\n\r\n    public get getCouponId(): number {\r\n        return this.couponId;\r\n    }\r\n\r\n    public get getBreedId(): number {\r\n        return this.breedId;\r\n    }\r\n\r\n    public get getQuantity(): number {\r\n        return this.quantity;\r\n    }\r\n\r\n    public get getUnit(): number {\r\n        return this.unit;\r\n    }\r\n\r\n    public get getUnitPrice(): number {\r\n        return this.unitPrice;\r\n    }\r\n\r\n    public get getSoldAddress(): string {\r\n        return this.soldAddress;\r\n    }\r\n\r\n    public get getTestingAgency(): string {\r\n        return this.testingAgency;\r\n    }\r\n\r\n    public get getDescriptions(): string {\r\n        return this.descriptions;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './breed';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { BreedServives } from '../../services'; // import services\r\n\r\nexport class Breed extends BaseComponent {\r\n    public breedServives: BreedServives;\r\n    private breedId: number;\r\n    private breedUUId: string;\r\n    private ownerId: number;\r\n    private breedName: string;\r\n    private totalQuantity: number;\r\n    private loopOfBreed: number;\r\n    private unit: number;\r\n    private tips: string;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.breedServives = new BreedServives();\r\n        this.services = this.breedServives;\r\n    }\r\n\r\n    public set setBreedId(breedId: number) {\r\n        this.breedId = breedId;\r\n    }\r\n\r\n    public set setBreedUUId(breedUUId: string) {\r\n        this.breedUUId = breedUUId;\r\n    }\r\n\r\n    public set setOwnerId(userId: number) {\r\n        this.ownerId = userId;\r\n    }\r\n\r\n    public set setBreedName(breedName: string) {\r\n        this.breedName = breedName;\r\n    }\r\n\r\n    public set setTotalQuantity(totalQuantity: number) {\r\n        this.totalQuantity = totalQuantity;\r\n    }\r\n\r\n    public set setUnit(unit: number) {\r\n        this.unit = unit;\r\n    }\r\n\r\n    public set setLoopOfBreed(loopOfBreed: number) {\r\n        this.loopOfBreed = loopOfBreed;\r\n    }\r\n\r\n    public set setTips(tips: string) {\r\n        this.tips = tips;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setBreed(\r\n        breedId: number,\r\n        breedUUId: string,\r\n        ownerId: number,\r\n        breedName: string,\r\n        totalQuantity: number,\r\n        unit: number,\r\n        loopOfBreed: number,\r\n        tips?: string,\r\n        createdDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setBreedId = breedId;\r\n        this.setBreedUUId = breedUUId;\r\n        this.setOwnerId = ownerId;\r\n        this.setBreedName = breedName;\r\n        this.setTotalQuantity = totalQuantity;\r\n        this.setUnit = unit;\r\n        this.setLoopOfBreed = loopOfBreed;\r\n        this.setTips = tips;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getBreedId(): number {\r\n        return this.breedId;\r\n    }\r\n\r\n    public get getBreedUUId(): string {\r\n        return this.breedUUId;\r\n    }\r\n\r\n    public get getOwnerId(): number {\r\n        return this.ownerId;\r\n    }\r\n\r\n    public get getBreedName(): string {\r\n        return this.breedName;\r\n    }\r\n\r\n    public get getTotalQuantity(): number {\r\n        return this.totalQuantity;\r\n    }\r\n\r\n    public get getUnit(): number {\r\n        return this.unit;\r\n    }\r\n\r\n    public get getLoopOfBreed(): number {\r\n        return this.loopOfBreed;\r\n    }\r\n\r\n    public get getTips(): string {\r\n        return this.tips;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './breedOwner';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { BreedOwnwerServices } from '../../services'; // import services\r\n\r\nexport class OwnerBreed extends BaseComponent {\r\n    public breedOwnwerServices: BreedOwnwerServices;\r\n    private ownerId: number;\r\n    private userId: number;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.breedOwnwerServices = new BreedOwnwerServices();\r\n        this.services = this.breedOwnwerServices;\r\n    }\r\n\r\n    public set setOwnerId(ownerId: number) {\r\n        this.ownerId = ownerId;\r\n    }\r\n\r\n    public set setUserId(userId: number) {\r\n        this.userId = userId;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setOwnerBreed(\r\n        ownerId: number,\r\n        userId: number,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setOwnerId = ownerId;\r\n        this.setUserId = userId;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getOwnerId(): number {\r\n        return this.ownerId;\r\n    }\r\n\r\n    public get getUserId(): number {\r\n        return this.userId;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './cost';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { CostsServives } from '../../services'; // import services\r\n\r\nexport class Cost extends BaseComponent {\r\n    public costsServives: CostsServives;\r\n    private costId: number;\r\n    private costUUId: string;\r\n    private pondPrepareId: number;\r\n    private label: string;\r\n    private value: number;\r\n    private responsible: string;\r\n    private notes: string;\r\n    private createdBy: string;\r\n    private createdDate: Date;\r\n    private updatedBy: string;\r\n    private updatedDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.costsServives = new CostsServives();\r\n        this.services = this.costsServives;\r\n    }\r\n\r\n    public set setCostId(costId: number) {\r\n        this.costId = costId;\r\n    }\r\n\r\n    public set setCostUUId(costUUId: string) {\r\n        this.costUUId = costUUId;\r\n    }\r\n\r\n    public set setPondPrepareId(pondPrepareId: number) {\r\n        this.pondPrepareId = pondPrepareId;\r\n    }\r\n\r\n    public set setLabel(label: string) {\r\n        this.label = label;\r\n    }\r\n\r\n    public set setValue(value: number) {\r\n        this.value = value;\r\n    }\r\n\r\n    public set setResponsible(responsible: string) {\r\n        this.responsible = responsible;\r\n    }\r\n\r\n    public set setNotes(notes: string) {\r\n        this.notes = notes;\r\n    }\r\n\r\n    public set setCreatedBy(createdBy: string) {\r\n        this.createdBy = createdBy;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setUpdatedBy(updatedBy: string) {\r\n        this.updatedBy = updatedBy;\r\n    }\r\n\r\n    public set setUpdatedDate(updatedDate: Date) {\r\n        this.updatedDate = updatedDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setCost(\r\n            costId: number,\r\n            costUUId: string,\r\n            pondPrepareId: number,\r\n            label: string,\r\n            value: number,\r\n            responsible: string,\r\n            notes: string,\r\n            createdBy?: string,\r\n            createdDate?: Date,\r\n            updatedBy?: string,\r\n            updatedDate?: Date,\r\n            isDeleted?: number\r\n        ) {\r\n            this.setCostId = costId;\r\n            this.setCostUUId = costUUId;\r\n            this.setPondPrepareId = pondPrepareId;\r\n            this.setLabel = label;\r\n            this.setValue = value;\r\n            this.setResponsible = responsible;\r\n            this.setNotes = notes;\r\n            this.setCreatedBy = createdBy;\r\n            this.setCreatedDate = createdDate;\r\n            this.setUpdatedBy = updatedBy;\r\n            this.setUpdatedDate = updatedDate;\r\n            this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getCostId(): number {\r\n        return this.costId;\r\n    }\r\n\r\n    public get getCostUUId(): string {\r\n        return this.costUUId;\r\n    }\r\n\r\n    public get getPondPrepareId(): number {\r\n        return this.pondPrepareId;\r\n    }\r\n\r\n    public get getLabel(): string {\r\n        return this.label;\r\n    }\r\n\r\n    public get getValue(): number {\r\n        return this.value;\r\n    }\r\n\r\n    public get getResponsible(): string {\r\n        return this.responsible;\r\n    }\r\n\r\n    public get getNotes(): string {\r\n        return this.notes;\r\n    }\r\n\r\n    public get getCreatedBy(): string {\r\n        return this.createdBy;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getUpdatedBy(): string {\r\n        return this.updatedBy;\r\n    }\r\n\r\n    public get getUpdatedDate(): Date {\r\n        return this.updatedDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './coupon';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { CouponServives } from '../../services'; // import services\r\n\r\nexport class Coupon extends BaseComponent {\r\n    public couponServives: CouponServives;\r\n    private couponId: number;\r\n    private userId: number;\r\n    private seasonId: number;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.couponServives = new CouponServives();\r\n        this.services = this.couponServives;\r\n    }\r\n\r\n    public set setCouponId(couponId: number) {\r\n        this.couponId = couponId;\r\n    }\r\n\r\n    public set setUserId(userId: number) {\r\n        this.userId = userId;\r\n    }\r\n\r\n    public set setSeasonId(seasonId: number) {\r\n        this.seasonId = seasonId;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setCoupon(\r\n        couponId: number,\r\n        userId: number,\r\n        seasonId: number,\r\n        createdDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setCouponId = couponId;\r\n        this.setUserId = userId;\r\n        this.setSeasonId= seasonId;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getCouponId(): number {\r\n        return this.couponId;\r\n    }\r\n\r\n    public get getUserId (): number {\r\n        return this.userId;\r\n    }\r\n\r\n    public get getSeasonId(): number {\r\n        return this.seasonId;\r\n    }\r\n\r\n    public get getCreatedDate (): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted (): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './diedFishery';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { DiedFisherysServives } from '../../services'; // import services\r\n\r\nexport class DiedFishery extends BaseComponent {\r\n    public diedFisherysServives: DiedFisherysServives;\r\n    private diedFisheryId: number;\r\n    private diedFisheryUUId: string;\r\n    private seasonAndPondId: number;\r\n    private card: number;\r\n    private quantity: number;\r\n    private solutions: string;\r\n    private employee: string;\r\n    private createdBy: string;\r\n    private createdDate: Date;\r\n    private updatedBy: string;\r\n    private updatedDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.diedFisherysServives = new DiedFisherysServives();\r\n        this.services = this.diedFisherysServives;\r\n    }\r\n\r\n    public set setDiedFisheryId(diedFisheryId: number) {\r\n        this.diedFisheryId = diedFisheryId;\r\n    }\r\n\r\n    public set setDiedFisheryUUId(diedFisheryUUId: string) {\r\n        this.diedFisheryUUId = diedFisheryUUId;\r\n    }\r\n\r\n    public set setSeasonAndPondId(seasonAndPondId: number) {\r\n        this.seasonAndPondId = seasonAndPondId;\r\n    }\r\n\r\n    public set setCard(card: number) {\r\n        this.card = card;\r\n    }\r\n\r\n    public set setQuantity(quantity: number) {\r\n        this.quantity = quantity;\r\n    }\r\n\r\n    public set setSolutions(solutions: string) {\r\n        this.solutions = solutions;\r\n    }\r\n\r\n    public set setEmployee(employee: string) {\r\n        this.employee = employee;\r\n    }\r\n\r\n    public set setCreatedBy(createdBy: string) {\r\n        this.createdBy = createdBy;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setUpdatedBy(updatedBy: string) {\r\n        this.updatedBy = updatedBy;\r\n    }\r\n\r\n    public set setUpdatedDate(updatedDate: Date) {\r\n        this.updatedDate = updatedDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setDiedfisherys(\r\n        diedFisheryId: number,\r\n        diedFisheryUUId: string,\r\n        seasonAndPondId: number,\r\n        card: number,\r\n        quantity: number,\r\n        solutions?: string,\r\n        employee?: string,\r\n        createdBy?: string,\r\n        createdDate?: Date,\r\n        updatedBy?: string,\r\n        updatedDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setDiedFisheryId = diedFisheryId;\r\n        this.setDiedFisheryUUId = diedFisheryUUId;\r\n        this.setSeasonAndPondId = seasonAndPondId;\r\n        this.setCard = card;\r\n        this.setQuantity = quantity;\r\n        this.setSolutions = solutions;\r\n        this.setEmployee = employee;\r\n        this.setCreatedBy = createdBy;\r\n        this.setCreatedDate = createdDate;\r\n        this.setUpdatedBy = updatedBy;\r\n        this.setUpdatedDate = updatedDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getDiedFisheryId(): number {\r\n        return this.diedFisheryId;\r\n    }\r\n\r\n    public get getDiedFisheryUUId(): string {\r\n        return this.diedFisheryUUId;\r\n    }\r\n\r\n    public get getSeasonAndPondId(): number {\r\n        return this.seasonAndPondId;\r\n    }\r\n\r\n    public get getCard(): number {\r\n        return this.card;\r\n    }\r\n\r\n    public get getQuantity(): number {\r\n        return this.quantity;\r\n    }\r\n\r\n    public get getSolutions(): string {\r\n        return this.solutions;\r\n    }\r\n\r\n    public get getEmployee(): string {\r\n        return this.employee;\r\n    }\r\n\r\n    public get getCreatedBy(): string {\r\n        return this.createdBy;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getUpdatedBy(): string {\r\n        return this.updatedBy;\r\n    }\r\n\r\n    public get getUpdatedDate(): Date {\r\n        return this.updatedDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { DistrictServives } from '../../services';\r\n\r\nexport class District extends BaseComponent {\r\n    public districtServives: DistrictServives;\r\n    private districtid: string;\r\n    private name: string;\r\n    private type: string;\r\n    private location: string;\r\n    private provinceid: string;\r\n\r\n    constructor() {\r\n        super();\r\n        this.districtServives = new DistrictServives();\r\n        this.services = this.districtServives;\r\n    }\r\n\r\n    public setDistrictid(districtid: string) {\r\n        this.districtid = districtid;\r\n    }\r\n\r\n    public setName(name: string) {\r\n        this.name = name;\r\n    }\r\n\r\n    public setType(type: string) {\r\n        this.type = type;\r\n    }\r\n\r\n    public setLocation(location: string) {\r\n        this.location = location;\r\n    }\r\n\r\n    public setProvinceid(provinceid: string) {\r\n        this.provinceid = provinceid;\r\n    }\r\n\r\n    public get getDistrictId() {\r\n        return this.districtid;\r\n    }\r\n\r\n    public get getDistrictName() {\r\n        return this.name;\r\n    }\r\n\r\n    public get getDistrictType() {\r\n        return this.type;\r\n    }\r\n\r\n    public get getDistrictLocation() {\r\n        return this.location;\r\n    }\r\n\r\n    public get getProvinceIdWithDistrict() {\r\n        return this.provinceid;\r\n    }\r\n\r\n    getAllDistrict(): Promise<District[]> {\r\n        return new Promise((resolve, reject) => {\r\n            this.districtServives.getAll(null).then((res: any[])  => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n\r\n    getDistrictByProvinceId(proId): Promise<District[]> {\r\n        return new Promise((resolve, reject) => {\r\n            this.districtServives.getByProviceId(proId).then((res: any[])  => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './growth';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { GrowthsServives } from '../../services'; // import services\r\n\r\nexport class Growth extends BaseComponent {\r\n    public growthsServives: GrowthsServives;\r\n    private growthId: number;\r\n    private growthUUId: string;\r\n    private seasonAndPondId: number;\r\n    private averageDensity: number;\r\n    private averageMass: number;\r\n    private speedOdGrowth: number;\r\n    private livingRatio: number;\r\n    private createdBy: string;\r\n    private createdDate: Date;\r\n    private updatedBy: string;\r\n    private updatedDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.growthsServives = new GrowthsServives();\r\n        this.services = this.growthsServives;\r\n    }\r\n\r\n    public set setGrowthId(growthId: number) {\r\n        this.growthId = growthId;\r\n    }\r\n\r\n    public set setGrowthUUId(growthUUId: string) {\r\n        this.growthUUId = growthUUId;\r\n    }\r\n\r\n    public set setSeasonAndPondId(seasonAndPondId: number) {\r\n        this.seasonAndPondId = seasonAndPondId;\r\n    }\r\n\r\n    public set setAverageDensity(averageDensity: number) {\r\n        this.averageDensity = averageDensity;\r\n    }\r\n\r\n    public set setAverageMass(averageMass: number) {\r\n        this.averageMass = averageMass;\r\n    }\r\n\r\n    public set setSpeedOdGrowth(speedOdGrowth: number) {\r\n        this.speedOdGrowth = speedOdGrowth;\r\n    }\r\n\r\n    public set setLivingRatio(livingRatio: number) {\r\n        this.livingRatio = livingRatio;\r\n    }\r\n\r\n    public set setCreatedBy(createdBy: string) {\r\n        this.createdBy = createdBy;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setUpdatedBy(updatedBy: string) {\r\n        this.updatedBy = updatedBy;\r\n    }\r\n\r\n    public set setUpdatedDate(updatedDate: Date) {\r\n        this.updatedDate = updatedDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setGrowths(\r\n        growthId: number,\r\n        growthUUId: string,\r\n        seasonAndPondId: number,\r\n        averageDensity: number,\r\n        averageMass: number,\r\n        speedOdGrowth: number,\r\n        livingRatio: number,\r\n        createdBy?: string,\r\n        createdDate?: Date,\r\n        updatedBy?: string,\r\n        updatedDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setGrowthId = growthId;\r\n        this.setGrowthUUId = growthUUId;\r\n        this.seasonAndPondId = seasonAndPondId;\r\n        this.setAverageDensity = averageDensity;\r\n        this.setAverageMass = averageMass;\r\n        this.setSpeedOdGrowth = speedOdGrowth;\r\n        this.setLivingRatio = livingRatio;\r\n        this.setCreatedBy = createdBy;\r\n        this.setCreatedDate = createdDate;\r\n        this.setUpdatedBy = updatedBy;\r\n        this.setUpdatedDate = updatedDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getGrowthId(): number {\r\n        return this.growthId;\r\n    }\r\n\r\n    public get getGrowthUUId(): string {\r\n        return this.growthUUId;\r\n    }\r\n\r\n    public get getSeasonAndPondId(): number {\r\n        return this.seasonAndPondId;\r\n    }\r\n\r\n    public get getAverageDensity(): number {\r\n        return this.averageDensity;\r\n    }\r\n\r\n    public get getAverageMass(): number {\r\n        return this.averageMass;\r\n    }\r\n\r\n    public get getSpeedOdGrowth(): number {\r\n        return this.speedOdGrowth;\r\n    }\r\n\r\n    public get getLivingRatio(): number {\r\n        return this.livingRatio;\r\n    }\r\n\r\n    public get getCreatedBy(): string {\r\n        return this.createdBy;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getUpdatedBy(): string {\r\n        return this.updatedBy;\r\n    }\r\n\r\n    public get getUpdatedDate(): Date {\r\n        return this.updatedDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './harvestDetail';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { HarvestDetailsServives } from '../../services'; // import services\r\n\r\nexport class HarvestDetail extends BaseComponent {\r\n    public harvestDetailsServives: HarvestDetailsServives;\r\n    private harvestDetailUUId: string;\r\n    private harvestId: number;\r\n    private quantity: number;\r\n    private unitPrice: number;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.harvestDetailsServives = new HarvestDetailsServives();\r\n        this.services = this.harvestDetailsServives;\r\n    }\r\n\r\n    public set setHarvestIdDetailUUId(harvestIdDetailUUId: string) {\r\n        this.harvestDetailUUId = harvestIdDetailUUId;\r\n    }\r\n\r\n    public set setHarvestId(harvestId: number) {\r\n        this.harvestId = harvestId;\r\n    }\r\n\r\n    public set setQuantity(quantity: number) {\r\n        this.quantity = quantity;\r\n    }\r\n\r\n    public set setUnitPrice(unitPrice: number) {\r\n        this.unitPrice = unitPrice;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setHarvestdetails(\r\n        harvestIdDetailUUId: string,\r\n        harvestId: number,\r\n        quantity: number,\r\n        unitPrice: number,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setHarvestIdDetailUUId = harvestIdDetailUUId;\r\n        this.setHarvestId = harvestId;\r\n        this.setQuantity = quantity;\r\n        this.setUnitPrice = unitPrice;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getHarvestDetailUUId(): string {\r\n        return this.harvestDetailUUId;\r\n    }\r\n\r\n    public get getHarvestId(): number {\r\n        return this.harvestId;\r\n    }\r\n\r\n    public get getQuantity(): number {\r\n        return this.quantity;\r\n    }\r\n\r\n    public get getUnitPrice(): number {\r\n        return this.unitPrice;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './harvest';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { HarvestsServives } from '../../services'; // import services\r\n\r\nexport class Harvest extends BaseComponent {\r\n    public harvestsServives: HarvestsServives;\r\n    private harvestId: number;\r\n    private harvestUUId: string;\r\n    private seasonAndPondId: number;\r\n    private harvestName: string;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.harvestsServives = new HarvestsServives();\r\n        this.services = this.harvestsServives;\r\n    }\r\n\r\n    public set setHarvestId(harvestId: number) {\r\n        this.harvestId = harvestId;\r\n    }\r\n\r\n    public set setHarvestUUId(harvestUUId: string) {\r\n        this.harvestUUId = harvestUUId;\r\n    }\r\n\r\n    public set setSeasonAndPondId(seasonAndPondId: number) {\r\n        this.seasonAndPondId = seasonAndPondId;\r\n    }\r\n\r\n    public set setHarvestName(harvestName: string) {\r\n        this.harvestName = harvestName;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setHarvests(\r\n        harvestId: number,\r\n        harvestUUId: string,\r\n        seasonAndPondId: number,\r\n        harvestName: string,\r\n        createdDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setHarvestId = harvestId;\r\n        this.setHarvestUUId = harvestUUId;\r\n        this.setSeasonAndPondId = seasonAndPondId;\r\n        this.setHarvestName = harvestName;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getHarvestId(): number {\r\n        return this.harvestId;\r\n    }\r\n\r\n    public get getHarvestUUId(): string {\r\n        return this.harvestUUId;\r\n    }\r\n\r\n    public get getsetSeasonAndPondId(): number {\r\n        return this.seasonAndPondId;\r\n    }\r\n\r\n    public get getHarvestName(): string {\r\n        return this.harvestName;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './material';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { MaterialServives } from '../../services';\r\n\r\nexport class Material extends BaseComponent {\r\n    public materialServives: MaterialServives;\r\n    private materialId: number;\r\n    private materialUUId: string;\r\n    private couponId: number;\r\n    private storageId: number;\r\n    private provider: string;\r\n    private providerAddress: string;\r\n    private quantity: number;\r\n    private unit: number;\r\n    private unitPrice: number;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.materialServives = new MaterialServives();\r\n        this.services = this.materialServives;\r\n    }\r\n\r\n    public set setMaterialId(materialId: number) {\r\n        this.materialId = materialId;\r\n    }\r\n\r\n    public set setMaterialUUId(materialUUId: string) {\r\n        this.materialUUId = materialUUId;\r\n    }\r\n\r\n    public set setCouponId(couponId: number) {\r\n        this.couponId = couponId;\r\n    }\r\n\r\n    public set setStorageId(storageId: number) {\r\n        this.storageId = storageId;\r\n    }\r\n\r\n    public set setProvider(provider: string) {\r\n        this.provider = provider;\r\n    }\r\n\r\n    public set setProviderAddress(providerAddress: string) {\r\n        this.providerAddress = providerAddress;\r\n    }\r\n\r\n    public set setQuantity(quantity: number) {\r\n        this.quantity = quantity;\r\n    }\r\n\r\n    public set setUnit(unit: number) {\r\n        this.unit = unit;\r\n    }\r\n\r\n    public set setUnitPrice(unitPrice: number) {\r\n        this.unitPrice = unitPrice;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setMaterial(\r\n        materialId: number,\r\n        materialUUId: string,\r\n        couponId: number,\r\n        storageId: number,\r\n        provider: string,\r\n        providerAddress: string,\r\n        quantity: number,\r\n        unit: number,\r\n        unitPrice: number,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setMaterialId = materialId;\r\n        this.setMaterialUUId = materialUUId;\r\n        this.setCouponId = couponId;\r\n        this.setStorageId = storageId;\r\n        this.setProvider = provider;\r\n        this.setProviderAddress = providerAddress;\r\n        this.setQuantity = quantity;\r\n        this.setUnit = unit;\r\n        this.setUnitPrice = unitPrice;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getMaterialId(): number {\r\n        return this.materialId;\r\n    }\r\n\r\n    public get getMaterialUUId(): string {\r\n        return this.materialUUId;\r\n    }\r\n\r\n    public get getCouponId(): number {\r\n        return this.couponId;\r\n    }\r\n\r\n    public get getStorageId(): number {\r\n        return this.storageId;\r\n    }\r\n\r\n    public get getProvider(): string {\r\n        return this.provider;\r\n    }\r\n\r\n    public get getProviderAddress(): string {\r\n        return this.providerAddress;\r\n    }\r\n\r\n    public get getQuantity(): number {\r\n        return this.quantity;\r\n    }\r\n\r\n    public get getUnit(): number {\r\n        return this.unit;\r\n    }\r\n\r\n    public get getUnitPrice(): number {\r\n        return this.unitPrice;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './pondEnvironment';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { PondEnvironmentsServices } from '../../services'; // import services\r\n\r\nexport class PondEnvironment extends BaseComponent {\r\n    public pondEnvironmentsServices: PondEnvironmentsServices;\r\n    private pondEnvironmentId: number;\r\n    private pondEnvironmentUUId: string;\r\n    private seasonAndPondId: number;\r\n    private oxyMorning: number;\r\n    private oxyAfternoon: number;\r\n    private phMorning: number;\r\n    private phAfternoon: number;\r\n    private transparent: number;\r\n    private salinity: number;\r\n    private h2s: number;\r\n    private nh3: number;\r\n    private bazo: number;\r\n    private createdBy: string;\r\n    private createdDate: Date;\r\n    private updatedBy: string;\r\n    private updatedDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.pondEnvironmentsServices = new PondEnvironmentsServices();\r\n        this.services = this.pondEnvironmentsServices;\r\n    }\r\n\r\n    public set setPondEnvironmentId(pondEnvironmentId: number) {\r\n        this.pondEnvironmentId = pondEnvironmentId;\r\n    }\r\n\r\n    public set setPondEnvironmentUUId(pondEnvironmentUUId: string) {\r\n        this.pondEnvironmentUUId = pondEnvironmentUUId;\r\n    }\r\n\r\n    public set setSeasonAndPondId(seasonAndPondId: number) {\r\n        this.seasonAndPondId = seasonAndPondId;\r\n    }\r\n\r\n    public set setOxyMorning(oxyMorning: number) {\r\n        this.oxyMorning = oxyMorning;\r\n    }\r\n\r\n    public set setOxyAfternoon(oxyAfternoon: number) {\r\n        this.oxyAfternoon = oxyAfternoon;\r\n    }\r\n\r\n    public set setPhMorning(phMorning: number) {\r\n        this.phMorning = phMorning;\r\n    }\r\n\r\n    public set setPhAfternoon(phAfternoon: number) {\r\n        this.phAfternoon = phAfternoon;\r\n    }\r\n\r\n    public set setTransparent(transparent: number) {\r\n        this.transparent = transparent;\r\n    }\r\n\r\n    public set setSalinity(salinity: number) {\r\n        this.salinity = salinity;\r\n    }\r\n\r\n    public set setH2s(h2s: number) {\r\n        this.h2s = h2s;\r\n    }\r\n\r\n    public set setNh3(nh3: number) {\r\n        this.nh3 = nh3;\r\n    }\r\n\r\n    public set setBazo(bazo: number) {\r\n        this.bazo = bazo;\r\n    }\r\n\r\n    public set setCreatedBy(createdBy: string) {\r\n        this.createdBy = createdBy;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setUpdatedBy(updatedBy: string) {\r\n        this.updatedBy = updatedBy;\r\n    }\r\n\r\n    public set setUpdatedDate(updatedDate: Date) {\r\n        this.updatedDate = updatedDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setPondenvironments(\r\n        pondEnvironmentId: number,\r\n        pondEnvironmentUUId: string,\r\n        seasonAndPondId: number,\r\n        oxyMorning: number,\r\n        oxyAfternoon: number,\r\n        phMorning: number,\r\n        phAfternoon: number,\r\n        transparent: number,\r\n        salinity: number,\r\n        h2s: number,\r\n        nh3: number,\r\n        bazo: number,\r\n        createdBy?: string,\r\n        createdDate?: Date,\r\n        updatedBy?: string,\r\n        updatedDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setPondEnvironmentId = pondEnvironmentId;\r\n        this.setPondEnvironmentUUId = pondEnvironmentUUId;\r\n        this.setSeasonAndPondId = seasonAndPondId;\r\n        this.setOxyMorning = oxyMorning;\r\n        this.setOxyAfternoon = oxyAfternoon;\r\n        this.setPhMorning = phMorning;\r\n        this.setPhAfternoon = phAfternoon;\r\n        this.setTransparent = transparent;\r\n        this.setSalinity = salinity;\r\n        this.setH2s = h2s;\r\n        this.setNh3 = nh3;\r\n        this.setBazo = bazo;\r\n        this.setCreatedBy = createdBy;\r\n        this.setCreatedDate = createdDate;\r\n        this.setUpdatedBy = updatedBy;\r\n        this.setUpdatedDate = updatedDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getPondEnvironmentId(): number {\r\n        return this.pondEnvironmentId;\r\n    }\r\n\r\n    public get getPondEnvironmentUUId(): string {\r\n        return this.pondEnvironmentUUId;\r\n    }\r\n\r\n    public get getSeasonAndPondId(): number {\r\n        return this.seasonAndPondId;\r\n    }\r\n\r\n    public get getOxyMorning(): number {\r\n        return this.oxyMorning;\r\n    }\r\n\r\n    public get getOxyAfternoon(): number {\r\n        return this.oxyAfternoon;\r\n    }\r\n\r\n    public get getPhMorning(): number {\r\n        return this.phMorning;\r\n    }\r\n\r\n    public get getPhAfternoon(): number {\r\n        return this.phAfternoon;\r\n    }\r\n\r\n    public get getTransparent(): number {\r\n        return this.transparent;\r\n    }\r\n\r\n    public get getSalinity(): number {\r\n        return this.salinity;\r\n    }\r\n\r\n    public get getH2s(): number {\r\n        return this.h2s;\r\n    }\r\n\r\n    public get getNh3(): number {\r\n        return this.nh3;\r\n    }\r\n\r\n    public get getBazo(): number {\r\n        return this.bazo;\r\n    }\r\n\r\n    public get getCreatedBy(): string {\r\n        return this.createdBy;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getUpdatedBy(): string {\r\n        return this.updatedBy;\r\n    }\r\n\r\n    public get getUpdatedDate(): Date {\r\n        return this.updatedDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './pondUserRole';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { PondUserRolesServices } from '../../services';\r\n\r\nexport class PondUserRole extends BaseComponent {\r\n    public pondUserRolesServices: PondUserRolesServices;\r\n    private pondUserRolesId: number;\r\n    private userId: number;\r\n    private pondId: number;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.pondUserRolesServices = new PondUserRolesServices();\r\n        this.services = this.pondUserRolesServices;\r\n    }\r\n\r\n    public set setPondUserRolesId(id: number) {\r\n        this.pondUserRolesId = id;\r\n    }\r\n\r\n    public set setUserId(userId: number) {\r\n        this.userId = userId;\r\n    }\r\n\r\n    public set setPondId(pondId: number) {\r\n        this.pondId = pondId;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setPondUserRoles(pondUserRolesId?: number, userId?: number, pondId?: number, createdDate?: Date, isDeleted?: number) {\r\n        this.setPondUserRolesId = pondUserRolesId;\r\n        this.setUserId = userId;\r\n        this.setPondId = pondId;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getPondUserRolesId(): number {\r\n        return this.pondUserRolesId;\r\n    }\r\n\r\n    public get getUserId(): number {\r\n        return this.userId;\r\n    }\r\n\r\n    public get getPondId(): number {\r\n        return this.pondId;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './pondDiary';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { PondDiaryServices } from '../../services'; // import services\r\n\r\nexport class PondDiary extends BaseComponent {\r\n    public pondDiaryServices: PondDiaryServices;\r\n    private pondDiaryId: number;\r\n    private pondDiaryUUId: string;\r\n    private seasonAndPondId: number;\r\n    private diaryName: string;\r\n    private fisheryQuantity: number;\r\n    private healthOfFishery: string;\r\n    private pondVolume: number;\r\n    private diedFishery: number;\r\n    private notes: string;\r\n    private createdBy?: string;\r\n    private createdDate?: Date;\r\n    private updatedBy?: string;\r\n    private updatedDate?: Date;\r\n    private isDeleted?: number;\r\n    constructor() {\r\n        super();\r\n        this.pondDiaryServices = new PondDiaryServices();\r\n        this.services = this.pondDiaryServices;\r\n    }\r\n\r\n    public set setPondDiaryId(pondDiaryId: number) {\r\n        this.pondDiaryId = pondDiaryId;\r\n    }\r\n\r\n    public set setPondDiaryUUId(pondDiaryUUId: string) {\r\n        this.pondDiaryUUId = pondDiaryUUId;\r\n    }\r\n\r\n    public set setSeasonAndPondId(seasonAndPondId: number) {\r\n        this.seasonAndPondId = seasonAndPondId;\r\n    }\r\n\r\n    public set setDiaryName(diaryName: string) {\r\n        this.diaryName = diaryName;\r\n    }\r\n\r\n    public set setFisheryQuantity(fisheryQuantity: number) {\r\n        this.fisheryQuantity = fisheryQuantity;\r\n    }\r\n\r\n    public set setHealthOfFishery(healthOfFishery: string) {\r\n        this.healthOfFishery = healthOfFishery;\r\n    }\r\n\r\n    public set setPondVolume(pondVolume: number) {\r\n        this.pondVolume = pondVolume;\r\n    }\r\n\r\n    public set setDiedFishery(diedFishery: number) {\r\n        this.diedFishery = diedFishery;\r\n    }\r\n\r\n    public set setNotes(notes: string) {\r\n        this.notes = notes;\r\n    }\r\n\r\n    public set setCreatedBy(createdBy: string) {\r\n        this.createdBy = createdBy;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setUpdatedBy(updatedBy: string) {\r\n        this.updatedBy = updatedBy;\r\n    }\r\n\r\n    public set setUpdatedDate(updatedDate: Date) {\r\n        this.updatedDate = updatedDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setPonddiary(\r\n        pondDiaryId: number,\r\n        pondDiaryUUId: string,\r\n        seasonAndPondId: number,\r\n        diaryName: string,\r\n        fisheryQuantity: number,\r\n        healthOfFishery: string,\r\n        pondVolume: number,\r\n        diedFishery: number,\r\n        notes: string,\r\n        createdBy?: string,\r\n        createdDate?: Date,\r\n        updatedBy?: string,\r\n        updatedDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setPondDiaryId = pondDiaryId;\r\n        this.setPondDiaryUUId = pondDiaryUUId;\r\n        this.setSeasonAndPondId= seasonAndPondId;\r\n        this.setDiaryName = diaryName;\r\n        this.setFisheryQuantity = fisheryQuantity;\r\n        this.setHealthOfFishery = healthOfFishery;\r\n        this.setPondVolume = pondVolume;\r\n        this.setDiedFishery = diedFishery;\r\n        this.setNotes = notes;\r\n        this.setCreatedBy = createdBy;\r\n        this.setCreatedDate = createdDate;\r\n        this.setUpdatedBy = updatedBy;\r\n        this.setUpdatedDate = updatedDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getPondDiaryId(): number {\r\n        return this.pondDiaryId;\r\n    }\r\n\r\n    public get getPondDiaryUUId(): string {\r\n        return this.pondDiaryUUId;\r\n    }\r\n\r\n    public get getSeasonAndPondId(): number {\r\n        return this.seasonAndPondId;\r\n    }\r\n\r\n    public get getDiaryName(): string {\r\n        return this.diaryName;\r\n    }\r\n\r\n    public get getFisheryQuantity(): number {\r\n        return this.fisheryQuantity;\r\n    }\r\n\r\n    public get getHealthOfFishery(): string {\r\n        return this.healthOfFishery;\r\n    }\r\n\r\n    public get getPondVolume(): number {\r\n        return this.pondVolume;\r\n    }\r\n\r\n    public get getDiedFishery(): number {\r\n        return this.diedFishery;\r\n    }\r\n\r\n    public get getNotes(): string {\r\n        return this.notes;\r\n    }\r\n\r\n    public get getPrimary(): object {\r\n        return {\r\n            pondDiaryId: this.getPondDiaryId\r\n        };\r\n    }\r\n\r\n    public get getCreatedBy(): string {\r\n        return this.createdBy;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getUpdatedBy(): string {\r\n        return this.updatedBy;\r\n    }\r\n\r\n    public get getUpdatedDate(): Date {\r\n        return this.updatedDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n\r\n    // public get getForgeinKey(): object {\r\n    //     return {\r\n    //         pondId: this.getPondId,\r\n    //         seasonId: this.getSeasonId\r\n    //     };\r\n    // }\r\n}\r\n","export * from './pondPrepare';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { PondPrepareServices } from '../../services'; // import services\r\n\r\nexport class PondPrepare extends BaseComponent {\r\n    public pondPrepareServices: PondPrepareServices;\r\n    private pondPrepareId: number;\r\n    private pondPrepareUUId: string;\r\n    private seasonAndPondId: number;\r\n    private pondprepareName: string;\r\n    private createdBy: string;\r\n    private createdDate: Date;\r\n    private updatedBy: string;\r\n    private updatedDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.pondPrepareServices = new PondPrepareServices();\r\n        this.services = this.pondPrepareServices;\r\n    }\r\n\r\n    public set setPondPrepareId(pondPrepareId: number) {\r\n        this.pondPrepareId = pondPrepareId;\r\n    }\r\n\r\n    public set setPondPrepareUUId(pondPrepareUUId: string) {\r\n        this.pondPrepareUUId = pondPrepareUUId;\r\n    }\r\n\r\n    public set setSeasonAndPondId(seasonAndPondId: number) {\r\n        this.seasonAndPondId = seasonAndPondId;\r\n    }\r\n\r\n    public set setPondprepareName(pondprepareName: string) {\r\n        this.pondprepareName = pondprepareName;\r\n    }\r\n\r\n    public set setCreatedBy(createdBy: string) {\r\n        this.createdBy = createdBy;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setUpdatedBy(updatedBy: string) {\r\n        this.updatedBy = updatedBy;\r\n    }\r\n\r\n    public set setUpdatedDate(updatedDate: Date) {\r\n        this.updatedDate = updatedDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setPondprepare(\r\n        pondPrepareId: number,\r\n        pondPrepareUUId: string,\r\n        seasonAndPondId: number,\r\n        pondprepareName: string,\r\n        createdBy?: string,\r\n        createdDate?: Date,\r\n        updatedBy?: string,\r\n        updatedDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setPondPrepareId = pondPrepareId;\r\n        this.setPondPrepareUUId = pondPrepareUUId;\r\n        this.setSeasonAndPondId = seasonAndPondId;\r\n        this.setPondprepareName = pondprepareName;\r\n        this.setCreatedBy = createdBy;\r\n        this.setCreatedDate = createdDate;\r\n        this.setUpdatedBy = updatedBy;\r\n        this.setUpdatedDate = updatedDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getPondPrepareId(): number {\r\n        return this.pondPrepareId;\r\n    }\r\n\r\n    public get getPondPrepareUUId(): string {\r\n        return this.pondPrepareUUId;\r\n    }\r\n\r\n    public get getSeasonAndPondId(): number {\r\n        return this.seasonAndPondId;\r\n    }\r\n\r\n    public get getPondprepareName(): string {\r\n        return this.pondprepareName;\r\n    }\r\n\r\n    public get getCreatedBy(): string {\r\n        return this.createdBy;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getUpdatedBy(): string {\r\n        return this.updatedBy;\r\n    }\r\n\r\n    public get getUpdatedDate(): Date {\r\n        return this.updatedDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n\r\n}\r\n","export * from './pondPrepareDetails';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { PondPrepareDetailsServices } from '../../services'; // import services\r\n\r\nexport class PondPrepareDetail extends BaseComponent {\r\n    public pondPrepareDetailsServices: PondPrepareDetailsServices;\r\n    private pondPrepareDetailId: number;\r\n    private pondPrepareDetailUUId: string;\r\n    private storageId: number;\r\n    private pondPrepareId: number;\r\n    private quantity: number;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.pondPrepareDetailsServices = new PondPrepareDetailsServices();\r\n        this.services = this.pondPrepareDetailsServices;\r\n    }\r\n\r\n    public set setPondPrepareDetailId(pondPrepareDetailId: number) {\r\n        this.pondPrepareDetailId = pondPrepareDetailId;\r\n    }\r\n\r\n    public set setPondPrepareDetailUUId(pondPrepareDetailUUId: string) {\r\n        this.pondPrepareDetailUUId = pondPrepareDetailUUId;\r\n    }\r\n\r\n    public set setPondPrepareId(pondPrepareId: number) {\r\n        this.pondPrepareId = pondPrepareId;\r\n    }\r\n\r\n    public set setStorageId(storageId: number) {\r\n        this.storageId = storageId;\r\n    }\r\n\r\n    public set setQuantity(quantity: number) {\r\n        this.quantity = quantity;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setPondpreparedetails(\r\n        pondPrepareDetailId: number,\r\n        pondPrepareDetailUUId: string,\r\n        pondPrepareId: number,\r\n        storageId: number,\r\n        quantity: number,\r\n        createdDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setPondPrepareDetailUUId = pondPrepareDetailUUId;\r\n        this.setPondPrepareId = pondPrepareId;\r\n        this.setStorageId = storageId;\r\n        this.setPondPrepareDetailId = pondPrepareDetailId;\r\n        this.setQuantity = quantity;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getPondPrepareDetailUUId(): string {\r\n        return this.pondPrepareDetailUUId;\r\n    }\r\n\r\n    public get getPondPrepareId(): number {\r\n        return this.pondPrepareId;\r\n    }\r\n\r\n    public get getMaterialId(): number {\r\n        return this.storageId;\r\n    }\r\n\r\n    public get getPondPrepareDetailId(): number {\r\n        return this.pondPrepareDetailId;\r\n    }\r\n\r\n    public get getQuantity(): number {\r\n        return this.quantity;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './pond';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { PondsServices } from '../../services';\r\n\r\nexport class Pond extends BaseComponent {\r\n    public pondsServices: PondsServices;\r\n    private pondId: number;\r\n    private pondUUId: string;\r\n    private userId: number;\r\n    private pondName: string;\r\n    private pondArea: number;\r\n    private pondDepth: number;\r\n    private createCost: number;\r\n    private pondCreatedDate: Date;\r\n    private status: number;\r\n    private isFed: number;\r\n    private isDiary: number;\r\n    private images: string;\r\n    private pondLatitude: number;\r\n    private pondLongitude: number;\r\n    private createdBy: string;\r\n    private createdDate: Date;\r\n    private updatedBy: string;\r\n    private updatedDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.pondsServices = new PondsServices();\r\n        this.services = this.pondsServices;\r\n    }\r\n\r\n    public set setPondId(pondId: number) {\r\n        this.pondId = pondId;\r\n    }\r\n\r\n    public set setPondUUId(pondUUId: string) {\r\n        this.pondUUId = pondUUId;\r\n    }\r\n\r\n    public set setUserId(userId: number) {\r\n        this.userId = userId;\r\n    }\r\n\r\n    public set setPondName(pondName: string) {\r\n        this.pondName = pondName;\r\n    }\r\n\r\n    public set setPondArea(pondArea: number) {\r\n        this.pondArea = pondArea;\r\n    }\r\n\r\n    public set setPondDepth(pondDepth: number) {\r\n        this.pondDepth = pondDepth;\r\n    }\r\n\r\n    public set setCreateCost(createCost: number) {\r\n        this.createCost = createCost;\r\n    }\r\n\r\n    public set setPondCreatedDate(pondCreatedDate: Date) {\r\n        this.pondCreatedDate = pondCreatedDate;\r\n    }\r\n\r\n    public set setStatus(status: number) {\r\n        this.status = status;\r\n    }\r\n\r\n    public set setIsFed(isFed: number) {\r\n        this.isFed = isFed;\r\n    }\r\n\r\n    public set setIsDiary(isDiary: number) {\r\n        this.isDiary = isDiary;\r\n    }\r\n\r\n    public set setImages(images: string) {\r\n        this.images = images;\r\n    }\r\n\r\n    public set setPondLatitude(pondLatitude: number) {\r\n        this.pondLatitude = pondLatitude;\r\n    }\r\n\r\n    public set setPondLongitude(pondLongitude: number) {\r\n        this.pondLongitude = pondLongitude;\r\n    }\r\n\r\n    public set setCreatedBy(createdBy: string) {\r\n        this.createdBy = createdBy;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setUpdatedBy(updatedBy: string) {\r\n        this.updatedBy = updatedBy;\r\n    }\r\n\r\n    public set setUpdatedDate(updatedDate: Date) {\r\n        this.updatedDate = updatedDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setPond(\r\n        pondId: number,\r\n        pondUUId: string,\r\n        userId: number,\r\n        pondName: string,\r\n        pondArea: number,\r\n        pondDepth: number,\r\n        createCost: number,\r\n        pondCreatedDate: Date,\r\n        status: number,\r\n        isFed: number,\r\n        isDiary: number,\r\n        images: string,\r\n        pondLatitude?: number,\r\n        pondLongitude?: number,\r\n        createdBy?: string,\r\n        createdDate?: Date,\r\n        updatedBy?: string,\r\n        updatedDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setPondId = pondId;\r\n        this.setPondUUId = pondUUId;\r\n        this.setUserId = userId;\r\n        this.setPondName = pondName;\r\n        this.setPondArea = pondArea;\r\n        this.setPondDepth = pondDepth;\r\n        this.setCreateCost = createCost;\r\n        this.setStatus = status || status === 0 ? status * 1 : null;\r\n        this.setIsFed = isFed;\r\n        this.setIsDiary = isDiary;\r\n        this.setImages = images;\r\n        this.setPondLatitude = pondLatitude;\r\n        this.setPondLongitude = pondLongitude;\r\n        this.setPondCreatedDate = pondCreatedDate;\r\n        this.setCreatedBy = createdBy;\r\n        this.setCreatedDate = createdDate;\r\n        this.setUpdatedBy = updatedBy;\r\n        this.setUpdatedDate = updatedDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getPondId(): number {\r\n        return this.pondId;\r\n    }\r\n\r\n    public get getPondUUId(): string {\r\n        return this.pondUUId;\r\n    }\r\n\r\n    public get getUserId(): number {\r\n        return this.userId;\r\n    }\r\n\r\n    public get getPondName(): string {\r\n        return this.pondName;\r\n    }\r\n\r\n    public get getPondArea(): number {\r\n        return this.pondArea;\r\n    }\r\n\r\n    public get getPondDepth(): number {\r\n        return this.pondDepth;\r\n    }\r\n\r\n    public get getCreateCost(): number {\r\n        return this.createCost;\r\n    }\r\n\r\n    public get getStatus(): Date {\r\n        return this.pondCreatedDate;\r\n    }\r\n\r\n    public get getIsFed(): number {\r\n        return this.status;\r\n    }\r\n\r\n    public get getIsDiary(): number {\r\n        return this.isFed;\r\n    }\r\n\r\n    public get getImages(): number {\r\n        return this.isDiary;\r\n    }\r\n\r\n    public get getPondLatitude(): string {\r\n        return this.images;\r\n    }\r\n\r\n    public get getPondLongitude(): number {\r\n        return this.pondLatitude;\r\n    }\r\n\r\n    public get getPondCreatedDate(): number {\r\n        return this.pondLongitude;\r\n    }\r\n\r\n    public get getCreatedBy(): string {\r\n        return this.createdBy;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getUpdatedBy(): string {\r\n        return this.updatedBy;\r\n    }\r\n\r\n    public get getUpdatedDate(): Date {\r\n        return this.updatedDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './price';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { PricesServices } from '../../services'; // import services\r\n\r\nexport class Price extends BaseComponent {\r\n    public pricesServices: PricesServices;\r\n    private priceId: number;\r\n    private priceUUId: string;\r\n    private seasonId: number;\r\n    private totalCost: number;\r\n    private totalProfit: number;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.pricesServices = new PricesServices();\r\n        this.services = this.pricesServices;\r\n    }\r\n\r\n    public set setPriceId(priceId: number) {\r\n        this.priceId = priceId;\r\n    }\r\n\r\n    public set setPriceUUId(priceUUId: string) {\r\n        this.priceUUId = priceUUId;\r\n    }\r\n\r\n    public set setSeasonId(seasonId: number) {\r\n        this.seasonId = seasonId;\r\n    }\r\n\r\n    public set setTotalCost(totalCost: number) {\r\n        this.totalCost = totalCost;\r\n    }\r\n\r\n    public set setTotalProfit(totalProfit: number) {\r\n        this.totalProfit = totalProfit;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setPrices(\r\n        priceId: number,\r\n        priceUUId: string,\r\n        seasonId: number,\r\n        totalCost: number,\r\n        totalProfit: number,\r\n        createdDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setPriceId = priceId;\r\n        this.setPriceUUId = priceUUId;\r\n        this.setSeasonId = seasonId;\r\n        this.setTotalCost = totalCost;\r\n        this.setTotalProfit = totalProfit;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getPriceId(): number {\r\n        return this.priceId;\r\n    }\r\n\r\n    public get getPriceUUId(): string {\r\n        return this.priceUUId;\r\n    }\r\n\r\n    public get getSeasonId(): number {\r\n        return this.seasonId;\r\n    }\r\n\r\n    public get getTotalCost(): number {\r\n        return this.totalCost;\r\n    }\r\n\r\n    public get getTotalProfit(): number {\r\n        return this.totalProfit;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { ProvinceServices } from '../../services';\r\n\r\nexport class Province extends BaseComponent {\r\n    public provinceServices: ProvinceServices;\r\n    private provinceid: string;\r\n    private name: string;\r\n    private type: string;\r\n\r\n    constructor() {\r\n        super();\r\n        this.provinceServices = new ProvinceServices();\r\n    }\r\n\r\n    public set setProvinceid(provinceid: string) {\r\n        this.provinceid = provinceid;\r\n    }\r\n\r\n    public set setName(name: string) {\r\n        this.name = name;\r\n    }\r\n\r\n    public set setType(type: string) {\r\n        this.type = type;\r\n    }\r\n\r\n    public setProvince(provinceid: string, name: string, type: string) {\r\n        this.setProvinceid = provinceid;\r\n        this.setName = name;\r\n        this.setType = type;\r\n    }\r\n\r\n    public get getProvinceid(): string {\r\n        return this.provinceid;\r\n    }\r\n\r\n    public get getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    public get getType(): string {\r\n        return this.type;\r\n    }\r\n\r\n    getAllProvince(): Promise<Province[]> {\r\n        return  new Promise((resolve, reject) => {\r\n            this.provinceServices.getAll(null).then((res: any[])  => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './season';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { SeasonServices } from '../../services'; // import services\r\n\r\nexport class Season extends BaseComponent {\r\n    public seasonServices: SeasonServices;\r\n    private seasonId: number;\r\n    private seasonUUId: string;\r\n    private userId: number;\r\n    private seasonName: string;\r\n    private status: number;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n\r\n    constructor() {\r\n        super();\r\n        this.seasonServices = new SeasonServices();\r\n        this.services = this.seasonServices;\r\n    }\r\n\r\n    public set setSeasonId(seasonId: number) {\r\n        this.seasonId = seasonId;\r\n    }\r\n\r\n    public set setSeasonUUId(seasonUUId: string) {\r\n        this.seasonUUId = seasonUUId;\r\n    }\r\n\r\n    public set setUserId(userId: number) {\r\n        this.userId = userId;\r\n    }\r\n\r\n    public set setSeasonName(seasonName: string) {\r\n        this.seasonName = seasonName;\r\n    }\r\n\r\n    public set setStatus(status: number) {\r\n        this.status = status;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setSeason(\r\n        seasonId: number,\r\n        seasonUUId: string,\r\n        userId: number,\r\n        seasonName: string,\r\n        status: number,\r\n        createdDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setSeasonId = seasonId;\r\n        this.setSeasonUUId = seasonUUId;\r\n        this.setUserId = userId;\r\n        this.setSeasonName = seasonName;\r\n        this.setStatus = status;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getSeasonId(): number {\r\n        return this.seasonId;\r\n    }\r\n\r\n    public get getSeasonUUId(): string {\r\n        return this.seasonUUId;\r\n    }\r\n\r\n    public get getUserId(): number {\r\n        return this.userId;\r\n    }\r\n\r\n    public get getSeasonName(): string {\r\n        return this.seasonName;\r\n    }\r\n\r\n    public get getStatus(): number {\r\n        return this.status;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n\r\n    public get getPrimary(): any {\r\n        return {\r\n            seasonId: this.seasonId\r\n        };\r\n    }\r\n}\r\n","export * from './seasonsAndPond';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { SeasonAndPondServices } from '../../services'; // import services\r\n\r\nexport class SeasonsAndPond extends BaseComponent {\r\n    public seasonAndPondServices: SeasonAndPondServices;\r\n    private seasonAndPondId: number;\r\n    private seasonId: number;\r\n    private pondId: number;\r\n\r\n    constructor() {\r\n        super();\r\n        this.seasonAndPondServices = new SeasonAndPondServices();\r\n        this.services = this.seasonAndPondServices;\r\n    }\r\n\r\n    public set setSeasonAndPondId(seasonAndPondId: number) {\r\n        this.seasonAndPondId = seasonAndPondId;\r\n    }\r\n\r\n    public set setSeasonId(seasonId: number) {\r\n        this.seasonId = seasonId;\r\n    }\r\n\r\n    public set setPondId(pondId: number) {\r\n        this.pondId = pondId;\r\n    }\r\n\r\n    public setSeasonsAndPond(\r\n        seasonAndPondId: number,\r\n        seasonId: number,\r\n        pondId: number,\r\n    ) {\r\n        this.setSeasonAndPondId = seasonAndPondId;\r\n        this.setSeasonId= seasonId;\r\n        this.setPondId = pondId;\r\n    }\r\n\r\n    public get getSeasonAndPondId(): number {\r\n        return this.seasonAndPondId;\r\n    }\r\n\r\n    public get getSeasonId(): number {\r\n        return this.seasonId;\r\n    }\r\n\r\n    public get getPondId(): number {\r\n        return this.pondId;\r\n    }\r\n}\r\n","export * from './stocking';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { StockingServices } from '../../services'; // import services\r\n\r\nexport class Stocking extends BaseComponent {\r\n    public stockingServices: StockingServices;\r\n    private stockingId: number;\r\n    private stockingUUId: string;\r\n    private seasonAndPondId: number;\r\n    private notes: string;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.stockingServices = new StockingServices();\r\n        this.services = this.stockingServices;\r\n    }\r\n\r\n    public set setStockingId(stockingId: number) {\r\n        this.stockingId = stockingId;\r\n    }\r\n\r\n    public set setStockingUUId(stockingUUId: string) {\r\n        this.stockingUUId = stockingUUId;\r\n    }\r\n\r\n    public set setSeasonAndPondId(seasonAndPondId: number) {\r\n        this.seasonAndPondId = seasonAndPondId;\r\n    }\r\n\r\n    public set setNotes(notes: string) {\r\n        this.notes = notes;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setStocking(\r\n        stockingId: number,\r\n        stockingUUId: string,\r\n        seasonAndPondId: number,\r\n        notes: string,\r\n        createdDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setStockingId = stockingId;\r\n        this.setStockingUUId = stockingUUId;\r\n        this.setSeasonAndPondId = seasonAndPondId;\r\n        this.setNotes = notes;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getStockingId(): number {\r\n        return this.stockingId;\r\n    }\r\n\r\n    public get getStockingUUId(): string {\r\n        return this.stockingUUId;\r\n    }\r\n\r\n    public get getSeasonAndPondId(): number {\r\n        return this.seasonAndPondId;\r\n    }\r\n\r\n    public get getNotes(): string {\r\n        return this.notes;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './stockingDetail';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { StockingDetailsServices } from '../../services'; // import services\r\n\r\nexport class StockingDetail extends BaseComponent {\r\n    public stockingDetailsServices: StockingDetailsServices;\r\n    private stockingDetailUUId: string;\r\n    private breedId: number;\r\n    private stockingId: number;\r\n    private stockingQuantity: number;\r\n    private phFirst: number;\r\n    private salinityFirst: number;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.stockingDetailsServices = new StockingDetailsServices();\r\n        this.services = this.stockingDetailsServices;\r\n    }\r\n\r\n    public set setStockingDetailUUId(stockingDetailUUId: string) {\r\n        this.stockingDetailUUId = stockingDetailUUId;\r\n    }\r\n\r\n    public set setBreedId(breedId: number) {\r\n        this.breedId = breedId;\r\n    }\r\n\r\n    public set setStockingId(stockingId: number) {\r\n        this.stockingId = stockingId;\r\n    }\r\n\r\n    public set setStockingQuantity(stockingQuantity: number) {\r\n        this.stockingQuantity = stockingQuantity;\r\n    }\r\n\r\n    public set setPhFirst(phFirst: number) {\r\n        this.phFirst = phFirst;\r\n    }\r\n\r\n    public set setSalinityFirst(salinityFirst: number) {\r\n        this.salinityFirst = salinityFirst;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setStockingdetails(\r\n        stockingDetailUUId: string,\r\n        breedId: number,\r\n        stockingId: number,\r\n        stockingQuantity: number,\r\n        phFirst?: number,\r\n        salinityFirst?: number,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setStockingDetailUUId = stockingDetailUUId;\r\n        this.setBreedId = breedId;\r\n        this.setStockingId = stockingId;\r\n        this.setStockingQuantity = stockingQuantity;\r\n        this.setPhFirst = phFirst;\r\n        this.setSalinityFirst = salinityFirst;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getStockingDetailUUId(): string {\r\n        return this.stockingDetailUUId;\r\n    }\r\n\r\n    public get getBreedId(): number {\r\n        return this.breedId;\r\n    }\r\n\r\n    public get getStockingId(): number {\r\n        return this.stockingId;\r\n    }\r\n\r\n    public get getStockingQuantity(): number {\r\n        return this.stockingQuantity;\r\n    }\r\n\r\n    public get getPhFirst(): number {\r\n        return this.phFirst;\r\n    }\r\n\r\n    public get getSalinityFirst(): number {\r\n        return this.salinityFirst;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './storage';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { StoregeServices } from '../../services';\r\n\r\nexport class Storage extends BaseComponent {\r\n    public storegeServices: StoregeServices;\r\n    private storageId: number;\r\n    private storageUUId: string;\r\n    private ownerId: number;\r\n    private productName: string;\r\n    private quantityStorages: number;\r\n    private unit: number;\r\n    private type: number;\r\n    private descriptions: string;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.storegeServices = new StoregeServices();\r\n        this.services = this.storegeServices;\r\n    }\r\n\r\n    public set setStorageId(storageId: number) {\r\n        this.storageId = storageId;\r\n    }\r\n\r\n    public set setStorageUUId(storageUUId: string) {\r\n        this.storageUUId = storageUUId;\r\n    }\r\n\r\n    public set setOwnerId(userId: number) {\r\n        this.ownerId = userId;\r\n    }\r\n\r\n    public set setProductName(productName: string) {\r\n        this.productName = productName;\r\n    }\r\n\r\n    public set setQuantityStorages(quantityStorages: number) {\r\n        this.quantityStorages = quantityStorages;\r\n    }\r\n\r\n    public set setUnit(unit: number) {\r\n        this.unit = unit;\r\n    }\r\n\r\n    public set setType(type: number) {\r\n        this.type = type;\r\n    }\r\n\r\n    public set setDescriptions(descriptions: string) {\r\n        this.descriptions = descriptions;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setStorages(\r\n        storageId: number,\r\n        storageUUId: string,\r\n        ownerId: number,\r\n        productName: string,\r\n        quantityStorages: number,\r\n        unit: number,\r\n        type: number,\r\n        descriptions: string,\r\n        createdDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setStorageId = storageId;\r\n        this.setStorageUUId = storageUUId;\r\n        this.setOwnerId = ownerId;\r\n        this.setProductName = productName;\r\n        this.setQuantityStorages = quantityStorages;\r\n        this.setUnit = unit;\r\n        this.setType = type;\r\n        this.setDescriptions = descriptions;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getStorageId(): number {\r\n        return this.storageId;\r\n    }\r\n\r\n    public get getStorageUUId(): string {\r\n        return this.storageUUId;\r\n    }\r\n\r\n    public get getOwnerId(): number {\r\n        return this.ownerId;\r\n    }\r\n\r\n    public get getProductName(): string {\r\n        return this.productName;\r\n    }\r\n\r\n    public get getQuantityStorages(): number {\r\n        return this.quantityStorages;\r\n    }\r\n\r\n    public get getUnit(): number {\r\n        return this.unit;\r\n    }\r\n\r\n    public get getType(): number {\r\n        return this.type;\r\n    }\r\n\r\n    public get getDescriptions(): string {\r\n        return this.descriptions;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './storageOwner';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { StoregeOwnwerServices } from '../../services'; // import services\r\n\r\nexport class OwnerStorage extends BaseComponent {\r\n    public storegeOwnwerServices: StoregeOwnwerServices;\r\n    private storageOwnerId: number;\r\n    private userId: number;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.storegeOwnwerServices = new StoregeOwnwerServices();\r\n        this.services = this.storegeOwnwerServices;\r\n    }\r\n\r\n    public set setStorageOwnerId(storageOwnerId: number) {\r\n        this.storageOwnerId = storageOwnerId;\r\n    }\r\n\r\n    public set setUserId(userId: number) {\r\n        this.userId = userId;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setOwnerStorages(\r\n        storageOwnerId: number,\r\n        userId: number,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setStorageOwnerId = storageOwnerId;\r\n        this.setUserId = userId;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getStorageOwnerId(): number {\r\n        return this.storageOwnerId;\r\n    }\r\n\r\n    public get getUserId(): number {\r\n        return this.userId;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './takeCare';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { TakeCareServices } from '../../services'; // import services\r\n\r\nexport class TakeCare extends BaseComponent {\r\n    public takeCareServices: TakeCareServices;\r\n    private takeCareId: number;\r\n    private takeCareUUId: string;\r\n    private seasonAndPondId: number;\r\n    private type: number;\r\n    private takeCareName: string;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.takeCareServices = new TakeCareServices();\r\n        this.services = this.takeCareServices;\r\n    }\r\n\r\n    public set setTakeCareId(takeCareId: number) {\r\n        this.takeCareId = takeCareId;\r\n    }\r\n\r\n    public set setTakeCareUUId(takeCareUUId: string) {\r\n        this.takeCareUUId = takeCareUUId;\r\n    }\r\n\r\n    public set setSeasonAndPondId(seasonAndPondId: number) {\r\n        this.seasonAndPondId = seasonAndPondId;\r\n    }\r\n\r\n    public set setTakeType(type: number) {\r\n        this.type = type;\r\n    }\r\n\r\n    public set setTakeCareName(takeCareName: string) {\r\n        this.takeCareName = takeCareName;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setTakecare(\r\n        takeCareId: number,\r\n        takeCareUUId: string,\r\n        seasonAndPondId: number,\r\n        type: number,\r\n        takeCareName?: string,\r\n        createdDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setTakeCareId = takeCareId;\r\n        this.setTakeCareUUId = takeCareUUId;\r\n        this.setSeasonAndPondId= seasonAndPondId;\r\n        this.setTakeType = type;\r\n        this.setTakeCareName = takeCareName;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getTakeCareId(): number {\r\n        return this.takeCareId;\r\n    }\r\n\r\n    public get getTakeCareUUId(): string {\r\n        return this.takeCareUUId;\r\n    }\r\n\r\n    public get getSeasonAndPondId(): number {\r\n        return this.seasonAndPondId;\r\n    }\r\n\r\n    public get getTakeCareName(): string {\r\n        return this.takeCareName;\r\n    }\r\n\r\n    public get getTakeType(): number {\r\n        return this.type;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './userRole';\r\n","import { UserRolesServices } from '../../services';\r\nimport { BaseComponent } from '../baseComponents';\r\n\r\nexport class UserRole extends BaseComponent {\r\n    public userRolesServices: UserRolesServices;\r\n    private rolesId: number;\r\n    private bossId: number;\r\n    private userId: number;\r\n    private roles: number;\r\n    private createdDate: Date;\r\n    private updatedBy: string;\r\n    private isDeleted: number;\r\n\r\n    public constructor() {\r\n        super();\r\n        this.userRolesServices = new UserRolesServices();\r\n        this.services = this.userRolesServices;\r\n    }\r\n\r\n    public set setRolesId(rolesId: number) {\r\n        this.rolesId = rolesId;\r\n    }\r\n\r\n    public set setBossId(bossId: number) {\r\n        this.bossId = bossId;\r\n    }\r\n\r\n    public set setUserId(userId: number) {\r\n        this.userId = userId;\r\n    }\r\n\r\n    public set setRoles(roles: number) {\r\n        this.roles = roles;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setUpdatedBy(updatedBy: string) {\r\n        this.updatedBy = updatedBy;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setUserRoles(\r\n        rolesId: number,\r\n        bossId: number,\r\n        userId: number,\r\n        roles: number,\r\n        createdDate?: Date,\r\n        updatedBy?: string,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setRolesId = rolesId;\r\n        this.setBossId = bossId;\r\n        this.setUserId = userId;\r\n        this.setRoles = roles;\r\n        this.setCreatedDate = createdDate;\r\n        this.setUpdatedBy = updatedBy;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getRolesId(): number {\r\n        return this.rolesId;\r\n    }\r\n\r\n    public get getBossId(): number {\r\n        return this.bossId;\r\n    }\r\n\r\n    public get getUserId(): number {\r\n        return this.userId;\r\n    }\r\n\r\n    public get getRoles(): number {\r\n        return this.roles;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getUpdatedBy(): string {\r\n        return this.updatedBy;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './user';\r\n","import { Enscrypts } from '../../lib/';\r\nimport { UserServives } from '../../services';\r\nimport { BaseComponent } from '../baseComponents';\r\nimport { Promise } from '../../lib';\r\n\r\nexport class User extends BaseComponent {\r\n    public userServices: UserServives;\r\n    private userId: number;\r\n    private userUUId: string;\r\n    private firstname: string;\r\n    private lastname: string;\r\n    private birthday: Date;\r\n    private addressContact: string;\r\n    private username: string;\r\n    private password: string;\r\n    private town: string;\r\n    private district: string;\r\n    private province: string;\r\n    private status: number;\r\n    private phone: string;\r\n    private email: string;\r\n    private images: string;\r\n    private createdBy: string;\r\n    private createdDate: Date;\r\n    private updatedBy: string;\r\n    private updatedDate: Date;\r\n    private isDeleted: number;\r\n\r\n    constructor() {\r\n        super();\r\n        this.userServices = new UserServives();\r\n        this.services = this.userServices;\r\n        this.primary = {\r\n            username: this.getUsername\r\n        };\r\n        this.foreignKey = [\r\n\r\n        ];\r\n    }\r\n\r\n    public set setUserId(userId: number) {\r\n        this.userId = userId;\r\n    }\r\n\r\n    public set setUserUUId(userUUId: string) {\r\n        this.userUUId = userUUId;\r\n    }\r\n\r\n    public set setFirstname(firstname: string) {\r\n        this.firstname = firstname;\r\n    }\r\n\r\n    public set setLastname(lastname: string) {\r\n        this.lastname = lastname;\r\n    }\r\n\r\n    public set setUsername(username: string) {\r\n        this.username = username ? username.toLowerCase().trim() : username;\r\n    }\r\n\r\n    public set setPassword(password: string) {\r\n        this.password = password;\r\n    }\r\n\r\n    public set setBirthday(birthday: Date) {\r\n        this.birthday = birthday;\r\n    }\r\n\r\n    public set setEmail(email: string) {\r\n        this.email = email;\r\n    }\r\n\r\n    public set setPhone(phone: string) {\r\n        this.phone = phone;\r\n    }\r\n\r\n    public set setAddressContact(addressContact: string) {\r\n        this.addressContact = addressContact;\r\n    }\r\n\r\n    public set setTown(town: string) {\r\n        this.town = town;\r\n    }\r\n\r\n    public set setDistrict(district: string) {\r\n        this.district = district;\r\n    }\r\n\r\n    public set setProvince(province: string) {\r\n        this.province = province;\r\n    }\r\n\r\n    public set setStatus(status: number) {\r\n        this.status = status;\r\n    }\r\n\r\n    public set setImages(images: string) {\r\n        this.images = images;\r\n    }\r\n\r\n    public set setCreatedBy(createdBy: string) {\r\n        this.createdBy = createdBy;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setUpdatedBy(updatedBy: string) {\r\n        this.updatedBy = updatedBy;\r\n    }\r\n\r\n    public set setUpdatedDate(updatedDate: Date) {\r\n        this.updatedDate = updatedDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setUser(\r\n        userId: number,\r\n        userUUId: string,\r\n        firstname: string,\r\n        lastname: string,\r\n        username: string,\r\n        password: string,\r\n        birthday?: Date,\r\n        email?: string,\r\n        phone?: string,\r\n        addressContact?: string,\r\n        town?: string,\r\n        district?: string,\r\n        province?: string,\r\n        status?: number,\r\n        images?: string,\r\n        createdBy?: string,\r\n        createdDate?: Date,\r\n        updatedBy?: string,\r\n        updatedDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setUserId = userId;\r\n        this.setUserUUId = userUUId;\r\n        this.setFirstname = firstname;\r\n        this.setLastname = lastname;\r\n        this.setUsername = username;\r\n        this.setPassword = password;\r\n        this.setBirthday = birthday;\r\n        this.setEmail = email;\r\n        this.setPhone = phone;\r\n        this.setAddressContact = addressContact;\r\n        this.setTown = town;\r\n        this.setDistrict = district;\r\n        this.setProvince = province;\r\n        this.setStatus = status;\r\n        this.setImages = images;\r\n        this.setCreatedBy = createdBy;\r\n        this.setCreatedDate = createdDate;\r\n        this.setUpdatedBy = updatedBy;\r\n        this.setUpdatedDate = updatedDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getUserId() {\r\n        return this.userId;\r\n    }\r\n\r\n    public get getUserUUId() {\r\n        return this.userUUId;\r\n    }\r\n\r\n    public get getFirstname() {\r\n        return this.firstname;\r\n    }\r\n\r\n    public get getLastname() {\r\n        return this.lastname;\r\n    }\r\n\r\n    public get getUsername() {\r\n        return this.username;\r\n    }\r\n\r\n    public get getPassword() {\r\n        return this.password;\r\n    }\r\n\r\n    public get getBirthday() {\r\n        return this.birthday;\r\n    }\r\n\r\n    public get getEmail() {\r\n        return this.email;\r\n    }\r\n\r\n    public get getPhone() {\r\n        return this.phone;\r\n    }\r\n\r\n    public get getAddressContact() {\r\n        return this.addressContact;\r\n    }\r\n\r\n    public get getTown() {\r\n        return this.town;\r\n    }\r\n\r\n    public get getDistrict() {\r\n        return this.district;\r\n    }\r\n\r\n    public get getProvince() {\r\n        return this.province;\r\n    }\r\n\r\n    public get getStatus() {\r\n        return this.status;\r\n    }\r\n\r\n    public get getImages() {\r\n        return this.images;\r\n    }\r\n\r\n    public get getCreatedBy() {\r\n        return this.createdBy;\r\n    }\r\n\r\n    public get getCreatedDate() {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getUpdatedBy() {\r\n        return this.updatedBy;\r\n    }\r\n\r\n    public get getUpdatedDate() {\r\n        return this.updatedDate;\r\n    }\r\n\r\n    public get getIsDeleted() {\r\n        return this.isDeleted;\r\n    }\r\n\r\n    public register(): Promise<User> {\r\n        return new Promise((resolve, reject) => {\r\n            Enscrypts.getSalt(Math.floor((Math.random() * 12) + 1)).then(salt => {\r\n                Enscrypts.hashing(this.password, salt).then(hash => {\r\n                    this.setPassword = hash;\r\n                    this.userServices.register(this).then(res => {\r\n                        resolve(res);\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    public login(): Promise<User> {\r\n        return new Promise((resolve, reject) => {\r\n            this.userServices.getUserByUsername(this).then((user$: User) => {\r\n                resolve(user$);\r\n            });\r\n        });\r\n    }\r\n\r\n    public updateMyProfile(): Promise<User> {\r\n        return new Promise((resolve, reject) => {\r\n            this.userServices.update(this.getFields(this)).then(res => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n\r\n    public changePassword(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            Enscrypts.getSalt(Math.floor((Math.random() * 12) + 1)).then((salt: string) => {\r\n                Enscrypts.hashing(this.password, salt).then((hash: string) => {\r\n                    this.password = hash;\r\n                    this.userServices.update(this.getFields(this)).then((res: any) => {\r\n                        resolve(res);\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    public hashPassword = (pass: string): string => {\r\n        const salt = Enscrypts.getSaltSync(Math.floor((Math.random() * 12) + 1));\r\n        return Enscrypts.hashingSync(pass, salt);\r\n    }\r\n}\r\n","export * from './usingFood';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { UsingFoodsServices } from '../../services'; // import services\r\n\r\nexport class UsingFood extends BaseComponent {\r\n    public usingFoodsServices: UsingFoodsServices;\r\n    private usingFoodId: number;\r\n    private usingFoodUUId: string;\r\n    private takeCareId: number;\r\n    private storageId: number;\r\n    private massOfFishery: number;\r\n    private feedingRate: number;\r\n    private totalFood: number;\r\n    private createdBy: string;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.usingFoodsServices = new UsingFoodsServices();\r\n        this.services = this.usingFoodsServices;\r\n    }\r\n\r\n    public set setUsingFoodId(usingFoodId: number) {\r\n        this.usingFoodId = usingFoodId;\r\n    }\r\n\r\n    public set setUsingFoodUUId(usingFoodUUId: string) {\r\n        this.usingFoodUUId = usingFoodUUId;\r\n    }\r\n\r\n    public set setStorageId(storageId: number) {\r\n        this.storageId = storageId;\r\n    }\r\n\r\n    public set setTakeCareId(takeCareId: number) {\r\n        this.takeCareId = takeCareId;\r\n    }\r\n\r\n    public set setMassOfFishery(massOfFishery: number) {\r\n        this.massOfFishery = massOfFishery;\r\n    }\r\n\r\n    public set setFeedingRate(feedingRate: number) {\r\n        this.feedingRate = feedingRate;\r\n    }\r\n\r\n    public set setTotalFood(totalFood: number) {\r\n        this.totalFood = totalFood;\r\n    }\r\n\r\n    public set setCreatedBy(createdBy: string) {\r\n        this.createdBy = createdBy;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setUsingFoods(\r\n        usingFoodId: number,\r\n        usingFoodUUId: string,\r\n        storageId: number,\r\n        takeCareId: number,\r\n        massOfFishery: number,\r\n        feedingRate: number,\r\n        totalFood: number,\r\n        createdBy?: string,\r\n        createdDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setUsingFoodId = usingFoodId;\r\n        this.setUsingFoodUUId = usingFoodUUId;\r\n        this.setTakeCareId = takeCareId;\r\n        this.setStorageId = storageId;\r\n        this.setMassOfFishery = massOfFishery;\r\n        this.setFeedingRate = feedingRate;\r\n        this.setTotalFood = totalFood;\r\n        this.setCreatedBy = createdBy;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getUsingFoodId(): number {\r\n        return this.usingFoodId;\r\n    }\r\n\r\n    public get getUsingFoodUUId(): string {\r\n        return this.usingFoodUUId;\r\n    }\r\n\r\n    public get getStorageId(): number {\r\n        return this.storageId;\r\n    }\r\n\r\n    public get getTakeCareId(): number {\r\n        return this.takeCareId;\r\n    }\r\n\r\n    public get getMassOfFishery(): number {\r\n        return this.massOfFishery;\r\n    }\r\n\r\n    public get getFeedingRate(): number {\r\n        return this.feedingRate;\r\n    }\r\n\r\n    public get getTotalFood(): number {\r\n        return this.totalFood;\r\n    }\r\n\r\n    public get getCreatedBy(): string {\r\n        return this.createdBy;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './usingVeterinary';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { UsingVeterinaryServices } from '../../services';\r\n\r\nexport class UsingVeterinary extends BaseComponent {\r\n    public usingVeterinaryServices: UsingVeterinaryServices;\r\n    private usingVeterinaryId: number;\r\n    private usingVeterinaryUUId: string;\r\n    private takeCareId: number;\r\n    private storageId: number;\r\n    private causesNSymptoms: string;\r\n    private averageSize: number;\r\n    private totalBiomass: number;\r\n    private quantity: number;\r\n    private result: string;\r\n    private latestHarvestDate: number;\r\n    private mentor: string;\r\n    private createdBy: string;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.usingVeterinaryServices = new UsingVeterinaryServices();\r\n        this.services = this.usingVeterinaryServices;\r\n    }\r\n\r\n    public set setUsingVeterinaryId(usingVeterinaryId: number) {\r\n        this.usingVeterinaryId = usingVeterinaryId;\r\n    }\r\n\r\n    public set setUsingVeterinaryUUId(usingVeterinaryUUId: string) {\r\n        this.usingVeterinaryUUId = usingVeterinaryUUId;\r\n    }\r\n\r\n    public set setTakeCareId(takeCareId: number) {\r\n        this.takeCareId = takeCareId;\r\n    }\r\n\r\n    public set setStorageId(storageId: number) {\r\n        this.storageId = storageId;\r\n    }\r\n\r\n    public set setCausesNSymptoms(causesNSymptoms: string) {\r\n        this.causesNSymptoms = causesNSymptoms;\r\n    }\r\n\r\n    public set setAverageSize(averageSize: number) {\r\n        this.averageSize = averageSize;\r\n    }\r\n\r\n    public set setTotalBiomass(totalBiomass: number) {\r\n        this.totalBiomass = totalBiomass;\r\n    }\r\n\r\n    public set setQuantity(quantity: number) {\r\n        this.quantity = quantity;\r\n    }\r\n\r\n    public set setResult(result: string) {\r\n        this.result = result;\r\n    }\r\n\r\n    public set setLatestHarvestDate(latestHarvestDate: number) {\r\n        this.latestHarvestDate = latestHarvestDate;\r\n    }\r\n\r\n    public set setMentor(mentor: string) {\r\n        this.mentor = mentor;\r\n    }\r\n\r\n    public set setCreatedBy(createdBy: string) {\r\n        this.createdBy = createdBy;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setUsingveterinary(\r\n        usingVeterinaryId: number,\r\n        usingVeterinaryUUId: string,\r\n        takeCareId: number,\r\n        storageId: number,\r\n        causesNSymptoms: string,\r\n        averageSize: number,\r\n        totalBiomass: number,\r\n        quantity: number,\r\n        result: string,\r\n        latestHarvestDate: number,\r\n        mentor: string,\r\n        createdBy?: string,\r\n        createdDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setUsingVeterinaryId = usingVeterinaryId;\r\n        this.setUsingVeterinaryUUId = usingVeterinaryUUId;\r\n        this.setStorageId = storageId;\r\n        this.setTakeCareId = takeCareId;\r\n        this.setCausesNSymptoms = causesNSymptoms;\r\n        this.setAverageSize = averageSize;\r\n        this.setTotalBiomass = totalBiomass;\r\n        this.setQuantity = quantity;\r\n        this.setResult = result;\r\n        this.setLatestHarvestDate = latestHarvestDate;\r\n        this.setMentor = mentor;\r\n        this.setCreatedBy = createdBy;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getUsingVeterinaryId(): number {\r\n        return this.usingVeterinaryId;\r\n    }\r\n\r\n    public get getUsingVeterinaryUUId(): string {\r\n        return this.usingVeterinaryUUId;\r\n    }\r\n\r\n    public get getTakeCareId(): number {\r\n        return this.takeCareId;\r\n    }\r\n\r\n    public get getStorageId(): number {\r\n        return this.storageId;\r\n    }\r\n\r\n    public get getCausesNSymptoms(): string {\r\n        return this.causesNSymptoms;\r\n    }\r\n\r\n    public get getAverageSize(): number {\r\n        return this.averageSize;\r\n    }\r\n\r\n    public get getTotalBiomass(): number {\r\n        return this.totalBiomass;\r\n    }\r\n\r\n    public get getQuantity(): number {\r\n        return this.quantity;\r\n    }\r\n\r\n    public get getResult(): string {\r\n        return this.result;\r\n    }\r\n\r\n    public get getLatestHarvestDate(): number {\r\n        return this.latestHarvestDate;\r\n    }\r\n\r\n    public get getMentor(): string {\r\n        return this.mentor;\r\n    }\r\n\r\n    public get getCreatedBy(): string {\r\n        return this.createdBy;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { WardServices } from '../../services';\r\n\r\nexport class Ward extends BaseComponent {\r\n    public wardServices: WardServices;\r\n    private wardid: string;\r\n    private name: string;\r\n    private type: string;\r\n    private location: string;\r\n    private districtid: string;\r\n\r\n    constructor() {\r\n        super();\r\n        this.wardServices = new WardServices();\r\n    }\r\n\r\n    public set setWardid(wardid: string) {\r\n        this.wardid = wardid;\r\n    }\r\n\r\n    public set setName(name: string) {\r\n        this.name = name;\r\n    }\r\n\r\n    public set setType(type: string) {\r\n        this.type = type;\r\n    }\r\n\r\n    public set setLocation(location: string) {\r\n        this.location = location;\r\n    }\r\n\r\n    public set setDistrictid(districtid: string) {\r\n        this.districtid = districtid;\r\n    }\r\n\r\n    public get getWardid(): string {\r\n        return this.wardid;\r\n    }\r\n\r\n    public get getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    public get getType(): string {\r\n        return this.type;\r\n    }\r\n\r\n    public get getLocation(): string {\r\n        return this.location;\r\n    }\r\n\r\n    public get getDistrictid(): string {\r\n        return this.districtid;\r\n    }\r\n\r\n    getAllWard(): Promise<Ward[]> {\r\n        return  new Promise((resolve, reject) => {\r\n            this.wardServices.getAll().then((res: any[])  => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n\r\n    getDistrictByDistrictId(disId): Promise<Ward[]> {\r\n        return  new Promise((resolve, reject) => {\r\n            this.wardServices.getByDistrictId(disId).then((res: any[])  => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './incurreds';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { IncurredsServices } from '../../services';\r\n\r\nexport class Incurred extends BaseComponent {\r\n    public incurredsServices: IncurredsServices;\r\n    private incurredId: number;\r\n    private incurredUUId: string;\r\n    private pondPrepareId: number;\r\n    private ownerId: number;\r\n    private incurredName: string;\r\n    private value: number;\r\n    private notes: string;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.incurredsServices = new IncurredsServices();\r\n        this.services = this.incurredsServices;\r\n    }\r\n\r\n    public set setIncurredId(incurredId: number) {\r\n        this.incurredId = incurredId;\r\n    }\r\n\r\n    public set setIncurredUUId(incurredUUId: string) {\r\n        this.incurredUUId = incurredUUId;\r\n    }\r\n\r\n    public set setPondPrepareId(pondPrepareId: number) {\r\n        this.pondPrepareId = pondPrepareId;\r\n    }\r\n\r\n    public set setOwnerId(ownerId: number) {\r\n        this.ownerId = ownerId;\r\n    }\r\n\r\n    public set setIncurredName(incurredName: string) {\r\n        this.incurredName = incurredName;\r\n    }\r\n\r\n    public set setValue(value: number) {\r\n        this.value = value;\r\n    }\r\n\r\n    public set setNotes(notes: string) {\r\n        this.notes = notes;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setIncurred(\r\n        incurredId: number,\r\n        incurredUUId: string,\r\n        pondPrepareId: number,\r\n        ownerId: number,\r\n        incurredName: string,\r\n        value: number,\r\n        notes: string,\r\n        createdDate?: Date,\r\n        isDeleted?: number,\r\n    ) {\r\n        this.setIncurredId = incurredId;\r\n        this.setIncurredUUId = incurredUUId;\r\n        this.setPondPrepareId = pondPrepareId;\r\n        this.setOwnerId = ownerId;\r\n        this.setIncurredName = incurredName;\r\n        this.setValue = value;\r\n        this.setNotes = notes;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getIncurredId(): number {\r\n        return this.incurredId;\r\n    }\r\n\r\n    public get getIncurredUUId(): string {\r\n        return this.incurredUUId;\r\n    }\r\n\r\n    public get getPondPrepareId(): number {\r\n        return this.pondPrepareId;\r\n    }\r\n\r\n    public get getOwnerId(): number {\r\n        return this.ownerId;\r\n    }\r\n\r\n    public get getIncurredName(): string {\r\n        return this.incurredName;\r\n    }\r\n\r\n    public get getValue(): number {\r\n        return this.value;\r\n    }\r\n\r\n    public get getNotes(): string {\r\n        return this.notes;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { boughtbreeddetailsOptions } from '../models/objects';\r\n\r\nexport class BoughtBreedDetailsServives extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = boughtbreeddetailsOptions;\r\n    constructor() {\r\n        super(BoughtBreedDetailsServives.optionsModel);\r\n        this.models = this.conn.boughtbreeddetailsModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { boughtbreedOptions } from '../models/objects';\r\n\r\nexport class BoughtBreedServives extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = boughtbreedOptions;\r\n    constructor() {\r\n        super(BoughtBreedServives.optionsModel);\r\n        this.models = this.conn.boughtbreedsModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { breedOptions } from '../models/objects';\r\n\r\nexport class BreedServives extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = breedOptions;\r\n    constructor() {\r\n        super(BreedServives.optionsModel);\r\n        this.models = this.conn.breedsModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { ownerBreedOptions } from '../models/objects';\r\n\r\nexport class BreedOwnwerServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = ownerBreedOptions;\r\n    constructor() {\r\n        super(BreedOwnwerServices.optionsModel);\r\n        this.models = this.conn.breedOwnerModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { costsOptions } from '../models/objects';\r\n\r\nexport class CostsServives extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = costsOptions;\r\n    constructor() {\r\n        super(CostsServives.optionsModel);\r\n        this.models = this.conn.costsModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { couponOptions } from '../models/objects';\r\n\r\nexport class CouponServives extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = couponOptions;\r\n    constructor() {\r\n        super(CouponServives.optionsModel);\r\n        this.models = this.conn.couponModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { diedfisherysOptions } from '../models/objects';\r\n\r\nexport class DiedFisherysServives extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = diedfisherysOptions;\r\n    constructor() {\r\n        super(DiedFisherysServives.optionsModel);\r\n        this.models = this.conn.diedfisherysModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { districtOptions } from '../models/objects';\r\n\r\nexport class DistrictServives extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = districtOptions;\r\n    constructor() {\r\n        super(DistrictServives.optionsModel);\r\n        this.models = this.conn.districtModel;\r\n    }\r\n\r\n    getByProviceId(id): Promise<any[]> {\r\n        return new Promise((resolve, reject) => {\r\n            this.models.findAll({\r\n                where: {\r\n                    provinceid: id\r\n                }\r\n            }).then((res: any) => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { growthOptions } from '../models/objects';\r\n\r\nexport class GrowthsServives extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = growthOptions;\r\n    constructor() {\r\n        super(GrowthsServives.optionsModel);\r\n        this.models = this.conn.growthsModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { harvestdetailOptions } from '../models/objects';\r\n\r\nexport class HarvestDetailsServives extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = harvestdetailOptions;\r\n    constructor() {\r\n        super(HarvestDetailsServives.optionsModel);\r\n        this.models = this.conn.harvestdetailsModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { harvestOptions } from '../models/objects';\r\n\r\nexport class HarvestsServives extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = harvestOptions;\r\n    constructor() {\r\n        super(HarvestsServives.optionsModel);\r\n        this.models = this.conn.harvestModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { materialOptions } from '../models/objects';\r\n\r\nexport class MaterialServives extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = materialOptions;\r\n    constructor() {\r\n        super(MaterialServives.optionsModel);\r\n        this.models = this.conn.materialModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { ponddiaryOptions } from '../models/objects';\r\n\r\nexport class PondDiaryServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = ponddiaryOptions;\r\n    constructor() {\r\n        super(PondDiaryServices.optionsModel);\r\n        this.models = this.conn.ponddiaryModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { pondenvironmentsOptions } from '../models/objects';\r\n\r\nexport class PondEnvironmentsServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = pondenvironmentsOptions;\r\n    constructor() {\r\n        super(PondEnvironmentsServices.optionsModel);\r\n        this.models = this.conn.pondenvironmentsModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { pondpreparedetailOptions } from '../models/objects';\r\n\r\nexport class PondPrepareDetailsServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = pondpreparedetailOptions;\r\n    constructor() {\r\n        super(PondPrepareDetailsServices.optionsModel);\r\n        this.models = this.conn.pondpreparedetailsModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { pondprepareOptions } from '../models/objects';\r\n\r\nexport class PondPrepareServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = pondprepareOptions;\r\n    constructor() {\r\n        super(PondPrepareServices.optionsModel);\r\n        this.models = this.conn.pondprepareModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { pondOptions } from '../models/objects';\r\nimport { UserRolesServices, PondUserRolesServices, UserServives } from './';\r\nimport { ActionAssociateDatabase } from '../common';\r\nimport { Promise } from '../lib';\r\nimport { Sequelize, Transaction } from 'sequelize';\r\nimport DBHelper from '../helpers/db-helpers';\r\nimport { UserRole, PondUserRole } from '../components';\r\n\r\nexport class PondsServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = pondOptions;\r\n    private userRolesServices: UserRolesServices = new UserRolesServices();\r\n    private pondUserRolesServices: PondUserRolesServices = new PondUserRolesServices();\r\n    private userServives: UserServives = new UserServives();\r\n    constructor() {\r\n        super(PondsServices.optionsModel);\r\n        this.models = this.conn.pondsModel;\r\n    }\r\n\r\n    insert(entity: any): Promise<any> {\r\n        const sequeliz: Sequelize = DBHelper.sequelize;\r\n        return new Promise((resolve, reject) => {\r\n            sequeliz.transaction({autocommit: false},(t: Transaction) => {\r\n                return this.models.create(entity.pond);\r\n            }).then((pond: any) => {\r\n                if(pond) {\r\n                    const pondUserRole: PondUserRole = new PondUserRole();\r\n                    pondUserRole.setUserId = entity.userId;\r\n                    pondUserRole.setPondId = pond.pondId;\r\n                    return pondUserRole.pondUserRolesServices.models.create(pondUserRole);\r\n                }\r\n            }).then((roles: any) => {\r\n                if(roles) {\r\n                    resolve(roles);\r\n                }\r\n            }).catch(e => {\r\n                return resolve(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    get(entity: any): Promise<any> {\r\n        const sequeliz: Sequelize = DBHelper.sequelize;\r\n        return new Promise((resolve, reject) => {\r\n            sequeliz.transaction({autocommit: false},(t: Transaction) => {\r\n                return (new UserRole()).userRolesServices.models.findOne({\r\n                    where: {\r\n                        userId: entity.userId,\r\n                        [this.Op.and]: {\r\n                            [this.Op.or]: [\r\n                                {roles: 0},\r\n                                {roles: 1}\r\n                            ]\r\n                        }\r\n                    }\r\n                });\r\n            }).then((roles) => {\r\n                if(roles) {\r\n                    return this.models.findAll({\r\n                        include: [\r\n                            {\r\n                                model: this.pondUserRolesServices.models,\r\n                                as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                                where: {\r\n                                    userId: entity.userId\r\n                                }\r\n                            }\r\n                        ]\r\n                    });\r\n                } else {\r\n                    resolve({\r\n                        success: false,\r\n                        message: 'Bạn không có quyền truy cập API này.'\r\n                    });\r\n                }\r\n            }).then((ponds: any) => {\r\n                if(ponds) {\r\n                    resolve({\r\n                        success: true,\r\n                        ponds\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    getById(pondId: number, userId?: number): Promise<any> {\r\n        const sequeliz: Sequelize = DBHelper.sequelize;\r\n        return new Promise((resolve, reject) => {\r\n            sequeliz.transaction({autocommit: false},(t: Transaction) => {\r\n                return (new UserRole()).userRolesServices.models.findOne({\r\n                    where: {\r\n                        userId,\r\n                        [this.Op.and]: {\r\n                            [this.Op.or]: [\r\n                                {roles: 0},\r\n                                {roles: 1}\r\n                            ]\r\n                        }\r\n                    }\r\n                });\r\n            }).then((roles) => {\r\n                if(roles) {\r\n                    return this.models.findOne({\r\n                        include: [\r\n                            {\r\n                                model: this.pondUserRolesServices.models,\r\n                                as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                                where: {\r\n                                    userId\r\n                                }\r\n                            }\r\n                        ],\r\n                        where: {\r\n                            pondId\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    resolve({\r\n                        success: false,\r\n                        message: 'Bạn không có quyền truy cập API này.'\r\n                    });\r\n                }\r\n            }).then((pond: any) => {\r\n                if(pond) {\r\n                    resolve({\r\n                        success: true,\r\n                        pond\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    getQuery(criteria: any): any {\r\n        return {\r\n            include: [\r\n                {\r\n                    model: (this.models as any).sequelize.models.pondUserRoles,\r\n                    as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                    where: criteria\r\n                }\r\n            ]\r\n        };\r\n    }\r\n\r\n    test = (): Promise<any> => {\r\n        const md = this.models;\r\n        return new Promise((resolve, reject) => {\r\n            const query: any = {\r\n                include: [\r\n                    {\r\n                        model: this.pondUserRolesServices.models,\r\n                        as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                        attributes: ['rolesId', 'pondId'],\r\n                        required: true,\r\n                        include: [\r\n                            {\r\n                                model: this.userRolesServices.models,\r\n                                as: ActionAssociateDatabase.POND_USER_ROLE_2_USER,\r\n                                include: [\r\n                                    {\r\n                                        model: (this.models as any).sequelize.models.users,\r\n                                        as: ActionAssociateDatabase.USER_ROLES_2_USER,\r\n                                        where: {\r\n                                            userId: 103\r\n                                        }\r\n                                    }\r\n                                ],\r\n                                where: {\r\n                                    [this.Op.or]: [\r\n                                        {\r\n                                            roles: 0\r\n                                        },\r\n                                        {\r\n                                            roles: 1\r\n                                        }\r\n                                    ]\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            };\r\n            this.models.findAll(query).then(res => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n\r\n    testAll = (): Promise<any> => {\r\n        return new Promise((resolve, reject) => {\r\n            this.models.findOne({\r\n                order: [\r\n                    ['createdDate', 'DESC']\r\n                ]\r\n            }).then(res => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { pricesOptions } from '../models/objects';\r\n\r\nexport class PricesServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = pricesOptions;\r\n    constructor() {\r\n        super(PricesServices.optionsModel);\r\n        this.models = this.conn.pricesModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { provinceOptions } from '../models/objects';\r\n\r\nexport class ProvinceServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = provinceOptions;\r\n    constructor() {\r\n        super(ProvinceServices.optionsModel);\r\n        this.models = this.conn.provinceModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { ponduserrolesOptions } from '../models/objects';\r\n\r\nexport class PondUserRolesServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = ponduserrolesOptions;\r\n    constructor() {\r\n        super(PondUserRolesServices.optionsModel);\r\n        this.models = this.conn.ponduserrolesModel ;\r\n    }\r\n    testpr = (): Promise<any> => {\r\n        return new Promise((resolve, reject) => {\r\n            const query: any = {\r\n                include: [\r\n                    {\r\n                        model: (this.models as any).sequelize.models.userroles,\r\n                        // as: 'userroles'\r\n                        limit: 1\r\n                    }\r\n                ]\r\n            };\r\n            this.models.findAll(query).then(res => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { seasonOptions } from '../models/objects';\r\nimport { Promise } from '../lib';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport class SeasonServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = seasonOptions;\r\n    constructor() {\r\n        super(SeasonServices.optionsModel);\r\n        this.models = this.conn.seasonModel;\r\n    }\r\n\r\n    // getAll(options: any, criteria: any): Promise<any[]> {\r\n    //     return new Promise((resolve,reject) => {\r\n    //         const where: any = {\r\n    //             userId: criteria.userId\r\n    //         };\r\n    //         const query: any = { ...options, where };\r\n    //         this.models.findAll(query).then(res => {\r\n    //             resolve(res);\r\n    //         });\r\n    //     });\r\n    // }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { stockingdetailOptions } from '../models/objects';\r\n\r\nexport class StockingDetailsServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = stockingdetailOptions;\r\n    constructor() {\r\n        super(StockingDetailsServices.optionsModel);\r\n        this.models = this.conn.stockingdetailsModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { stockingOptions } from '../models/objects';\r\n\r\nexport class StockingServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = stockingOptions;\r\n    constructor() {\r\n        super(StockingServices.optionsModel);\r\n        this.models = this.conn.stockingModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { storagesOptions } from '../models/objects';\r\n\r\nexport class StoregeServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = storagesOptions;\r\n    constructor() {\r\n        super(StoregeServices.optionsModel);\r\n        this.models = this.conn.storagesModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { storageOwnerOptions } from '../models/objects';\r\n\r\nexport class StoregeOwnwerServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = storageOwnerOptions;\r\n    constructor() {\r\n        super(StoregeOwnwerServices.optionsModel);\r\n        this.models = this.conn.ownerStoragesModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { takecareOptions } from '../models/objects';\r\n\r\nexport class TakeCareServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = takecareOptions;\r\n    constructor() {\r\n        super(TakeCareServices.optionsModel);\r\n        this.models = this.conn.takecareModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { userrolesOptions } from '../models/objects';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport class UserRolesServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = userrolesOptions;\r\n    constructor() {\r\n        super(UserRolesServices.optionsModel);\r\n        this.models = this.conn.userRolesModel;\r\n    }\r\n\r\n    testUserAssociate = (): Promise<any> => {\r\n        return new Promise((resolve, reject) => {\r\n            const query: any = {\r\n                include: [\r\n                    {\r\n                        model: (this.models as any).sequelize.models.users,\r\n                        as: ActionAssociateDatabase.USER_ROLES_2_USER\r\n                    }\r\n                ]\r\n            };\r\n            this.models.findAll(query).then(res => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n\r\n    getQuery(criteria: any): any {\r\n        return {\r\n            where: criteria\r\n        };\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { usingfoodOptions } from '../models/objects';\r\n\r\nexport class UsingFoodsServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = usingfoodOptions;\r\n    constructor(\r\n    ) {\r\n        super(UsingFoodsServices.optionsModel);\r\n        this.models = this.conn.usingfoodsModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { usingveterinaryOptions } from '../models/objects';\r\n\r\nexport class UsingVeterinaryServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = usingveterinaryOptions;\r\n    constructor() {\r\n        super(UsingVeterinaryServices.optionsModel);\r\n        this.models = this.conn.usingVeterinaryModel;\r\n\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { wardOptions } from '../models/objects';\r\nimport { Promise } from '../lib';\r\n\r\nexport class WardServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = wardOptions;\r\n    constructor() {\r\n        super(WardServices.optionsModel);\r\n        this.models = this.conn.wardModel;\r\n    }\r\n\r\n    getAll(): Promise<any[]> {\r\n        return new Promise((resolve, reject) => {\r\n            this.models.findAll({\r\n                offset: 0,\r\n                limit: 50\r\n            }).then((obj: any) => {\r\n                resolve(obj);\r\n            });\r\n        });\r\n    }\r\n\r\n    getByDistrictId(id): Promise<any[]> {\r\n        return new Promise((resolve, reject) => {\r\n            this.models.findAll({\r\n                where: {\r\n                    districtid: id\r\n                }\r\n            }).then((obj: any) => {\r\n                resolve(obj);\r\n            });\r\n        });\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { seasonAndPondOptions } from '../models/objects';\r\n\r\nexport class SeasonAndPondServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = seasonAndPondOptions;\r\n    constructor() {\r\n        super(SeasonAndPondServices.optionsModel);\r\n        this.models = this.conn.seasonAndPondModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { incurredsOptions } from '../models/objects';\r\n\r\nexport class IncurredsServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = incurredsOptions;\r\n    constructor() {\r\n        super(IncurredsServices.optionsModel);\r\n        this.models = this.conn.incurredModel;\r\n    }\r\n}\r\n","// Unique ID creation requires a high quality random # generator.  In node.js\n// this is pretty straight-forward - we use the crypto API.\n\nvar crypto = require('crypto');\n\nmodule.exports = function nodeRNG() {\n  return crypto.randomBytes(16);\n};\n","module.exports = require(\"crypto\");","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([bth[buf[i++]], bth[buf[i++]], \n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]]]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","export * from './upload.route';\r\n","import { NextFunction, Request, Response } from 'express';\r\nimport { logger } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { GoogleDrive } from '../../googleAPI/drive.google';\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class UploadRoute extends BaseRoute {\r\n    public static path = '/uploads';\r\n    private static instance: UploadRoute;\r\n    /**\r\n     * @class UploadRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!UploadRoute.instance) {\r\n            UploadRoute.instance = new UploadRoute();\r\n        }\r\n        return UploadRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[UploadRoute] Creating upload route.');\r\n\r\n        // add route\r\n        this.router.post('/image', GoogleDrive.upload);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, UploadRoute.path);\r\n    }\r\n}\r\n","export * from './getFile.route';\r\n","import { logger } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { GoogleDrive } from '../../googleAPI/drive.google';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class GetFileRoute extends BaseRoute {\r\n    public static path = '/getFile';\r\n    private static instance: GetFileRoute;\r\n    /**\r\n     * @class GetFileRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!GetFileRoute.instance) {\r\n            GetFileRoute.instance = new GetFileRoute();\r\n        }\r\n        return GetFileRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[GetFileRoute] Creating get file route.');\r\n\r\n        // add route\r\n        this.router.get('/image/:fileId', GoogleDrive.getFile);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, GetFileRoute.path);\r\n    }\r\n}\r\n","export * from './province.route';\r\n","import { Request, Response } from 'express';\r\nimport { logger } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { Province } from '../../components/province';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class ProvinceRoute extends BaseRoute {\r\n    public static path = '/province';\r\n    private static instance: ProvinceRoute;\r\n    /**\r\n     * @class ProvinceRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!ProvinceRoute.instance) {\r\n            ProvinceRoute.instance = new ProvinceRoute();\r\n        }\r\n        return ProvinceRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[ProvinceRoute] Creating province route.');\r\n\r\n        // add route\r\n        this.router.get('/', this.getAllProvince);\r\n\r\n        // log endpoint\r\n        this.logEndpoints(this.router, ProvinceRoute.path);\r\n    }\r\n\r\n    private getAllProvince = async (request: Request, response: Response) => {\r\n        const province = new Province();\r\n        province.getAllProvince().then((res: any[]) => {\r\n            response.status(200).json(res);\r\n        });\r\n    }\r\n}\r\n","export * from './district.route';\r\n","import { Request, Response } from 'express';\r\nimport { logger } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { District } from '../../components/district';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class DistrictRoute extends BaseRoute {\r\n    public static path = '/district';\r\n    private static instance: DistrictRoute;\r\n    /**\r\n     * @class DistrictRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!DistrictRoute.instance) {\r\n            DistrictRoute.instance = new DistrictRoute();\r\n        }\r\n        return DistrictRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[DistrictRoute] Creating district route.');\r\n\r\n        // add route\r\n        this.router.get('/', this.getAllDistrict);\r\n\r\n        // log enpoint\r\n        this.logEndpoints(this.router, DistrictRoute.path);\r\n    }\r\n\r\n    private getAllDistrict = async (request: Request, response: Response) => {\r\n        const district = new District();\r\n        if (!request.headers.provinceid) {\r\n            district.getAllDistrict().then((res: any[]) => {\r\n                response.status(200).json(res);\r\n            });\r\n        } else {\r\n            district.getDistrictByProvinceId(request.headers.provinceid).then((res: any[]) => {\r\n                response.status(200).json(res);\r\n            });\r\n        }\r\n    }\r\n}\r\n","export * from './ward.route';\r\n","import { Request, Response } from 'express';\r\nimport { logger } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { Ward } from '../../components/ward';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class WardRoute extends BaseRoute {\r\n    public static path = '/ward';\r\n    private static instance: WardRoute;\r\n    /**\r\n     * @class WardRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!WardRoute.instance) {\r\n            WardRoute.instance = new WardRoute();\r\n        }\r\n        return WardRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[WardRoute] Creating ward route.');\r\n\r\n        // add route\r\n        this.router.get('/', this.getAllWard);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, WardRoute.path);\r\n    }\r\n\r\n    private getAllWard = async (request: Request, response: Response) => {\r\n        const ward = new Ward();\r\n        if (!request.headers.districtid) {\r\n            ward.getAllWard().then((res: any[]) => {\r\n                response.status(200).json(res);\r\n            });\r\n        } else {\r\n            ward.getDistrictByDistrictId(request.headers.districtid).then((res: any[]) => {\r\n                response.status(200).json(res);\r\n            });\r\n        }\r\n    }\r\n}\r\n","export * from './ponds.route';\r\n","import { Pond } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, UserServives, UserRolesServices, PondUserRolesServices, SeasonServices, PondsServices, SeasonAndPondServices } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { defaultImage, ActionAssociateDatabase } from '../../common';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { GoogleDrive } from '../../googleAPI/drive.google';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { Transaction, FindOptions } from 'sequelize';\r\nimport { addPondSchema } from '../../schemas';\r\nimport { DateUtil } from '../../lib';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class PondRoute extends BaseRoute {\r\n    public static path = '/ponds';\r\n    private static instance: PondRoute;\r\n    private userServives: UserServives = new UserServives();\r\n    private userRolesServices: UserRolesServices = new UserRolesServices();\r\n    private pondUserRolesServices: PondUserRolesServices = new PondUserRolesServices();\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private pondsServices: PondsServices = new PondsServices();\r\n    private seasonAndPondServices: SeasonAndPondServices = new SeasonAndPondServices();\r\n\r\n    /**\r\n     * @class PondRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!PondRoute.instance) {\r\n            PondRoute.instance = new PondRoute();\r\n        }\r\n        return PondRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[PondRoute] Creating pond route.');\r\n\r\n        // add route\r\n        this.router.get('/gets', Authentication.isLogin, this.getPonds); // get ponds\r\n        this.router.get('/get/:pondUUId', Authentication.isLogin, this.getPondByPondUUId);  // get với UUID\r\n        // this.router.get('/gets/withoutImage', Authentication.isLogin, this.getPondWithoutImages); // get all kèm với quyền - không hình [bỏ]\r\n        // this.router.get('/gets/employees', Authentication.isLogin, this.getEmployeePondRoles); // get nhân viên theo ao [không sử dụng]\r\n        // this.router.get('/gets/advanced', Authentication.isLogin, this.getPondAdvanceds); // [gộp vào gets]\r\n        // this.router.get('/gets/season/:seasonUUId', Authentication.isLogin, this.getPondBySeasonUUId); // get ao theo vụ nuôi với seasonUUId\r\n        this.router.get('/gets/boss', Authentication.isLogin, this.getPondOfBoss);\r\n        this.router.post('/add', Authentication.isLogin, this.addPond); // Thêm ao\r\n        // this.router.post('/gets/seasonUUId', Authentication.isLogin, this.getPostPondBySeasonUUId); // get ao theo vụ nuôi [nên đổi về phương thức get]\r\n        // this.router.post('/count', Authentication.isLogin, this.countPond); // đếm ao của user - [tích hwjp vào gets]\r\n        // this.router.post('/seasons/count', Authentication.isLogin, this.countSeasonWithPond); // nên tích hợp vào get pond\r\n        this.router.post('/get/notin/seasonAndPond', Authentication.isLogin, this.getPondNotInSeasonAndPond); // get số ao không có trong vụ [to GET]\r\n        this.router.post('/gets/ownerSeason/WithImage', Authentication.isLogin, this.getPondByOwnerSeasonWithImage); // /** Xem xét */get ao của người dùng hiện tại có hình ảnh\r\n        this.router.post('/gets/notEmployee', Authentication.isLogin, this.getPondWithUserNotManage); // Xem xét\r\n        this.router.post('/gets/not/manage', Authentication.isLogin, this.getPondWithoutManager); // Xem xét\r\n        this.router.put('/update', Authentication.isLogin, this.updatePondWithUUId); // Cập nhật [Ok]\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, PondRoute.path);\r\n    }\r\n\r\n    private addPond = async (request: any, response: Response, next: NextFunction) => {\r\n        const validate: any = this.validator(addPondSchema);\r\n        const dataCheck: any = {\r\n            pondName: request.body.pondName,\r\n            createCost: request.body.createCost - 0,\r\n            pondArea: request.body.pondArea - 0,\r\n            pondCreatedDate: new Date(request.body.pondCreatedDate).toJSON(),\r\n            pondDepth: request.body.pondDepth - 0,\r\n            pondLatitude: (request.body.pondLatitude - 0) || null,\r\n            pondLongitude: (request.body.pondLongitude - 0) || null,\r\n            status: request.body.status - 0\r\n        };\r\n        const validater: boolean = validate(dataCheck);\r\n        if(validater) {\r\n            const pond: Pond = new Pond();\r\n            const token: string = request.headers.authorization.split(' ')[1];\r\n            const deToken: any = Authentication.detoken(token);\r\n            const { pondName, pondCreatedDate, pondArea, pondDepth, createCost, pondLatitude, pondLongitude, status } = request.body;\r\n            if(pondCreatedDate > DateUtil.getNow()) {\r\n                return response.status(200).json({\r\n                    success: false,\r\n                    message: 'Ngày tạo ao không thể lớn hơn ngày hiện tại.'\r\n                });\r\n            } else {\r\n                if (request.files) {\r\n                    GoogleDrive.upload(request, response, next).then((data: any) => {\r\n                        if (data.fileId) {\r\n                            pond.setPond(null, uuidv4(), deToken.userId, pondName, pondArea, pondDepth, createCost, pondCreatedDate, status, status === 1 ? 1 : 0, status === 1 ? 1 : 0, data.fileId, pondLatitude !== '' ? pondLatitude : undefined, pondLongitude !== '' ? pondLongitude : undefined);\r\n                            pond.pondsServices.models.create(pond).then((pond$: Pond) => {\r\n                                response.status(200).json({\r\n                                    success: true,\r\n                                    message: 'Thêm ao mới thành công.'\r\n                                });\r\n                            }).catch(e => {\r\n                                response.status(200).json({\r\n                                    success: false,\r\n                                    message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n                                });\r\n                            });\r\n                        } else {\r\n                            response.status(200).json({\r\n                                success: false,\r\n                                message: 'Đã có lỗi xảy ra, xin vui lòng thử lại!'\r\n                            });\r\n                        }\r\n                    });\r\n                } else {\r\n                    pond.setPond(null, uuidv4(), deToken.userId, pondName, pondArea, pondDepth, createCost, pondCreatedDate, status, status === 1 ? 1 : 0, status === 1 ? 1 : 0, defaultImage.pondImage, pondLatitude !== '' ? pondLatitude : undefined, pondLongitude !== '' ? pondLongitude : undefined);\r\n                    pond.pondsServices.models.create(pond).then((pond$: Pond) => {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: 'Thêm ao mới thành công.'\r\n                        });\r\n                    }).catch(e => {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n        } else {\r\n            validate.error;\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Dữ liệu cung cấp không phù hợp, vui lòng kiếm tra và thử lại sau.'\r\n            });\r\n        }\r\n    }\r\n\r\n    private getEmployeePondRoles = async (request: Request, response: Response, next: NextFunction) => {\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const decodetoken: any = Authentication.detoken(token);\r\n        this.userRolesServices.models.findAll({\r\n            where: {\r\n                bossId: decodetoken.userId,\r\n                [this.userRolesServices.Op.and]: {\r\n                    roles: 1\r\n                }\r\n            },\r\n            include: [\r\n                {\r\n                    model: this.userServives.models,\r\n                    as: ActionAssociateDatabase.USER_ROLES_2_USER,\r\n                    attributes: ['userId', 'userUUId', 'lastname', 'firstname', 'username', 'createdDate', 'createdBy']\r\n                }\r\n            ]\r\n        })\r\n            .then(async (employees: any[]) => {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    employees\r\n                });\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi không mong muốn, vui lòng thử lại.'\r\n                });\r\n                throw e;\r\n            });\r\n    }\r\n\r\n    private getPonds = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonUUId, status, seasonId, all } = request.query;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        const seasonPresent: any = await this.seasonServices.models.findOne({\r\n            where: {\r\n                [this.sequeliz.Op.or]: [\r\n                    {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    },\r\n                    {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    }\r\n                ]\r\n            } as any\r\n        });\r\n        let query: FindOptions<any> = {};\r\n        if(((seasonPresent ? !!Object.keys(seasonPresent).length : false) && (seasonPresent.seasonId === seasonId || seasonPresent.seasonUUId === seasonUUId)) || Boolean(all) === true) {\r\n            query = {\r\n                include: [\r\n                    {\r\n                        model: this.userServives.models,\r\n                        as: ActionAssociateDatabase.POND_2_EMPLOYEE_MAYNY_ROLES,\r\n                        required: false,\r\n                        attributes: ['userId', 'username', 'firstname', 'lastname', 'userUUId']\r\n                    },\r\n                    {\r\n                        model: this.pondUserRolesServices.models,\r\n                        as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                        required: false,\r\n                        attributes: []\r\n                    },\r\n                    {\r\n                        model: this.seasonServices.models,\r\n                        as: ActionAssociateDatabase.POND_2_SEASON,\r\n                        required: (!!seasonUUId || !!seasonId),\r\n                        where: {\r\n                            userId: ownerId,\r\n                            status: 0\r\n                        },\r\n                        attributes: []\r\n                    },\r\n                    {\r\n                        model: this.seasonAndPondServices.models,\r\n                        as: ActionAssociateDatabase.POND_2_SEASON_AND_POND,\r\n                        required: false\r\n                    }\r\n                ],\r\n                where: {\r\n                    [this.sequeliz.Op.or]: [\r\n                        {\r\n                            userId: deToken.userId\r\n                        },\r\n                        {\r\n                            '$ponduserroles.userId$': deToken.userId\r\n                        }\r\n                    ]\r\n                } as any\r\n            };\r\n            if(!!seasonUUId) {\r\n                if(!isBoss) {\r\n                    return response.status(200).json({\r\n                        success: false,\r\n                        message: 'Bạn không có quyền thao tác này!'\r\n                    });\r\n                }\r\n                query = {\r\n                    include: [\r\n                        {\r\n                            model: this.userServives.models,\r\n                            as: ActionAssociateDatabase.POND_2_EMPLOYEE_MAYNY_ROLES,\r\n                            required: false,\r\n                            attributes: ['userId', 'username', 'firstname', 'lastname', 'userUUId']\r\n                        },\r\n                        {\r\n                            model: this.pondUserRolesServices.models,\r\n                            as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                            required: false,\r\n                            attributes: []\r\n                        },\r\n                        {\r\n                            model: this.seasonServices.models,\r\n                            as: ActionAssociateDatabase.POND_2_SEASON,\r\n                            where: {\r\n                                seasonUUId,\r\n                                userId: ownerId\r\n                            },\r\n                            attributes: []\r\n                        },\r\n                        {\r\n                            model: this.seasonAndPondServices.models,\r\n                            as: ActionAssociateDatabase.POND_2_SEASON_AND_POND,\r\n                            required: false\r\n                        }\r\n                    ],\r\n                    where: {\r\n                        [this.sequeliz.Op.or]: [\r\n                            {\r\n                                userId: deToken.userId\r\n                            },\r\n                            {\r\n                                '$ponduserroles.userId$': deToken.userId\r\n                            }\r\n                        ]\r\n                    } as any\r\n                };\r\n            }\r\n            if(!!seasonId) {\r\n                if(!isBoss) {\r\n                    return response.status(200).json({\r\n                        success: false,\r\n                        message: 'Bạn không có quyền thao tác này!'\r\n                    });\r\n                }\r\n                query = {\r\n                    include: [\r\n                        {\r\n                            model: this.userServives.models,\r\n                            as: ActionAssociateDatabase.POND_2_EMPLOYEE_MAYNY_ROLES,\r\n                            required: false,\r\n                            attributes: ['userId', 'username', 'firstname', 'lastname', 'userUUId']\r\n                        },\r\n                        {\r\n                            model: this.pondUserRolesServices.models,\r\n                            as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                            required: false,\r\n                            attributes: []\r\n                        },\r\n                        {\r\n                            model: this.seasonServices.models,\r\n                            as: ActionAssociateDatabase.POND_2_SEASON,\r\n                            where: {\r\n                                seasonId,\r\n                                userId: ownerId\r\n                            },\r\n                            attributes: []\r\n                        },\r\n                        {\r\n                            model: this.seasonAndPondServices.models,\r\n                            as: ActionAssociateDatabase.POND_2_SEASON_AND_POND,\r\n                            required: false\r\n                        }\r\n                    ],\r\n                    where: {\r\n                        [this.sequeliz.Op.or]: [\r\n                            {\r\n                                userId: deToken.userId\r\n                            },\r\n                            {\r\n                                '$ponduserroles.userId$': deToken.userId\r\n                            }\r\n                        ]\r\n                    } as any\r\n                };\r\n            }\r\n            if(!!status) {\r\n                if(status.includes('notnull')) /** Ao đang nuôi + đang nâng cấp */ {\r\n                    const notIn: any = {\r\n                        status: {\r\n                            [this.sequeliz.Op.notIn]: [0]\r\n                        }\r\n                    };\r\n                    query.where = {\r\n                        ...query.where,\r\n                        ...notIn\r\n                    };\r\n                } else if(status.includes('forPrepare')) /** Ao trống + đang nâng cấp */ {\r\n                    const condition: any = {\r\n                        status: {\r\n                            [this.sequeliz.Op.notIn]: [1]\r\n                        }\r\n                    };\r\n                    query.where = {\r\n                        ...query.where,\r\n                        ... condition\r\n                    };\r\n                } else if(status.includes('forStocking')) /** Ao trống + đang nuôi */ {\r\n                    const condition: any = {\r\n                        status: {\r\n                            [this.sequeliz.Op.notIn]: [2]\r\n                        }\r\n                    };\r\n                    query.where = {\r\n                        ...query.where,\r\n                        ... condition\r\n                    };\r\n                } else /** theo status gui len */ {\r\n                    query.where = {\r\n                        ...query.where,\r\n                        status: status as any - 0\r\n                    };\r\n                }\r\n            }\r\n        } else {\r\n            query = {\r\n                include: [\r\n                    {\r\n                        model: this.seasonAndPondServices.models,\r\n                        as: ActionAssociateDatabase.POND_2_SEASON_AND_POND,\r\n                        include: [\r\n                            {\r\n                                model: this.seasonServices.models,\r\n                                as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                                where: {\r\n                                    [this.sequeliz.Op.or]: [\r\n                                        {\r\n                                            seasonUUId\r\n                                        },\r\n                                        {\r\n                                            seasonId\r\n                                        }\r\n                                    ]\r\n                                }\r\n                            }\r\n                        ]\r\n                    },\r\n                    {\r\n                        model: this.pondUserRolesServices.models,\r\n                        as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                        required: false,\r\n                        attributes: []\r\n                    },\r\n                    {\r\n                        model: this.userServives.models,\r\n                        as: ActionAssociateDatabase.POND_2_EMPLOYEE_MAYNY_ROLES,\r\n                        required: false\r\n                    }\r\n                ],\r\n                where: {\r\n                    [this.sequeliz.Op.or]: [\r\n                        {\r\n                            userId: deToken.userId\r\n                        },\r\n                        {\r\n                            '$ponduserroles.userId$': deToken.userId\r\n                        }\r\n                    ]\r\n                } as any\r\n            };\r\n        }\r\n        this.pondsServices.models.findAll(query).then(async (res: any) => {\r\n            if(!Object.keys(res).length) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy ao.',\r\n                    ponds: []\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    ponds: res\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xãy ra, xin vui lòng thử lại!'\r\n            });\r\n        });\r\n    }\r\n\r\n    private getPondOfBoss = async (request: Request, response: Response, next: NextFunction) => {\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n\r\n        if (!isBoss) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Dừng lại! Truy cập là trái phép.'\r\n            });\r\n        } else {\r\n            this.pondsServices.models.findAll({\r\n                where: {\r\n                    userId\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n                });\r\n            }).then((res: any) => {\r\n                if (!res.length) {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Bạn không có ao nào trong hệ thống'\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: '',\r\n                        ponds: res\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private getPondWithoutImages = async (request: Request, response: Response, next: NextFunction) => {\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const pond: Pond = new Pond();\r\n        pond.pondsServices.models.findAll(({\r\n            include: [\r\n                {\r\n                    model: this.userServives.models,\r\n                    as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                    required: false,\r\n                    // attributes: ['userId', 'username', 'firstname', 'lastname', 'userUUId']\r\n                },\r\n                {\r\n                    model: this.pondUserRolesServices.models,\r\n                    as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                    required: false,\r\n                    attributes: []\r\n                }\r\n            ],\r\n            where: {\r\n                [this.sequeliz.Op.or]: [\r\n                    {\r\n                        userId: deToken.userId\r\n                    },\r\n                    {\r\n                        '$ponduserroles.userId$': deToken.userId\r\n                    }\r\n                ]\r\n            }\r\n        } as any)).then(async (res: any) => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                ponds: res\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xãy ra, xin vui lòng thử lại!',\r\n                e\r\n            });\r\n        });\r\n    }\r\n\r\n    private getPondNotInSeasonAndPond = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonUUId } = request.body;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            let ponds: any = await this.seasonAndPondServices.models.findAll({\r\n                include: [\r\n                    {\r\n                        model: this.seasonServices.models,\r\n                        as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                        where: {\r\n                            seasonUUId,\r\n                            userId: ownerId\r\n                        },\r\n                        attributes: []\r\n                    }\r\n                ],\r\n                attributes: ['pondId'],\r\n                transaction: t\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Lỗi đường truyền, vui lòng thử lại sau.'\r\n                });\r\n                return t.rollback();\r\n            });\r\n            if (ponds.length) {\r\n                ponds = ponds.map(element => {\r\n                    return element.pondId;\r\n                });\r\n                const p: any = await this.pondsServices.models.findAll({\r\n                    where: {\r\n                        pondId: {\r\n                            [this.sequeliz.Op.notIn]: ponds\r\n                        },\r\n                        userId: ownerId\r\n                    },\r\n                    transaction: t\r\n                }).catch(e => {\r\n                    e;\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Lỗi đường truyền, vui lòng thử lại sau.'\r\n                    });\r\n                    t.rollback();\r\n                });\r\n                if (!p) {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Không tìm thấy ao.'\r\n                    });\r\n                    t.rollback();\r\n                } else {\r\n                    t.commit();\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: '',\r\n                        ponds: p\r\n                    });\r\n                }\r\n            } else {\r\n                const p: any = await this.pondsServices.models.findAll({\r\n                    where: {\r\n                        userId: ownerId\r\n                    },\r\n                    transaction: t\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Lỗi đường truyền, vui lòng thử lại sau.'\r\n                    });\r\n                    t.rollback();\r\n                });\r\n                if (!p) {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Không tìm thấy ao.'\r\n                    });\r\n                    t.rollback();\r\n                } else {\r\n                    t.commit();\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: '',\r\n                        ponds: p\r\n                    });\r\n                }\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi đường truyền, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private getPondByPondUUId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const pond: Pond = new Pond();\r\n        const { pondUUId } = request.params;\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const decodetoken: any = Authentication.detoken(token);\r\n        const query: any = {\r\n            include: [\r\n                {\r\n                    model: this.pondUserRolesServices.models,\r\n                    as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                    required: false,\r\n                    include: [\r\n                        {\r\n                            model: this.userServives.models,\r\n                            as: ActionAssociateDatabase.POND_USER_ROLE_2_USER,\r\n                            attributes: ['userId', 'userUUId', 'lastname', 'firstname', 'username', 'createdDate', 'createdBy']\r\n                        }\r\n                    ]\r\n                }\r\n            ],\r\n            where: {\r\n                pondUUId,\r\n                [pond.pondsServices.Op.and]: {\r\n                    [this.sequeliz.Op.or]: [\r\n                        {\r\n                            userId: decodetoken.userId\r\n                        },\r\n                        {\r\n                            '$ponduserroles.userId$': decodetoken.userId\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        };\r\n        pond.pondsServices.models.findOne(query).then((pond$: any) => {\r\n            if (pond$) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    pond: pond$.dataValues\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Bạn không có quyền truy cập'\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private updatePondWithUUId = async (request: any, response: Response, next: NextFunction) => {\r\n        const pond: Pond = new Pond();\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        if (!isBoss) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Dừng lại! Truy cập là trái phép.'\r\n            });\r\n        }\r\n        const { pondUUId, pondName, pondCreatedDate, pondArea, pondDepth, createCost, pondLatitude, pondLongitude, status, isFed, isDiary } = request.body;\r\n        if (!pondUUId) {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Hành động không được phép, vui lòng thử lại sau!'\r\n            });\r\n        } else {\r\n            if (request.files) {\r\n                GoogleDrive.upload(request, response, next).then((data: any) => {\r\n                    if (data.fileId) {\r\n                        pond.setPond(null, uuidv4(), deToken.userId, pondName, pondArea, pondDepth, createCost, pondCreatedDate, status, status === 1 ? 1 : 0, status === 1 ? 1 : 0, data.fileId, pondLatitude !== '' ? pondLatitude : undefined, pondLongitude !== '' ? pondLongitude : undefined);\r\n                        pond.pondsServices.models.update({\r\n                            pondName, pondCreatedDate, pondArea, pondDepth, createCost, images:\r\n                                data.fileId, pondLatitude, pondLongitude, status, isFed, isDiary\r\n                        }, {\r\n                                where: {\r\n                                    pondUUId\r\n                                },\r\n                                returning: true\r\n                            }).then((pond$: any) => {\r\n                                response.status(200).json({\r\n                                    success: true,\r\n                                    message: 'Cập nhật thành công.'\r\n                                });\r\n                            }).catch(e => {\r\n                                response.status(200).json({\r\n                                    success: false,\r\n                                    message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n                                });\r\n                            });\r\n                    } else {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Đã có lỗi xảy ra, xin vui lòng thử lại!'\r\n                        });\r\n                    }\r\n                });\r\n            } else {\r\n                pond.pondsServices.models.update({\r\n                    pondName, pondCreatedDate, pondArea, pondDepth, createCost, pondLatitude, pondLongitude, status, isFed\r\n                }, {\r\n                        where: {\r\n                            pondUUId\r\n                        }\r\n                    }).then((pond$: any) => {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: 'Cập nhật thành công.'\r\n                        });\r\n                    }).catch(e => {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n                        });\r\n                    });\r\n            }\r\n        }\r\n    }\r\n\r\n    private getPondBySeasonUUId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonUUId } = request.params;\r\n        const pond: Pond = new Pond();\r\n        pond.pondsServices.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.POND_2_SEASON,\r\n                    where: {\r\n                        seasonUUId\r\n                    },\r\n                    attributes: []\r\n                }\r\n            ]\r\n        }).then((ponds: any) => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                ponds\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: '',\r\n                e\r\n            });\r\n        });\r\n    }\r\n\r\n    private getPostPondBySeasonUUId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonUUId, ownerId } = request.body;\r\n        const pond: Pond = new Pond();\r\n        pond.pondsServices.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.POND_2_SEASON,\r\n                    where: {\r\n                        seasonUUId\r\n                    },\r\n                    attributes: []\r\n                }\r\n            ],\r\n            where: {\r\n                userId: ownerId\r\n            }\r\n        }).then((ponds: any) => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                ponds\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: '',\r\n                e\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get ao các ao của vụ hiện tại\r\n     * có check status\r\n     */\r\n    private getPondByOwnerSeason = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { status } = request.body;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        const query: any = {\r\n            include: [\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    },\r\n                    attributes: []\r\n                },\r\n                {\r\n                    model: this.seasonAndPondServices.models,\r\n                    as: ActionAssociateDatabase.POND_2_SEASON_AND_POND,\r\n                    attributes: []\r\n                }\r\n            ],\r\n            where: {\r\n                userId: ownerId\r\n            }\r\n        };\r\n        if (status) {\r\n            const where: any = {\r\n                status\r\n            };\r\n            query.where = {\r\n                ...query.where,\r\n                ...where\r\n            };\r\n        }\r\n        this.pondsServices.models.findAll(query).then(res => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                ponds: res\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi đường truyền, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private getPondByOwnerSeasonWithImage = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { ownerId, status } = request.body;\r\n        const query: any = {\r\n            include: [\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    },\r\n                    attributes: []\r\n                },\r\n                {\r\n                    model: this.seasonAndPondServices.models,\r\n                    as: ActionAssociateDatabase.POND_2_SEASON_AND_POND,\r\n                    attributes: []\r\n                }\r\n            ],\r\n            where: {\r\n                userId: ownerId\r\n            }\r\n        };\r\n        if (status) {\r\n            const where: any = {\r\n                status\r\n            };\r\n            query.where = {\r\n                ...query.where,\r\n                ...where\r\n            };\r\n        }\r\n        this.pondsServices.models.findAll(query).then(async (res: any[]) => {\r\n            if (res.length > 0) {\r\n                const endData = [];\r\n                for (const e of res) {\r\n                    e[`images`] = await GoogleDrive.delayGetFileById(e.images);\r\n                    endData.push(e);\r\n                }\r\n                response.status(200).json({\r\n                    success: true,\r\n                    ponds: endData\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    ponds: []\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            e;\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xãy ra, xin vui lòng thử lại!'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get ao mà người dùng đó không có quyền - sử dụng cho chức năng phân quyền ao\r\n     * Get theo pondUserRolesId\r\n     * @method POST\r\n     */\r\n    private getPondWithoutManager = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { employeeId } = request.body;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        if (!isBoss) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Dừng lại! Truy cập là trái phép.'\r\n            });\r\n        } else {\r\n            if (employeeId) {\r\n                const pondByManage: any = await this.pondUserRolesServices.models.findAll({\r\n                    where: {\r\n                        userId: employeeId\r\n                    }\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Có lỗi xảy ra, vui lòng thử lại sau.'\r\n                    });\r\n                });\r\n                const query: FindOptions<any> = {\r\n                    include: [],\r\n                    where: {}\r\n                };\r\n                if (pondByManage.length) {\r\n                    query.where = {\r\n                        userId,\r\n                        [this.sequeliz.Op.notIn]: pondByManage\r\n                    };\r\n                } else {\r\n                    query.where = {\r\n                        userId,\r\n                    };\r\n                }\r\n                this.pondsServices.models.findAll(query).then(async (res: any[]) => {\r\n                    if (!res.length) {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: 'Không tìm thấy ao.',\r\n                            ponds: []\r\n                        });\r\n                    } else {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: '',\r\n                            ponds: res\r\n                        });\r\n                    }\r\n                }).catch(e => {\r\n                    e;\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã có lỗi xảy ra.'\r\n                    });\r\n                });\r\n            } else {\r\n                return response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra.'\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Đếm tổng số ao của người dùng\r\n     */\r\n    private countPond = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondOwner } = request.body;\r\n        const pond: Pond = new Pond();\r\n        pond.pondsServices.models.findAndCountAll({\r\n            where: {\r\n                userId: pondOwner\r\n            }\r\n        }).then(res => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                pondsQuantity: res.count\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @method GET\r\n     * Hàm lấy danh sách ao của người dùng đang đăng nhập\r\n     * request - token\r\n     * option - image: boolean get ao kèm thêm hình\r\n     * option - isnull: boolean get ao trống\r\n     * option - isnotnull: boolean get ao đang nuôi thả\r\n     * option - isupgrade: boolean get ao đang nâng cấp\r\n     * option - seasonid: string|number get ao theo vụ chỉ định\r\n     */\r\n    private getPondAdvanceds = async (request: Request, response: Response, next: NextFunction) => {\r\n        // flagged\r\n        const { image, isnull, isnotnull, isupgrade, seasonid, notRoles, userid, seasonuuid } = request.headers;\r\n\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        // init query\r\n        const query: FindOptions<any> = {\r\n            include: [],\r\n            where: {}\r\n        };\r\n        if (!isBoss) {\r\n            // vụ mặc định\r\n            const presentSeason: any = {\r\n                model: this.seasonServices.models,\r\n                as: ActionAssociateDatabase.POND_2_SEASON,\r\n                where: {\r\n                    userId: ownerId,\r\n                    status: 0\r\n                }\r\n            };\r\n            // các ao có quyền\r\n            const rule: any = {\r\n                model: this.pondUserRolesServices.models,\r\n                as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                where: {\r\n                    userId\r\n                }\r\n            };\r\n            query.include.push(presentSeason);\r\n            query.include.push(rule);\r\n        } else {\r\n            if (!seasonid) {\r\n                // load vụ mặc định\r\n                const presentSeason: any = {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    }\r\n                };\r\n                query.include.push(presentSeason);\r\n            } else if(seasonuuid) /* load theo id vụ yêu cầu */ {\r\n                const requestSeason: any = {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        seasonUUId: seasonuuid\r\n                    }\r\n                };\r\n                query.include.push(requestSeason);\r\n            } else  {\r\n                // load theo id vụ yêu cầu\r\n                const requestSeason: any = {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        seasonId: seasonid\r\n                    }\r\n                };\r\n                query.include.push(requestSeason);\r\n            }\r\n        }\r\n        if (isnull === 'true') {\r\n            // ao trống\r\n            query.where = {\r\n                status: 0\r\n            };\r\n        } else if (isnotnull === 'true') {\r\n            // ao đang nuôi\r\n            query.where = {\r\n                status: 1\r\n            };\r\n        } else if (isupgrade === 'true') {\r\n            // ao đang nâng cấp\r\n            query.where = {\r\n                status: 2\r\n            };\r\n        }\r\n        this.pondsServices.models.findAll(query).then(async (res: any[]) => {\r\n            if (!res.length) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy ao khả dụng.',\r\n                    ponds: []\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    ponds: res\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra.'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @method POST\r\n     * Đếm số vụ của ao chỉ định\r\n     */\r\n    private countSeasonWithPond = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondUUId } = request.body;\r\n        this.seasonAndPondServices.models.findAndCountAll({\r\n            include: [\r\n                {\r\n                    model: this.pondsServices.models,\r\n                    as: ActionAssociateDatabase.SEASON_AND_POND_2_POND,\r\n                    where: {\r\n                        pondUUId\r\n                    },\r\n                    attributes: []\r\n                }\r\n            ]\r\n        }).then(res => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                count: res.count\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Có lỗi xảy ra.'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get All pond mà người dùng chỉ định không có quản lý\r\n     * @method POST\r\n     * @param request.body.employeeId\r\n     */\r\n    private getPondWithUserNotManage = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { employeeId } = request.body;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        if (!isBoss) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Dừng lại! Truy cập là trái phép.'\r\n            });\r\n        } else {\r\n            if (employeeId) {\r\n                const pondByManage: any = await this.pondUserRolesServices.models.findAll({\r\n                    where: {\r\n                        userId: employeeId\r\n                    }\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Có lỗi xảy ra, vui lòng thử lại sau.'\r\n                    });\r\n                });\r\n                const query: FindOptions<any> = {\r\n                    include: [],\r\n                    where: {}\r\n                };\r\n                if (pondByManage.length) {\r\n                    query.where = {\r\n                        userId,\r\n                        pondId: {\r\n                            [this.sequeliz.Op.notIn]: pondByManage.map((e: any) => e.pondId)\r\n                        }\r\n                    };\r\n                } else {\r\n                    query.where = {\r\n                        userId,\r\n                    };\r\n                }\r\n                this.pondsServices.models.findAll(query).then(async (res: any[]) => {\r\n                    if (!res.length) {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: 'Không tìm thấy ao.',\r\n                            ponds: []\r\n                        });\r\n                    } else {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: '',\r\n                            ponds: res\r\n                        });\r\n                    }\r\n                }).catch(e => {\r\n                    e;\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã có lỗi xảy ra.'\r\n                    });\r\n                });\r\n            } else {\r\n                return response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra.'\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n","export const addPondPrepareSchema = {\r\n    type: 'object',\r\n    properties: {\r\n        pondId: {\r\n            required: true,\r\n            type: ['number', 'string']\r\n        },\r\n        ownerId: {\r\n            required: true,\r\n            type: ['number', 'string']\r\n        },\r\n        pondPrepareName: {\r\n            required: true,\r\n            type: 'string'\r\n        },\r\n        detailsOfPrepare: {\r\n            required: true,\r\n            type: 'array',\r\n            items: {\r\n                type: 'object',\r\n                properties: {\r\n                    storageId: 'number',\r\n                    quantity: {\r\n                        type: 'integer',\r\n                        minimum: 1\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    additionalProperties: false\r\n};\r\n","export const addSeasonSchema = {\r\n    type: 'object',\r\n    properties: {\r\n        seasonName: {\r\n            require: true,\r\n            type: ['string', 'number']\r\n        }\r\n    },\r\n    additionalProperties: false\r\n};\r\n\r\nexport const updateSeasonsSchema = {\r\n    type: 'object',\r\n    properties: {\r\n        seasonName: {\r\n            require: false,\r\n            type: ['string', 'number']\r\n        },\r\n        seasonId: {\r\n            require: false,\r\n            type: ['string', 'number'],\r\n            minimum: 0\r\n        },\r\n        seasonUUId: {\r\n            require: false,\r\n            type: ['string'],\r\n            minimum: 36,\r\n            maximum: 36\r\n        },\r\n        status: {\r\n            require: false,\r\n            type: ['string', 'number'],\r\n            enum: ['0', '1', 0, 1]\r\n        },\r\n        additionalProperties: false\r\n    }\r\n};\r\n","export const addPondSchema = {\r\n    type: 'object',\r\n    properties: {\r\n        pondName: {\r\n            required: true,\r\n            type: 'string',\r\n            maxlenght: 50\r\n        },\r\n        pondCreatedDate: {\r\n            required: true,\r\n            type: 'string',\r\n            pattern: /^(?![+-]?\\d{4,5}-?(?:\\d{2}|W\\d{2})T)(?:|(\\d{4}|[+-]\\d{5})-?(?:|(0\\d|1[0-2])(?:|-?([0-2]\\d|3[0-1]))|([0-2]\\d{2}|3[0-5]\\d|36[0-6])|W([0-4]\\d|5[0-3])(?:|-?([1-7])))(?:(?!\\d)|T(?=\\d)))(?:|([01]\\d|2[0-4])(?:|:?([0-5]\\d)(?:|:?([0-5]\\d)(?:|\\.(\\d{3})))(?:|[zZ]|([+-](?:[01]\\d|2[0-4]))(?:|:?([0-5]\\d)))))$/\r\n        },\r\n        pondArea: {\r\n            required: true,\r\n            type: 'number',\r\n            minimum: 0\r\n        },\r\n        pondDepth: {\r\n            required: true,\r\n            type: 'number',\r\n            minimum: 0\r\n        },\r\n        createCost: {\r\n            required: true,\r\n            type: 'number',\r\n            minimum: 0\r\n        },\r\n        pondLatitude: {\r\n            required: false,\r\n            type: ['number', null]\r\n        },\r\n        pondLongitude: {\r\n            required: false,\r\n            type: ['number', null]\r\n        },\r\n        status: {\r\n            required: true,\r\n            type: ['number'],\r\n            enum: [0, 1, 2]\r\n        }\r\n    },\r\n    additionalProperties: false\r\n};\r\n","import { isUUId4 } from '../common';\r\n\r\nexport const updatePondDiariesSchema = {\r\n    type: 'object',\r\n    properties: {\r\n        pondDiaryUUId: {\r\n            type: 'string',\r\n            required: true,\r\n            pattern: isUUId4\r\n        },\r\n        diaryName: {\r\n            required: false,\r\n            type: ['string']\r\n        },\r\n        fisheryQuantity: {\r\n            required: false,\r\n            type: ['number'],\r\n            minimum: 0\r\n        },\r\n        healthOfFishery: {\r\n            required: false,\r\n            type: ['string']\r\n        },\r\n        pondVolume: {\r\n            required: false,\r\n            type: ['number'],\r\n            minimum: 0\r\n        },\r\n        diedFishery: {\r\n            required: false,\r\n            type: ['integer'],\r\n            minimum: 0\r\n        },\r\n        notes: {\r\n            required: false,\r\n            type: ['string', 'null']\r\n        }\r\n    },\r\n    additionalProperties: true\r\n};\r\n","export * from './seasons.route';\r\n","import { Season } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, SeasonServices, UserRolesServices, UserServives, PondsServices } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { Transaction, FindOptions } from 'sequelize';\r\nimport { addSeasonSchema, updateSeasonsSchema } from '../../schemas';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class SeasonRoute extends BaseRoute {\r\n    public static path = '/seasons';\r\n    private static instance: SeasonRoute;\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private pondsServices: PondsServices = new PondsServices();\r\n    private userServives: UserServives = new UserServives();\r\n    private userRolesServices: UserRolesServices = new UserRolesServices();\r\n\r\n    /**\r\n     * @class SeasonRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!SeasonRoute.instance) {\r\n            SeasonRoute.instance = new SeasonRoute();\r\n        }\r\n        return SeasonRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[SeasonRoute] Creating season route.');\r\n\r\n        // add route\r\n        this.router.get('/gets', Authentication.isLogin, this.getSeasons);\r\n        this.router.get('/gets/:seasonUUId', Authentication.isLogin, this.getSeasonByUUId);\r\n        this.router.post('/add', Authentication.isLogin, Authentication.isBoss, this.addSeason);\r\n        this.router.put('/update', Authentication.isLogin, Authentication.isBoss, this.updateSeason);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, SeasonRoute.path);\r\n    }\r\n\r\n    /**\r\n     * Thêm mới vụ với điều kiện:\r\n     * - Mỗi user chỉ có 1 vụ có status 0 trong tổng số vụ\r\n     * - Tất cả ao đều được thu hoạch xong\r\n     *\r\n     * Cập nhật lại bảng Ponds:\r\n     * - status\r\n     * - isFed\r\n     * - isDiary\r\n     */\r\n    private addSeason = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonName } = request.body;\r\n        const validate: any = this.validator(addSeasonSchema);\r\n        const filter: any = this.validator.filter(addSeasonSchema);\r\n        const filtered: any = filter(request.body);\r\n        const validater: boolean = validate(filtered);\r\n        if (validater) {\r\n            // start authozation info\r\n            const token: string = request.headers.authorization.split(' ')[1];\r\n            const deToken: any = Authentication.detoken(token);\r\n            const { userId } = deToken;\r\n\r\n            const wasHarvest: any = await this.pondsServices.models.findAll({\r\n                where: {\r\n                    userId,\r\n                    status: 1\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, vui lòng thử lại sau!'\r\n                });\r\n            });\r\n            // Còn vụ chưa thu hoạch\r\n            if (!!wasHarvest.length) {\r\n                return response.status(200).json({\r\n                    success: false,\r\n                    message: 'Bạn không thể thêm vụ nuôi mới khi còn ao chưa thu hoạch.',\r\n                    wasHarvest: false\r\n                });\r\n            }\r\n            this.sequeliz.transaction().then(async (t: Transaction) => {\r\n                const resetStatus: any = await this.pondsServices.models.update({\r\n                    status: 0,\r\n                    isFed: 0,\r\n                    isDiary: 0\r\n                }, {\r\n                        where: {\r\n                            userId,\r\n                            status: 1\r\n                        },\r\n                        transaction: t\r\n                    }).catch(e => {\r\n                        return t.rollback();\r\n                    });\r\n                const onUpdate: any = await this.seasonServices.models.update({\r\n                    status: 1\r\n                }, {\r\n                        where: {\r\n                            userId,\r\n                            status: 0\r\n                        },\r\n                        returning: true,\r\n                        transaction: t\r\n                    }).catch(e => {\r\n                        return t.rollback();\r\n                    });\r\n\r\n                if (onUpdate) {\r\n                    const season = new Season();\r\n                    season.setSeason(null, uuidv4(), userId, seasonName, 0);\r\n                    season.seasonServices.models.create(season, {\r\n                        transaction: t\r\n                    }).then((res: any) => {\r\n                        if (res) {\r\n                            response.status(200).json({\r\n                                success: true,\r\n                                message: 'Thêm vụ thành công!',\r\n                                season: res\r\n                            });\r\n                            t.commit();\r\n                        }\r\n                    }).catch(e => {\r\n                        return t.rollback();\r\n                    });\r\n                } else {\r\n                    return t.rollback();\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Có lỗi xảy ra vui lòng kiểm tra lại!'\r\n                });\r\n            });\r\n        } else {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: 'Vui lòng cung cấp đúng tên vụ.'\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get All vụ theo user\r\n     * chức năng của admin\r\n     */\r\n    private getSeasons = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { present } = request.query;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n\r\n        const query: FindOptions<any> = {\r\n            where: {\r\n                userId: isBoss ? userId : ownerId\r\n            },\r\n            order: [\r\n                ['createdDate', 'DESC']\r\n            ]\r\n        };\r\n\r\n        if(!!present) {\r\n            query.where = {\r\n                ...query.where,\r\n                status: 0\r\n            };\r\n        }\r\n\r\n        this.seasonServices.models.findAll(query).then(ss => {\r\n            if (ss) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    seasons: ss\r\n                });\r\n\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Bạn không có vụ nào được kích hoạt, vui lòng kích hoạt một vụ mùa trong hệ thống.',\r\n                    seasons: null\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            e;\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xãy ra, xin vui lòng thử lại!'\r\n            });\r\n        });\r\n    }\r\n\r\n    private updateSeason = async (request: Request, response: Response, next: NextFunction) => {\r\n        // validate\r\n        const validate: any = this.validator(updateSeasonsSchema);\r\n        const filter: any = this.validator.filter(updateSeasonsSchema);\r\n        const filtered: any = filter(request.body);\r\n        const validater: boolean = validate(filtered);\r\n        if(validater) {\r\n            const { seasonId, seasonUUId, seasonName, status } = request.body;\r\n            const data: any = {\r\n                ...(seasonName ? {seasonName} : {}),\r\n                ...(status ? {status} : {}),\r\n            };\r\n            this.seasonServices.models.update(data, {\r\n                where: {\r\n                    [this.sequeliz.Op.or]: [\r\n                        {seasonId},\r\n                        {seasonUUId}\r\n                    ]\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, vui lòng thử lại sau!'\r\n                });\r\n            }).then(res => {\r\n                if(res) {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Cập nhật thành công!'\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Thất bại.'\r\n                    });\r\n                }\r\n            });\r\n        } else {\r\n            console.log(validate.error);\r\n        }\r\n    }\r\n\r\n    private getSeasonByUUId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonUUId } = request.params;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n\r\n        const season: Season = new Season();\r\n        season.seasonServices.models.findOne({\r\n            include: [\r\n                {\r\n                    model: this.userServives.models,\r\n                    as: ActionAssociateDatabase.SEASON_2_USER,\r\n                    include: [\r\n                        {\r\n                            model: this.userRolesServices.models,\r\n                            as: ActionAssociateDatabase.USER_2_ROLES_GET_EMPLOYEES,\r\n                            required: false,\r\n                            where: {\r\n                                [this.sequeliz.Op.or]: [\r\n                                    {\r\n                                        bossId: userId\r\n                                    },\r\n                                    {\r\n                                        userId\r\n                                    }\r\n                                ]\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            ],\r\n            where: {\r\n                seasonUUId,\r\n                userId: ownerId\r\n            }\r\n        }).then((res: Season) => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                season: res\r\n            });\r\n        }).catch(e => {\r\n            e;\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    // private getSeasonById = async (request: Request, response: Response, next: NextFunction) => {\r\n    //     const { seasonId } = request.body;\r\n    //     this.seasonServices.models.findById(seasonId).then((res: Season) => {\r\n    //         response.status(200).json({\r\n    //             success: true,\r\n    //             message: '',\r\n    //             season: res\r\n    //         });\r\n    //     }).catch(e => {\r\n    //         response.status(200).json({\r\n    //             success: false,\r\n    //             message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n    //         });\r\n    //     });\r\n    // }\r\n\r\n    // private getPresentSeason = async (request: Request, response: Response, next: NextFunction) => {\r\n    //     const { ownerid } = request.headers;\r\n    //     this.seasonServices.models.findOne({\r\n    //         where: {\r\n    //             userId: ownerid,\r\n    //             status: 0\r\n    //         }\r\n    //     }).then((res: any) => {\r\n    //         if (res) {\r\n    //             response.status(200).json({\r\n    //                 success: true,\r\n    //                 message: '',\r\n    //                 season: res.dataValues\r\n    //             });\r\n    //         } else {\r\n    //             response.status(200).json({\r\n    //                 success: false,\r\n    //                 message: 'Bạn không có vụ nào được kích hoạt, vui lòng kích hoạt một vụ mùa trong hệ thống.'\r\n    //             });\r\n    //         }\r\n    //     }).catch(e => {\r\n    //         response.status(200).json({\r\n    //             success: false,\r\n    //             message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n    //         });\r\n    //     });\r\n    // }\r\n}\r\n","export * from './pondPrepare.route';\r\n","import { PondPrepare, PondPrepareDetail, Storage, Pond, SeasonsAndPond, Incurred } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, PondPrepareServices, SeasonAndPondServices, SeasonServices, PondsServices, IncurredsServices, PondPrepareDetailsServices, StoregeServices, MaterialServives, UserServives } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { ActionAssociateDatabase, defaultImage } from '../../common';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { Transaction } from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport { addPondPrepareSchema } from '../../schemas';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class PondPrepareRoute extends BaseRoute {\r\n    public static path = '/pondPrepares';\r\n    private static instance: PondPrepareRoute;\r\n    private pondPrepareServices: PondPrepareServices = new PondPrepareServices();\r\n    private seasonAndPondServices: SeasonAndPondServices = new SeasonAndPondServices();\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private pondsServices: PondsServices = new PondsServices();\r\n    private incurredsServices: IncurredsServices = new IncurredsServices();\r\n    private pondPrepareDetailsServices: PondPrepareDetailsServices = new PondPrepareDetailsServices();\r\n    private storegeServices: StoregeServices = new StoregeServices();\r\n    private userServives: UserServives = new UserServives();\r\n    /**\r\n     * @class PondPrepareRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!PondPrepareRoute.instance) {\r\n            PondPrepareRoute.instance = new PondPrepareRoute();\r\n        }\r\n        return PondPrepareRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[PondPrepareRoute] Creating action preparing of pond route.');\r\n\r\n        // add route pond prepare\r\n        this.router.post('/add', Authentication.isLogin, this.addPrepare);\r\n        this.router.post('/addNew', Authentication.isLogin, this.addNewPrepare);\r\n        this.router.post('/add/exiting-pond', Authentication.isLogin, this.addPrepareOldPond);\r\n        this.router.post('/gets', Authentication.isLogin, this.getPondPrepares);\r\n        this.router.post('/gets/uuid', Authentication.isLogin, this.getPondPrepareByPondPrePareUUId);\r\n        this.router.put('/update', Authentication.isLogin, this.updatePondPrepare);\r\n\r\n        // add route incurred\r\n        this.router.post('/incurreds/add', Authentication.isLogin, this.addIncurred);\r\n        this.router.post('/incurreds/get/uuid', Authentication.isLogin, this.getIncurredByIncurredUUId);\r\n        this.router.put('/incurreds/update', Authentication.isLogin, this.updateIncurred);\r\n\r\n        // log enpoints\r\n        this.logEndpoints(this.router, PondPrepareRoute.path);\r\n    }\r\n\r\n    private getPondPrepares = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonId, pondId } = request.body;\r\n        this.pondPrepareServices.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.pondPrepareDetailsServices.models,\r\n                    as: ActionAssociateDatabase.POND_PREPARE_2_POND_PREPARE_DETAILS,\r\n                    required: false,\r\n                    include: [\r\n                        {\r\n                            model: this.storegeServices.models,\r\n                            as: ActionAssociateDatabase.POND_PREPARE_DETAIL_2_STORAGE\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    model: this.incurredsServices.models,\r\n                    required: false,\r\n                    as: ActionAssociateDatabase.POND_PREPARE_2_INCURREDS,\r\n                    include: [\r\n                        {\r\n                            model: this.userServives.models,\r\n                            as: ActionAssociateDatabase.INCURREDS_TO_USER,\r\n                            attributes: ['userId', 'userUUId', 'lastname', 'firstname', 'username', 'createdDate', 'createdBy']\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    model: this.seasonAndPondServices.models,\r\n                    as: ActionAssociateDatabase.POND_PREPARE_2_SEASON_AND_POND,\r\n                    where: {\r\n                        pondId,\r\n                        seasonId\r\n                    }\r\n                }\r\n            ]\r\n        }).then((res) => {\r\n            if (!res.length) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy nhật ký chuẩn bị ao của ao này.'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    pondPrepares: res\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private getPondPrepareByPondPrePareUUId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondPrepareUUId } = request.body;\r\n        this.pondPrepareServices.models.findOne({\r\n            where: {\r\n                pondPrepareUUId\r\n            }\r\n        }).then(res => {\r\n            if (!res) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy nhật ký chuẩn bị ao.'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    pondPrepare: res\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Chức năng click vào 1 đợt chuẩn bị cụ thể\r\n     */\r\n    private getById = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondprepareid } = request.headers;\r\n        const pondPrepare: PondPrepare = new PondPrepare();\r\n        pondPrepare.setPondPrepareId = (pondprepareid as any) - 0;\r\n        pondPrepare.getById(pondPrepare.getPondPrepareId).then(res => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                pondPrepare: res\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Không có thông tin của đợt chuẩn bị này, vui lòng kiểm tra lại, cảm ơn!'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Update tên vụ\r\n     */\r\n    private updatePondPrepare = async (request: Request, response: Response, next: NextFunction) => {\r\n        const pondPrepare: PondPrepare = new PondPrepare();\r\n        const { pondPrepareId, pondprepareName } = request.body;\r\n        if (!pondPrepareId) {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Hành động không khuyến khích, vui lòng quay lại sau.'\r\n            });\r\n            return response.end();\r\n        }\r\n        pondPrepare.setPondPrepareId = pondPrepareId;\r\n        pondPrepare.setPondprepareName = pondprepareName;\r\n        pondPrepare.update().then(res => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: 'Cập nhật thành công.'\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau, cảm ơn!'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Thêm hoạt động chuẩn bị - transaction cũ\r\n     */\r\n    private addPrepare = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondId, ownerId, pondPrepareId, storageId, quantity, seasonAndPondId } = request.body;\r\n        if (!seasonAndPondId) {\r\n            const seasonAndPond: any = await this.seasonAndPondServices.models.findOne({\r\n                include: [\r\n                    {\r\n                        model: this.seasonServices.models,\r\n                        as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                        where: {\r\n                            userId: ownerId,\r\n                            status: 0\r\n                        },\r\n                        attributes: []\r\n                    }\r\n                ],\r\n                where: {\r\n                    pondId\r\n                },\r\n                attributes: ['seasonAndPondId']\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                });\r\n            });\r\n            return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n                const storage: Storage = new Storage();\r\n                const str: any = await storage.storegeServices.models.update(\r\n                    {\r\n                        quantityStorages: this.sequeliz.literal(`quantityStorages - ${quantity}`)\r\n                    },\r\n                    {\r\n                        where: {\r\n                            storageId\r\n                        },\r\n                        transaction: t\r\n                    }\r\n                ).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã xảy ra lỗi vui lòng thử lại sau.',\r\n                    });\r\n                    t.rollback();\r\n                });\r\n                if (str) {\r\n                    const pondPrepareDetail: PondPrepareDetail = new PondPrepareDetail();\r\n                    pondPrepareDetail.setPondpreparedetails(null, uuidv4(), pondPrepareId, storageId, quantity);\r\n                    pondPrepareDetail.pondPrepareDetailsServices.models.create(pondPrepareDetail, {\r\n                        transaction: t\r\n                    }).then(res => {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: 'Thêm thành công.'\r\n                        });\r\n                        t.commit();\r\n                    }).catch(e => {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.',\r\n                            e\r\n                        });\r\n                        t.rollback();\r\n                    });\r\n                }\r\n            });\r\n        } else {\r\n            return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n                const storage: Storage = new Storage();\r\n                const str: any = await storage.storegeServices.models.update(\r\n                    {\r\n                        quantityStorages: this.sequeliz.literal(`quantityStorages - ${quantity}`)\r\n                    },\r\n                    {\r\n                        where: {\r\n                            storageId\r\n                        },\r\n                        transaction: t\r\n                    }\r\n                ).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã xảy ra lỗi vui lòng thử lại sau.',\r\n                    });\r\n                    t.rollback();\r\n                });\r\n                if (str) {\r\n                    const pondPrepareDetail: PondPrepareDetail = new PondPrepareDetail();\r\n                    pondPrepareDetail.setPondpreparedetails(null, uuidv4(), pondPrepareId, storageId, quantity);\r\n                    pondPrepareDetail.pondPrepareDetailsServices.models.create(pondPrepareDetail, {\r\n                        transaction: t\r\n                    }).then(res => {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: 'Thêm thành công.'\r\n                        });\r\n                        t.commit();\r\n                    }).catch(e => {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.',\r\n                            e\r\n                        });\r\n                        t.rollback();\r\n                    });\r\n                }\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    private addPrepareOldPond = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondId, ownerId, pondPrepareName, detailsOfPrepare } = request.body;\r\n        const validate: any = this.validator(addPondPrepareSchema);\r\n        const filter: any = this.validator.filter(addPondPrepareSchema);\r\n        const filtered: any = filter(request.body);\r\n        const validater: boolean = validate(filtered);\r\n        if (validater) {\r\n            const snp: any = await this.seasonAndPondServices.models.findOne({\r\n                include: [\r\n                    {\r\n                        model: this.seasonServices.models,\r\n                        as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                        where: {\r\n                            userId: ownerId,\r\n                            status: 0\r\n                        },\r\n                        attributes: []\r\n                    }\r\n                ],\r\n                where: {\r\n                    pondId\r\n                },\r\n                attributes: ['seasonAndPondId']\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                });\r\n            });\r\n            if (!snp) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                });\r\n            } else {\r\n                return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n                    const pondPrepare: PondPrepare = new PondPrepare();\r\n                    pondPrepare.setPondprepare(null, uuidv4(), snp.seasonAndPondId, pondPrepareName);\r\n                    const pp: any = await pondPrepare.pondPrepareServices.models.create(pondPrepare, {\r\n                        transaction: t\r\n                    }).catch(e => {\r\n                        t.rollback();\r\n                    });\r\n                    if (pp) {\r\n                        const successArr: any[] = [];\r\n                        for (const detail of detailsOfPrepare) {\r\n                            const storage: Storage = new Storage();\r\n                            const str: any = await storage.storegeServices.models.update(\r\n                                {\r\n                                    quantityStorages: this.sequeliz.literal(`quantityStorages - ${detail.quantity}`)\r\n                                },\r\n                                {\r\n                                    where: {\r\n                                        storageId: detail.storageId\r\n                                    },\r\n                                    transaction: t\r\n                                }\r\n                            ).catch(e => {\r\n                                if (e.message === 'FailQuantity') {\r\n                                    response.status(200).json({\r\n                                        success: false,\r\n                                        message: 'Số lượng cơ sở vật chất trong kho không đủ.'\r\n                                    });\r\n                                } else {\r\n                                    response.status(200).json({\r\n                                        success: false,\r\n                                        message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.',\r\n                                    });\r\n                                }\r\n                            });\r\n                            if (!!str) {\r\n                                const pondPrepareDetail: PondPrepareDetail = new PondPrepareDetail();\r\n                                pondPrepareDetail.setPondpreparedetails(null, uuidv4(), pp.pondPrepareId, detail.storageId, detail.quantity);\r\n                                const ppd: any = await pondPrepareDetail.pondPrepareDetailsServices.models.create(pondPrepareDetail, {\r\n                                    transaction: t\r\n                                });\r\n                                if (ppd) {\r\n                                    successArr.push(1);\r\n                                }\r\n                            }\r\n                        }\r\n                        if (detailsOfPrepare.length === successArr.length) {\r\n                            t.commit();\r\n                            response.status(200).json({\r\n                                success: true,\r\n                                message: 'Thêm thành công.'\r\n                            });\r\n                        } else {\r\n                            return t.rollback();\r\n                        }\r\n                    } else {\r\n                        return t.rollback();\r\n                    }\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.',\r\n                    });\r\n                });\r\n            }\r\n        } else {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Số lượng là số nguyên và lớn hơn 1, vui lòng nhập lại!'\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Thêm hoạt động chuẩn bị ao\r\n     * Sau khi quá trình thêm kết thúc người dùng sẽ có một ao mới\r\n     */\r\n    private addNewPrepare = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondPrepareId, pondPrepareName, detailsOfPrepare } = request.body; // init\r\n        const { pondName, pondArea, pondDepth, createCost, pondLatitude, pondLongitude, status } = request.body; // Thông tin của ao mới\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n\r\n        if (!isBoss) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Bạn không đủ quyền truy cập api này.'\r\n            });\r\n        }\r\n\r\n        /** Chuẩn bị cho ao mới */\r\n        if (!pondPrepareId) {\r\n            return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n                const pond: Pond = new Pond();\r\n                pond.setPond(null, uuidv4(), ownerId, pondName, pondArea, pondDepth, createCost, DateUtil.getUTCDateTime() as any, status, status === 1 ? 1 : 0, status === 1 ? 1 : 0, defaultImage.pondImage, pondLatitude !== '' ? pondLatitude : undefined, pondLongitude !== '' ? pondLongitude : undefined);\r\n                const p: any = await this.pondsServices.models.create(pond, {\r\n                    transaction: t\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                    });\r\n                    return t.rollback();\r\n                });\r\n                if (!p) {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Lỗi dữ liệu đường truyền, vui lòng thử lại sau'\r\n                    });\r\n                    return t.rollback();\r\n                } else {\r\n                    const ss: any = await this.seasonServices.models.findOne({\r\n                        where: {\r\n                            userId: ownerId,\r\n                            status: 0\r\n                        },\r\n                        transaction: t\r\n                    }).catch(e => {\r\n                        t.rollback();\r\n                    });\r\n                    if (!ss) {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Bạn không có vụ đang kích hoạt, vui lòng kích hoạt vụ mùa để tiếp tục sử dụng hệ thống.'\r\n                        });\r\n                        return t.rollback();\r\n                    } else {\r\n                        const seasonAndPond: SeasonsAndPond = new SeasonsAndPond();\r\n                        seasonAndPond.setSeasonsAndPond(null, ss.seasonId, p.pondId);\r\n                        const snp: any = await seasonAndPond.seasonAndPondServices.models.create(seasonAndPond, {\r\n                            transaction: t\r\n                        }).catch(e => {\r\n                            return t.rollback();\r\n                        });\r\n                        if (!snp) {\r\n                            return t.rollback();\r\n                        } else {\r\n                            const pondPrepare: PondPrepare = new PondPrepare();\r\n                            pondPrepare.setPondprepare(null, uuidv4(), snp.seasonAndPondId, pondPrepareName);\r\n                            const pp: any = await pondPrepare.pondPrepareServices.models.create(pondPrepare, {\r\n                                transaction: t\r\n                            }).catch(e => {\r\n                                return t.rollback();\r\n                            });\r\n                            if (pp) {\r\n                                const successArr: any[] = [];\r\n                                for (const detail of detailsOfPrepare) {\r\n                                    const storage: Storage = new Storage();\r\n                                    const str: any = await storage.storegeServices.models.update(\r\n                                        {\r\n                                            quantityStorages: this.sequeliz.literal(`quantityStorages - ${detail.quantity}`)\r\n                                        },\r\n                                        {\r\n                                            where: {\r\n                                                storageId: detail.storageId\r\n                                            },\r\n                                            transaction: t\r\n                                        }\r\n                                    ).catch(e => {\r\n                                        if(e.message.includes('FailQuantity')) {\r\n                                            response.status(200).json({\r\n                                                success: false,\r\n                                                message: 'Không đủ số lượng trong kho.'\r\n                                            });\r\n                                        }\r\n                                        return t.rollback();\r\n                                    });\r\n                                    if (!!str) {\r\n                                        const pondPrepareDetail: PondPrepareDetail = new PondPrepareDetail();\r\n                                        pondPrepareDetail.setPondpreparedetails(null, uuidv4(), pp.pondPrepareId, detail.storageId, detail.quantity);\r\n                                        const ppd: any = await pondPrepareDetail.pondPrepareDetailsServices.models.create(pondPrepareDetail, {\r\n                                            transaction: t\r\n                                        }).catch(e => {\r\n                                            response.status(200).json({\r\n                                                success: false,\r\n                                                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.',\r\n                                            });\r\n                                            return t.rollback();\r\n                                        });\r\n                                        if (ppd) {\r\n                                            successArr.push(1);\r\n                                        } else {\r\n                                            return t.rollback();\r\n                                        }\r\n                                    }\r\n                                }\r\n                                if (detailsOfPrepare.length === successArr.length) {\r\n                                    response.status(200).json({\r\n                                        success: true,\r\n                                        message: 'Thêm thành công.'\r\n                                    });\r\n                                    return t.commit();\r\n                                }\r\n                            } else {\r\n                                return t.rollback();\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            // .catch(e => {\r\n            //     if(e.message.includes('FailQuantity')) {\r\n            //         return response.status(200).json({\r\n            //             success: false,\r\n            //             message: 'Không đủ số lượng trong kho.'\r\n            //         });\r\n            //     } else {\r\n            //         return response.status(200).json({\r\n            //             success: false,\r\n            //             message: 'Đã xảy ra lỗi vui lòng thử lại sau.',\r\n            //         });\r\n            //     }\r\n            // });\r\n        }\r\n    }\r\n\r\n    private addIncurred = async (request: Request, response: Response, next: NextFunction) => {\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const { pondPrepareId, incurredName, value, notes } = request.body;\r\n        const incurred: Incurred = new Incurred();\r\n        incurred.setIncurred(null, uuidv4(), pondPrepareId, userId, incurredName, value, notes);\r\n        incurred.incurredsServices.models.create(incurred).then(res => {\r\n            if (!res) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: 'Thêm thành phí phát sinh thành công.'\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private updateIncurred = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { incurredUUId, incurredName, value, notes } = request.body;\r\n        this.incurredsServices.models.update({\r\n            incurredName, value, notes\r\n        }, {\r\n                where: {\r\n                    incurredUUId\r\n                },\r\n                returning: true\r\n            }).then(res => {\r\n                if (!res) {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Cập nhật thành công phí phát sinh thành công.'\r\n                    });\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                });\r\n            });\r\n    }\r\n\r\n    private getIncurredByIncurredUUId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { incurredUUId } = request.body;\r\n        this.incurredsServices.models.findOne({\r\n            where: {\r\n                incurredUUId\r\n            }\r\n        }).then(res => {\r\n            if (!res) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy thông tin chi phí phát sinh.'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    incurred: res\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './pondPrepareDetails.route';\r\n","import { PondPrepareDetail, Material } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { Transaction } from 'sequelize';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class PondPrepareDetailRoute extends BaseRoute {\r\n    public static path = '/PondPrepareDetails';\r\n    private static instance: PondPrepareDetailRoute;\r\n    /**\r\n     * @class PondPrepareDetailRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!PondPrepareDetailRoute.instance) {\r\n            PondPrepareDetailRoute.instance = new PondPrepareDetailRoute();\r\n        }\r\n        return PondPrepareDetailRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[PondPrepareDetailRoute] Creating details of preparing pond action route.');\r\n\r\n        // add route\r\n        this.router.post('/add', Authentication.isLogin, this.addDetail);\r\n        this.router.put('/update', Authentication.isLogin, this.updatePondPrepare);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, PondPrepareDetailRoute.path);\r\n    }\r\n\r\n    /**\r\n     * Thêm lần chuẩn bị\r\n     * @params [seasonAndPondId, pondprepareName, notes?, materialId]\r\n     */\r\n    private addDetail = async (request: Request, response: Response, next: NextFunction) => {\r\n        const pondPrepareDetail: PondPrepareDetail = new PondPrepareDetail();\r\n        const { pondPrepareId, materialId, quantity } = request.body;\r\n        pondPrepareDetail.setPondpreparedetails(undefined, uuidv4(), pondPrepareId, materialId, quantity);\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            const material = new Material();\r\n            return material.materialServives.models.update({\r\n                quantity: this.sequeliz.literal(`quantity - ${ quantity }`),\r\n            }, {\r\n                where: {\r\n                    materialId\r\n                },\r\n                transaction: t\r\n            }).then(async () => {\r\n                return pondPrepareDetail.pondPrepareDetailsServices.models.create(pondPrepareDetail, { transaction: t }).then(() => {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Thao tác thành công.'\r\n                    });\r\n                    return t.commit();\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Có lỗi xảy ra, chưa thêm được nhật ký chuẩn bị, xin thử lại, cảm ơn!'\r\n                    });\r\n                });\r\n            }).catch(e => {\r\n                t.rollback();\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Trong kho không đủ số lượng, vui lòng kiểm tra lại, cảm ơn!'\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    private updatePondPrepare = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { materialId, pondPrepareId, quantityOld, quantityNew, pondPrepareDetailId } = request.body;\r\n        const quantity = (quantityOld * 1) - (quantityNew * 1);\r\n        const pondPrepareDetail: PondPrepareDetail = new PondPrepareDetail();\r\n        pondPrepareDetail.setPondpreparedetails(pondPrepareDetailId, undefined, pondPrepareId, materialId, quantity);\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            const material = new Material();\r\n            return material.materialServives.models.update({\r\n                quantity: this.sequeliz.literal(`quantity + ${ quantity }`),\r\n            }, {\r\n                where: {\r\n                    materialId\r\n                },\r\n                transaction: t\r\n            }).then(async () => {\r\n                return pondPrepareDetail.pondPrepareDetailsServices.models.update(pondPrepareDetail, {\r\n                    where: {\r\n                        // pondPrepareDetailId: pondPrepareDetail.getPondPrepareDetailId,\r\n                        // [material.materialServives.Op.any]: {\r\n                        //     createdDate:\r\n                        // }\r\n                    },\r\n                    transaction: t\r\n                }).then(() => {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Cập nhật thành công!'\r\n                    });\r\n                    return t.commit();\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Có lỗi xảy ra, vui lòng thử lại, cảm ơn!'\r\n                    });\r\n                    t.rollback();\r\n                });\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Trong kho không đủ số lượng, vui lòng kiểm tra lại, cảm ơn!'\r\n                });\r\n                t.rollback();\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './storages.route';\r\n","import { Storage, Coupon, Material } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, StoregeServices, StoregeOwnwerServices, UserRolesServices, UserServives, SeasonServices, CouponServives, MaterialServives, BoughtBreedDetailsServives, BreedServives } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { Transaction, FindOptions } from 'sequelize';\r\n\r\n/**\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class StorageRoute extends BaseRoute {\r\n    public static path = '/storages';\r\n    private static instance: StorageRoute;\r\n    private storegeOwnwerServices: StoregeOwnwerServices = new StoregeOwnwerServices();\r\n    private userRolesServices: UserRolesServices = new UserRolesServices();\r\n    private userServives: UserServives = new UserServives();\r\n    private storegeServices: StoregeServices = new StoregeServices();\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private couponServives: CouponServives = new CouponServives();\r\n    private materialServives: MaterialServives = new MaterialServives();\r\n    private boughtBreedDetailsServives: BoughtBreedDetailsServives = new BoughtBreedDetailsServives();\r\n    private breedServives: BreedServives = new BreedServives();\r\n    /**\r\n     * @class StorageRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!StorageRoute.instance) {\r\n            StorageRoute.instance = new StorageRoute();\r\n        }\r\n        return StorageRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[StorageRoute] Creating storage route.');\r\n\r\n        // add route\r\n        this.router.get('/gets', Authentication.isLogin, this.getStorages);\r\n        this.router.get('/gets/:storageId', Authentication.isLogin, this.getStorageById);\r\n        this.router.get('/coupons/gets/:seasonId', Authentication.isLogin, this.getCoupon);\r\n        this.router.post('/add', Authentication.isLogin, this.addStorage);\r\n        this.router.put('/update', Authentication.isLogin, this.updateStorage);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, StorageRoute.path);\r\n    }\r\n\r\n    private addStorage = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { couponId, itemArr } = request.body;\r\n\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n\r\n        this.userServives.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.userRolesServices.models,\r\n                    as: ActionAssociateDatabase.USER_2_ROLES_GET_EMPLOYEES,\r\n                    required: false,\r\n                    where: {\r\n                        [this.sequeliz.Op.or]: [\r\n                            {\r\n                                userId\r\n                            },\r\n                            {\r\n                                bossId: userId\r\n                            },\r\n                        ],\r\n                        roles: 2\r\n                    } as any\r\n                },\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.USER_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    }\r\n                }\r\n            ]\r\n        } as any).then(res => {\r\n            if (!res.length) {\r\n                return response.status(200).json({\r\n                    success: false,\r\n                    message: 'Bạn không có vụ nào đang hoạt động, vui lòng thêm một vụ và quay lại sau.'\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Bạn không có quyền truy cập api này.'\r\n            });\r\n        });\r\n\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            const boss: any = await this.storegeOwnwerServices.models.findOne({\r\n                include: [\r\n                    {\r\n                        model: this.userServives.models,\r\n                        as: ActionAssociateDatabase.OWNER_TO_USER,\r\n                        include: [\r\n                            {\r\n                                model: this.seasonServices.models,\r\n                                as: ActionAssociateDatabase.USER_2_SEASON,\r\n                                where: {\r\n                                    userId: ownerId,\r\n                                    status: 0\r\n                                }\r\n                            },\r\n                            {\r\n                                model: this.userRolesServices.models,\r\n                                as: ActionAssociateDatabase.USER_2_ROLES_GET_EMPLOYEES,\r\n                                required: false,\r\n                                where: {\r\n                                    [this.sequeliz.Op.or]: [\r\n                                        {\r\n                                            userId\r\n                                        },\r\n                                        {\r\n                                            bossId: userId\r\n                                        },\r\n                                    ],\r\n                                    roles: 2\r\n                                } as any\r\n                            }\r\n                        ],\r\n                        attributes: ['userId', 'userUUId', 'lastname', 'firstname', 'username', 'createdDate', 'createdBy']\r\n                    }\r\n                ],\r\n                where: {\r\n                    userId: ownerId\r\n                },\r\n                transaction: t\r\n            });\r\n            if (boss && boss.user.seasons.length) {\r\n                const coupon: Coupon = new Coupon();\r\n                coupon.setUserId = userId;\r\n                coupon.setSeasonId = boss.user.seasons[0].seasonId;\r\n                const cp: any = await coupon.couponServives.models.create(coupon, {\r\n                    transaction: t\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Lỗi xác thực người dùng, vui lòng liên hệ nhà cung cấp để được hỗ trợ.'\r\n                    });\r\n                    t.rollback();\r\n                });\r\n                if (cp) {\r\n                    const result: any[] = [];\r\n                    for (const item of itemArr) {\r\n                        const storage: Storage = new Storage();\r\n                        if (typeof item.product === 'string')/* Là vật phẩm mới */ {\r\n                            storage.setStorages(null, uuidv4(), boss.storageOwnerId, item.product, item.quantity, item.unit, item.type, item.descriptions);\r\n                            const sto: any = await storage.storegeServices.models.create(storage, {\r\n                                transaction: t\r\n                            }).catch(e => {\r\n                                response.status(200).json({\r\n                                    success: false,\r\n                                    message: `Thực hiện không thành công, vui lòng kiểm tra và thử lại sau.`,\r\n                                    position: item.position,\r\n                                    couponId: cp.couponId\r\n                                });\r\n                                t.rollback();\r\n                            });\r\n                            if (sto) {\r\n                                const material: Material = new Material();\r\n                                material.setMaterial(null, uuidv4(), cp.couponId, sto.storageId, item.provider, item.providerAddress, item.quantity, item.unit, item.unitPrice);\r\n                                const mat: any = await material.materialServives.models.create(material, {\r\n                                    transaction: t\r\n                                }).catch(async e => {\r\n                                    if (e.message.includes('FailWithInsertQuantityOfMaterials')) {\r\n                                        response.status(200).json({\r\n                                            success: false,\r\n                                            message: 'Lỗi nhập liệu số lượng vui lòng kiểm tra lại.',\r\n                                            position: item.position,\r\n                                            couponId: cp.couponId\r\n                                        });\r\n                                    } else {\r\n                                        response.status(200).json({\r\n                                            success: false,\r\n                                            message: `Thực hiện không thành công, vui lòng kiểm tra và thử lại sau.`,\r\n                                            position: item.position,\r\n                                            couponId: cp.couponId\r\n                                        });\r\n                                    }\r\n                                    t.rollback();\r\n                                });\r\n                                if (mat) {\r\n                                    result.push(mat);\r\n                                } else {\r\n                                    response.status(200).json({\r\n                                        success: false,\r\n                                        message: `Thực hiện không thành công, vui lòng kiểm tra và thử lại sau.`,\r\n                                        position: item.position,\r\n                                        couponId: cp.couponId\r\n                                    });\r\n                                    t.rollback();\r\n                                }\r\n                            } else {\r\n                                response.status(200).json({\r\n                                    success: false,\r\n                                    message: 'Thực hiện không thành công, vui lòng kiểm tra và thử lại sau.'\r\n                                });\r\n                                t.rollback();\r\n                            }\r\n                        } else/** Vật phẩm cũ */ {\r\n                            const sUpdate: any = await storage.storegeServices.models.update({\r\n                                quantityStorages: this.sequeliz.literal(`quantityStorages + ${item.quantity}`)\r\n                            }, {\r\n                                    where: {\r\n                                        storageId: item.product.storageId,\r\n                                        unit: item.product.unit\r\n                                    },\r\n                                    transaction: t\r\n                                }).catch(e => {\r\n                                    response.status(200).json({\r\n                                        success: false,\r\n                                        message: 'Lỗi nhập liệu vui lòng kiểm tra lại.'\r\n                                    });\r\n                                    t.rollback();\r\n                                });\r\n                            if (sUpdate.length > 0) {\r\n                                const material: Material = new Material();\r\n                                material.setMaterial(null, uuidv4(), cp.couponId, item.product.storageId, item.provider, item.providerAddress, item.quantity, item.product.unit, item.unitPrice);\r\n                                const mat = await material.materialServives.models.create(material, { transaction: t }).catch(e => {\r\n                                    if (e.message.includes('FailWithInsertQuantityOfMaterials')) {\r\n                                        response.status(200).json({\r\n                                            success: false,\r\n                                            message: 'Lỗi nhập liệu số lượng vui lòng kiểm tra lại.',\r\n                                            position: item.position,\r\n                                            couponId: cp.couponId\r\n                                        });\r\n                                    } else {\r\n                                        response.status(200).json({\r\n                                            success: false,\r\n                                            message: `Thực hiện không thành công, vui lòng kiểm tra và thử lại sau.`,\r\n                                            position: item.position,\r\n                                            couponId: cp.couponId\r\n                                        });\r\n                                    }\r\n                                    t.rollback();\r\n                                });\r\n                                if (mat) {\r\n                                    result.push(mat);\r\n                                } else {\r\n                                    response.status(200).json({\r\n                                        success: false,\r\n                                        message: `Thực hiện không thành công, vui lòng kiểm tra và thử lại sau.`,\r\n                                        position: item.position,\r\n                                        couponId: cp.couponId\r\n                                    });\r\n                                    t.rollback();\r\n                                }\r\n                            } else {\r\n                                response.status(200).json({\r\n                                    success: false,\r\n                                    message: `Lỗi nhập liệu số lượng vui lòng kiểm tra lại.`,\r\n                                    position: item.position,\r\n                                    couponId: cp.couponId\r\n                                });\r\n                                t.rollback();\r\n                            }\r\n                        }\r\n                    }\r\n                    if (result.length === itemArr.length) {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: 'Thêm thành công.'\r\n                        });\r\n                        t.commit();\r\n                    } else {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Có lỗi xảy ra, vui lòng thử lại sau.',\r\n                            couponId: cp.couponId\r\n                        });\r\n                        t.rollback();\r\n                    }\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Thực hiện không thành công, vui lòng thử lại sau.'\r\n                    });\r\n                    t.rollback();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private getStorages = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { type } = request.headers;\r\n\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy === null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n\r\n        this.storegeServices.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.storegeOwnwerServices.models,\r\n                    as: ActionAssociateDatabase.STORAGE_2_OWNER,\r\n                    include: [\r\n                        {\r\n                            model: this.userServives.models,\r\n                            as: ActionAssociateDatabase.OWNER_TO_USER,\r\n                            include: [\r\n                                {\r\n                                    model: this.userRolesServices.models,\r\n                                    as: ActionAssociateDatabase.USER_2_ROLES_GET_EMPLOYEES,\r\n                                    required: false\r\n                                }\r\n                            ],\r\n                            attributes: ['userId', 'userUUId', 'lastname', 'firstname', 'username', 'createdDate', 'createdBy']\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    model: this.materialServives.models,\r\n                    as: ActionAssociateDatabase.STORAGE_2_MATERIAL,\r\n                    include: [\r\n                        {\r\n                            model: this.couponServives.models,\r\n                            as: ActionAssociateDatabase.MATERIAL_2_COUPON\r\n                        }\r\n                    ]\r\n                }\r\n            ],\r\n            where: {\r\n                [this.sequeliz.Op.or]: [\r\n                    {\r\n                        '$owner.userId$': userId,\r\n                    },\r\n                    {\r\n                        '$owner->user->employees.userId$': userId,\r\n                        '$owner->user->employees.roles$': 2\r\n                    },\r\n                    {\r\n                        '$owner->user->employees.userId$': userId,\r\n                        '$owner->user->employees.roles$': 1\r\n                    }\r\n                ],\r\n                type: (type as any) - 0\r\n            } as any\r\n        }).then((s: any) => {\r\n            if (!s.length) {\r\n                return response.status(200).json({\r\n                    success: false,\r\n                    message: 'Bạn không có vật phẩm nào trong kho của mình!',\r\n                    storages: s\r\n                });\r\n            }\r\n            return response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                storages: s\r\n            });\r\n        }).catch(e => {\r\n            e;\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Có lỗi xảy ra, vui lòng thử lại sau!'\r\n            });\r\n        });\r\n    }\r\n\r\n    private getStorageById =  async (request: Request, response: Response, next: NextFunction) => {\r\n        //\r\n    }\r\n\r\n    private updateStorage = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { storageUUId } = request.body;\r\n    }\r\n\r\n    /**\r\n     * @method POST\r\n     */\r\n    private getCoupon = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonId } = request.params;\r\n        const query: FindOptions<any> = {\r\n            include: [\r\n                {\r\n                    model: this.materialServives.models,\r\n                    as: ActionAssociateDatabase.COUPON_2_MATERIAL,\r\n                    required: false,\r\n                    include: [\r\n                        {\r\n                            model: this.storegeServices.models,\r\n                            as: ActionAssociateDatabase.MATERIAL_2_STORAGE\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    model: this.boughtBreedDetailsServives.models,\r\n                    as: ActionAssociateDatabase.COUPON_2_BOUGHT_BREED_DETAILS,\r\n                    required: false,\r\n                    include: [\r\n                        {\r\n                            model: this.breedServives.models,\r\n                            as: ActionAssociateDatabase.BOUGHT_BREED_DETAIL_2_BREED\r\n                        }\r\n                    ]\r\n                }\r\n            ],\r\n            where: {\r\n                seasonId\r\n            }\r\n        };\r\n        this.couponServives.models.findAll(query).then(res => {\r\n            if (!res.length) {\r\n                return response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy bất kỳ lịch sử nhập kho nào.',\r\n                    coupons: res\r\n                });\r\n            }\r\n            return response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                coupons: res\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.',\r\n                e\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './breed.route';\r\n","import { Coupon } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { BoughtBreed, Breed, BoughtBreedDetail } from '../../components';\r\nimport { logger, UserRolesServices, UserServives, BreedOwnwerServices, BreedServives, SeasonServices, BoughtBreedDetailsServives, CouponServives } from '../../services';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { Transaction, FindOptions } from 'sequelize';\r\nimport * as uuidv4 from 'uuid/v4';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class BreedRoute extends BaseRoute {\r\n    public static path = '/breeds';\r\n    private static instance: BreedRoute;\r\n    private breedOwnwerServices: BreedOwnwerServices = new BreedOwnwerServices();\r\n    private userRolesServices: UserRolesServices = new UserRolesServices();\r\n    private userServives: UserServives = new UserServives();\r\n    private breedServives: BreedServives = new BreedServives();\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private boughtBreedDetailsServives: BoughtBreedDetailsServives = new BoughtBreedDetailsServives();\r\n    private couponServives: CouponServives = new CouponServives();\r\n    /**\r\n     * @class BreedRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!BreedRoute.instance) {\r\n            BreedRoute.instance = new BreedRoute();\r\n        }\r\n        return BreedRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[BreedRoute] Creating breed route.');\r\n\r\n        // add route\r\n        this.router.get('/gets', Authentication.isLogin, this.getBreed);\r\n        this.router.post('/add', Authentication.isLogin, this.addBreed);\r\n\r\n        // Log path\r\n        this.logEndpoints(this.router, BreedRoute.path);\r\n    }\r\n\r\n    addBreed = async (request: Request, response: Response) => {\r\n        const { couponId, itemArr } = request.body;\r\n\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n\r\n        // this.userServives.models.findAll({\r\n        //     include: [\r\n        //         {\r\n        //             model: this.userRolesServices.models,\r\n        //             as: ActionAssociateDatabase.USER_2_ROLES_USER,\r\n        //             required: false,\r\n        //             where: {\r\n        //                 userId\r\n        //             }\r\n        //         },\r\n        //         {\r\n        //             model: this.userRolesServices.models,\r\n        //             as: ActionAssociateDatabase.USER_2_ROLES_GET_EMPLOYEES,\r\n        //             required: false,\r\n        //             where: {\r\n        //                 bossId: userId\r\n        //             }\r\n        //         },\r\n        //         {\r\n        //             model: this.seasonServices.models,\r\n        //             as: ActionAssociateDatabase.USER_2_SEASON,\r\n        //             where: {\r\n        //                 userId,\r\n        //                 status: 0\r\n        //             }\r\n        //         }\r\n        //     ]\r\n        // } as any).then(res => {\r\n        //     if (!res.length) {\r\n        //         return response.status(200).json({\r\n        //             success: false,\r\n        //             message: 'Bạn không có vụ nào đang hoạt động, vui lòng thêm một vụ và quay lại sau.'\r\n        //         });\r\n        //     }\r\n        // }).catch(e => {\r\n        //     return response.status(200).json({\r\n        //         success: false,\r\n        //         message: 'Bạn không có quyền truy cập api này.'\r\n        //     });\r\n        // });\r\n\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            const boss: any = await this.breedOwnwerServices.models.findOne({\r\n                include: [\r\n                    {\r\n                        model: this.userServives.models,\r\n                        as: ActionAssociateDatabase.OWNER_TO_USER,\r\n                        include: [\r\n                            {\r\n                                model: this.seasonServices.models,\r\n                                as: ActionAssociateDatabase.USER_2_SEASON,\r\n                                where: {\r\n                                    userId: ownerId,\r\n                                    status: 0\r\n                                }\r\n                            },\r\n                            {\r\n                                model: this.userRolesServices.models,\r\n                                as: ActionAssociateDatabase.USER_2_ROLES_GET_EMPLOYEES,\r\n                                required: false,\r\n                                where: {\r\n                                    [this.sequeliz.Op.or]: [\r\n                                        {\r\n                                            userId\r\n                                        },\r\n                                        {\r\n                                            bossId: userId\r\n                                        },\r\n                                    ],\r\n                                    roles: 2\r\n                                } as any\r\n                            }\r\n                        ],\r\n                        attributes: ['userId', 'userUUId', 'lastname', 'firstname', 'username', 'createdDate', 'createdBy']\r\n                    }\r\n                ],\r\n                where: {\r\n                    userId: ownerId\r\n                },\r\n                transaction: t\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n                });\r\n                t.rollback();\r\n            });\r\n            // Là chủ và phiên nhập mới\r\n            if (boss && boss.user.seasons.length) {\r\n                const coupon: Coupon = new Coupon();\r\n                coupon.setUserId = userId;\r\n                coupon.setSeasonId = boss.user.seasons[0].seasonId;\r\n                const cp: any = await coupon.couponServives.models.create(coupon, {\r\n                    transaction: t\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Lỗi xác thực người dùng, vui lòng liên hệ nhà cung cấp để được hỗ trợ.'\r\n                    });\r\n                    t.rollback();\r\n                });\r\n                if (cp) {\r\n                    const result: any[] = [];\r\n                    for (const item of itemArr) {\r\n                        const breed: Breed = new Breed();\r\n                        if (typeof item.breedName === 'string') {\r\n                            breed.setBreed(null, uuidv4(), boss.ownerId, item.breedName, item.quantity, item.unit, item.loopOfBreed);\r\n                            const bre: any = await breed.breedServives.models.create(breed, {\r\n                                transaction: t\r\n                            }).catch(e => {\r\n                                response.status(200).json({\r\n                                    success: false,\r\n                                    message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n                                });\r\n                                t.rollback();\r\n                            });\r\n                            if (bre) {\r\n                                const boughtBreedDetail: BoughtBreedDetail = new BoughtBreedDetail();\r\n                                boughtBreedDetail.setBoughtBreedDetails(null, uuidv4(),cp.couponId, bre.breedId, item.quantity, item.unit, item.unitPrice, item.soldAddress, item.testingAgency, item.testingAgency);\r\n                                const mat: any = await boughtBreedDetail.boughtBreedDetailsServives.models.create(boughtBreedDetail, {\r\n                                    transaction: t\r\n                                }).catch(async e => {\r\n                                    if (e.message.includes('FailQuantityBoughtBreedDetails')) {\r\n                                        response.status(200).json({\r\n                                            success: false,\r\n                                            message: 'Lỗi nhập liệu số lượng vui lòng kiểm tra lại.',\r\n                                            position: item.position,\r\n                                            couponId: cp.couponId\r\n                                        });\r\n                                    } else {\r\n                                        response.status(200).json({\r\n                                            success: false,\r\n                                            message: `Thực hiện không thành công, vui lòng kiểm tra và thử lại sau.`,\r\n                                            position: item.position,\r\n                                            couponId: cp.couponId\r\n                                        });\r\n                                    }\r\n                                    t.rollback();\r\n                                });\r\n                                if (mat) {\r\n                                    result.push(mat);\r\n                                }\r\n                            }\r\n                        } else {\r\n                            const sUpdate: any = await breed.breedServives.models.update({\r\n                                totalQuantity: this.sequeliz.literal(`totalQuantity + ${item.quantity}`)\r\n                            }, {\r\n                                    where: {\r\n                                        breedId: item.breedName.breedId,\r\n                                        unit: item.breedName.unit\r\n                                    },\r\n                                    returning: true,\r\n                                    transaction: t\r\n                                }).catch(e => {\r\n                                    if (e.message.includes('FailQuantityBreed')) {\r\n                                        response.status(200).json({\r\n                                            success: false,\r\n                                            message: 'Lỗi nhập liệu số lượng vui lòng kiểm tra lại.',\r\n                                            position: item.position,\r\n                                            couponId: cp.couponId\r\n                                        });\r\n                                    } else {\r\n                                        response.status(200).json({\r\n                                            success: false,\r\n                                            message: `Thực hiện không thành công, vui lòng kiểm tra và thử lại sau.`,\r\n                                            position: item.position,\r\n                                            couponId: cp.couponId\r\n                                        });\r\n                                    }\r\n                                    t.rollback();\r\n                                });\r\n                            if (sUpdate.length > 0) {\r\n                                const boughtBreedDetail: BoughtBreedDetail = new BoughtBreedDetail();\r\n                                boughtBreedDetail.setBoughtBreedDetails(null, uuidv4(), cp.couponId, item.breedName.breedId, item.quantity, item.breedName.unit, item.unitPrice, item.soldAddress, item.testingAgency, item.testingAgency);\r\n                                const boughtBre = await boughtBreedDetail.boughtBreedDetailsServives.models.create(boughtBreedDetail, { transaction: t }).catch(e => {\r\n                                    if (e.message.includes('FailQuantityBoughtBreedDetails')) {\r\n                                        response.status(200).json({\r\n                                            success: false,\r\n                                            message: 'Lỗi nhập liệu số lượng vui lòng kiểm tra lại.',\r\n                                            position: item.position,\r\n                                            couponId: cp.couponId\r\n                                        });\r\n                                    } else {\r\n                                        response.status(200).json({\r\n                                            success: false,\r\n                                            message: `Thực hiện không thành công, vui lòng kiểm tra và thử lại sau.`,\r\n                                            position: item.position,\r\n                                            couponId: cp.couponId\r\n                                        });\r\n                                    }\r\n                                    t.rollback();\r\n                                });\r\n                                result.push(boughtBre);\r\n                            } else {\r\n                                t.rollback();\r\n                                response.status(200).json({\r\n                                    success: false,\r\n                                    message: `Có lỗi xảy ra.`,\r\n                                    position: item.position,\r\n                                    couponId: cp.couponId\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                    if (result.length === itemArr.length) {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: 'Thao tác thành công.'\r\n                        });\r\n                        t.commit();\r\n                    } else {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Có lỗi xảy ra, vui lòng thử lại sau.',\r\n                            couponId: cp.couponId\r\n                        });\r\n                        t.rollback();\r\n                    }\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Thực hiện không thành công, vui lòng thử lại sau.'\r\n                    });\r\n                    t.rollback();\r\n                }\r\n            }\r\n            // // Nhân viên và phiên nhập mới\r\n            // else if (!boss && !boughtBreedId) {\r\n            //     boss = await this.userRolesServices.models.findOne({\r\n            //         where: {\r\n            //             userId: deToken.userId,\r\n            //             [this.userRolesServices.Op.and]: {\r\n            //                 roles: 2\r\n            //             }\r\n            //         },\r\n            //         include: [\r\n            //             {\r\n            //                 model: this.userServives.models,\r\n            //                 as: ActionAssociateDatabase.USER_ROLES_2_USER_BOSS,\r\n            //                 include: [\r\n            //                     {\r\n            //                         model: this.breedOwnwerServices.models,\r\n            //                         as: ActionAssociateDatabase.USER_2_OWNER_BREED\r\n            //                     }\r\n            //                 ],\r\n            //                 attributes: ['userId', 'userUUId', 'lastname', 'firstname', 'username', 'createdDate', 'createdBy']\r\n            //             }\r\n            //         ],\r\n            //         transaction: t\r\n            //     }).catch(e => {\r\n            //         response.status(200).json({\r\n            //             success: false,\r\n            //             message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n            //         });\r\n            //         t.rollback();\r\n            //     });\r\n            //     if (boss) {\r\n            //         const ss: any = await this.seasonServices.models.findOne({\r\n            //             where: {\r\n            //                 userId: deToken.userId,\r\n            //                 status: 0\r\n            //             }\r\n            //         }).catch(e => {\r\n            //             response.status(200).json({\r\n            //                 success: false,\r\n            //                 message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n            //             });\r\n            //             t.rollback();\r\n            //         });\r\n            //         if (!ss) {\r\n            //             response.status(200).json({\r\n            //                 success: false,\r\n            //                 message: 'Hiện tại bạn chưa có vụ nào được kích hoạt vui lòng thêm một vụ.'\r\n            //             });\r\n            //             t.rollback();\r\n            //         } else {\r\n            //             const boughtBreed: BoughtBreed = new BoughtBreed();\r\n            //             boughtBreed.setBoughtBreedUUId = uuidv4();\r\n            //             boughtBreed.setUserId = deToken.userId;\r\n            //             boughtBreed.setSeasonId = ss.seasonId;\r\n            //             const bb: any = await boughtBreed.boughtBreedServives.models.create(boughtBreed, {\r\n            //                 transaction: t\r\n            //             });\r\n            //             if (bb) {\r\n            //                 const result: any[] = [];\r\n            //                 for (const item of itemArr) {\r\n            //                     const breed: Breed = new Breed();\r\n            //                     if (typeof item.breedName === 'string') {\r\n            //                         breed.setBreed(null, uuidv4(), boss.ownerId, item.breedName, item.quantity, item.unit, item.loopOfBreed);\r\n            //                         const bre: any = await breed.breedServives.models.create(breed, {\r\n            //                             transaction: t\r\n            //                         }).catch(e => {\r\n            //                             response.status(200).json({\r\n            //                                 success: false,\r\n            //                                 message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n            //                             });\r\n            //                             t.rollback();\r\n            //                         });\r\n            //                         if (bre) {\r\n            //                             const boughtBreedDetail: BoughtBreedDetail = new BoughtBreedDetail();\r\n            //                             boughtBreedDetail.setBoughtBreedDetails(null, uuidv4(), bb.boughtBreedId, bre.breedId, item.quantity, item.unit, item.unitPrice, item.soldAddress, item.testingAgency, item.testingAgency);\r\n            //                             const mat: any = await boughtBreedDetail.boughtBreedDetailsServives.models.create(boughtBreedDetail, {\r\n            //                                 transaction: t\r\n            //                             }).catch(async e => {\r\n            //                                 response.status(200).json({\r\n            //                                     success: false,\r\n            //                                     message: `Thực hiện không thành công, bị lỗi ở form nhập thứ ${item.position + 1}.`,\r\n            //                                     couponId: bb.boughtBreedId\r\n            //                                 });\r\n            //                                 t.rollback();\r\n            //                             });\r\n            //                             if (mat) {\r\n            //                                 result.push(mat);\r\n            //                             }\r\n            //                         }\r\n            //                     } else {\r\n            //                         const sUpdate: any = await breed.breedServives.models.update({\r\n            //                             totalQuantity: this.sequeliz.literal(`totalQuantity + ${item.quantity}`)\r\n            //                         }, {\r\n            //                                 where: {\r\n            //                                     breedId: item.breedName.breedId\r\n            //                                 },\r\n            //                                 transaction: t\r\n            //                             }).catch(e => {\r\n            //                                 response.status(200).json({\r\n            //                                     success: false,\r\n            //                                     message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n            //                                 });\r\n            //                                 t.rollback();\r\n            //                             });\r\n            //                         if (sUpdate.length > 0) {\r\n            //                             const boughtBreedDetail: BoughtBreedDetail = new BoughtBreedDetail();\r\n            //                             boughtBreedDetail.setBoughtBreedDetails(null, uuidv4(), bb.boughtBreedId, item.breedName.breedId, item.quantity, item.unit, item.unitPrice, item.soldAddress, item.testingAgency, item.testingAgency);\r\n            //                             const boughtBre = await boughtBreedDetail.boughtBreedDetailsServives.models.create(boughtBreedDetail, { transaction: t }).catch(e => {\r\n            //                                 response.status(200).json({\r\n            //                                     success: false,\r\n            //                                     message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n            //                                 });\r\n            //                                 t.rollback();\r\n            //                             });\r\n            //                             result.push(boughtBre);\r\n            //                         } else {\r\n            //                             t.rollback();\r\n            //                             response.status(200).json({\r\n            //                                 success: false,\r\n            //                                 message: `Thực hiện không thành công, bị lỗi ở form nhập thứ ${item.position + 1}.`,\r\n            //                                 position: item.position,\r\n            //                                 couponId: bb.boughtBreedId\r\n            //                             });\r\n            //                         }\r\n            //                     }\r\n            //                 }\r\n            //                 if (result.length === itemArr.length) {\r\n            //                     response.status(200).json({\r\n            //                         success: true,\r\n            //                         message: 'Thêm thành công, vui lòng đợi...'\r\n            //                     });\r\n            //                     t.commit();\r\n            //                 } else {\r\n            //                     response.status(200).json({\r\n            //                         success: false,\r\n            //                         message: 'Có lỗi xảy ra, vui lòng thử lại sau.',\r\n            //                         couponId: bb.boughtBreedId\r\n            //                     });\r\n            //                     t.rollback();\r\n            //                 }\r\n            //             }\r\n            //         }\r\n            //     } else {\r\n            //         response.status(200).json({\r\n            //             success: false,\r\n            //             message: 'Bạn chưa đủ thẩm quyền thực hiện thao tác, vui lòng liên hệ với quản lý của bạn để được hỗ trợ.'\r\n            //         });\r\n            //     }\r\n            // }\r\n            // // Nhân viên và phiên nhập cũ\r\n            // else if (!boss && boughtBreedId) {\r\n            //     boss = await this.userRolesServices.models.findOne({\r\n            //         where: {\r\n            //             userId: deToken.userId,\r\n            //             [this.userRolesServices.Op.and]: {\r\n            //                 roles: 2\r\n            //             }\r\n            //         },\r\n            //         include: [\r\n            //             {\r\n            //                 model: this.userServives.models,\r\n            //                 as: ActionAssociateDatabase.USER_ROLES_2_USER_BOSS,\r\n            //                 include: [\r\n            //                     {\r\n            //                         model: this.breedOwnwerServices.models,\r\n            //                         as: ActionAssociateDatabase.USER_2_OWNER_BREED\r\n            //                     }\r\n            //                 ],\r\n            //                 attributes: ['userId', 'userUUId', 'lastname', 'firstname', 'username', 'createdDate', 'createdBy']\r\n            //             }\r\n            //         ],\r\n            //         transaction: t\r\n            //     }).catch(e => {\r\n            //         response.status(200).json({\r\n            //             success: false,\r\n            //             message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n            //         });\r\n            //         t.rollback();\r\n            //     });\r\n            //     if (boss) {\r\n            //         const result: any[] = [];\r\n            //         for (const item of itemArr) {\r\n            //             const breed: Breed = new Breed();\r\n            //             if (typeof item.breedName === 'string') {\r\n            //                 breed.setBreed(null, uuidv4(), boss.ownerId, item.breedName, item.quantity, item.unit, item.loopOfBreed);\r\n            //                 const bre: any = await breed.breedServives.models.create(breed, {\r\n            //                     transaction: t\r\n            //                 }).catch(e => {\r\n            //                     response.status(200).json({\r\n            //                         success: false,\r\n            //                         message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n            //                     });\r\n            //                     t.rollback();\r\n            //                 });\r\n            //                 if (bre) {\r\n            //                     const boughtBreedDetail: BoughtBreedDetail = new BoughtBreedDetail();\r\n            //                     boughtBreedDetail.setBoughtBreedDetails(null, uuidv4(), boughtBreedId, bre.breedId, item.quantity, item.unit, item.unitPrice, item.soldAddress, item.testingAgency, item.testingAgency);\r\n            //                     const mat: any = await boughtBreedDetail.boughtBreedDetailsServives.models.create(boughtBreedDetail, {\r\n            //                         transaction: t\r\n            //                     }).catch(async e => {\r\n            //                         response.status(200).json({\r\n            //                             success: false,\r\n            //                             message: `Thực hiện không thành công, bị lỗi ở form nhập thứ ${item.position + 1}.`,\r\n            //                             position: item.position,\r\n            //                             boughtBreedId\r\n            //                         });\r\n            //                         t.rollback();\r\n            //                     });\r\n            //                     if (mat) {\r\n            //                         result.push(mat);\r\n            //                     }\r\n            //                 }\r\n            //             } else {\r\n            //                 const sUpdate: any = await breed.breedServives.models.update({\r\n            //                     totalQuantity: this.sequeliz.literal(`totalQuantity + ${item.quantity}`)\r\n            //                 }, {\r\n            //                         where: {\r\n            //                             breedId: item.breedName.breedId\r\n            //                         },\r\n            //                         transaction: t\r\n            //                     }).catch(e => {\r\n            //                         response.status(200).json({\r\n            //                             success: false,\r\n            //                             message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n            //                         });\r\n            //                         t.rollback();\r\n            //                     });\r\n            //                 if (sUpdate.length > 0) {\r\n            //                     const boughtBreedDetail: BoughtBreedDetail = new BoughtBreedDetail();\r\n            //                     boughtBreedDetail.setBoughtBreedDetails(null, uuidv4(), boughtBreedId, item.breedName.breedId, item.quantity, item.unit, item.unitPrice, item.soldAddress, item.testingAgency, item.testingAgency);\r\n            //                     const boughtBre = await boughtBreedDetail.boughtBreedDetailsServives.models.create(boughtBreedDetail, { transaction: t }).catch(e => {\r\n            //                         response.status(200).json({\r\n            //                             success: false,\r\n            //                             message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n            //                         });\r\n            //                         t.rollback();\r\n            //                     });\r\n            //                     result.push(boughtBre);\r\n            //                 } else {\r\n            //                     t.rollback();\r\n            //                     response.status(200).json({\r\n            //                         success: false,\r\n            //                         message: `Thực hiện không thành công, bị lỗi ở form nhập thứ ${item.position + 1}.`,\r\n            //                         position: item.position,\r\n            //                         boughtBreedId\r\n            //                     });\r\n            //                 }\r\n            //             }\r\n            //         }\r\n            //         if (result.length === itemArr.length) {\r\n            //             response.status(200).json({\r\n            //                 success: true,\r\n            //                 message: 'Thêm thành công, vui lòng đợi...'\r\n            //             });\r\n            //             t.commit();\r\n            //         } else {\r\n            //             response.status(200).json({\r\n            //                 success: false,\r\n            //                 message: 'Có lỗi xảy ra, vui lòng thử lại sau.',\r\n            //                 boughtBreedId\r\n            //             });\r\n            //             t.rollback();\r\n            //         }\r\n            //     } else {\r\n            //         response.status(200).json({\r\n            //             success: false,\r\n            //             message: 'Bạn chưa đủ thẩm quyền thực hiện thao tác, vui lòng liên hệ với quản lý của bạn để được hỗ trợ.'\r\n            //         });\r\n            //     }\r\n            // }\r\n        });\r\n    }\r\n\r\n    getBreed = async (request: Request, response: Response) => {\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy === null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n\r\n        const query: FindOptions<any> = {\r\n            include: [\r\n                {\r\n                    model: this.breedOwnwerServices.models,\r\n                    as: ActionAssociateDatabase.BREED_2_OWNER_BREED,\r\n                    include: [\r\n                        {\r\n                            model: this.userServives.models,\r\n                            as: ActionAssociateDatabase.OWNER_BREED_TO_USER,\r\n                            include: [\r\n                                {\r\n                                    model: this.userRolesServices.models,\r\n                                    as: ActionAssociateDatabase.USER_2_ROLES_GET_EMPLOYEES,\r\n                                    required: false\r\n                                }\r\n                            ],\r\n                            attributes: ['userId', 'userUUId', 'lastname', 'firstname', 'username', 'createdDate', 'createdBy']\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    model: this.boughtBreedDetailsServives.models,\r\n                    as: ActionAssociateDatabase.BREED_2_BOUGHT_BREED_DETAIL,\r\n                    include: [\r\n                        {\r\n                            model: this.couponServives.models,\r\n                            as: ActionAssociateDatabase.BOUGHT_BREED_DETAIL_2_COUPON\r\n                        }\r\n                    ]\r\n                }\r\n            ],\r\n            where: {\r\n                [this.sequeliz.Op.or]: [\r\n                    {\r\n                        '$owner.userId$': userId,\r\n                    },\r\n                    {\r\n                        '$owner->user->employees.userId$': userId,\r\n                        '$owner->user->employees.roles$': 2\r\n                    },\r\n                    {\r\n                        '$owner->user->employees.userId$': userId,\r\n                        '$owner->user->employees.roles$': 2\r\n                    }\r\n                ]\r\n            } as any\r\n        };\r\n        this.breedServives.models.findAll(query).then((res: any) => {\r\n            if (!res.length) {\r\n                return response.status(200).json({\r\n                    success: false,\r\n                    message: 'Hiện tại trong kho không có giống nào.',\r\n                    breeds: res\r\n                });\r\n            }\r\n            return response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                breeds: res\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra!'\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './stocking.route';\r\n","import { Stocking, StockingDetail } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, SeasonServices, SeasonAndPondServices, BreedServives, StockingServices, StockingDetailsServices, PondsServices, UserServives, PondUserRolesServices } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { Transaction, FindOptions, UpdateOptions } from 'sequelize';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class StockingRoute extends BaseRoute {\r\n    public static path = '/stocking';\r\n    private static instance: StockingRoute;\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private seasonAndPondServices: SeasonAndPondServices = new SeasonAndPondServices();\r\n    private breedServives: BreedServives = new BreedServives();\r\n    private stockingServices: StockingServices = new StockingServices();\r\n    private stockingDetailsServices: StockingDetailsServices = new StockingDetailsServices();\r\n    private pondsServices: PondsServices = new PondsServices();\r\n    private userServives: UserServives = new UserServives();\r\n    private pondUserRolesServices: PondUserRolesServices = new PondUserRolesServices();\r\n    /**\r\n     * @class StockingRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!StockingRoute.instance) {\r\n            StockingRoute.instance = new StockingRoute();\r\n        }\r\n        return StockingRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[StockingRoute] Creating stocking route.');\r\n\r\n        // add route\r\n        this.router.post('/add', Authentication.isLogin, this.addStocking);\r\n        this.router.post('/gets', Authentication.isLogin, this.getStocking);\r\n        this.router.post('/get/stockingDetailUUId', Authentication.isLogin, this.getStockingDetailsByStockingDetailsUUId);\r\n        this.router.put('/update', Authentication.isLogin, this.updateStockingDetailsByStockingDetailsUUId);\r\n\r\n        // log endpoint\r\n        this.logEndpoints(this.router, StockingRoute.path);\r\n    }\r\n\r\n    private addStocking = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { ownerId, pondId, breedId, stockingQuantity, phFirst, salinityFirst, notes, createdDate } = request.body;\r\n        const seasonAndPond: any = await this.seasonAndPondServices.models.findOne({\r\n            include: [\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    },\r\n                    attributes: []\r\n                }\r\n            ],\r\n            where: {\r\n                pondId\r\n            },\r\n            attributes: ['seasonAndPondId']\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        });\r\n        this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            const stocking: Stocking = new Stocking();\r\n            stocking.setStocking(null, uuidv4(), seasonAndPond.seasonAndPondId, notes, createdDate);\r\n            const st: any = await stocking.stockingServices.models.create(stocking, {\r\n                transaction: t\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                });\r\n                t.rollback();\r\n            });\r\n            if (st) {\r\n                const onUpdate: any = await this.breedServives.models.update(\r\n                    {\r\n                        totalQuantity: this.sequeliz.literal(`totalQuantity - ${stockingQuantity}`)\r\n                    },\r\n                    {\r\n                        where: {\r\n                            breedId // lấy ra từ form select get từ api breed, chỉ có breed của owner hiện tại\r\n                        }\r\n                    }\r\n                ).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                    });\r\n                    t.rollback();\r\n                });\r\n                if (onUpdate) {\r\n                    const stockingDetail: StockingDetail = new StockingDetail();\r\n                    stockingDetail.setStockingdetails(uuidv4(), breedId, st.stockingId, stockingQuantity, phFirst, salinityFirst);\r\n                    const std: any = await stockingDetail.stockingDetailsServices.models.create(stockingDetail, {\r\n                        transaction: t\r\n                    }).catch(e => {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                        });\r\n                        t.rollback();\r\n                    });\r\n                    if(!!Object.keys(std).length) {\r\n                        this.pondsServices.models.update({\r\n                            status: 1\r\n                        }, {\r\n                            where: {\r\n                                pondId\r\n                            },\r\n                            transaction: t\r\n                        }).then(res => {\r\n                            if(!!Object.keys(res).length) {\r\n                                t.commit();\r\n                                return response.status(200).json({\r\n                                    success: true,\r\n                                    message: 'Thêm nhật ký thả nuôi thành công.'\r\n                                });\r\n                            } else {\r\n                                t.rollback();\r\n                                response.status(200).json({\r\n                                    success: false,\r\n                                    message: 'Không thể thêm nhật ký thả nuôi.'\r\n                                });\r\n                            }\r\n                        }).catch(e => {\r\n                            t.rollback();\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private getStocking = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonId, ownerId } = request.body;\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        this.stockingServices.models.findAll(({\r\n            include: [\r\n                {\r\n                    model: this.seasonAndPondServices.models,\r\n                    as: ActionAssociateDatabase.STOCKING_2_SEASON_AND_POND,\r\n                    where: {\r\n                        seasonId\r\n                    },\r\n                    include: [\r\n                        {\r\n                            model: this.seasonServices.models,\r\n                            as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                            where: {\r\n                                userId: ownerId\r\n                            },\r\n                            attributes: []\r\n                        },\r\n                        {\r\n                            model: this.pondsServices.models,\r\n                            as: ActionAssociateDatabase.SEASON_AND_POND_2_POND,\r\n                            include: [\r\n                                {\r\n                                    model: this.userServives.models,\r\n                                    as: ActionAssociateDatabase.POND_2_EMPLOYEE_MAYNY_ROLES,\r\n                                    required: false,\r\n                                    attributes: []\r\n                                },\r\n                                {\r\n                                    model: this.pondUserRolesServices.models,\r\n                                    as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                                    required: false,\r\n                                    attributes: []\r\n                                }\r\n                            ]\r\n                        }\r\n                    ],\r\n                },\r\n                {\r\n                    model: this.stockingDetailsServices.models,\r\n                    as: ActionAssociateDatabase.STOCKING_2_STOCKING_DETAILS,\r\n                    include: [\r\n                        {\r\n                            model: this.breedServives.models,\r\n                            as: ActionAssociateDatabase.STOCKING_DETAILS_2_BREED\r\n                        }\r\n                    ]\r\n                }\r\n            ],\r\n            where: {\r\n                [this.sequeliz.Op.or]: [\r\n                    {\r\n                        '$seasonAndPond->ponds.userId$': deToken.userId\r\n                    },\r\n                    {\r\n                        '$seasonAndPond->ponds->users->ponduserroles.userId$': deToken.userId\r\n                    }\r\n                ]\r\n            }\r\n        } as any)).then(res => {\r\n            if (!res.length) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy nhật ký thả ao.',\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    stocking: res\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.',\r\n                e\r\n            });\r\n        });\r\n    }\r\n\r\n    private getStockingDetailsByStockingDetailsUUId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { stockingDetailUUId } = request.body;\r\n        this.stockingDetailsServices.models.findOne({\r\n            where: {\r\n                stockingDetailUUId\r\n            }\r\n        }).then(res => {\r\n            if (!res) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy hoạt động thả nuôi.'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    stockingDetails: res\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Có lỗi xảy ra.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private updateStockingDetailsByStockingDetailsUUId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { stockingDetailUUId, breedId, stockingQuantity, oldValue } = request.body;\r\n        let onUpdate: any = {};\r\n        if(stockingQuantity >=  oldValue) {\r\n            onUpdate = {\r\n                totalQuantity: this.sequeliz.literal(`totalQuantity - ${ stockingQuantity - oldValue }`)\r\n            };\r\n        } else {\r\n            onUpdate = {\r\n                totalQuantity: this.sequeliz.literal(`totalQuantity + ${ oldValue - stockingQuantity }`)\r\n            };\r\n        }\r\n        this.breedServives.models.update(onUpdate, {\r\n            where: {\r\n                breedId\r\n            }\r\n        }).then(ok => {\r\n            this.stockingDetailsServices.models.update({\r\n                stockingQuantity\r\n            }, {\r\n                where: {\r\n                    stockingDetailUUId\r\n                },\r\n                returning: true\r\n            }).then(res => {\r\n                if (!res.length) {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Thất bại, vui lòng thử lại sau.'\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Cập nhật thành công!'\r\n                    });\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Có lỗi xảy ra.'\r\n                });\r\n            });\r\n        }).catch(e => {\r\n            e;\r\n            if(e.message.includes('FailQuantityBreed')) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Số lượng không phù hợp, vui lòng kiểm tra lại!'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, vui lòng thử lại sau!'\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n","export * from './diedFishery.route';\r\n","import { DiedFishery } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, SeasonAndPondServices, SeasonServices, DiedFisherysServives } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\n\r\n/**\r\n * @api {all} /ping Died Fishery Request customer object\r\n * @apiName Died Fishery\r\n * @apiGroup Died Fishery\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class DiedFisheryRoute extends BaseRoute {\r\n    public static path = '/diedFishery';\r\n    private static instance: DiedFisheryRoute;\r\n    private seasonAndPondServices: SeasonAndPondServices = new SeasonAndPondServices();\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private diedFisherysServives: DiedFisherysServives = new DiedFisherysServives();\r\n    /**\r\n     * @class DiedFisheryRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!DiedFisheryRoute.instance) {\r\n            DiedFisheryRoute.instance = new DiedFisheryRoute();\r\n        }\r\n        return DiedFisheryRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[DiedFisheryRoute] Creating Died Fishery route.');\r\n\r\n        // add route\r\n        this.router.post('/add', Authentication.isLogin, this.addDiedFishery);\r\n        this.router.post('/gets', Authentication.isLogin, this.getDiedFishery);\r\n        this.router.post('/get/diedFisheryUUId', Authentication.isLogin, this.getDiedFisheryByDiedFisheryUUId);\r\n        this.router.put('/update', Authentication.isLogin, this.updateDiedFisheryByDiedFisheryUUId);\r\n\r\n        // log path\r\n        this.logEndpoints(this.router, DiedFisheryRoute.path);\r\n    }\r\n\r\n    //  Add DiedFishery\r\n    private addDiedFishery = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondId, ownerId, card, quantity, solutions, employee } = request.body;\r\n        const seasonAndPond: any = await this.seasonAndPondServices.models.findOne({\r\n            include: [\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    },\r\n                    attributes: []\r\n                }\r\n            ],\r\n            where: {\r\n                pondId\r\n            },\r\n            attributes: ['seasonAndPondId']\r\n        }).catch(e => {\r\n            e;\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        });\r\n        if(!!Object.keys(seasonAndPond).length) {\r\n            const diedFishery: DiedFishery = new DiedFishery();\r\n            diedFishery.setDiedfisherys(null, uuidv4(), seasonAndPond.seasonAndPondId, card, quantity, solutions, employee);\r\n            diedFishery.diedFisherysServives.models.create(diedFishery).then(res => {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: 'Thêm thành công.'\r\n                });\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                });\r\n            });\r\n        } else {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi đường truyền!'\r\n            });\r\n        }\r\n    }\r\n\r\n    private getDiedFishery = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonId, pondId, ownerId } = request.body;\r\n        this.diedFisherysServives.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.seasonAndPondServices.models,\r\n                    as: ActionAssociateDatabase.DIED_FISHERY_2_SEASON_AND_POND,\r\n                    where: {\r\n                        seasonId,\r\n                        pondId\r\n                    }\r\n                }\r\n            ],\r\n            order: [\r\n                ['createdDate', 'DESC']\r\n            ]\r\n        }).then((wastes) => {\r\n            if(!wastes.length) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy nhật ký sử lý chất thải.'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    wastes\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi, vui lòng thử lại sau.',\r\n            });\r\n        });\r\n    }\r\n\r\n    private getDiedFisheryByDiedFisheryUUId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { diedFisheryUUId } = request.body;\r\n        this.diedFisherysServives.models.findOne({\r\n            where: {\r\n                diedFisheryUUId\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi đường truyền, vui lòng thử lại sau.'\r\n            });\r\n        }).then((res: any) => {\r\n            if(!res) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy.'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    waste: res.dataValues\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    private updateDiedFisheryByDiedFisheryUUId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { diedFisheryUUId, card, quantity, solutions, employee } = request.body;\r\n        const diedFishery: DiedFishery = new DiedFishery();\r\n        diedFishery.setDiedfisherys(null, diedFisheryUUId, undefined, card, quantity, solutions, employee);\r\n        this.diedFisherysServives.models.update({ card, quantity, solutions, employee }, {\r\n            where: {\r\n                diedFisheryUUId\r\n            },\r\n            returning: true\r\n        }).then((res: any) => {\r\n            if (!res.length) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, xin vui lòng thử lại sau!'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: 'Cập nhật thông tin tăng trưởng thành công!'\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau!'\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './growths.route';\r\n","import { Growth } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, SeasonAndPondServices, GrowthsServives, SeasonServices } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { Transaction } from 'sequelize';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class GrowthsRoute extends BaseRoute {\r\n    public static path = '/growths';\r\n    private static instance: GrowthsRoute;\r\n    private growthsServives: GrowthsServives = new GrowthsServives();\r\n    private seasonAndPondServices: SeasonAndPondServices = new SeasonAndPondServices();\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    /**\r\n     * @class GrowthsRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!GrowthsRoute.instance) {\r\n            GrowthsRoute.instance = new GrowthsRoute();\r\n        }\r\n        return GrowthsRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[GrowthsRoute] Creating growth route.');\r\n\r\n        // add route\r\n        this.router.post('/add', Authentication.isLogin, this.addGrowth);\r\n        this.router.post('/gets', Authentication.isLogin, this.getGrowths);\r\n        this.router.post('/get/growthUUId', Authentication.isLogin, this.getGrowthByUUId);\r\n        this.router.put('/update', Authentication.isLogin, this.updateGrowth);\r\n\r\n        // log enpoints\r\n        this.logEndpoints(this.router, GrowthsRoute.path);\r\n    }\r\n\r\n    // Get getgrowths\r\n    private getGrowths = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonId, pondId, ownerId } = request.body;\r\n        this.growthsServives.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.seasonAndPondServices.models,\r\n                    as: ActionAssociateDatabase.GROWTH_2_SEASON_AND_POND,\r\n                    where: {\r\n                        seasonId,\r\n                        pondId\r\n                    }\r\n                }\r\n            ],\r\n            order: [\r\n                ['createdDate', 'DESC']\r\n            ]\r\n        }).then((growths) => {\r\n            if(!!growths.length) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    growths\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy thông tin tăng trưởng.',\r\n                    growths: []\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi, vui lòng thử lại sau.',\r\n            });\r\n        });\r\n    }\r\n\r\n    //  Add addgrowth\r\n    private addGrowth = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondId, ownerId, averageDensity, averageMass, speedOdGrowth, livingRatio } = request.body;\r\n        const seasonAndPond: any = await this.seasonAndPondServices.models.findOne({\r\n            include: [\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    },\r\n                    attributes: []\r\n                }\r\n            ],\r\n            where: {\r\n                pondId\r\n            },\r\n            attributes: ['seasonAndPondId']\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        });\r\n        const growth: Growth = new Growth();\r\n        if(seasonAndPond) {\r\n            growth.setGrowths(null, uuidv4(), seasonAndPond.seasonAndPondId, averageDensity, averageMass, speedOdGrowth, livingRatio);\r\n            growth.growthsServives.models.create(growth).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                });\r\n            }).then(res => {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: 'Thêm thành công.'\r\n                });\r\n            });\r\n        } else {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        }\r\n    }\r\n\r\n    private getGrowthByUUId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { growthUUId } = request.body;\r\n        this.growthsServives.models.findOne({\r\n            where: {growthUUId}\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi đường truyền, vui lòng thử lại sau.'\r\n            });\r\n        }).then((res: any) => {\r\n            if(!res) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy.'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    growth: res.dataValues\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    // Update growth by Id\r\n    private updateGrowth = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { growthUUId, averageDensity, averageMass, speedOdGrowth, livingRatio } = request.body;\r\n        const growth: Growth = new Growth();\r\n        growth.setGrowthUUId = growthUUId;\r\n        if (!growthUUId) {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Hành động không được phép, vui lòng thử lại sau!'\r\n            });\r\n        } else {\r\n            growth.setGrowths(undefined, growthUUId, undefined, averageDensity, averageMass, speedOdGrowth, livingRatio, undefined, undefined, undefined, undefined, undefined);\r\n            growth.growthsServives.models.update(growth.getFields(growth), {\r\n                where: {\r\n                    growthUUId\r\n                },\r\n                returning: true\r\n            }).then((res: any) => {\r\n                if (!res) {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã có lỗi xảy ra, xin vui lòng thử lại sau!'\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Cập nhật thông tin tăng trưởng thành công!'\r\n                    });\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, vui lòng thử lại sau!'\r\n                });\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n}\r\n","export * from './harvest.route';\r\n","import { Harvest, HarvestDetail } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, SeasonAndPondServices, SeasonServices, HarvestsServives, HarvestDetailsServives, PondsServices, StockingServices, StockingDetailsServices, BreedServives } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { Transaction } from 'sequelize';\r\n\r\n/**\r\n * @api {all} /harvests Harvest Request customer object\r\n * @apiName Harvest\r\n * @apiGroup Harvest\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class HarvestRoute extends BaseRoute {\r\n    public static path = '/harvests';\r\n    private static instance: HarvestRoute;\r\n    private seasonAndPondServices: SeasonAndPondServices = new SeasonAndPondServices();\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private harvestsServives: HarvestsServives = new HarvestsServives();\r\n    private harvestDetailsServives: HarvestDetailsServives = new HarvestDetailsServives();\r\n    private pondsServices: PondsServices = new PondsServices();\r\n    private stockingServices: StockingServices = new StockingServices();\r\n    private stockingDetailsServices: StockingDetailsServices = new StockingDetailsServices();\r\n    private breedServives: BreedServives = new BreedServives();\r\n\r\n    /**\r\n     * @class HarvestRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!HarvestRoute.instance) {\r\n            HarvestRoute.instance = new HarvestRoute();\r\n        }\r\n        return HarvestRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[HarvestRoute] Creating harvest route.');\r\n\r\n        // add route\r\n        this.router.post('/add', Authentication.isLogin, this.addHarvest);\r\n        this.router.post('/gets', Authentication.isLogin, this.getHarvest);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, HarvestRoute.path);\r\n    }\r\n\r\n    // Get harvest\r\n    private addHarvest = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondId, ownerId, harvestId, harvestName, quantity, unitPrice } = request.body;\r\n        const seasonAndPond: any = await this.seasonAndPondServices.models.findOne({\r\n            include: [\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    },\r\n                    attributes: []\r\n                }\r\n            ],\r\n            where: {\r\n                pondId\r\n            },\r\n            attributes: ['seasonAndPondId']\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        });\r\n        // Lần thu hoạch mới\r\n        if(!harvestId) {\r\n            return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n                const harvest: Harvest = new Harvest();\r\n                harvest.setHarvests(null, uuidv4(), seasonAndPond.seasonAndPondId, harvestName);\r\n                const hv: any = await harvest.harvestsServives.models.create(harvest, {\r\n                    transaction: t\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                    });\r\n                    t.rollback();\r\n                });\r\n                if(hv) {\r\n                    const harvestDetail: HarvestDetail = new HarvestDetail();\r\n                    harvestDetail.setHarvestdetails(uuidv4(), hv.harvestId, quantity, unitPrice);\r\n                    harvestDetail.harvestDetailsServives.models.create(harvestDetail, {\r\n                        transaction: t\r\n                    }).catch(e => {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                        });\r\n                        t.rollback();\r\n                    }).then(res => {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: 'Thêm thành công.'\r\n                        });\r\n                        t.commit();\r\n                    });\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                });\r\n            });\r\n        } else {\r\n            const harvestDetail: HarvestDetail = new HarvestDetail();\r\n            harvestDetail.setHarvestdetails(uuidv4(), harvestId, quantity, unitPrice);\r\n            harvestDetail.harvestDetailsServives.models.create(harvestDetail).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                });\r\n            }).then(res => {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: 'Thêm thành công.'\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @method POST\r\n     */\r\n    private getHarvest = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonId, pondId } = request.body;\r\n        this.harvestsServives.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.seasonAndPondServices.models,\r\n                    as: ActionAssociateDatabase.HARVEST_2_SEASON_AND_POND,\r\n                    include: [\r\n                        {\r\n                            model: this.seasonServices.models,\r\n                            as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                            where: {\r\n                                seasonId\r\n                            }\r\n                        },\r\n                        {\r\n                            model: this.pondsServices.models,\r\n                            as: ActionAssociateDatabase.SEASON_AND_POND_2_POND,\r\n                            where: {\r\n                                pondId\r\n                            }\r\n                        },\r\n                        {\r\n                            model: this.stockingServices.models,\r\n                            as: ActionAssociateDatabase.SEASON_AND_POND_2_STOCKING,\r\n                            required: false,\r\n                            include: [\r\n                                {\r\n                                    model: this.stockingDetailsServices.models,\r\n                                    as: ActionAssociateDatabase.STOCKING_2_STOCKING_DETAILS,\r\n                                    include: [\r\n                                        {\r\n                                            model: this.breedServives.models,\r\n                                            as: ActionAssociateDatabase.STOCKING_DETAILS_2_BREED\r\n                                        }\r\n                                    ]\r\n                                }\r\n                            ]\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    model: this.harvestDetailsServives.models,\r\n                    as: ActionAssociateDatabase.HARVEST_2_HARVEST_DETAILS\r\n                }\r\n            ]\r\n        }).then(res => {\r\n            if(!res.length) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy nhật ký thu hoạch.'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    harvests: res\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            e;\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './userRoles.route';\r\n","import { NextFunction, Request, Response } from 'express';\r\nimport { logger, UserServives, UserRolesServices } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { UserRole } from '../../components';\r\nimport { Transaction, FindOptions } from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../../common';\r\n\r\n/**\r\n * @api {get} /user/roles UserRoles Request customer object\r\n * @apiName UserRoles\r\n * @apiGroup UserRoles\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class UserRoleRoute extends BaseRoute {\r\n    public static path = '/userRoles';\r\n    private static instance: UserRoleRoute;\r\n    private userServives: UserServives = new UserServives();\r\n    private userRolesServices: UserRolesServices = new UserRolesServices();\r\n    /**\r\n     * @class UserRoleRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!UserRoleRoute.instance) {\r\n            UserRoleRoute.instance = new UserRoleRoute();\r\n        }\r\n        return UserRoleRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[UserRoleRoute] Creating roles of user route.');\r\n\r\n        // add route\r\n        this.router.get('/gets', Authentication.isLogin, this.getAllMyEmployee);\r\n        this.router.get('/get/:roleId', Authentication.isLogin, this.getRoleByRoleId);\r\n        this.router.put('/delete', Authentication.isLogin, this.deleteRoles);\r\n        this.router.put('/upsert', Authentication.isLogin, this.upsertRoles);\r\n        this.router.put('/change', Authentication.isLogin, this.changeRoles);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, UserRoleRoute.path);\r\n    }\r\n\r\n    /**\r\n     * Get Employees with boss of farm\r\n     * @method GET\r\n     * @param request.headers\r\n     * ```\r\n     *      {\r\n     *          authorization: \"token\",\r\n     *          roles: '' || '1' || '2'\r\n     *      }\r\n     * ```\r\n     */\r\n    private getAllMyEmployee = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { roles } = request.headers;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        // create query\r\n        const query: FindOptions<any> = {\r\n            include: [],\r\n            where: {}\r\n        };\r\n\r\n        // get userInfo\r\n        const userInfo: any = {\r\n            model: this.userServives.models,\r\n            as: ActionAssociateDatabase.USER_ROLES_2_USER,\r\n            attributes: ['userId', 'userUUId', 'lastname', 'firstname', 'username', 'createdDate', 'createdBy']\r\n        };\r\n        query.include.push(userInfo);\r\n\r\n        // tmp where\r\n        // let where: any = {};\r\n        if (isBoss) {\r\n            if (roles) {\r\n                // get with roles\r\n                query.where = {\r\n                    bossId: userId,\r\n                    roles // 1 is pond using role\r\n                };\r\n            } else {\r\n                // get without roles\r\n                query.where = {\r\n                    bossId: userId\r\n                };\r\n            }\r\n        } else {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Dừng lại! Truy cập là trái phép.'\r\n            });\r\n        }\r\n        this.userRolesServices.models.findAll(query).then((res: any) => {\r\n            if (res) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    employees: res\r\n                });\r\n            } else {\r\n                if (roles === '1') {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Bạn không có nhân viên quản lý AO nào cả.'\r\n                    });\r\n                } else if (roles === '2') {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Bạn không có nhân viên quản lý KHO nào cả.'\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Bạn không có nhân viên nào cả. Vui lòng thêm tài khoản cho nhân viên và thử lại sau.'\r\n                    });\r\n                }\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xãy ra, xin vui lòng thử lại!'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get Role by roleId\r\n     * @method GET\r\n     * @param request.params {Request} The express Request object.\r\n     */\r\n    private getRoleByRoleId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { roleId } = request.params;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        if(!isBoss) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Dừng lại! Truy cập là trái phép.'\r\n            });\r\n        }\r\n        this.userRolesServices.models.findById(roleId).then((role: UserRole) => {\r\n                if (role) {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: '',\r\n                        role\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Không tìm thấy danh mục phân quyền này.'\r\n                    });\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n                });\r\n            });\r\n    }\r\n\r\n    private deleteRoles = async (request: Request, response: Response, next: NextFunction) => {\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const { rolesId } = request.body;\r\n        this.userRolesServices.models.destroy({\r\n            where: {\r\n                bossId: userId,\r\n                rolesId\r\n            }\r\n        }).then((res: any) => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: 'Thu hồi thành công!'\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi đường truyền, vui lòng thử lại sau!'\r\n            });\r\n        });\r\n    }\r\n\r\n    private upsertRoles = async (request: Request, response: Response, next: NextFunction) => {\r\n        const userRole: UserRole = new UserRole();\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId, roles, isDeleted } = request.body;\r\n        userRole.setBossId = deToken.userId;\r\n        userRole.setUserId = userId;\r\n        userRole.setRoles = roles;\r\n        userRole.setIsDeleted = isDeleted;\r\n        const main: any = await this.userRolesServices.models.findAll({\r\n            where: {\r\n                userId,\r\n                bossId: deToken.userId\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n        if(!main) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Bạn không có quyền thao tác này!'\r\n            });\r\n        }\r\n        userRole.userRolesServices.models.upsert(userRole.getFields(), {\r\n            fields: ['roles', 'isDeleted'],\r\n            returning: true\r\n        }).then((res: any) => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: 'Thao tác thành công.'\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private changeRoles = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { rolesId, userId, roles, isDeleted } = request.body;\r\n        let userRole: UserRole = new UserRole();\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            userRole = new UserRole();\r\n            userRole.setRolesId = rolesId;\r\n            userRole.setIsDeleted = 1;\r\n            userRole.userRolesServices.models.upsert(userRole.getFields(), {\r\n                fields: ['roles', 'isDeleted'],\r\n                returning: true,\r\n                transaction: t\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau!'\r\n                });\r\n                t.rollback();\r\n            }).then(async (result: any) => {\r\n                const token: string = request.headers.authorization.split(' ')[1];\r\n                const deToken: any = Authentication.detoken(token);\r\n                userRole = new UserRole();\r\n                userRole.setBossId = deToken.userId;\r\n                userRole.setUserId = userId;\r\n                userRole.setRoles = roles;\r\n                userRole.setIsDeleted = 0;\r\n                userRole.userRolesServices.models.upsert(userRole.getFields(), {\r\n                    fields: ['roles', 'isDeleted'],\r\n                    returning: true,\r\n                    transaction: t\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau!'\r\n                    });\r\n                    t.rollback();\r\n                }).then(async (res: any) => {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Thực hiện thành công.'\r\n                    });\r\n                    t.commit();\r\n                });\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './pondsUsersRoles.route';\r\n","import { PondUserRole } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, PondUserRolesServices, UserRolesServices, UserServives, PondsServices } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { ActionAssociateDatabase } from '../../common';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class PondUserRolesRoute extends BaseRoute {\r\n    public static path = '/pondUserRoles';\r\n    private static instance: PondUserRolesRoute;\r\n    private pondUserRolesServices: PondUserRolesServices = new PondUserRolesServices();\r\n    private userRolesServices: UserRolesServices = new UserRolesServices();\r\n    private userServives: UserServives = new UserServives();\r\n    private pondsServices: PondsServices = new PondsServices();\r\n    /**\r\n     * @class PondUserRolesRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!PondUserRolesRoute.instance) {\r\n            PondUserRolesRoute.instance = new PondUserRolesRoute();\r\n        }\r\n        return PondUserRolesRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[PondUserRolesRoute] Creating role pond of user route.');\r\n\r\n        // add route\r\n        this.router.post('/add', Authentication.isLogin, this.addPondRoles);\r\n        this.router.get('/gets', Authentication.isLogin, this.getUserManageWithPond);\r\n        this.router.put('/update', Authentication.isLogin, this.updateRoles);\r\n        this.router.put('/delete', Authentication.isLogin, this.deleteRoles);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, PondUserRolesRoute.path);\r\n    }\r\n\r\n    private addPondRoles = async (request: Request, response: Response, next: NextFunction) => {\r\n        const pondUserRole: PondUserRole = new PondUserRole();\r\n        const { userId, pondId } = request.body;\r\n        pondUserRole.setUserId = (userId as number) - 0;\r\n        pondUserRole.setPondId = pondId;\r\n        pondUserRole.pondUserRolesServices.models.create(pondUserRole.getFields(pondUserRole))\r\n        .then((res: any) => {\r\n            if(res) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: 'Thao tác thành công!',\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Người đã có quyền trên ao này.'\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            if(e) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Có lỗi xảy ra vui lòng kiểm tra và thử lại!'\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    private getUserManageWithPond = async (request: Request, response: Response, next: NextFunction) => {\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        if(!isBoss) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Dừng lại! Truy cập là trái phép.'\r\n            });\r\n        } else {\r\n            this.userRolesServices.models.findAll({\r\n                include: [\r\n                    {\r\n                        model: this.userServives.models,\r\n                        as: ActionAssociateDatabase.USER_ROLES_2_USER,\r\n                        include: [\r\n                            {\r\n                                model: this.pondUserRolesServices.models,\r\n                                as: ActionAssociateDatabase.USER_2_POND_USER_ROLE,\r\n                                required: false,\r\n                                include: [\r\n                                    {\r\n                                        model: this.pondsServices.models,\r\n                                        as: ActionAssociateDatabase.POND_USER_ROLE_2_POND,\r\n                                        required: false\r\n                                    }\r\n                                ]\r\n                            }\r\n                        ],\r\n                        attributes: ['userId', 'userUUId', 'lastname', 'firstname', 'username',  'createdDate', 'createdBy']\r\n                    }\r\n                ],\r\n                where: {\r\n                    bossId: userId,\r\n                    roles: 1\r\n                }\r\n            }).then((res: any) => {\r\n                if(!res.length) {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Bạn không có nhân viên vào.',\r\n                        employees: res\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: '',\r\n                        employees: res\r\n                    });\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    private updateRoles = async (request: Request, response: Response, next: NextFunction) => {\r\n        const pondUserRole: PondUserRole = new PondUserRole();\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const { pondUserRolesId, pondId } = request.body;\r\n        if(!pondId && !pondUserRolesId) {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Hành động không được phép, vui lòng thử lại sau!'\r\n            });\r\n        } else {\r\n            pondUserRole.setPondUserRolesId = pondUserRolesId;\r\n            pondUserRole.setPondId = pondId;\r\n            pondUserRole.pondUserRolesServices.models.update(pondUserRole.getFields(pondUserRole), {\r\n                where: {\r\n                    pondUserRolesId\r\n                }\r\n            }).then((res: any) => {\r\n                if(!res) {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã có lỗi xảy ra, xin vui lòng thử lại sau!'\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Cập nhật thành công!'\r\n                    });\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Nhân viên đã có quyền thao tác với ao này, vui lòng kiểm tra và thử lại sau!'\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    private deleteRoles = async (request: Request, response: Response, next: NextFunction) => {\r\n        const pondUserRole: PondUserRole = new PondUserRole();\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const { pondUserRolesId } = request.body;\r\n        pondUserRole.setIsDeleted = 1;\r\n        pondUserRole.pondUserRolesServices.models.destroy({\r\n            where: {\r\n                pondUserRolesId\r\n            }\r\n        }).then(res => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: 'Thao tác thành công!'\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi đường truyền, vui lòng thử lại sau!'\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './material.route';\r\n","import { NextFunction, Request, Response } from 'express';\r\nimport { logger } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { Material } from '../../components';\r\nimport { Transaction } from 'sequelize';\r\n/**\r\n * @api {get} /materials Material Request customer object\r\n * @apiName Material\r\n * @apiGroup Material\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class MaterialRoute extends BaseRoute {\r\n    public static path = '/materials';\r\n    private static instance: MaterialRoute;\r\n    /**\r\n     * @class MaterialRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!MaterialRoute.instance) {\r\n            MaterialRoute.instance = new MaterialRoute();\r\n        }\r\n        return MaterialRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[MaterialRoute] Creating materials route.');\r\n\r\n        // add index page route\r\n        this.router.get('/gets', this.getAll);\r\n    }\r\n\r\n    /**\r\n     * @class MaterialRoute\r\n     * @method get\r\n     * @param req {Request} The express Request object.\r\n     * @param res {Response} The express Response object.\r\n     * @param next {NextFunction} Execute the next method.\r\n     */\r\n    private getAll = async (request: Request, response: Response, next: NextFunction) => {\r\n        const material: Material = new Material();\r\n        material.materialServives.models.findAll().then(res => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                res\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './seasonAndPond.route';\r\n","import { NextFunction, Request, Response } from 'express';\r\nimport { logger, SeasonAndPondServices, SeasonServices, PondsServices } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { SeasonsAndPond } from '../../components';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport { Transaction } from 'sequelize';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { differenceWith, isEqual } from 'lodash';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class SeasonAndPondRoute extends BaseRoute {\r\n    public static path = '/seasonAndPond';\r\n    private static instance: SeasonAndPondRoute;\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private pondsServices: PondsServices = new PondsServices();\r\n    private seasonAndPondServices: SeasonAndPondServices = new SeasonAndPondServices();\r\n    /**\r\n     * @class SeasonAndPondRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!SeasonAndPondRoute.instance) {\r\n            SeasonAndPondRoute.instance = new SeasonAndPondRoute();\r\n        }\r\n        return SeasonAndPondRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[SeasonAndPondRoute] Creating season and pond associate route.');\r\n\r\n        // add route\r\n        this.router.post('/add', this.addSeasonAndPond);\r\n        this.router.put('/update', this.updateSeasonAndPond);\r\n        this.router.get('/count/pondWithSeason', this.countPondWithSeason);\r\n        this.router.get('/count/seasonWithPond', this.countSeasonOfPond);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, SeasonAndPondRoute.path);\r\n    }\r\n\r\n    /**\r\n     * @class SeasonAndPondRoute\r\n     * @method get\r\n     * @param req {Request} The express Request object.\r\n     * @param res {Response} The express Response object.\r\n     * @param next {NextFunction} Execute the next method.\r\n     */\r\n    private addSeasonAndPond = async (request: Request, response: Response) => {\r\n        const { seasonId, pondIdArr: pondArr } = request.body;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ponds: any = await this.pondsServices.models.findAll({\r\n            where: {\r\n                userId\r\n            },\r\n            attributes: ['pondId', 'userId']\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi xác thực người dùng.'\r\n            });\r\n        });\r\n        const diff: any = differenceWith(pondArr, ponds.map(e => {\r\n            return { pondId: e.pondId, userId: e.userId };\r\n        }), isEqual);\r\n        if(!!diff.length) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Ao không hợp lệ, vui lòng kiểm tra và thử lại.'\r\n            });\r\n        }\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            const result: any[] = [];\r\n            for (const pond of pondArr) {\r\n                const seasonsAndPond: SeasonsAndPond = new SeasonsAndPond();\r\n                seasonsAndPond.setSeasonsAndPond(null, seasonId, pond.pondId);\r\n                const snp: any = await seasonsAndPond.seasonAndPondServices.models.create(seasonsAndPond, {\r\n                    transaction: t\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã xảy ra lỗi vui lòng thử lại sau.',\r\n                    });\r\n                    t.rollback();\r\n                });\r\n                if (snp) {\r\n                    result.push(1);\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Thao tác bị lỗi, vui lòng thử lại sau.',\r\n                    });\r\n                    t.rollback();\r\n                }\r\n            }\r\n            if (pondArr.length !== 0 && pondArr.length === result.length) {\r\n                t.commit();\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: 'Thêm thành công!'\r\n                });\r\n            } else {\r\n                t.rollback();\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Thao tác bị lỗi, vui lòng thử lại sau.',\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.',\r\n            });\r\n        });\r\n        // if (Array.isArray(pondArr)) {\r\n        //     if(pondArr.length) {\r\n\r\n        //     } else {\r\n        //         response.status(200).json({\r\n        //             success: false,\r\n        //             message: 'Vui lòng cung cấp dữ liệu để tiếp tục.',\r\n        //         });\r\n        //     }\r\n        // } else {\r\n        //     const seasonsAndPond: SeasonsAndPond = new SeasonsAndPond();\r\n        //     seasonsAndPond.setSeasonsAndPond(null, seasonId, pondArr);\r\n        //     const snp: any = await seasonsAndPond.seasonAndPondServices.models.create(seasonsAndPond).catch(e => {\r\n        //         response.status(200).json({\r\n        //             success: false,\r\n        //             message: 'Đã xảy ra lỗi vui lòng thử lại sau.',\r\n        //         });\r\n        //     });\r\n        //     if(!snp) {\r\n        //         response.status(200).json({\r\n        //             success: false,\r\n        //             message: 'Lỗi đường truyền, vui lòng thử lại.'\r\n        //         });\r\n        //     } else {\r\n        //         response.status(200).json({\r\n        //             success: true,\r\n        //             message: 'Thêm thành công.'\r\n        //         });\r\n        //     }\r\n        // }\r\n    }\r\n\r\n    private updateSeasonAndPond = async (request: Request, response: Response) => {\r\n        const seasonsAndPond: SeasonsAndPond = new SeasonsAndPond();\r\n        const { seasonAndPondId, seasonId, pondId } = request.body;\r\n        seasonsAndPond.setSeasonAndPondId = seasonAndPondId;\r\n        seasonsAndPond.setSeasonId = seasonId;\r\n        seasonsAndPond.setPondId = pondId;\r\n\r\n        seasonsAndPond.update().then((res: any) => {\r\n            if (!res) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, không thể thực hiện yêu cầu, vui long thử lại sau!'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: 'Phân quyền thành công.'\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * đếm số ao theo vụ\r\n     */\r\n    private countPondWithSeason = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { ownerid, seasonid } = request.headers;\r\n        this.seasonAndPondServices.models.findAndCountAll({\r\n            include: [\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerid\r\n                    }\r\n                }\r\n            ],\r\n            where: {\r\n                seasonId: seasonid\r\n            }\r\n        }).then(res => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                result: res\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Đếm số vụ của ao\r\n     */\r\n    private countSeasonOfPond = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { ownerid, pondid } = request.headers;\r\n        this.seasonAndPondServices.models.findAndCountAll({\r\n            include: [\r\n                {\r\n                    model: this.pondsServices.models,\r\n                    as: ActionAssociateDatabase.SEASON_AND_POND_2_POND,\r\n                    where: {\r\n                        userId: ownerid\r\n                    }\r\n                }\r\n            ],\r\n            where: {\r\n                pondId: pondid\r\n            }\r\n        }).then(res => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                result: res\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './usingFood.route';\r\n","import { UsingFood, TakeCare } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, TakeCareServices, SeasonAndPondServices, SeasonServices, PondsServices, UsingFoodsServices, StoregeServices } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { Transaction, FindOptions } from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport { DateUtil } from '../../lib';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class UsingFoodRoute extends BaseRoute {\r\n    public static path = '/usingFoods';\r\n    private static instance: UsingFoodRoute;\r\n    private takeCareServices: TakeCareServices = new TakeCareServices();\r\n    private seasonAndPondServices: SeasonAndPondServices = new SeasonAndPondServices();\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private usingFoodsServices: UsingFoodsServices = new UsingFoodsServices();\r\n    private storegeServices: StoregeServices = new StoregeServices();\r\n    private pondsServices: PondsServices = new PondsServices();\r\n    /**\r\n     * @class UsingFoodRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!UsingFoodRoute.instance) {\r\n            UsingFoodRoute.instance = new UsingFoodRoute();\r\n        }\r\n        return UsingFoodRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[UsingFoodRoute] Creating Using Food route.');\r\n\r\n        // add route\r\n        this.router.post('/add', Authentication.isLogin, this.addUsingFood);\r\n        this.router.post('/gets', Authentication.isLogin, this.getUsingFood);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, UsingFoodRoute.path);\r\n    }\r\n\r\n    /**\r\n     * usingFood - take care type is 0\r\n     * usingVeterinary - take care type is 1\r\n     */\r\n    private addUsingFood = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondId, takeCareName, massOfFishery, feedingRate, storageId, quantity } = request.body;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const seasonAndPond: any = await this.seasonAndPondServices.models.findOne({\r\n            include: [\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    },\r\n                    attributes: []\r\n                }\r\n            ],\r\n            where: {\r\n                pondId\r\n            },\r\n            attributes: ['seasonAndPondId']\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        });\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            const onUpdate: any = await this.storegeServices.models.update({\r\n                quantityStorages: this.sequeliz.literal(`quantityStorages - ${ quantity }`)\r\n            }, {\r\n                where: {\r\n                    storageId\r\n                },\r\n                transaction: t,\r\n                returning: true\r\n            }).catch(e => {\r\n                if(e.message === 'FailQuantity') {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Số lượng thức ăn trong kho không đủ.'\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                    });\r\n                }\r\n                t.rollback();\r\n            });\r\n            if(onUpdate) {\r\n                const takeCare: TakeCare = new TakeCare();\r\n                takeCare.setTakecare(null, uuidv4(), seasonAndPond.seasonAndPondId, 0, takeCareName);\r\n                const tk: any = await this.takeCareServices.models.create(takeCare, {\r\n                    transaction: t\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                    });\r\n                    t.rollback();\r\n                });\r\n                if (tk) {\r\n                    const usingFood: UsingFood = new UsingFood();\r\n                    usingFood.setUsingFoods(null, uuidv4(), storageId, tk.takeCareId, massOfFishery, feedingRate, quantity);\r\n                    usingFood.usingFoodsServices.models.create(usingFood, {\r\n                        transaction: t\r\n                    }).catch(e => {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                        });\r\n                        t.rollback();\r\n                    }).then(res => {\r\n                        this.pondsServices.models.update({\r\n                            isFed: 1\r\n                        }, {\r\n                            where: {\r\n                                pondId\r\n                            },\r\n                            transaction: t\r\n                        }).then(res$ => {\r\n                            if(!res$) {\r\n                                t.rollback();\r\n                                response.status(200).json({\r\n                                    success: false,\r\n                                    message: 'Thất bại.'\r\n                                });\r\n                            } else {\r\n                                response.status(200).json({\r\n                                    success: true,\r\n                                    message: 'Thêm thành công.',\r\n                                    res\r\n                                });\r\n                                t.commit();\r\n                            }\r\n                        }).catch(e => {\r\n                            t.rollback();\r\n                        });\r\n                    });\r\n                }\r\n            } else {\r\n                t.rollback();\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get Cho ăn\r\n     * @method POST\r\n     */\r\n    private getUsingFood = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondId, seasonId, options } = request.body;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        const query: FindOptions<any> = {\r\n            include: [\r\n                {\r\n                    model: this.usingFoodsServices.models,\r\n                    as: ActionAssociateDatabase.TAKE_CARE_2_USING_FOOD,\r\n                    where: {\r\n                        createdDate: {\r\n                            [this.sequeliz.Op.between]: [\r\n                                DateUtil.getUTCDateTime(DateUtil.startOf(DateUtil.parse(options.timeOut || new Date()), options.unitOfTime)),\r\n                                DateUtil.getUTCDateTime(DateUtil.endOf(DateUtil.parse(options.timeOut || new Date()), options.unitOfTime))\r\n                            ]\r\n                        }\r\n                    },\r\n                    include: [\r\n                        {\r\n                            model: this.storegeServices.models,\r\n                            as: ActionAssociateDatabase.USING_FOOD_2_STORAGE\r\n                        }\r\n                    ],\r\n                    required: false\r\n                }\r\n            ],\r\n            where: {\r\n                type: 0\r\n            }\r\n        };\r\n\r\n        if (isBoss) {\r\n            query.include.push({\r\n                model: this.seasonAndPondServices.models,\r\n                as: ActionAssociateDatabase.TAKE_CARE_2_SEASON_AND_POND,\r\n                where: {\r\n                    seasonId,\r\n                    pondId\r\n                },\r\n                attributes: []\r\n            });\r\n        } else {\r\n            query.include.push({\r\n                model: this.seasonAndPondServices.models,\r\n                as: ActionAssociateDatabase.TAKE_CARE_2_SEASON_AND_POND,\r\n                where: {\r\n                    seasonId,\r\n                    pondId\r\n                },\r\n                include: [\r\n                    {\r\n                        model: this.seasonServices.models,\r\n                        as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                        where: {\r\n                            status: 0\r\n                        }\r\n                    }\r\n                ],\r\n                attributes: []\r\n            });\r\n        }\r\n\r\n        this.takeCareServices.models.findAll(query).then(res => {\r\n            if (res) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    takeCare: res\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy nhật ký cho ăn của ao này'\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './pondDiary.route';\r\n","import { PondDiary } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, SeasonServices, SeasonAndPondServices, PondDiaryServices, PondsServices, UserServives, UserRolesServices } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\n// import { Transaction } from 'sequelize';\r\nimport { ActionAssociateDatabase, isUUId4 } from '../../common';\r\nimport { DateUtil } from '../../lib';\r\nimport { UpdateOptions } from 'sequelize';\r\nimport { updatePondDiariesSchema } from '../../schemas';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class PondDiaryRoute extends BaseRoute {\r\n    public static path = '/pondDiaries';\r\n    private static instance: PondDiaryRoute;\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private pondsServices: PondsServices = new PondsServices();\r\n    private seasonAndPondServices: SeasonAndPondServices = new SeasonAndPondServices();\r\n    private pondDiaryServices: PondDiaryServices = new PondDiaryServices();\r\n    private userServives: UserServives = new UserServives();\r\n    private userRolesServices: UserRolesServices = new UserRolesServices();\r\n    /**\r\n     * @class PondDiaryRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!PondDiaryRoute.instance) {\r\n            PondDiaryRoute.instance = new PondDiaryRoute();\r\n        }\r\n        return PondDiaryRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[PondDiaryRoute] Creating diary route.');\r\n\r\n        // add route\r\n        this.router.get('/gets', Authentication.isLogin, this.getPondDiaries);\r\n        this.router.get('/gets/:pondDiaryUUId', Authentication.isLogin, this.getPondDiariesByUUId);\r\n        this.router.post('/add', Authentication.isLogin, this.addPondDiary);\r\n        this.router.put('/update', Authentication.isLogin, this.updatePondDiary);\r\n        this.router.delete('/delete/:primary', Authentication.isLogin, this.deletePondDiary);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, PondDiaryRoute.path);\r\n    }\r\n\r\n    private addPondDiary = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondId, ownerId, fisheryQuantity, healthOfFishery, pondVolume, diedFishery, notes, diaryName } = request.body;\r\n        const seasonAndPond: any = await this.seasonAndPondServices.models.findOne({\r\n            include: [\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    },\r\n                    attributes: []\r\n                }\r\n            ],\r\n            where: {\r\n                pondId\r\n            },\r\n            attributes: ['seasonAndPondId']\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        });\r\n        if (seasonAndPond) {\r\n            const pondDiary: PondDiary = new PondDiary();\r\n            pondDiary.setPonddiary(null, uuidv4(), seasonAndPond.seasonAndPondId, diaryName, fisheryQuantity, healthOfFishery, pondVolume, diedFishery, notes);\r\n            pondDiary.insert().then((res: any) => {\r\n                if (res) {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Thêm nhật ký thành công!'\r\n                    });\r\n                }\r\n            }).catch(e => {\r\n                if (e) {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Có lỗi xảy ra vui lòng kiểm tra lại!'\r\n                    });\r\n                }\r\n            });\r\n        } else {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Bạn không có quyền vui liên hệ với quản lý của bạn để được hỗ trợ.'\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get theo tháng, theo user join từ vự\r\n     * @param request\r\n     * @param response\r\n     * @param next\r\n     */\r\n    private getPondDiaries = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondId, seasonId, timeOut, unitOfTime } = request.query;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n\r\n        this.pondDiaryServices.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.seasonAndPondServices.models,\r\n                    as: ActionAssociateDatabase.POND_DIARY_2_SEASON_AND_POND,\r\n                    include: [\r\n                        {\r\n                            model: this.pondsServices.models,\r\n                            as: ActionAssociateDatabase.SEASON_AND_POND_2_POND,\r\n                            include: [\r\n                                {\r\n                                    model: this.userServives.models,\r\n                                    as: ActionAssociateDatabase.POND_2_USER,\r\n                                    include: [\r\n                                        {\r\n                                            model: this.userRolesServices.models,\r\n                                            as: ActionAssociateDatabase.USER_2_ROLES_GET_EMPLOYEES,\r\n                                            required: false,\r\n                                            where: {\r\n                                                [this.sequeliz.Op.or]: [\r\n                                                    {\r\n                                                        bossId: userId\r\n                                                    },\r\n                                                    {\r\n                                                        userId,\r\n                                                        roles: 2\r\n                                                    }\r\n                                                ]\r\n                                            }\r\n                                        }\r\n                                    ]\r\n                                }\r\n                            ],\r\n                            where: {\r\n                                userId: ownerId\r\n                            }\r\n                        },\r\n                        {\r\n                            model: this.seasonServices.models,\r\n                            as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                            include: [\r\n                                {\r\n                                    model: this.userServives.models,\r\n                                    as: ActionAssociateDatabase.SEASON_2_USER,\r\n                                    include: [\r\n                                        {\r\n                                            model: this.userRolesServices.models,\r\n                                            as: ActionAssociateDatabase.USER_2_ROLES_GET_EMPLOYEES,\r\n                                            required: false,\r\n                                            where: {\r\n                                                [this.sequeliz.Op.or]: [\r\n                                                    {\r\n                                                        bossId: userId\r\n                                                    },\r\n                                                    {\r\n                                                        userId,\r\n                                                        roles: 2\r\n                                                    }\r\n                                                ]\r\n                                            }\r\n                                        }\r\n                                    ]\r\n                                }\r\n                            ],\r\n                            where: {\r\n                                userId: ownerId\r\n                            }\r\n                        }\r\n                    ],\r\n                    where: {\r\n                        seasonId,\r\n                        pondId\r\n                    }\r\n                }\r\n            ],\r\n            where: {\r\n                createdDate: {\r\n                    [this.sequeliz.Op.between]: [\r\n                        DateUtil.getUTCDateTime(DateUtil.startOf(DateUtil.parse(timeOut || new Date()), unitOfTime)),\r\n                        DateUtil.getUTCDateTime(DateUtil.endOf(DateUtil.parse(timeOut || new Date()), unitOfTime))\r\n                    ]\r\n                }\r\n            }\r\n        }).then(res => {\r\n            if (res) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    diaries: res\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy nhật ký cho ăn của ao này'\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private getPondDiariesByUUId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondDiaryUUId } = request.params;\r\n        const g: RegExp = new RegExp(isUUId4);\r\n        if(g.test(pondDiaryUUId)) {\r\n            this.pondDiaryServices.models.findOne({\r\n                where: {\r\n                    pondDiaryUUId\r\n                }\r\n            }).then(res => {\r\n                if(!!Object.keys(res).length) {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: '',\r\n                        pondDiary: res\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Không tìm thấy nhật ký.'\r\n                    });\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, vui lòng thử lại sau!'\r\n                });\r\n            });\r\n        } else {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Hiện tại chúng tôi không hỗ trợ api này.'\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get theo ngày\r\n     */\r\n    private deletePondDiary = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { primary } = request.params;\r\n        const g: RegExp = new RegExp(isUUId4);\r\n        const query: UpdateOptions = {\r\n            where: {}\r\n        };\r\n        if (g.test(primary)) {\r\n            query.where = {\r\n                pondDiaryUUId: primary\r\n            };\r\n        } else {\r\n            query.where = {\r\n                pondDiaryId: primary\r\n            };\r\n        }\r\n        this.pondDiaryServices.models.update({\r\n            isDeleled: 1\r\n        }, query).then(res => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: 'Đã xoá!',\r\n                results: null\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau!'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sửa đổi\r\n     */\r\n    private updatePondDiary = async (request: Request, response: Response, next: NextFunction) => {\r\n        const validate: any = this.validator(updatePondDiariesSchema);\r\n        const isValid: any = validate({\r\n            ...request.body,\r\n            fisheryQuantity: Number(request.body.fisheryQuantity)\r\n        });\r\n\r\n        if (!isValid) {\r\n            if(validate.error.includes('pondDiaryUUId')) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Chúng tôi không hỗ trợ API này.'\r\n                });\r\n            }\r\n            if(validate.error.includes('diaryName')) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Tên gợi nhắc không hợp lệ.'\r\n                });\r\n            }\r\n            if(validate.error.includes('fisheryQuantity')) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Số lượng thuỷ sản không hợp lệ.'\r\n                });\r\n            }\r\n            if(validate.error.includes('healthOfFishery')) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Tình trạng sức khoẻ không hợp lệ.'\r\n                });\r\n            }\r\n            if(validate.error.includes('pondVolume')) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Thể tích ao không hợp lệ.'\r\n                });\r\n            }\r\n            if(validate.error.includes('diedFishery')) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Số lượng cá chết không hợp lệ.'\r\n                });\r\n            }\r\n            if(validate.error.includes('notes')) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Ghi chú không hợp lệ.'\r\n                });\r\n            }\r\n        } else {\r\n            const { diaryName, fisheryQuantity, healthOfFishery, pondVolume, diedFishery, notes } = request.body;\r\n            this.pondDiaryServices.models.update({\r\n                diaryName, fisheryQuantity, healthOfFishery, pondVolume, diedFishery, notes\r\n            }).then(res => {\r\n                if (!res) {\r\n                    return response.status(200).json({\r\n                        success: false,\r\n                        message: 'Thất bại.'\r\n                    });\r\n                }\r\n                return response.status(200).json({\r\n                    success: true,\r\n                    message: 'Cập nhật thành công.',\r\n                    results: null\r\n                });\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, vui lòng thử lại sau!'\r\n                });\r\n            });\r\n        }\r\n    }\r\n}\r\n","export * from './takeCare.route';\r\n","// import { UsingFood, TakeCare } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, TakeCareServices, SeasonAndPondServices, SeasonServices, PondsServices, PondUserRolesServices, UsingFoodsServices, UsingVeterinaryServices, StoregeServices } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { FindOptions } from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport { DateUtil } from '../../lib';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class TakeCareRoute extends BaseRoute {\r\n    public static path = '/takeCare';\r\n    private static instance: TakeCareRoute;\r\n    private takeCareServices: TakeCareServices = new TakeCareServices();\r\n    private seasonAndPondServices: SeasonAndPondServices = new SeasonAndPondServices();\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private pondsServices: PondsServices = new PondsServices();\r\n    private pondUserRolesServices: PondUserRolesServices = new PondUserRolesServices();\r\n    private usingFoodsServices: UsingFoodsServices = new UsingFoodsServices();\r\n    private usingVeterinaryServices: UsingVeterinaryServices = new UsingVeterinaryServices();\r\n    private storegeServices: StoregeServices = new StoregeServices();\r\n    /**\r\n     * @class TakeCareRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!TakeCareRoute.instance) {\r\n            TakeCareRoute.instance = new TakeCareRoute();\r\n        }\r\n        return TakeCareRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[TakeCareRoute] Creating Take Care route.');\r\n\r\n        // add route\r\n        this.router.post('/gets', Authentication.isLogin, this.getTakeCare);\r\n        this.router.get('/get', this.test);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, TakeCareRoute.path);\r\n    }\r\n\r\n    /**\r\n     * @method POST\r\n     *\r\n     * Get using food or using veterinay option\r\n     * ```\r\n     * {\r\n     *      seasonId: number, // required\r\n     *      pondId: number, // required\r\n     *      type: number<0 | 1> // required 0 = Food | 1 = Veterinary\r\n     *      options: {\r\n     *          timeOut: Date,\r\n     *          unitOfTime: string\r\n     *      }\r\n     * }\r\n     * ```\r\n     */\r\n    private getTakeCare = async (request: Request, response: Response, next: NextFunction) => {\r\n        // init search\r\n        const {\r\n            pondId, seasonId,\r\n            type, // type of take care\r\n            /**\r\n             * default (30 days from present)\r\n             * 'days' - get by days\r\n             * 'months' - get by months\r\n             * ```json\r\n             * {\r\n             *      \"timeOut\": \"Thời gian cần get\",\r\n             *      \"unitOfTime\": \"Đơn vị tính: days, months\"\r\n             * }\r\n             * ```\r\n             */\r\n            options // search options\r\n        } = request.body;\r\n\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        // create query\r\n        const query: FindOptions<any> = {\r\n            include: [],\r\n            where: {}\r\n        };\r\n\r\n        // tmp where\r\n        let where: any = {};\r\n\r\n        // init query\r\n        const init: any = {\r\n            model: this.seasonAndPondServices.models,\r\n            as: ActionAssociateDatabase.TAKE_CARE_2_SEASON_AND_POND,\r\n            where: {\r\n                pondId, seasonId\r\n            },\r\n            include: [\r\n                {\r\n                    model: this.pondsServices.models,\r\n                    as: ActionAssociateDatabase.SEASON_AND_POND_2_POND,\r\n                    include: [\r\n                        {\r\n                            model: this.pondUserRolesServices.models,\r\n                            as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                            where: {\r\n                                userId\r\n                            },\r\n                            attributes: []\r\n                        }\r\n                    ],\r\n                    where: {\r\n                        userId: ownerId\r\n                    },\r\n                    attributes: []\r\n                },\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId\r\n                    },\r\n                    attributes: []\r\n                }\r\n            ],\r\n            attributes: []\r\n        };\r\n        query.include.push(init);\r\n\r\n        // get using Food or veterinary\r\n        let getType: any = {};\r\n        if (type === 0) {\r\n            getType = {\r\n                model: this.usingFoodsServices.models,\r\n                as: ActionAssociateDatabase.TAKE_CARE_2_USING_FOOD,\r\n                required: false,\r\n                include: [\r\n                    {\r\n                        model: this.storegeServices.models,\r\n                        as: ActionAssociateDatabase.USING_FOOD_2_STORAGE,\r\n                        required: false\r\n                    }\r\n                ]\r\n            };\r\n\r\n            // options date\r\n            if (options ? options.unitOfTime : false) {\r\n                where = {\r\n                    ...{\r\n                        '$usingFoods.createdDate$': {\r\n                            [this.sequeliz.Op.between]: [\r\n                                DateUtil.getUTCDateTime(DateUtil.startOf(DateUtil.parse(options.timeOut ? options.timeOut : new Date()), options.unitOfTime)),\r\n                                DateUtil.getUTCDateTime(DateUtil.endOf(DateUtil.parse(options.timeOut ? options.timeOut : new Date()), options.unitOfTime))\r\n                            ]\r\n                        }\r\n                    }\r\n                };\r\n                query.where = {\r\n                    ...query.where,\r\n                    ...where\r\n                };\r\n            } else {\r\n                where = {\r\n                    '$usingFoods.createdDate$': {\r\n                        [this.sequeliz.Op.between]: [\r\n                            DateUtil.getUTCDateTime(DateUtil.startOf(DateUtil.subtract(DateUtil.parse(new Date()), 30, 'days'), 'days')),\r\n                            DateUtil.getUTCDateTime(DateUtil.parse(new Date()))\r\n                        ]\r\n                    }\r\n                };\r\n                query.where = {\r\n                    ...query.where,\r\n                    ...where\r\n                };\r\n            }\r\n        }\r\n        if (type === 1) {\r\n            getType = {\r\n                model: this.usingVeterinaryServices.models,\r\n                as: ActionAssociateDatabase.TAKE_CARE_2_USING_VETERINARY,\r\n                required: false,\r\n                include: [\r\n                    {\r\n                        model: this.storegeServices.models,\r\n                        as: ActionAssociateDatabase.USING_VETERINARY_2_STORAGE,\r\n                        required: false\r\n                    }\r\n                ]\r\n            };\r\n\r\n            // options date\r\n            if (options ? options.unitOfTime : false) {\r\n                where = {\r\n                    ...{\r\n                        '$usingVeterinary.createdDate$': {\r\n                            [this.sequeliz.Op.between]: [\r\n                                DateUtil.getUTCDateTime(DateUtil.startOf(DateUtil.parse(options.timeOut ? options.timeOut : new Date()), options.unitOfTime)),\r\n                                DateUtil.getUTCDateTime(DateUtil.endOf(DateUtil.parse(options.timeOut ? options.timeOut : new Date()), options.unitOfTime))\r\n                            ]\r\n                        }\r\n                    }\r\n                };\r\n                query.where = {\r\n                    ...query.where,\r\n                    ...where\r\n                };\r\n            } else {\r\n                where = {\r\n                    '$usingVeterinary.createdDate$': {\r\n                        [this.sequeliz.Op.between]: [\r\n                            DateUtil.getUTCDateTime(DateUtil.startOf(DateUtil.subtract(DateUtil.parse(new Date()), 30, 'days'), 'days')),\r\n                            DateUtil.getUTCDateTime(DateUtil.parse(new Date()))\r\n                        ]\r\n                    }\r\n                };\r\n                query.where = {\r\n                    ...query.where,\r\n                    ...where\r\n                };\r\n            }\r\n        }\r\n        query.include.push(getType);\r\n\r\n        // sure type\r\n        where = {\r\n            type\r\n        };\r\n        query.where = {\r\n            ...query.where,\r\n            ...where\r\n        };\r\n\r\n        // check isBoss\r\n        if (!isBoss) {\r\n            where = {\r\n                ...{\r\n                    '$seasonAndPond->ponds->pondUserRoles.userId$': userId,\r\n                    '$seasonAndPond->ponds->pondUserRoles.pondId$': pondId\r\n                }\r\n            };\r\n            query.where = {\r\n                ...query.where,\r\n                ...where\r\n            };\r\n        }\r\n\r\n        // execute\r\n        this.takeCareServices.models.findAll(query).then(res => {\r\n            if (!res.length) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: 'Không tìm thấy hoạt động chăm sóc.',\r\n                    takeCare: res\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    takeCare: res\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.',\r\n                e\r\n            });\r\n        });\r\n    }\r\n\r\n    private test = async (req, response, next) => {\r\n        const { date } = req.headers;\r\n        response.status(200).json({\r\n            'success': true,\r\n            'message': '',\r\n            'parse': DateUtil.parse(date ? date : null).toLocaleDateString() + ' ' + DateUtil.parse(date).toLocaleTimeString(),\r\n            'start-of-date': DateUtil.startOf(new Date(), 'day').toLocaleDateString() + ' ' + DateUtil.startOf(new Date(), 'day').toLocaleTimeString(),\r\n            'end-of-date': DateUtil.endOf(new Date(), 'day').toLocaleDateString() + ' ' + DateUtil.endOf(new Date(), 'day').toLocaleTimeString(),\r\n            'start-of-week': DateUtil.startOf(new Date(), 'week').toLocaleDateString() + ' ' + DateUtil.startOf(new Date(), 'day').toLocaleTimeString(),\r\n            'end-of-week': DateUtil.endOf(new Date(), 'week').toLocaleDateString() + ' ' + DateUtil.endOf(new Date(), 'day').toLocaleTimeString(),\r\n            'start-of-month': DateUtil.startOf(new Date(), 'month').toLocaleDateString() + ' ' + + ' ' + DateUtil.startOf(new Date(), 'month').toLocaleTimeString(),\r\n            'end-of-month': DateUtil.endOf(new Date(), 'month').toLocaleDateString() + ' ' + + ' ' + DateUtil.endOf(new Date(), 'month').toLocaleTimeString(),\r\n            'add-day': DateUtil.add(new Date(), 1, 'day').toLocaleDateString() + ' ' + DateUtil.add(new Date(), 1, 'day').toLocaleTimeString(),\r\n            'add-months': DateUtil.add(new Date(), 1, 'month').toLocaleDateString() + ' ' + DateUtil.add(new Date(), 1, 'month').toLocaleTimeString(),\r\n            'subtract-day': DateUtil.subtract(new Date(), 1, 'day').toLocaleDateString() + ' ' + DateUtil.subtract(new Date(), 1, 'day').toLocaleTimeString(),\r\n            'subtract-months': DateUtil.subtract(new Date(), 1, 'month').toLocaleDateString() + ' ' + DateUtil.subtract(new Date(), 1, 'month').toLocaleTimeString(),\r\n        });\r\n    }\r\n}\r\n","export * from './usingVeterinary.route';\r\n","import { UsingVeterinary, TakeCare } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, TakeCareServices, SeasonAndPondServices, SeasonServices, UsingVeterinaryServices, StoregeServices } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { Transaction, FindOptions } from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport { DateUtil } from '../../lib';\r\n\r\n/**\r\n * @api {all} /usingVeterinary UsingVeterinary Request customer object\r\n * @apiName UsingVeterinary\r\n * @apiGroup UsingVeterinary\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class UsingVeterinaryRoute extends BaseRoute {\r\n    public static path = '/usingVeterinary';\r\n    private static instance: UsingVeterinaryRoute;\r\n    private takeCareServices: TakeCareServices = new TakeCareServices();\r\n    private seasonAndPondServices: SeasonAndPondServices = new SeasonAndPondServices();\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private usingVeterinaryServices: UsingVeterinaryServices = new UsingVeterinaryServices();\r\n    private storegeServices: StoregeServices = new StoregeServices();\r\n    /**\r\n     * @class UsingVeterinaryRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!UsingVeterinaryRoute.instance) {\r\n            UsingVeterinaryRoute.instance = new UsingVeterinaryRoute();\r\n        }\r\n        return UsingVeterinaryRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[UsingVeterinaryRoute] Creating Using Veterinary route.');\r\n\r\n        // add route\r\n        this.router.post('/add', Authentication.isLogin, this.addUsingVeterinary);\r\n        this.router.post('/gets', Authentication.isLogin, this.getUsingVeterinary);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, UsingVeterinaryRoute.path);\r\n    }\r\n\r\n    /**\r\n     * usingFood - take care type is 0\r\n     * usingVeterinary - take care type is 1\r\n     */\r\n    private addUsingVeterinary = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondId, takeCareName, causesNSymptoms, averageSize, totalBiomass, result, latestHarvestDate, mentor, storageId, quantity } = request.body;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const seasonAndPond: any = await this.seasonAndPondServices.models.findOne({\r\n            include: [\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    },\r\n                    attributes: []\r\n                }\r\n            ],\r\n            where: {\r\n                pondId\r\n            },\r\n            attributes: ['seasonAndPondId']\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        });\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            const onUpdate: any = await this.storegeServices.models.update({\r\n                quantityStorages: this.sequeliz.literal(`quantityStorages - ${quantity}`)\r\n            }, {\r\n                    where: {\r\n                        storageId\r\n                    },\r\n                    transaction: t,\r\n                    returning: true\r\n                }).catch(e => {\r\n                    if (e.message === 'FailQuantity') {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Số lượng thuốc & dược phẩm trong kho không đủ.'\r\n                        });\r\n                    } else {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                        });\r\n                    }\r\n                    t.rollback();\r\n                });\r\n            if (onUpdate) {\r\n                const takeCare: TakeCare = new TakeCare();\r\n                takeCare.setTakecare(null, uuidv4(), seasonAndPond.seasonAndPondId, 1, takeCareName);\r\n                const tk: any = await this.takeCareServices.models.create(takeCare, {\r\n                    transaction: t\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                    });\r\n                    t.rollback();\r\n                });\r\n                if (tk) {\r\n                    const usingVeterinary: UsingVeterinary = new UsingVeterinary();\r\n                    usingVeterinary.setUsingveterinary(null, uuidv4(), tk.takeCareId, storageId, causesNSymptoms, averageSize, totalBiomass, quantity, result, latestHarvestDate, mentor);\r\n                    usingVeterinary.usingVeterinaryServices.models.create(usingVeterinary, {\r\n                        transaction: t\r\n                    }).catch(e => {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                        });\r\n                        t.rollback();\r\n                    }).then(res => {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: 'Thêm thành công.'\r\n                        });\r\n                        t.commit();\r\n                    });\r\n                }\r\n            } else {\r\n                t.rollback();\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get Cho ăn\r\n     * @method POST\r\n     */\r\n    private getUsingVeterinary = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondId, seasonId, options } = request.body;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        const query: FindOptions<any> = {\r\n            include: [\r\n                {\r\n                    model: this.usingVeterinaryServices.models,\r\n                    as: ActionAssociateDatabase.TAKE_CARE_2_USING_VETERINARY,\r\n                    where: {\r\n                        createdDate: {\r\n                            [this.sequeliz.Op.between]: [\r\n                                DateUtil.getUTCDateTime(DateUtil.startOf(DateUtil.parse(options.timeOut || new Date()), options.unitOfTime)),\r\n                                DateUtil.getUTCDateTime(DateUtil.endOf(DateUtil.parse(options.timeOut || new Date()), options.unitOfTime))\r\n                            ]\r\n                        }\r\n                    },\r\n                    include: [\r\n                        {\r\n                            model: this.storegeServices.models,\r\n                            as: ActionAssociateDatabase.USING_VETERINARY_2_STORAGE\r\n                        }\r\n                    ],\r\n                    required: false\r\n                }\r\n            ],\r\n            where: {\r\n                type: 1\r\n            }\r\n        };\r\n\r\n        if (isBoss) {\r\n            query.include.push({\r\n                model: this.seasonAndPondServices.models,\r\n                as: ActionAssociateDatabase.TAKE_CARE_2_SEASON_AND_POND,\r\n                where: {\r\n                    seasonId,\r\n                    pondId\r\n                },\r\n                attributes: []\r\n            });\r\n        } else {\r\n            query.include.push({\r\n                model: this.seasonAndPondServices.models,\r\n                as: ActionAssociateDatabase.TAKE_CARE_2_SEASON_AND_POND,\r\n                where: {\r\n                    seasonId,\r\n                    pondId\r\n                },\r\n                include: [\r\n                    {\r\n                        model: this.seasonServices.models,\r\n                        as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                        where: {\r\n                            status: 0\r\n                        }\r\n                    }\r\n                ],\r\n                attributes: []\r\n            });\r\n        }\r\n\r\n        this.takeCareServices.models.findAll(query).then(res => {\r\n            if (res) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    takeCare: res\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy nhật ký cho ăn của ao này'\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './costs.route';\r\n","import { Request, Response, NextFunction } from 'express';\r\nimport { logger, MaterialServives, CouponServives, StoregeServices, BoughtBreedDetailsServives, BreedServives, HarvestDetailsServives, HarvestsServives, SeasonAndPondServices, SeasonServices, StockingServices, StockingDetailsServices, PondsServices } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport { FindOptions, Transaction } from 'sequelize';\r\nimport { sumBy, groupBy, uniqBy } from 'lodash';\r\n\r\n/**\r\n * @api {get} /costs Cost Request customer object\r\n * @apiName Cost\r\n * @apiGroup Cost\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class CostsRoute extends BaseRoute {\r\n    public static path = '/costs';\r\n    private static instance: CostsRoute;\r\n    private materialServives: MaterialServives = new MaterialServives();\r\n    private couponServives: CouponServives = new CouponServives();\r\n    private storegeServices: StoregeServices = new StoregeServices();\r\n    private boughtBreedDetailsServives: BoughtBreedDetailsServives = new BoughtBreedDetailsServives();\r\n    private breedServives: BreedServives = new BreedServives();\r\n    private harvestDetailsServives: HarvestDetailsServives = new HarvestDetailsServives();\r\n    private harvestsServives: HarvestsServives = new HarvestsServives();\r\n    private seasonAndPondServices: SeasonAndPondServices = new SeasonAndPondServices();\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private stockingServices: StockingServices = new StockingServices();\r\n    private stockingDetailsServices: StockingDetailsServices = new StockingDetailsServices();\r\n    private pondsServices: PondsServices = new PondsServices();\r\n    /**\r\n     * @class CostsRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!CostsRoute.instance) {\r\n            CostsRoute.instance = new CostsRoute();\r\n        }\r\n        return CostsRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[CostsRoute] Creating prices route.');\r\n\r\n        // add route\r\n        // this.router.get('/gets/:seasonId', this.getAllPrices);\r\n        this.router.get('/gets/storage/:seasonUUId', this.storageCost);\r\n        this.router.get('/gets/breed/:seasonUUId', this.breedCost);\r\n        this.router.get('/gets/harvest/:seasonUUId', this.harvestCalculator);\r\n\r\n        // log endpoint\r\n        this.logEndpoints(this.router, CostsRoute.path);\r\n    }\r\n\r\n    private getAllPrices = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonId } = request.params;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n\r\n        const mat: any = await this.materialServives.models.findAll({\r\n            attributes: [[this.sequeliz.literal('SUM(quantity*unitPrice)'), 'totalPrices']] as any,\r\n            include: [\r\n                {\r\n                    model: this.couponServives.models,\r\n                    as: ActionAssociateDatabase.MATERIAL_2_COUPON,\r\n                    include: [\r\n                        {\r\n                            model: this.seasonServices.models,\r\n                            as: ActionAssociateDatabase.COUPON_2_SEASON,\r\n                            where: {\r\n                                userId\r\n                            }\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    model: this.storegeServices.models,\r\n                    as: ActionAssociateDatabase.MATERIAL_2_STORAGE\r\n                }\r\n            ],\r\n            group: ['type']\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n\r\n        const bre: any = await this.boughtBreedDetailsServives.models.findAll({\r\n            attributes: [[this.sequeliz.literal('SUM(quantity*unitPrice)'), 'totalPrices']] as any,\r\n            include: [\r\n                {\r\n                    model: this.couponServives.models,\r\n                    as: ActionAssociateDatabase.BOUGHT_BREED_DETAIL_2_COUPON,\r\n                    include: [\r\n                        {\r\n                            model: this.seasonServices.models,\r\n                            as: ActionAssociateDatabase.COUPON_2_SEASON,\r\n                            where: {\r\n                                userId\r\n                            }\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    model: this.breedServives.models,\r\n                    as: ActionAssociateDatabase.BOUGHT_BREED_DETAIL_2_BREED\r\n                }\r\n            ]\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n\r\n        const har: any = await this.harvestDetailsServives.models.findAll({\r\n            attributes: [[this.sequeliz.literal('SUM(quantity*unitPrice)'), 'totalPrices']] as any,\r\n            include: [\r\n                {\r\n                    model: this.harvestsServives.models,\r\n                    as: ActionAssociateDatabase.HARVEST_DETAIL_2_HARVEST,\r\n                    include: [\r\n                        {\r\n                            model: this.seasonAndPondServices.models,\r\n                            as: ActionAssociateDatabase.HARVEST_2_SEASON_AND_POND,\r\n                            include: [\r\n                                {\r\n                                    model: this.seasonServices.models,\r\n                                    as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                                    where: {\r\n                                        userId\r\n                                    }\r\n                                }\r\n                            ]\r\n                        }\r\n                    ]\r\n                }\r\n            ],\r\n            group: ['harvest.seasonAndPondId']\r\n        }).catch(e => {\r\n            e;\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n\r\n        if(!!mat.length && !!bre.length && !!har.length) {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                storages: mat,\r\n                breeds: bre,\r\n                harvest: har\r\n            });\r\n        } else {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Không tìm thấy thông tin chi phí của vụ nuôi này.',\r\n                results: []\r\n            });\r\n        }\r\n    }\r\n\r\n    private storageCost = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonUUId } = request.params;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            const query: FindOptions<any> = {\r\n                include: [\r\n                    {\r\n                        model: this.materialServives.models,\r\n                        as: ActionAssociateDatabase.COUPON_2_MATERIAL,\r\n                        include: [\r\n                            {\r\n                                model: this.storegeServices.models,\r\n                                as: ActionAssociateDatabase.MATERIAL_2_STORAGE\r\n                            }\r\n                        ]\r\n                    },\r\n                    {\r\n                        model: this.seasonServices.models,\r\n                        as: ActionAssociateDatabase.COUPON_2_SEASON,\r\n                        where: {\r\n                            userId,\r\n                            seasonUUId\r\n                        }\r\n                    }\r\n                ],\r\n                transaction: t\r\n            };\r\n            const tables: any = await this.couponServives.models.findAll(query);\r\n\r\n            query.attributes =  [\r\n                [this.sequeliz.literal(`SUM(materials.quantity*materials.unitPrice)`), 'totals'],\r\n                'createdDate'\r\n            ];\r\n            query.group = [\r\n                this.sequeliz.fn('YEAR', this.sequeliz.fn('CONVERT_TZ',this.sequeliz.col('coupons.createdDate'),'UTC','vi-VN')),\r\n                this.sequeliz.fn('MONTH', this.sequeliz.fn('CONVERT_TZ',this.sequeliz.col('coupons.createdDate'),'UTC','vi-VN')),\r\n                this.sequeliz.fn('DAY', this.sequeliz.fn('CONVERT_TZ',this.sequeliz.col('coupons.createdDate'),'UTC','vi-VN')),\r\n                this.sequeliz.col('materials->storage.type')\r\n            ];\r\n\r\n            const charts: any = await this.couponServives.models.findAll(query);\r\n\r\n            const labels: any = uniqBy(charts, (u: any) => {\r\n                const d: Date = new Date(u.createdDate);\r\n                return d.getDate() + d.getMonth() + d.getFullYear();\r\n            });\r\n\r\n            return new Promise((resolve, reject) => {\r\n                t.commit();\r\n                if(!!tables.length && !!charts.length) {\r\n                    resolve({\r\n                        tables,\r\n                        charts,\r\n                        labels: labels.map(e => e.createdDate)\r\n                    });\r\n                } else {\r\n                    resolve({\r\n                        success: false,\r\n                        message: 'Không tìm thấy thông tin NHẬP KHO.',\r\n                        tables: [],\r\n                        charts: [],\r\n                        labels: []\r\n                    });\r\n                }\r\n            });\r\n        }).then(res => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                ...res\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau!'\r\n            });\r\n        });\r\n    }\r\n\r\n    private breedCost = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonUUId } = request.params;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            const query: FindOptions<any> = {\r\n                include: [\r\n                    {\r\n                        model: this.boughtBreedDetailsServives.models,\r\n                        as: ActionAssociateDatabase.COUPON_2_BOUGHT_BREED_DETAILS,\r\n                        include: [\r\n                            {\r\n                                model: this.breedServives.models,\r\n                                as: ActionAssociateDatabase.BOUGHT_BREED_DETAIL_2_BREED\r\n                            }\r\n                        ]\r\n                    },\r\n                    {\r\n                        model: this.seasonServices.models,\r\n                        as: ActionAssociateDatabase.COUPON_2_SEASON,\r\n                        where: {\r\n                            userId,\r\n                            seasonUUId\r\n                        }\r\n                    }\r\n                ],\r\n                transaction: t\r\n            };\r\n            const tables: any = await this.couponServives.models.findAll(query);\r\n\r\n            query.attributes =  [\r\n                [this.sequeliz.literal(`SUM(boughtBreedDetails.quantity*boughtBreedDetails.unitPrice)`), 'totals'],\r\n                'createdDate'\r\n            ];\r\n            query.group = [\r\n                this.sequeliz.fn('YEAR', this.sequeliz.fn('CONVERT_TZ',this.sequeliz.col('coupons.createdDate'),'UTC','vi-VN')),\r\n                this.sequeliz.fn('MONTH', this.sequeliz.fn('CONVERT_TZ',this.sequeliz.col('coupons.createdDate'),'UTC','vi-VN')),\r\n                this.sequeliz.fn('DAY', this.sequeliz.fn('CONVERT_TZ',this.sequeliz.col('coupons.createdDate'),'UTC','vi-VN'))\r\n            ];\r\n\r\n            const charts: any = await this.couponServives.models.findAll(query);\r\n\r\n            let labels: any = uniqBy(charts, (u: any) => {\r\n                const d: Date = new Date(u.createdDate);\r\n                return d.getDate() + d.getMonth() + d.getFullYear();\r\n            });\r\n\r\n            labels = labels.map(e => {\r\n                const dL: Date = new Date(e.createdDate);\r\n                const isDL: number = dL.getDate() + dL.getMonth() + dL.getFullYear();\r\n                const sum: number = sumBy(charts, (u: any) => {\r\n                    const dS: Date = new Date(u.createdDate);\r\n                    const isDS: number = dS.getDate() + dS.getMonth() + dS.getFullYear();\r\n                    if(isDL === isDS) {\r\n                        return u.quantity * u.unitPrice;\r\n                    } else {\r\n                        false;\r\n                    }\r\n                });\r\n                e[`totals`] = sum;\r\n                return e;\r\n            });\r\n\r\n            return new Promise((resolve, reject) => {\r\n                t.commit();\r\n                if(!!tables.length && !!charts.length) {\r\n                    resolve({\r\n                        tables,\r\n                        charts,\r\n                        labels\r\n                    });\r\n                } else {\r\n                    resolve({\r\n                        success: false,\r\n                        message: 'Không tìm thấy thông tin NHẬP GIỐNG.',\r\n                        tables: [],\r\n                        charts: [],\r\n                        labels: []\r\n                    });\r\n                }\r\n            });\r\n        }).then(res => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                ...res\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi đường truyền, vui lòng thử lại sau!'\r\n            });\r\n        });\r\n    }\r\n\r\n    /** 8da8abfa-bf60-4f9f-ada7-9fcbdf905ef5 */\r\n    private harvestCalculator = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonUUId } = request.params;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            let charts: any = await this.harvestsServives.models.findAll({\r\n                include: [\r\n                    {\r\n                        model: this.harvestDetailsServives.models,\r\n                        as: ActionAssociateDatabase.HARVEST_2_HARVEST_DETAILS\r\n                    },\r\n                    {\r\n                        model: this.seasonAndPondServices.models,\r\n                        as: ActionAssociateDatabase.HARVEST_2_SEASON_AND_POND,\r\n                        required: true,\r\n                        include: [\r\n                            {\r\n                                model: this.stockingServices.models,\r\n                                as: ActionAssociateDatabase.SEASON_AND_POND_2_STOCKING,\r\n                                include: [\r\n                                    {\r\n                                        model: this.stockingDetailsServices.models,\r\n                                        as: ActionAssociateDatabase.STOCKING_2_STOCKING_DETAILS,\r\n                                        include: [\r\n                                            {\r\n                                                model: this.breedServives.models,\r\n                                                as: ActionAssociateDatabase.STOCKING_DETAILS_2_BREED\r\n                                            }\r\n                                        ]\r\n                                    }\r\n                                ]\r\n                            },\r\n                            {\r\n                                model: this.seasonServices.models,\r\n                                as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                                required: true,\r\n                                where: {\r\n                                    userId,\r\n                                    seasonUUId\r\n                                }\r\n                            },\r\n                            {\r\n                                model: this.pondsServices.models,\r\n                                as: ActionAssociateDatabase.SEASON_AND_POND_2_POND\r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            });\r\n\r\n            return new Promise((resolve, reject) => {\r\n                t.commit();\r\n                charts = charts.map((e: any) => {\r\n                    const dL: Date = new Date(e.createdDate);\r\n                    const isDL: number = dL.getDate() + dL.getMonth() + dL.getFullYear();\r\n                    for(const e$ of charts) {\r\n                        const dS: Date = new Date(e$.createdDate);\r\n                        const isDS: number = dS.getDate() + dS.getMonth() + dS.getFullYear();\r\n                        if(isDL === isDS) {\r\n                            e.dataValues[`totals`] = e.details[0].quantity * e.details[0].unitPrice;\r\n                            return e.dataValues;\r\n                        }\r\n                    }\r\n                });\r\n                return resolve(charts);\r\n                // if(!!tables.length && !!charts.length) {\r\n                //     resolve({\r\n                //         tables,\r\n                //         charts\r\n                //     });\r\n                // } else {\r\n                //     resolve({\r\n                //         success: false,\r\n                //         message: 'Không tìm thấy thông tin NHẬP GIỐNG.'\r\n                //     });\r\n                // }\r\n            });\r\n        }).then((res: any) => {\r\n            if(!!res.length) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    charts: res\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy thông tin THU HOẠCH.',\r\n                    charts: []\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            e;\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau!'\r\n            });\r\n        });\r\n    }\r\n}\r\n","import * as SocketIO from 'socket.io';\r\nimport { BaseSocketServer } from './BaseSocket';\r\nimport { TaskScheduler } from './task-scheduler.socket';\r\n\r\nexport class SocketBuild extends BaseSocketServer {\r\n    constructor(protected io: SocketIO.Server) {\r\n        super(io);\r\n        new TaskScheduler(this.io);\r\n    }\r\n}\r\n","import * as SocketIO from 'socket.io';\r\nimport { BaseSocketServer } from './BaseSocket';\r\nimport { PondsServices } from '../services';\r\nimport * as schedule from 'node-schedule';\r\nimport { DateUtil } from '../lib';\r\n\r\nexport class TaskScheduler extends BaseSocketServer {\r\n\r\n    private pondsServices: PondsServices = new PondsServices();\r\n\r\n    constructor(protected io: SocketIO.Server) {\r\n        super(io);\r\n        const timeToUpdate: any = DateUtil.endOf(new Date(), 'dates');\r\n        // const timeToUpdate: any = new Date(2018,11,10,17,11,0);\r\n\r\n        schedule.scheduleJob(timeToUpdate, async () => {\r\n            await this.pondsServices.models.update({\r\n                isFed: 0\r\n            });\r\n            this.io.sockets.emit('update-using-food-status', {\r\n                success: true\r\n            });\r\n        });\r\n    }\r\n}\r\n","module.exports = require(\"node-schedule\");","module.exports = require(\"debug\");"],"sourceRoot":""}