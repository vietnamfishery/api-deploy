{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./services/index.ts","webpack:///./common/index.ts","webpack:///./lib/index.ts","webpack:///external \"lodash\"","webpack:///external \"sequelize\"","webpack:///./models/objects/index.ts","webpack:///./services/base.services.ts","webpack:///./components/baseComponents.ts","webpack:///./models/objects/base.model.ts","webpack:///./routes/BaseRoute.ts","webpack:///./components/index.ts","webpack:///./helpers/login-helpers.ts","webpack:///../node_modules/uuid/v4.js","webpack:///./googleAPI/drive.google.ts","webpack:///./config/index.ts","webpack:///./helpers/db-helpers.ts","webpack:///./schemas/index.ts","webpack:///external \"fs\"","webpack:///external \"express\"","webpack:///external \"moment-timezone\"","webpack:///./lib/promise.ts","webpack:///external \"bluebird\"","webpack:///./models/ponduserroles.associate.ts","webpack:///./services/logger.ts","webpack:///./services/user.services.ts","webpack:///./components/district/index.ts","webpack:///./components/province/index.ts","webpack:///./components/ward/index.ts","webpack:///external \"jsonwebtoken\"","webpack:///./socketServer/BaseSocket.ts","webpack:///./index.ts","webpack:///./app.ts","webpack:///./bin/setEnvironment.ts","webpack:///external \"dotenv\"","webpack:///external \"body-parser\"","webpack:///external \"cookie-parser\"","webpack:///external \"http-errors\"","webpack:///external \"compression\"","webpack:///external \"errorhandler\"","webpack:///external \"cors\"","webpack:///external \"express-status-monitor\"","webpack:///external \"helmet\"","webpack:///external \"method-override\"","webpack:///external \"morgan\"","webpack:///external \"path\"","webpack:///external \"express-fileupload\"","webpack:///external \"socket.io\"","webpack:///external \"http\"","webpack:///external \"googleapis\"","webpack:///./common/constant.ts","webpack:///./lib/date-util.ts","webpack:///./lib/enscrypts.ts","webpack:///external \"bcryptjs\"","webpack:///./lib/stream.ts","webpack:///external \"stream\"","webpack:///external \"os\"","webpack:///./models/model-builder.ts","webpack:///./models/index.ts","webpack:///./models/boughtbreeddetails.associate.ts","webpack:///./models/boughtbreeds.associate.ts","webpack:///./models/breeds.associate.ts","webpack:///./models/ownerBreed.associate.ts","webpack:///./models/costs.associate.ts","webpack:///./models/coupon.associate.ts","webpack:///./models/diedfisherys.associate.ts","webpack:///./models/growths.associate.ts","webpack:///./models/harvestdetails.associate.ts","webpack:///./models/harvests.associate.ts","webpack:///./models/material.associate.ts","webpack:///./models/ponddiary.associate.ts","webpack:///./models/pondenvironments.associate.ts","webpack:///./models/pondprepare.associate.ts","webpack:///./models/pondpreparedetails.associate.ts","webpack:///./models/ponds.associate.ts","webpack:///./models/prices.associate.ts","webpack:///./models/season.associate.ts","webpack:///./models/seasonandpond.associate.ts","webpack:///./models/stocking.associate.ts","webpack:///./models/stockingdetails.associate.ts","webpack:///./models/storages.associate.ts","webpack:///./models/storageOwner.associate.ts","webpack:///./models/takecare.associate.ts","webpack:///./models/users.associate.ts","webpack:///./models/userRoles.associate.ts","webpack:///./models/usingfoods.associate.ts","webpack:///./models/usingveterinary.associate.ts","webpack:///./models/province.associate.ts","webpack:///./models/district.associate.ts","webpack:///./models/ward.associate.ts","webpack:///./models/incurreds.associate.ts","webpack:///./models/objects/boughtbreeddetails.ts","webpack:///./models/objects/boughtbreeds.ts","webpack:///./models/objects/breeds.ts","webpack:///./models/objects/costs.ts","webpack:///./models/objects/coupons.ts","webpack:///./models/objects/diedfisherys.ts","webpack:///./models/objects/district.ts","webpack:///./models/objects/growths.ts","webpack:///./models/objects/harvestdetails.ts","webpack:///./models/objects/harvests.ts","webpack:///./models/objects/material.ts","webpack:///./models/objects/ownerBreed.model.ts","webpack:///./models/objects/ponddiary.ts","webpack:///./models/objects/pondenvironments.ts","webpack:///./models/objects/pondprepare.ts","webpack:///./models/objects/pondpreparedetails.ts","webpack:///./models/objects/ponds.ts","webpack:///./models/objects/ponduserroles.ts","webpack:///./models/objects/prices.ts","webpack:///./models/objects/province.ts","webpack:///./models/objects/seasons.ts","webpack:///./models/objects/incurreds.model.ts","webpack:///./models/objects/seasonandpond.ts","webpack:///./models/objects/stocking.ts","webpack:///./models/objects/stockingdetails.ts","webpack:///./models/objects/storages.model.ts","webpack:///./models/objects/storageOwner.model.ts","webpack:///./models/objects/takecare.ts","webpack:///./models/objects/users.ts","webpack:///./models/objects/userRoles.ts","webpack:///./models/objects/usingfoods.ts","webpack:///./models/objects/usingveterinary.ts","webpack:///./models/objects/ward.ts","webpack:///./routes/index.ts","webpack:///external \"http-status-codes\"","webpack:///external \"is-my-json-valid\"","webpack:///./routes/users/index.ts","webpack:///./routes/users/users.route.ts","webpack:///external \"winston\"","webpack:///./services/upload.ts","webpack:///external \"del\"","webpack:///./components/boughtBreed/index.ts","webpack:///./components/boughtBreed/boughtBreed.ts","webpack:///./components/boughtBreedDetail/index.ts","webpack:///./components/boughtBreedDetail/boughtBreedDetail.ts","webpack:///./components/breed/index.ts","webpack:///./components/breed/breed.ts","webpack:///./components/breedOwner/index.ts","webpack:///./components/breedOwner/breedOwner.ts","webpack:///./components/cost/index.ts","webpack:///./components/cost/cost.ts","webpack:///./components/coupon/index.ts","webpack:///./components/coupon/coupon.ts","webpack:///./components/diedFishery/index.ts","webpack:///./components/diedFishery/diedFishery.ts","webpack:///./components/district/district.ts","webpack:///./components/growth/index.ts","webpack:///./components/growth/growth.ts","webpack:///./components/harvestDetail/index.ts","webpack:///./components/harvestDetail/harvestDetail.ts","webpack:///./components/harvest/index.ts","webpack:///./components/harvest/harvest.ts","webpack:///./components/material/index.ts","webpack:///./components/material/material.ts","webpack:///./components/pondEnvironment/index.ts","webpack:///./components/pondEnvironment/pondEnvironment.ts","webpack:///./components/pondUserRole/index.ts","webpack:///./components/pondUserRole/pondUserRole.ts","webpack:///./components/pondDiary/index.ts","webpack:///./components/pondDiary/pondDiary.ts","webpack:///./components/pondPrepare/index.ts","webpack:///./components/pondPrepare/pondPrepare.ts","webpack:///./components/pondPrepareDetails/index.ts","webpack:///./components/pondPrepareDetails/pondPrepareDetails.ts","webpack:///./components/pond/index.ts","webpack:///./components/pond/pond.ts","webpack:///./components/price/index.ts","webpack:///./components/price/price.ts","webpack:///./components/province/province.ts","webpack:///./components/season/index.ts","webpack:///./components/season/season.ts","webpack:///./components/seasonsAndPond/index.ts","webpack:///./components/seasonsAndPond/seasonsAndPond.ts","webpack:///./components/stocking/index.ts","webpack:///./components/stocking/stocking.ts","webpack:///./components/stockingDetail/index.ts","webpack:///./components/stockingDetail/stockingDetail.ts","webpack:///./components/storage/index.ts","webpack:///./components/storage/storage.ts","webpack:///./components/storageOwner/index.ts","webpack:///./components/storageOwner/storageOwner.ts","webpack:///./components/takeCare/index.ts","webpack:///./components/takeCare/takeCare.ts","webpack:///./components/userRole/index.ts","webpack:///./components/userRole/userRole.ts","webpack:///./components/user/index.ts","webpack:///./components/user/user.ts","webpack:///./components/usingFood/index.ts","webpack:///./components/usingFood/usingFood.ts","webpack:///./components/usingVeterinary/index.ts","webpack:///./components/usingVeterinary/usingVeterinary.ts","webpack:///./components/ward/ward.ts","webpack:///./components/incurreds/index.ts","webpack:///./components/incurreds/incurreds.ts","webpack:///./services/bought-breed-details.services.ts","webpack:///./services/bought-breeds.services.ts","webpack:///./services/breeds.services.ts","webpack:///./services/breedOwner.services.ts","webpack:///./services/costs.services.ts","webpack:///./services/coupon.services.ts","webpack:///./services/died-fisherys.services.ts","webpack:///./services/district.services.ts","webpack:///./services/growths.services.ts","webpack:///./services/harvest-details.services.ts","webpack:///./services/harvests.services.ts","webpack:///./services/material.services.ts","webpack:///./services/pond-diary.services.ts","webpack:///./services/pond-environments.services.ts","webpack:///./services/pond-prepare-details.services.ts","webpack:///./services/pond-prepare.services.ts","webpack:///./services/ponds.services.ts","webpack:///./services/prices.services.ts","webpack:///./services/province.services.ts","webpack:///./services/pondUserRoles.services.ts","webpack:///./services/season.services.ts","webpack:///./services/stocking-details.services.ts","webpack:///./services/stocking.services.ts","webpack:///./services/storages.services.ts","webpack:///./services/storagesOwner.services.ts","webpack:///./services/take-care.services.ts","webpack:///./services/usersRoles.services.ts","webpack:///./services/using-foods.services.ts","webpack:///./services/using-veterinary.services.ts","webpack:///./services/ward.services.ts","webpack:///./services/seasonAndPond.services.ts","webpack:///./services/incurreds.services.ts","webpack:///../node_modules/uuid/lib/rng.js","webpack:///external \"crypto\"","webpack:///../node_modules/uuid/lib/bytesToUuid.js","webpack:///./routes/upload/index.ts","webpack:///./routes/upload/upload.route.ts","webpack:///./routes/getFile/index.ts","webpack:///./routes/getFile/getFile.route.ts","webpack:///./routes/province/index.ts","webpack:///./routes/province/province.route.ts","webpack:///./routes/district/index.ts","webpack:///./routes/district/district.route.ts","webpack:///./routes/ward/index.ts","webpack:///./routes/ward/ward.route.ts","webpack:///./routes/ponds/index.ts","webpack:///./routes/ponds/ponds.route.ts","webpack:///./schemas/pondPrepare.schema.ts","webpack:///./schemas/seasons.schema.ts","webpack:///./schemas/ponds.schema.ts","webpack:///./schemas/pondDiary.schema.ts","webpack:///./routes/seasons/index.ts","webpack:///./routes/seasons/seasons.route.ts","webpack:///./routes/pondPrepare/index.ts","webpack:///./routes/pondPrepare/pondPrepare.route.ts","webpack:///./routes/pondPrepareDetail/index.ts","webpack:///./routes/pondPrepareDetail/pondPrepareDetails.route.ts","webpack:///./routes/storages/index.ts","webpack:///./routes/storages/storages.route.ts","webpack:///./routes/breed/index.ts","webpack:///./routes/breed/breed.route.ts","webpack:///./routes/stocking/index.ts","webpack:///./routes/stocking/stocking.route.ts","webpack:///./routes/diedFishery/index.ts","webpack:///./routes/diedFishery/diedFishery.route.ts","webpack:///./routes/growths/index.ts","webpack:///./routes/growths/growths.route.ts","webpack:///./routes/harvest/index.ts","webpack:///./routes/harvest/harvest.route.ts","webpack:///./routes/userRoles/index.ts","webpack:///./routes/userRoles/userRoles.route.ts","webpack:///./routes/pondUserRoles/index.ts","webpack:///./routes/pondUserRoles/pondsUsersRoles.route.ts","webpack:///./routes/material/index.ts","webpack:///./routes/material/material.route.ts","webpack:///./routes/seasonAndPond/index.ts","webpack:///./routes/seasonAndPond/seasonAndPond.route.ts","webpack:///./routes/usingFood/index.ts","webpack:///./routes/usingFood/usingFood.route.ts","webpack:///./routes/pondDiary/index.ts","webpack:///./routes/pondDiary/pondDiary.route.ts","webpack:///./routes/takeCare/index.ts","webpack:///./routes/takeCare/takeCare.route.ts","webpack:///./routes/usingVeterinary/index.ts","webpack:///./routes/usingVeterinary/usingVeterinary.route.ts","webpack:///./routes/costs/index.ts","webpack:///./routes/costs/costs.route.ts","webpack:///./socketServer/index.ts","webpack:///./socketServer/task-scheduler.socket.ts","webpack:///external \"node-schedule\"","webpack:///external \"greenlock-express\"","webpack:///external \"debug\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","__export","require","Sequeliz","db_helpers_1","lib_1","BaseServices","optionsModel","tableName","attributes","options","this","Op","conn","default","getById","id","userId","_this","Promise","resolve","reject","models","findById","then","obj","dataValues","getAll","query","findAll","getQuery","catch","e","insert","data","record","update","md","where","primaryFieldName","primaryKeyField","res","findAndCountAll","criteria","BaseComponent","criteriaQuery","offset","pageIndex","Number","limit","pageSizes","__assign","getFields","that","undefined","match","services","gets","condition","gotOptions","baseModel","createdAt","updatedAt","deletedAt","defaultScope","isDeleted","scopes","deletedRecord","hooks","express_1","config_1","validator","BaseRoute","router","Router","connection","sequeliz","sequelize","logEndpoints","path","_i","_a","stack","length","endpoints","keys","route","methods","toLocaleUpperCase","console","log","method","colorCli","MAGENTA","post","YELLOW","put","CYAN","RED","RESET","host","port","countEndpoints","jwt","fs_1","lodash_1","Authentication","isLogin","request","response","next","token","headers","authorization","split","status","json","success","message","verify","cert","algorithms","err","isBoss","deToken","detoken","ownerId","createdBy","roles","bossId","isPondRole","find","isStorageRole","decode","readFileSync","process","cwd","rng","bytesToUuid","v4","buf","Array","rnds","random","ii","googleapis_1","common_1","GoogleDrive","drive","google","JSON","parse","env","GOOGLE_API_KEY","jwtToken","auth","JWT","client_email","private_key","authorize","GREEN","upload","image","files","images","requestBody","parents","folderDrive","uploadImageVNF","media","mediaType","mimetype","body","CustomStream","BufferToStream","file","fileId","delayGetFileById","alt","responseType","type","prefix","base64","toString","getFile","__awaiter","params","error","moment","os","environment","Dialect","trim","development","isProd","reg","RegExp","wifi","networkInterfaces","test","address","hostname","databaseName","PORT","pool","acquire","idle","max","min","authdb","password","username","replication","read","write","timezone","utc","format","configDB","dialect","mysql","operatorsAliases","config","rootEndpoint","APIVersion","config_2","model_builder_1","DBHelper","forEach","element","toModel","getDatabaseConnection","authenticate","modelName","model","deleteMode","define","modelBuilder","ModelBuilder","usersAssociate","boughtbreedsAssociate","boughtbreeddetailsAssociate","breedOwnerAssociate","provinceAssociate","districtAssociate","wardAssociate","breedsAssociate","costsAssociate","couponAssociate","diedfisherysAssociate","growthsAssociate","harvestdetailsAssociate","harvestsAssociate","materialAssociate","ponddiaryAssociate","pondenvironmentAssociate","pondprepareAssociate","pondpreparedetailsAssociate","incurredAssociate","pondsAssociate","pricesAssociate","ponduserrolesAssociate","userRolesAssociate","usingveterinaryAssociate","usingfoodsAssociate","takecareAssociate","storagesAssociate","storageOwnerAssociate","stockingdetailsAssociate","stockingAssociate","seasonAssociate","seasonAndPondAssociate","warnings","wForgottenReturn","ponduserrolesToPond","thatmodel","belongsTo","as","ActionAssociateDatabase","POND_USER_ROLE_2_POND","foreignKey","field","ponduserrolesToUser","POND_USER_ROLE_2_USER","fs","winston","PATHS","LOG","LOG_ERROR","LOG_INFO","existsSync","mkdirSync","logger","exitOnError","transports","File","colorize","filename","handleExceptions","level","maxFiles","maxsize","Console","base_services_1","objects_1","components_1","UserServives","_super","__extends","usersModel","register","entity","transaction","autocommit","user","userRoles","UserRole","setUserId","setRoles","userRolesServices","getUserByUsername","userCriteria","findOne","joinQuery","getUsername","registerChild","updateMyProfile","changePassword","enity","userQuery","include","province","USER_2_PRO","district","USER_2_DIS","ward","USER_2_WAR","getSeasonWithUser","seasons","USER_2_SEASON","order","userOptions","logger_1","BaseSocketServer","io","on","socket","socketConnection","info","reason","app_1","greenlock","Debug","debug","app","ServerExpress","bootstrap","email","agreeTos","configDir","communityMember","telemetry","listen","setEnvironment_1","bodyParser","cookieParser","createError","compression","errorHandler","express","cors","expressStatusMonitor","helmet","methodOverride","morgan","fileUpload","SocketIO","http_1","drive_google_1","routes_1","services_1","index_1","handleErr","use","req","locals","render","routes","ApiRoutes","server","createServer","SocketBuild","static","join","__dirname","set","stream","urlencoded","extended","limits","fileSize","dotenv","setEnvironment","ContentType","Gzip","Json","JsonUtf8","apig","logLevel","metricsEnabled","origin","AccessExposeHeaders","IdDataTypes","Integer","UuidV1","UuidV4","defaultImage","isUUId4","DateUtil","getNow","toDate","getNowByTimeZone","timeZone","tz","getUTCDateTime","date","formatDate","isUTC","ignoreConvert","replace","str","refFormatDate","newFormat","diffDate","unitOfTime","diff","add","amount","subtract","endOf","startOf","bcryptjs","promise_1","Enscrypts","reCryptToken","tokenBCrypt","slice","Math","floor","extractToken","tokenCheck","getSalt","rounds","genSalt","getSaltSync","genSaltSync","hashing","text","salt","hash","hashingSync","hashSync","compare","candidate","compareSync","Stream","bluebird_1","buffer","Duplex","push","StreamToBuffer","buffers","Buffer","concat","associations","couponModel","breedsModel","boughtbreeddetailsToCoupon","boughtbreeddetailsToBreeds","seasonModel","boughtbreedsToSeason","boughtbreedsToUser","boughtBreedDetailsModel","stockingDetailsModel","breedOwnerModel","breedToBoughBreedDetails","breedsToStockingDetails","breedsToOwnerBreed","pondPrepareModel","costsToPondPrepare","materialModel","couponToMaterial","couponToBoughtBreedDetails","couponToUsers","couponToSeason","seasonAndPondModel","diedfisherysToSeasonAndPond","userModel","districtToUser","growthsToSeasonAndPond","harvestsModel","harvestdetailsToHarvests","harvestDetailModel","harvestsToHarvestDetails","harvestsToSeasonAndPond","incurredsToPondPrepare","incurredsToUser","storageModel","usingFoodModel","usingVeterinayModel","materialToCoupon","materialToPondPrepare","materialToStorages","materialToUsingFood","materialToUsingVeterinary","ponddiaryToSeasonAndPond","seasonAndModel","pondenvironmenToSeasonAndPond","costsModel","pondPrepareDetailModel","incurredModel","pondprepareToCosts","pondprepareToPondPrepareDetails","pondprepareToSeasonAndPond","pondprepareToIncurred","pondpreparedetailsToStorage","pondpreparedetailsToPondPrepare","pondUserRolesModel","pondsToPondUserRoles","pondsToSeasonAndPond","pondsToUser","pondsToUserEmployee","pondToSeason","pondsModel","pricesToSeason","provinceToUser","boughtBreedModel","priceModel","rolesUserModel","seasonToBoughtBreed","seasonToPrice","seasonToUser","seasonToSNP","seasonToPond","seasonToUserRoles","seasonToCoupon","diedFishModel","growthModel","harvestModel","pondDiary","pondEnvironmentModel","stockingModel","takeCareModel","withDiedFish","withGrowths","withHarvest","withPondDiary","withPondEnv","withPondPrepare","withPond","withSeason","withStocking","withTakeCare","stockingdetailsModel","stockingToSNP","stockingToStockingdetails","stockingdetailsToBreeds","stockingdetailsToStocking","materialsModel","storageOwnerModel","usingveterinaryModel","storagesToMaterial","storagesToOwner","storagesToPondPrePareDetail","storagesToUsingFood","storagesToUsingVeterinary","ownerToStorage","ownerToUser","breedModel","ownerBreedToBreed","ownerBreedToUser","usingfoodsModel","takecareToSNP","takecareToUsingfoods","takecareToUsingveterinary","userrolesToPondUserRoles","userrolesToUsers","userrolesToUsersBoss","userrolesToSeason","districtModel","boughtbreedsModel","provinceModel","wardModel","ownerStorageModel","userToDistrict","userToRolesUser","userToPond","userToPondRolesBelongMany","userToCoupon","userToBoughtBreeds","userToProvince","userToSeason","userToWard","userToRolesBoss","userToOwnerStorage","userToOwnerBreed","userToPondUserRoles","userToIncurred","takecareModel","usingfoodsToStorage","usingfoodsToTakecare","usingveterinaryToStorage","usingveterinaryToTakecare","wardToUser","BOUGHT_BREED_DETAIL_2_COUPON","BOUGHT_BREED_DETAIL_2_BREED","BOUGHT_BREED_2_SEASON","BOUGHT_BREED_2_USER","hasMany","BREED_2_BOUGHT_BREED_DETAIL","BREED_2_STOKING_DETAIL","BREED_2_OWNER_BREED","OWNER_BREED_TO_BREED","OWNER_BREED_TO_USER","COST_2_POND_PREPARE","COUPON_2_MATERIAL","COUPON_2_BOUGHT_BREED_DETAILS","COUPON_2_USER","COUPON_2_SEASON","DIED_FISHERY_2_SEASON_AND_POND","GROWTH_2_SEASON_AND_POND","HARVEST_DETAIL_2_HARVEST","HARVEST_2_HARVEST_DETAILS","HARVEST_2_SEASON_AND_POND","MATERIAL_2_COUPON","MATERIAL_2_POND_PREPARE","MATERIAL_2_STORAGE","MATERIAL_2_USING_FOOD","MATERIAL_2_USING_VETERINARY","POND_DIARY_2_SEASON_AND_POND","POND_ENVIRONMENT_2_SEASON_AND_POND","POND_PREPARE_2_COST","POND_PREPARE_2_SEASON_AND_POND","POND_PREPARE_2_POND_PREPARE_DETAILS","POND_PREPARE_2_INCURREDS","POND_PREPARE_DETAIL_2_STORAGE","POND_PREPARE_DETAIL_2_POND_PREPARE","POND_2_POND_USER_ROLE","POND_2_SEASON_AND_POND","POND_2_USER","belongsToMany","POND_2_EMPLOYEE_MAYNY_ROLES","through","otherKey","POND_2_SEASON","PRICE_2_SEASON","SEASON_2_BOUGHT_BREED","SEASON_2_PRICE","SEASON_2_USER","SEASON_2_USER_ROLES","SEASON_2_SEASON_AND_POND","SEASON_2_COUPON","SEASON_2_POND","SEASON_AND_POND_2_DIED_FISH","SEASON_AND_POND_2_GROWTH","SEASON_AND_POND_2_HARVEST","SEASON_AND_POND_2_POND_DIARY","SEASON_AND_POND_2_POND_ENV","SEASON_AND_POND_2_POND_PREPARE","SEASON_AND_POND_2_SEASON","SEASON_AND_POND_2_POND","SEASON_AND_POND_2_STOCKING","SEASON_AND_POND_2_TAKE_CARE","STOCKING_2_SEASON_AND_POND","hasOne","STOCKING_2_STOCKING_DETAILS","STOCKING_DETAILS_2_BREED","STOCKING_DETAILS_2_STOCKING","STORAGE_2_OWNER","STORAGE_2_MATERIAL","STORAGE_2_POND_PREPARE_DETAILS","STORAGE_2_USING_FOOD","STORAGE_2_USING_VETERINARY","OWNER_TO_STORAGE","OWNER_TO_USER","TAKE_CARE_2_SEASON_AND_POND","TAKE_CARE_2_USING_FOOD","TAKE_CARE_2_USING_VETERINARY","USER_2_BOUGHT_BREED","USER_2_ROLES_USER","USER_2_POND","USER_2_POND_MANY_ROLES","USER_2_COUPON","USER_2_ROLES_GET_EMPLOYEES","USER_2_POND_USER_ROLE","USER_2_OWNER_STORAGE","USER_2_OWNER_BREED","USER_2_INCURREDS","USER_ROLES_2_POND_USER_ROLE","USER_ROLES_2_USER","USER_ROLES_2_USER_BOSS","USER_ROLES_2_SEASON","USING_FOOD_2_STORAGE","USING_FOOD_2_TAKE_CARE","USING_VETERINARY_2_STORAGE","USING_VETERINARY_2_TAKE_CARE","PROVINCE_2_USER","DISTRICT_2_USER","WARD_2_USER","INCURREDS_TO_POND_PREPARE","INCURREDS_TO_USER","Sequelize","_","base_model_1","boughtbreeddetailsOptions","merge","boughtBreedDetailId","autoIncrement","BIGINT","primaryKey","boughtBreedDetailUUId","STRING","unique","allowNull","couponId","breedId","quantity","FLOAT","unit","INTEGER","unitPrice","soldAddress","testingAgency","descriptions","TEXT","defaultValue","cloneDeep","boughtbreedOptions","boughtBreedId","boughtBreedUUId","seasonId","createdDate","DATE","breedOptions","breedUUId","breedName","totalQuantity","loopOfBreed","tips","costsOptions","costId","costUUId","pondPrepareId","label","responsible","notes","updatedBy","updatedDate","couponOptions","diedfisherysOptions","diedFisheryId","diedFisheryUUId","seasonAndPondId","card","solutions","employee","districtOptions","districtid","location","provinceid","growthOptions","growthId","growthUUId","averageDensity","averageMass","speedOdGrowth","livingRatio","harvestdetailOptions","harvestDetailUUId","harvestId","harvestOptions","harvestUUId","harvestName","materialOptions","materialId","materialUUId","storageId","provider","providerAddress","DOUBLE","ownerBreedOptions","ponddiaryOptions","pondDiaryId","pondDiaryUUId","diaryName","fisheryQuantity","healthOfFishery","pondVolume","diedFishery","pondenvironmentsOptions","pondEnvironmentId","pondEnvironmentUUId","oxyMorning","oxyAfternoon","phMorning","phAfternoon","transparent","salinity","h2s","nh3","bazo","pondprepareOptions","pondPrepareUUId","pondprepareName","pondpreparedetailOptions","pondPrepareDetailId","pondPrepareDetailUUId","pondOptions","pondId","pondUUId","pondName","pondArea","pondDepth","createCost","pondCreatedDate","isFed","isDiary","pondLatitude","pondLongitude","ponduserrolesOptions","pondUserRolesId","pricesOptions","priceId","priceUUId","totalCost","totalProfit","provinceOptions","seasonOptions","seasonUUId","seasonName","incurredsOptions","incurredId","incurredUUId","incurredName","seasonAndPondOptions","stockingOptions","stockingId","stockingUUId","stockingdetailOptions","stockingDetailUUId","stockingQuantity","phFirst","salinityFirst","storagesOptions","storageUUId","productName","quantityStorages","storageOwnerOptions","storageOwnerId","takecareOptions","takeCareId","takeCareUUId","takeCareName","userUUId","firstname","lastname","birthday","addressContact","town","phone","userrolesOptions","rolesId","index","usingfoodOptions","usingFoodId","usingFoodUUId","massOfFishery","feedingRate","totalFood","usingveterinaryOptions","usingVeterinaryId","usingVeterinaryUUId","causesNSymptoms","averageSize","totalBiomass","result","latestHarvestDate","mentor","wardOptions","wardid","httpStatusCode","BaseRoute_1","users_1","upload_1","getFile_1","province_1","district_1","ward_1","ponds_1","seasons_1","pondPrepare_1","pondPrepareDetail_1","storages_1","breed_1","stocking_1","diedFishery_1","growths_1","harvest_1","userRoles_1","pondUserRoles_1","material_1","seasonAndPond_1","usingFood_1","pondDiary_1","takeCare_1","usingVeterinary_1","costs_1","init","instance","BreedRoute","CostsRoute","DiedFisheryRoute","DistrictRoute","GetFileRoute","GrowthsRoute","HarvestRoute","MaterialRoute","PondDiaryRoute","PondPrepareRoute","PondPrepareDetailRoute","PondRoute","PondUserRolesRoute","ProvinceRoute","SeasonAndPondRoute","SeasonRoute","StockingRoute","StorageRoute","TakeCareRoute","UploadRoute","UserRoleRoute","UserRoute","UsingFoodRoute","UsingVeterinaryRoute","WardRoute","OK","uuidv4","common_2","login_helpers_1","UserRolesServices","provinceServices","ProvinceServices","districtServives","DistrictServives","wardServices","WardServices","pondsServices","PondsServices","userServives","pondUserRolesServices","PondUserRolesServices","User","setUserUUId","setFirstname","setLastname","setUsername","hashPassword","setPassword","setImages","userImage","userServices","rollback","userCreated","sent","storageOwner","OwnerStorage","setOwnerStorages","breedOwner","OwnerBreed","setOwnerBreed","storegeOwnwerServices","sOwner","breedOwnwerServices","bOwner","commit","login","required","u","getPassword","isMatch","content","sign","algorithm","getUserInfo","decodeToken","user$","getUserInfoWithUpdate","updateUserProfile","decodetoken","setUser","isArray","updateUserPassword","oldPassword","newPassword","data$","regiterEmployee","setCreatedBy","setUserRoles","role","getEmployee","and","_b","ne","employees","getEmplyeeById","rolesid","insertOnlyRole","setBossId","upsert","updateEmployee","setRolesId","setIsDeleted","getEmployeesPondRole","getAllPondAndEmployees","getEmployeesWithoutIsDelete","vertify","vertifyBoss","vertifyPondRoles","or","$roles.roles$","vertifyStorageRoles","vertifyRolesOfPond","del","fileFilter","cb","originalname","Error","cleanFolder","folderPath","sync","baseComponents_1","BoughtBreed","boughtBreedServives","BoughtBreedServives","setBoughtBreeds","setBoughtBreedId","setBoughtBreedUUId","setSeasonId","setCreatedDate","BoughtBreedDetail","boughtBreedDetailsServives","BoughtBreedDetailsServives","setBoughtBreedDetails","setBoughtBreedDetailId","setBoughtBreedDetailUUId","setCouponId","setBreedId","setQuantity","setUnit","setUnitPrice","setSoldAddress","setTestingAgency","setDescriptions","Breed","breedServives","BreedServives","setBreed","setBreedUUId","setOwnerId","setBreedName","setTotalQuantity","setLoopOfBreed","setTips","BreedOwnwerServices","Cost","costsServives","CostsServives","setCost","setCostId","setCostUUId","setPondPrepareId","setLabel","setValue","setResponsible","setNotes","setUpdatedBy","setUpdatedDate","Coupon","couponServives","CouponServives","setCoupon","DiedFishery","diedFisherysServives","DiedFisherysServives","setDiedfisherys","setDiedFisheryId","setDiedFisheryUUId","setSeasonAndPondId","setCard","setSolutions","setEmployee","District","setDistrictid","setName","setType","setLocation","setProvinceid","getAllDistrict","getDistrictByProvinceId","proId","getByProviceId","Growth","growthsServives","GrowthsServives","setGrowths","setGrowthId","setGrowthUUId","setAverageDensity","setAverageMass","setSpeedOdGrowth","setLivingRatio","HarvestDetail","harvestDetailsServives","HarvestDetailsServives","harvestIdDetailUUId","setHarvestdetails","setHarvestIdDetailUUId","setHarvestId","Harvest","harvestsServives","HarvestsServives","setHarvests","setHarvestUUId","setHarvestName","Material","materialServives","MaterialServives","setMaterial","setMaterialId","setMaterialUUId","setStorageId","setProvider","setProviderAddress","PondEnvironment","pondEnvironmentsServices","PondEnvironmentsServices","setPondenvironments","setPondEnvironmentId","setPondEnvironmentUUId","setOxyMorning","setOxyAfternoon","setPhMorning","setPhAfternoon","setTransparent","setSalinity","setH2s","setNh3","setBazo","PondUserRole","setPondUserRoles","setPondUserRolesId","setPondId","PondDiary","pondDiaryServices","PondDiaryServices","setPonddiary","setPondDiaryId","setPondDiaryUUId","setDiaryName","setFisheryQuantity","setHealthOfFishery","setPondVolume","setDiedFishery","getPondDiaryId","PondPrepare","pondPrepareServices","PondPrepareServices","setPondprepare","setPondPrepareUUId","setPondprepareName","PondPrepareDetail","pondPrepareDetailsServices","PondPrepareDetailsServices","setPondpreparedetails","setPondPrepareDetailUUId","setPondPrepareDetailId","Pond","setPond","setPondUUId","setPondName","setPondArea","setPondDepth","setCreateCost","setStatus","setIsFed","setIsDiary","setPondLatitude","setPondLongitude","setPondCreatedDate","Price","pricesServices","PricesServices","setPrices","setPriceId","setPriceUUId","setTotalCost","setTotalProfit","Province","setProvince","getAllProvince","Season","seasonServices","SeasonServices","setSeason","setSeasonUUId","setSeasonName","SeasonsAndPond","seasonAndPondServices","SeasonAndPondServices","setSeasonsAndPond","Stocking","stockingServices","StockingServices","setStocking","setStockingId","setStockingUUId","StockingDetail","stockingDetailsServices","StockingDetailsServices","setStockingdetails","setStockingDetailUUId","setStockingQuantity","setPhFirst","setSalinityFirst","Storage","storegeServices","StoregeServices","setStorages","setStorageUUId","setProductName","setQuantityStorages","StoregeOwnwerServices","setStorageOwnerId","TakeCare","takeCareServices","TakeCareServices","setTakecare","setTakeCareId","setTakeCareUUId","setTakeType","setTakeCareName","lib_2","pass","primary","toLowerCase","setBirthday","setEmail","setPhone","setAddressContact","setTown","setDistrict","UsingFood","usingFoodsServices","UsingFoodsServices","setUsingFoods","setUsingFoodId","setUsingFoodUUId","setMassOfFishery","setFeedingRate","setTotalFood","UsingVeterinary","usingVeterinaryServices","UsingVeterinaryServices","setUsingveterinary","setUsingVeterinaryId","setUsingVeterinaryUUId","setCausesNSymptoms","setAverageSize","setTotalBiomass","setResult","setLatestHarvestDate","setMentor","Ward","getAllWard","getDistrictByDistrictId","disId","getByDistrictId","Incurred","incurredsServices","IncurredsServices","setIncurred","setIncurredId","setIncurredUUId","setIncurredName","boughtbreeddetailsModel","diedfisherysModel","growthsModel","harvestdetailsModel","ponddiaryModel","pondenvironmentsModel","pondpreparedetailsModel","pondprepareModel","_1","users","testAll","pond","pondUserRole","ponds","pondUserRoles","pricesModel","testpr","userroles","ponduserrolesModel","storagesModel","ownerStoragesModel","testUserAssociate","userRolesModel","usingVeterinaryModel","crypto","nodeRNG","randomBytes","byteToHex","substr","bth","schemas_1","addPond","validate","addPondSchema","dataCheck","Date","toJSON","validater","pond_1","deToken_1","pondName_1","pondCreatedDate_1","pondArea_1","pondDepth_1","createCost_1","pondLatitude_1","pondLongitude_1","status_1","pond$","pondImage","includes","getEmployeePondRoles","getPonds","_k","all","seasonPresent","_l","Boolean","$ponduserroles.userId$","_c","_d","notIn","_e","_f","_g","_h","_j","getPondOfBoss","getPondWithoutImages","getPondNotInSeasonAndPond","map","getPondByPondUUId","updatePondWithUUId","returning","getPondBySeasonUUId","getPostPondBySeasonUUId","getPondByOwnerSeason","getPondByOwnerSeasonWithImage","endData","res_1","getPondWithoutManager","employeeId","pondByManage","countPond","pondOwner","pondsQuantity","count","getPondAdvanceds","isnull","isnotnull","isupgrade","seasonid","notRoles","userid","seasonuuid","presentSeason","rule","requestSeason","countSeasonWithPond","getPondWithUserNotManage","addPondPrepareSchema","properties","pondPrepareName","detailsOfPrepare","items","minimum","additionalProperties","addSeasonSchema","updateSeasonsSchema","maximum","enum","maxlenght","pattern","updatePondDiariesSchema","addSeason","filter","filtered","userId_1","wasHarvest","resetStatus","onUpdate","season","getSeasons","present","ss","updateSeason","getSeasonByUUId","getPondPrepares","pondPrepares","getPondPrepareByPondPrePareUUId","pondPrepare","pondprepareid","getPondPrepareId","updatePondPrepare","end","addPrepare","seasonAndPond","storage","literal","pondPrepareDetail","addPrepareOldPond","snp_1","pp","successArr","detailsOfPrepare_1","detail","ppd","addNewPrepare","snp","detailsOfPrepare_2","addIncurred","incurred","updateIncurred","getIncurredByIncurredUUId","addDetail","material","quantityOld","quantityNew","addStorage","itemArr","boss","coupon","cp_1","item","product","position","sto","mat","this_1","sUpdate","itemArr_1","getStorages","$owner.userId$","$owner->user->employees.userId$","$owner->user->employees.roles$","storages","getStorageById","updateStorage","getCoupon","coupons","components_2","addBreed","breed","bre","boughtBreedDetail","boughtBre","getBreed","breeds","addStocking","stocking","st","stockingDetail","std","getStocking","$seasonAndPond->ponds.userId$","$seasonAndPond->ponds->users->ponduserroles.userId$","getStockingDetailsByStockingDetailsUUId","stockingDetails","updateStockingDetailsByStockingDetailsUUId","oldValue","ok","addDiedFishery","getDiedFishery","wastes","getDiedFisheryByDiedFisheryUUId","waste","updateDiedFisheryByDiedFisheryUUId","getGrowths","growths","addGrowth","growth","getGrowthByUUId","updateGrowth","addHarvest","harvest","hv","harvestDetail","getHarvest","harvests","getAllMyEmployee","userInfo","getRoleByRoleId","roleId","deleteRoles","destroy","upsertRoles","userRole","main","fields","changeRoles","addPondRoles","getUserManageWithPond","updateRoles","addSeasonAndPond","pondArr","pondIdArr","differenceWith","isEqual","pondArr_1","seasonsAndPond","updateSeasonAndPond","countPondWithSeason","ownerid","countSeasonOfPond","pondid","addUsingFood","takeCare","tk","usingFood","res$","getUsingFood","between","timeOut","addPondDiary","getPondDiaries","diaries","getPondDiariesByUUId","g","deletePondDiary","isDeleled","results","updatePondDiary","isValid","delete","getTakeCare","getType","$usingFoods.createdDate$","$usingVeterinary.createdDate$","$seasonAndPond->ponds->pondUserRoles.userId$","$seasonAndPond->ponds->pondUserRoles.pondId$","toLocaleDateString","toLocaleTimeString","start-of-date","end-of-date","start-of-week","end-of-week","start-of-month","end-of-month","add-day","add-months","subtract-day","subtract-months","addUsingVeterinary","usingVeterinary","getUsingVeterinary","getAllPrices","group","har","storageCost","tables","fn","col","charts","labels","uniqBy","getDate","getMonth","getFullYear","breedCost","dL","isDL","sum","sumBy","dS","isDS","harvestCalculator","charts_1","e$","details","BaseSocket_1","task_scheduler_socket_1","TaskScheduler","schedule","timeToUpdate","scheduleJob","sockets","emit"],"mappings":"aACA,IAAAA,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GAAA,CACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,IACAG,EAAAH,EACAI,EAAA,MACAH,YAIAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,EAAA,KAGA,OAAAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACA,IAAAZ,EAAAa,EAAAX,EAAAS,GAAA,CACAG,OAAAC,eAAAb,EAAAS,GAA0CK,WAAA,KAAAC,IAAAL,MAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,UAAAiB,SAAA,aAAAA,OAAAC,YAAA,CACAN,OAAAC,eAAAb,EAAAiB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,MAAA,QAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GACA,GAAAA,EAAA,EAAAF,EAAArB,EAAAqB,GACA,GAAAE,EAAA,SAAAF,EACA,GAAAE,EAAA,UAAAF,IAAA,UAAAA,KAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MACA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,WAAA,KAAAK,UACzC,GAAAE,EAAA,UAAAF,GAAA,iBAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,SAAAM,IAA2B,OAAA3B,EAAA,YAC3B,SAAA4B,IAAiC,OAAA5B,GACjCH,EAAAU,EAAAE,EAAA,IAAAA,GACA,OAAAA,GAIAZ,EAAAa,EAAA,SAAAmB,EAAAC,GAAsD,OAAAnB,OAAAoB,UAAAC,eAAA5B,KAAAyB,EAAAC,IAGtDjC,EAAAoC,EAAA,GAIA,OAAApC,IAAAqC,EAAA,sJClFAC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,IACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,sJCpCAsC,EAAAtC,EAAA,qJCAAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,oBCHAG,EAAAD,QAAAqC,QAAA,yBCAApC,EAAAD,QAAAqC,QAAA,6JCCAD,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,KACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EAAAtC,EAAA,MACAsC,EA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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 30);\n","export * from './logger';\r\nexport * from './base.services';\r\nexport * from './upload';\r\nexport * from './user.services';\r\nexport * from './bought-breed-details.services';\r\nexport * from './bought-breeds.services';\r\nexport * from './breeds.services';\r\nexport * from './breedOwner.services';\r\nexport * from './costs.services';\r\nexport * from './coupon.services';\r\nexport * from './died-fisherys.services';\r\nexport * from './district.services';\r\nexport * from './growths.services';\r\nexport * from './harvest-details.services';\r\nexport * from './harvests.services';\r\nexport * from './material.services';\r\nexport * from './pond-diary.services';\r\nexport * from './pond-environments.services';\r\nexport * from './pond-prepare-details.services';\r\nexport * from './pond-prepare.services';\r\nexport * from './ponds.services';\r\nexport * from './prices.services';\r\nexport * from './province.services';\r\nexport * from './pondUserRoles.services';\r\nexport * from './season.services';\r\nexport * from './stocking-details.services';\r\nexport * from './stocking.services';\r\nexport * from './storages.services';\r\nexport * from './storagesOwner.services';\r\nexport * from './take-care.services';\r\nexport * from './user.services';\r\nexport * from './usersRoles.services';\r\nexport * from './using-foods.services';\r\nexport * from './using-veterinary.services';\r\nexport * from './ward.services';\r\nexport * from './seasonAndPond.services';\r\nexport * from './incurreds.services';\r\n","export * from './constant';\r\n","export * from './date-util';\r\nexport * from './enscrypts';\r\nexport * from './promise';\r\nexport * from './stream';\r\n","module.exports = require(\"lodash\");","module.exports = require(\"sequelize\");","// export * from './base.model'; // always first\r\nexport * from './boughtbreeddetails';\r\nexport * from './boughtbreeds';\r\nexport * from './breeds';\r\nexport * from './costs';\r\nexport * from './coupons';\r\nexport * from './diedfisherys';\r\nexport * from './district';\r\nexport * from './growths';\r\nexport * from './harvestdetails';\r\nexport * from './harvests';\r\nexport * from './material';\r\nexport * from './ownerBreed.model';\r\nexport * from './ponddiary';\r\nexport * from './pondenvironments';\r\nexport * from './pondprepare';\r\nexport * from './pondpreparedetails';\r\nexport * from './ponds';\r\nexport * from './ponduserroles';\r\nexport * from './prices';\r\nexport * from './province';\r\nexport * from './seasons';\r\nexport * from './incurreds.model';\r\nexport * from './seasonandpond';\r\nexport * from './stocking';\r\nexport * from './stockingdetails';\r\nexport * from './storages.model';\r\nexport * from './storageOwner.model';\r\nexport * from './takecare';\r\nexport * from './users';\r\nexport * from './userRoles';\r\nexport * from './usingfoods';\r\nexport * from './usingveterinary';\r\nexport * from './ward';\r\n","import * as Sequeliz from 'sequelize';\r\nimport DBHelper from '../helpers/db-helpers';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { Promise } from '../lib';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport abstract class BaseServices {\r\n    public conn: DBHelper;\r\n    public models: Sequeliz.Model<{}, any>;\r\n    public Op: Sequeliz.Operators = Sequeliz.Op;\r\n    public fn: Sequeliz.fn;\r\n    constructor(protected optionsModel: IOptionsModelDB = {\r\n        tableName: '',\r\n        attributes: {},\r\n        options: {}\r\n    }) {\r\n        this.conn = new DBHelper(this.optionsModel);\r\n    }\r\n\r\n    public getById(id: any, userId?: number): Promise<{}> {\r\n        return new Promise((resolve, reject) => {\r\n            this.models.findById(id).then((obj: any) => {\r\n                if (obj) {\r\n                    resolve(obj.dataValues);\r\n                } else {\r\n                    resolve(obj);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    public getAll(query: Sequeliz.FindOptions<any>): Promise<any[]> {\r\n        if(query) {\r\n            return new Promise((resolve, reject) => {\r\n                this.models.findAll(this.getQuery(query)).then((obj: any[]) => {\r\n                    resolve(obj);\r\n                }).catch(e => {\r\n                    reject(e);\r\n                });\r\n            });\r\n        } else {\r\n            return new Promise((resolve, reject) => {\r\n                this.models.findAll().then((obj: any[]) => {\r\n                    resolve(obj);\r\n                }).catch(e => {\r\n                    reject(e);\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    public get(query: any): Promise<any[]> {\r\n        return this.models.findAll(query);\r\n    }\r\n\r\n    insert(data: any): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            this.models.create(data).then((record: any) => {\r\n                resolve(record);\r\n            });\r\n        });\r\n    }\r\n\r\n    update(value: any): Promise<any> {\r\n        const md: any = this.models;\r\n        const where: any = {};\r\n        return new Promise((resolve, reject) => {\r\n            const primaryFieldName: string = md.primaryKeyField;\r\n            where[primaryFieldName] = value[primaryFieldName];\r\n            this.models.update(value, {where}).then((res: any) => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n\r\n    findAndCountAll(query: any): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            if(query) {\r\n                this.models.findAndCountAll(query).then((res: any) => {\r\n                    resolve(res);\r\n                });\r\n            } else {\r\n                this.models.findAndCountAll().then((res: any) => {\r\n                    resolve(res);\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    getQuery(criteria: object): object {\r\n        return {\r\n            where: criteria\r\n        };\r\n    }\r\n}\r\n","import { ISearchOptions } from '../common';\r\nimport { Promise } from '../lib';\r\nimport { BaseServices } from '../services';\r\nimport { FindOptions } from 'sequelize';\r\n\r\nexport class BaseComponent {\r\n    protected services: BaseServices;\r\n    protected primary: object;\r\n    protected foreignKey: any;\r\n    public constructor() { }\r\n\r\n    protected criteriaQuery(options: ISearchOptions) {\r\n        const offset: any = options.pageIndex ? Number(options.pageIndex) - 1 : null;\r\n        const limit: any = options.pageSizes ? Number(options.pageSizes) : null;\r\n        // const order: any[] = options.orderBy && options.orderType ? [\r\n        //     [options.orderBy, options.orderType]\r\n        // ] : options.orderBy && !options.orderType ? [\r\n        //     [options.orderBy]\r\n        // ] : null;\r\n        return { ...offset, ...limit };\r\n    }\r\n\r\n    /**\r\n     * remove null and undefine field, usually use to update action\r\n     * @param obj\r\n     */\r\n    public getFields(obj?: any): string[] {\r\n        const that: any = this;\r\n        const object: any = {};\r\n        for (const key in that) {\r\n            if (that[key] !== null && that[key] !== undefined && typeof that[key] !== 'object' && typeof that[key] !== 'function' && !key.match(/^ge[t].+$/) || that[key] === 0) {\r\n                if (that[key] || that[key] === 0) {\r\n                    object[key] = that[key];\r\n                }\r\n            }\r\n        }\r\n        return object;\r\n    }\r\n\r\n    // upsert(action: any): Promise<any> {\r\n    //     const that: any = this;\r\n    //     if(action === ActionServer.UPDATE) {\r\n    //         const query = {};\r\n    //         // this.createQuery({\r\n    //         //     action,\r\n    //         //     primary: that.getPrimary,\r\n    //         //     data: this\r\n    //         // });\r\n    //         // return new Promise((resolve, reject) => {\r\n    //         //     this.services.update(this, query).then((res: any) => {\r\n    //         //         resolve(res);\r\n    //         //     });\r\n    //         // });\r\n    //     }\r\n    // }\r\n\r\n    insert(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            this.services.insert(this).then((res: any) => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n\r\n    update(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            this.services.update(this.getFields(this)).then(res => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n\r\n    gets(condition: FindOptions<any>, options?: ISearchOptions): Promise<any> {\r\n        const gotOptions = this.criteriaQuery(options);\r\n        return new Promise((resolve, reject) => {\r\n            this.services.getAll({\r\n                ...condition,\r\n                ...gotOptions\r\n            }).then(res => {\r\n                resolve(res);\r\n            }).catch(e => {\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    getById(id: number, userId?: number): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            this.services.getById(id, userId).then(res => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n}\r\n","export const baseModel: any = {\r\n    options: {\r\n        createdAt: false,\r\n        updatedAt: false,\r\n        deletedAt: false,\r\n        defaultScope: {\r\n            where: {\r\n                isDeleted: 0\r\n            }\r\n        },\r\n        scopes: {\r\n            deletedRecord: {\r\n                where: {\r\n                    isDeleted: 1\r\n                }\r\n            }\r\n        },\r\n        hooks: {}\r\n    }\r\n};\r\n","import { Router } from 'express';\r\nimport { Sequelize } from 'sequelize';\r\nimport DBHelper from '../helpers/db-helpers';\r\nimport { host, port, colorCli, method, APIVersion } from '../config';\r\nimport * as validator from 'is-my-json-valid';\r\n\r\nexport abstract class BaseRoute {\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @class BaseRoute\r\n     * @constructor\r\n     */\r\n    public static path = '/api/v1';\r\n    protected router = Router();\r\n    protected connection: any = {};\r\n    public static countEndpoints: number = 0;\r\n    protected sequeliz: Sequelize = DBHelper.sequelize;\r\n    protected validator: any = validator;\r\n\r\n    protected logEndpoints(router?: Router, path?: string) {\r\n        if(path) {\r\n            for(const stack of router.stack) {\r\n                const endpoints: string = Object.keys(stack.route.methods)[0].toLocaleUpperCase();\r\n                console.log(`[${\r\n                    endpoints === method.get ? colorCli.MAGENTA : endpoints === method.post ? colorCli.YELLOW : endpoints === method.put ? colorCli.CYAN : colorCli.RED\r\n                }${ endpoints }${ colorCli.RESET }]\\thttp://${ host }:${ port }${ BaseRoute.path }${ path }${ stack.route.path }`);\r\n                BaseRoute.countEndpoints++;\r\n            }\r\n            console.log('');\r\n        }\r\n    }\r\n}\r\n","export * from './boughtBreed';\r\nexport * from './boughtBreedDetail';\r\nexport * from './breed';\r\nexport * from './breedOwner';\r\nexport * from './cost';\r\nexport * from './coupon';\r\nexport * from './diedFishery';\r\nexport * from './district';\r\nexport * from './growth';\r\nexport * from './harvestDetail';\r\nexport * from './harvest';\r\nexport * from './material';\r\nexport * from './pondEnvironment';\r\nexport * from './pondUserRole';\r\nexport * from './pondDiary';\r\nexport * from './pondPrepare';\r\nexport * from './pondPrepareDetails';\r\nexport * from './pond';\r\nexport * from './price';\r\nexport * from './province';\r\nexport * from './season';\r\nexport * from './seasonsAndPond';\r\nexport * from './stocking';\r\nexport * from './stockingDetail';\r\nexport * from './storage';\r\nexport * from './storageOwner';\r\nexport * from './takeCare';\r\nexport * from './userRole';\r\nexport * from './user';\r\nexport * from './usingFood';\r\nexport * from './usingVeterinary';\r\nexport * from './ward';\r\nexport * from './incurreds';\r\n","import { NextFunction, Request, Response } from 'express';\r\nimport * as jwt from 'jsonwebtoken';\r\nimport { readFileSync } from 'fs';\r\nimport { find } from 'lodash';\r\n\r\nexport class Authentication {\r\n    static cert: Buffer = readFileSync(process.cwd() + '/authKey/jwtRS256.key.pub');\r\n    constructor() {}\r\n    static isLogin(request: Request, response: Response, next: NextFunction) {\r\n        const token: string = request.headers.authorization ? request.headers.authorization.split(' ')[1] : null;\r\n        if(!token) {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Dừng lại, truy cập là không được phép!'\r\n            });\r\n        } else {\r\n            jwt.verify(token, Authentication.cert, {\r\n                algorithms: ['RS512', 'RS256']\r\n            }, (err, data) => {\r\n                if(err) {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Bạn cần đăng nhập để tiếp tục.'\r\n                    });\r\n                } else {\r\n                    next();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    static isBoss(request: Request, response: Response, next: NextFunction) {\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        if(!isBoss) {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Bạn không có quyền truy cập.'\r\n            });\r\n        } else {\r\n            next();\r\n        }\r\n    }\r\n\r\n    static isPondRole(request: Request, response: Response, next: NextFunction) {\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        const isPondRole: boolean = !!find(deToken.roles, e => e.roles === 1) || !deToken.roles.length;\r\n        if(isPondRole || isBoss) {\r\n            next();\r\n        } else {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Bạn không có quyền truy cập.'\r\n            });\r\n        }\r\n    }\r\n\r\n    static isStorageRole(request: Request, response: Response, next: NextFunction) {\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        const isStorageRole: boolean = !!find(deToken.roles, e => e.roles === 2) || !deToken.roles.length;\r\n        if(isBoss && isStorageRole) {\r\n            next();\r\n        } else {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Bạn không có quyền truy cập.'\r\n            });\r\n        }\r\n    }\r\n\r\n    static detoken(token: string) {\r\n        return jwt.decode(token,{json: true});\r\n    }\r\n}\r\n/**\r\n * Phần authen có thể dùng cho MEAN Stack\r\n */\r\n// import * as passport from 'passport';\r\n// import * as localStrategy from 'passport-local';\r\n// const LocalStrategy = localStrategy.Strategy;\r\n// import * as jwtStrategy from 'passport-jwt';\r\n// const JwtStrategy = jwtStrategy.Strategy;\r\n// const ExtractJwt = jwtStrategy.ExtractJwt;\r\n// import { UserServives } from '../services';\r\n// import * as constants from '../common';\r\n// import { User } from '../components/users';\r\n\r\n// export class LoginHelper {\r\n//     private userServices: UserServives = new UserServives();\r\n//     public static token: string;\r\n//     constructor() {\r\n//         this.usingPassport();\r\n//         this.serializeUser();\r\n//         this.deserializeUser();\r\n//     }\r\n\r\n//     private usingPassport(): void {\r\n//         const opts: any = {};\r\n//         opts.jwtFromRequest = ExtractJwt.fromAuthHeaderWithScheme('jwt');\r\n//         opts.secretOrKey = constants.secret;\r\n//         passport.use(new JwtStrategy(opts, (jwtPayload, done) => {\r\n//             this.userServices.getUserByUsername(this.getQuery({username: jwtPayload.username})).then(user => {\r\n//                 done(null, user);\r\n//             }).catch(err => {\r\n//                 if(err) {\r\n//                     return done(err, false);\r\n//                 }\r\n//                 done(null, false);\r\n//             });\r\n//         }));\r\n//         /*\r\n//         passport.use(new LocalStrategy((username, password, done) => {\r\n//             this.userServices.getUserByUsername(this.getQuery({username})).then((result: any) => {\r\n//                 Enscrypts.compare(password, result.password).then((isMatch: boolean) => {\r\n//                     console.log(isMatch);\r\n//                     if(typeof isMatch === typeof Error) {\r\n//                         throw isMatch;\r\n//                     }\r\n//                     else if (isMatch) {\r\n//                         TokenHelper.sign(result.username)\r\n//                         .then((token) => {\r\n//                             LoginHelper.token = token;\r\n//                             return done(null, result);\r\n//                         });\r\n//                     }\r\n//                     else {\r\n//                         return done(null, false);\r\n//                     }\r\n//                 });\r\n//             }).catch(() => {\r\n//                 return done(null, false);\r\n//             });\r\n//         }));\r\n//         */\r\n//     }\r\n\r\n//     private serializeUser(): void {\r\n//         passport.serializeUser((user: User, done: any) => {\r\n//             done(null, user);\r\n//         });\r\n//     }\r\n\r\n//     private deserializeUser(): void {\r\n//         passport.deserializeUser((user: User, done: any) => {\r\n//             this.userServices.getUserByUsername(this.getQuery({username: user.username})).then((result: User) => {\r\n//                 return done(null, result);\r\n//             }).catch(() => {\r\n//                 return done(null, false);\r\n//             });\r\n//         });\r\n//     }\r\n\r\n//     private getQuery(where: any): any {\r\n//         return {\r\n//             where\r\n//         };\r\n//     }\r\n\r\n//     public static isLoggedIn(req: Request, res: Response, next: NextFunction) {\r\n//         if (req.isAuthenticated()) {\r\n//             res.cookie('vietnamfishery', LoginHelper.token, {\r\n//                 maxAge: 365 * 24 * 60 * 60 * 1000\r\n//             });\r\n//             return next();\r\n//         }\r\n//         res.redirect('/api/user/login/failure');\r\n//     }\r\n\r\n//     public static notLoggedIn(req: Request, res: Response, next: NextFunction) {\r\n//         if (!req.isAuthenticated()) {\r\n//             return next();\r\n//         }\r\n//         res.redirect('/api/user/login');\r\n//     }\r\n\r\n//     // public authenticate(successRedirect: string, failureRedirect: string): any {\r\n//     //     return passport.authenticate('local', {\r\n//     //         successRedirect,\r\n//     //         failureRedirect\r\n//     //     });\r\n//     // }\r\n// }\r\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","import { google, drive_v3 } from 'googleapis';\r\nimport { JWT } from 'google-auth-library';\r\nimport { folderDrive } from '../common';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { CustomStream } from '../lib';\r\nimport { colorCli } from '../config';\r\n\r\nexport class GoogleDrive {\r\n    private static drive: drive_v3.Drive;\r\n    private static key: any;\r\n    private static jwtToken: JWT;\r\n    constructor() {\r\n        GoogleDrive.drive = google.drive('v3');\r\n        GoogleDrive.key = JSON.parse(process.env.GOOGLE_API_KEY);\r\n        GoogleDrive.jwtToken = new google.auth.JWT(GoogleDrive.key.client_email, null, GoogleDrive.key.private_key, ['https://www.googleapis.com/auth/drive'], null);\r\n        GoogleDrive.jwtToken.authorize(err => {\r\n            if (err) {\r\n                console.log(`${ colorCli.RED }Google authorization not accorded: `,err);\r\n                return;\r\n            } else {\r\n                console.log(`${ colorCli.GREEN }Google authorization accorded.${ colorCli.RESET }`);\r\n            }\r\n        });\r\n    }\r\n\r\n    public static upload(request: any, response: Response, next: NextFunction): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            const image: any = (request.files as any).image || (request.files as any).images;\r\n            const requestBody = {\r\n                name: image.name,\r\n                parents: [folderDrive.uploadImageVNF]\r\n            };\r\n\r\n            const media = {\r\n                mediaType: image.mimetype,\r\n                body: CustomStream.BufferToStream(image.data as Buffer)\r\n            };\r\n\r\n            GoogleDrive.drive.files.create({\r\n                auth: GoogleDrive.jwtToken,\r\n                requestBody,\r\n                media\r\n            }, (err, file) => {\r\n                if (err) {\r\n                    resolve({\r\n                        success: false,\r\n                        message: 'Can not upload files. Please try again later.'\r\n                    });\r\n                } else {\r\n                    resolve({\r\n                        success: true,\r\n                        message: 'Upload file successful!',\r\n                        fileId: file.data.id\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    public static getFile = async (request: Request, response: Response, next: NextFunction) => {\r\n        const options: any = {\r\n            auth: GoogleDrive.jwtToken,\r\n            fileId: request.params.fileId,\r\n            alt: 'media'\r\n        };\r\n        GoogleDrive.drive.files.get(options, {\r\n            responseType: 'arraybuffer'\r\n        }, (err, file: any) => {\r\n            if (err) {\r\n                response.status(200).json({ error: err.toString() });\r\n            }\r\n            if (file) {\r\n                const type = file.headers[`content-type`];\r\n                const prefix = 'data:' + type + ';base64,';\r\n                const base64 = file.data.toString('base64');\r\n                const data = prefix + base64;\r\n                response.status(200).json({ data });\r\n            }\r\n        });\r\n    }\r\n\r\n    public static delayGetFileById(fileId: any): Promise<any> {\r\n        const options: any = {\r\n            auth: GoogleDrive.jwtToken,\r\n            fileId,\r\n            alt: 'media'\r\n        };\r\n        return new Promise((resolve, reject) => {\r\n            GoogleDrive.drive.files.get(options, {\r\n                responseType: 'arraybuffer'\r\n            }, (err, file: any) => {\r\n                if (file) {\r\n                    const type = file.headers[`content-type`];\r\n                    const prefix = 'data:' + type + ';base64,';\r\n                    const base64 = file.data.toString('base64');\r\n                    const data = prefix + base64;\r\n                    resolve(data);\r\n                } else if(err) {\r\n                    resolve(err);\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n","import { Options, PoolOptions, ReplicationOptions } from 'sequelize';\r\nimport * as moment from 'moment-timezone';\r\nimport * as os from 'os';\r\nimport { find } from 'lodash';\r\n\r\nexport enum environment {\r\n    development = 'development',\r\n    production = 'production'\r\n}\r\n\r\nexport enum Dialect {\r\n    mysql = 'mysql',\r\n    sqlite = 'sqlite',\r\n    postgres = 'postgres',\r\n    mssql = 'mssql'\r\n}\r\n\r\nexport interface ISequelizeConfig {\r\n    dialect?: Dialect;\r\n    operatorsAliases?: boolean;\r\n    pool?: PoolOptions;\r\n    replication?: ReplicationOptions;\r\n}\r\n\r\nconst env = process.env.NODE_ENV.trim() || environment.development;\r\nconst isProd = env === 'production';\r\n\r\nconst reg: RegExp = new RegExp(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/);\r\n\r\nconst wifi: any = find(os.networkInterfaces()[`Wi-Fi`], e => reg.test(e.address.toString())) || {};\r\n\r\nexport const host: string = wifi.address || os.hostname() || 'localhost';\r\n\r\nexport const databaseName = 'fisheriesdatabase';\r\n\r\n/**\r\n * @var PORT from evironment - config in cli run start project\r\n * @var DEVELOPMENT from evironment - port config with development stage, value: 7979\r\n * @var PRODUCTION from evironment - port config with production stage, value: 9999\r\n */\r\nexport const port = process.env.PORT || env === environment.development ? 7979 : 9999;\r\n\r\nconst pool: PoolOptions = {\r\n    acquire: 30000,\r\n    idle: 10000,\r\n    max: 5,\r\n    min: 0\r\n};\r\n\r\nexport const authdb: any = {\r\n    host: 'localhost',\r\n    password: 'J%:dTva*#9c>k@L6',\r\n    username: 'fisherier'\r\n};\r\n\r\nconst replication: ReplicationOptions = {\r\n    read: authdb,\r\n    write: authdb\r\n};\r\n\r\nconst timezone: string = moment().utc().format('Z');\r\nexport const configDB: Options = {\r\n    dialect: Dialect.mysql,\r\n    operatorsAliases: false,\r\n    pool,\r\n    port: 3306,\r\n    replication,\r\n    timezone,\r\n};\r\n\r\nexport const config: Options = {\r\n    dialect: Dialect.mysql,\r\n    operatorsAliases: false,\r\n    pool,\r\n    replication\r\n};\r\n\r\n/**\r\n * color of console.log\r\n */\r\nexport enum colorCli {\r\n    RESET = '\\x1b[0m',\r\n    BRIGHT = '\\x1b[1m',\r\n    DIM = '\\x1b[2m',\r\n    UNDERSCORE = '\\x1b[4m',\r\n    BLINK = '\\x1b[5m',\r\n    REVERSE = '\\x1b[7m',\r\n    HIDDEN = '\\x1b[8m',\r\n    BLACK = '\\x1b[30m',\r\n    RED = '\\x1b[31m',\r\n    GREEN = '\\x1b[32m',\r\n    YELLOW = '\\x1b[33m',\r\n    BLUE = '\\x1b[34m',\r\n    MAGENTA = '\\x1b[35m',\r\n    CYAN = '\\x1b[36m', // xanh biển\r\n    WHITE = '\\x1b[37m',\r\n    CRIMSON = '\\x1b[38m', // not working\r\n    BG_BLACK = '\\x1b[40m',\r\n    BG_RED = '\\x1b[41m',\r\n    BG_GREEN = '\\x1b[42m',\r\n    BG_YELLOW = '\\x1b[43m',\r\n    BG_BLUE = '\\x1b[44m',\r\n    BG_MAGENTA = '\\x1b[45m',\r\n    BG_CYAN = '\\x1b[46m',\r\n    BG_WHITE = '\\x1b[47m',\r\n    BG_CRIMSON = '\\x1b[48m', // not working\r\n    // color 256\r\n    /**\r\n     * ```js\r\n     *  for(let i = 0; i < 16; i++) {\r\n     *      for(let j = 0; j < 16; j++) {\r\n     *          const code = (i * 16 + j);\r\n     *          console.log(colorCli.TEMPLATE + code + 'm', code + '\\t');\r\n     *      }\r\n     *  }\r\n     * ```\r\n     */\r\n    TEMPLATE = '\\u001b[38;5;',\r\n}\r\n\r\nexport const rootEndpoint = '/api';\r\n\r\nexport enum APIVersion {\r\n    v1 = '/api/v1'\r\n}\r\n\r\n/**\r\n * Method of http\r\n */\r\nexport enum method {\r\n    get = 'GET',\r\n    post = 'POST',\r\n    put = 'PUT',\r\n    delete = 'DELETE'\r\n}\r\n","import { Sequelize } from 'sequelize';\r\nimport * as Sequeliz from 'sequelize';\r\nimport { configDB, colorCli } from '../config';\r\nimport { databaseName } from '../config';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { ModelBuilder } from '../models/model-builder';\r\nimport * as options from '../models/objects';\r\n\r\nexport default class DBHelper {\r\n    public static sequelize: Sequelize = new Sequeliz(databaseName, null, null, {\r\n        ...configDB\r\n    });\r\n    private models: any = {};\r\n\r\n    constructor(private optionsModel: IOptionsModelDB) {\r\n        Object.keys(options).forEach(element => {\r\n            this.models[element] = this.toModel(options[element].tableName, options[element].attributes, options[element].options);\r\n        });\r\n    }\r\n\r\n    public static getDatabaseConnection() {\r\n        DBHelper.sequelize.authenticate().then(() => {\r\n            console.log(`${ colorCli.GREEN }Connection with database has been established successfully.`);\r\n        })\r\n        .catch(err => {\r\n            console.error(`${ colorCli.RED }Unable to connect to the database:`, err);\r\n        });\r\n    }\r\n\r\n    private toModel (modelName: string, model: any, deleteMode: any) {\r\n        return DBHelper.sequelize.define(modelName, model, deleteMode);\r\n    }\r\n\r\n    private get modelName () {\r\n        return this.optionsModel.tableName;\r\n    }\r\n\r\n    private get deleteMode () {\r\n        return this.optionsModel.options;\r\n    }\r\n\r\n    private get model () {\r\n        return DBHelper.sequelize.define(this.modelName, this.optionsModel.attributes, this.deleteMode);\r\n    }\r\n\r\n    public get usersModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.usersAssociate(\r\n            this.models[`districtOptions`],\r\n            this.models[`userrolesOptions`],\r\n            this.models[`pondOptions`],\r\n            this.models[`couponOptions`],\r\n            this.models[`boughtbreedOptions`],\r\n            this.models[`provinceOptions`],\r\n            this.models[`seasonOptions`],\r\n            this.models[`wardOptions`],\r\n            this.models[`storageOwnerOptions`],\r\n            this.models[`ownerBreedOptions`],\r\n            this.models[`ponduserrolesOptions`],\r\n            this.models[`incurredsOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get boughtbreedsModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.boughtbreedsAssociate(\r\n            this.models[`seasonOptions`],\r\n            this.models[`userOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get boughtbreeddetailsModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.boughtbreeddetailsAssociate(\r\n            this.models[`couponOptions`],\r\n            this.models[`breedOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get breedOwnerModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.breedOwnerAssociate(\r\n            this.models[`breedOptions`],\r\n            this.models[`userOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get provinceModel() {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.provinceAssociate(this.models[`userOptions`]);\r\n        return md;\r\n    }\r\n\r\n    public get districtModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.districtAssociate(this.models[`userOptions`]);\r\n        return md;\r\n    }\r\n\r\n    public get wardModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.wardAssociate(this.models[`userOptions`]);\r\n        return md;\r\n    }\r\n\r\n    public get breedsModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.breedsAssociate(\r\n            this.models[`boughtbreeddetailsOptions`],\r\n            this.models[`stockingdetailOptions`],\r\n            this.models[`ownerBreedOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get costsModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.costsAssociate(this.models[`pondprepareOptions`]);\r\n        return md;\r\n    }\r\n\r\n    public get couponModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.couponAssociate(\r\n            this.models[`materialOptions`],\r\n            this.models[`userOptions`],\r\n            this.models[`seasonOptions`],\r\n            this.models[`boughtbreeddetailsOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get diedfisherysModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.diedfisherysAssociate(this.models[`seasonAndPondOptions`]);\r\n        return md;\r\n    }\r\n\r\n    public get growthsModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.growthsAssociate(this.models[`seasonAndPondOptions`]);\r\n        return md;\r\n    }\r\n\r\n    public get harvestdetailsModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.harvestdetailsAssociate(this.models[`harvestOptions`]);\r\n        return md;\r\n    }\r\n\r\n    public get harvestModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.harvestsAssociate(this.models[`harvestdetailOptions`], this.models[`seasonAndPondOptions`]);\r\n        return md;\r\n    }\r\n\r\n    public get materialModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.materialAssociate(\r\n            this.models[`couponOptions`],\r\n            this.models[`pondprepareOptions`],\r\n            this.models[`storagesOptions`],\r\n            this.models[`usingfoodOptions`],\r\n            this.models[`usingveterinaryOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get ponddiaryModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.ponddiaryAssociate(\r\n            this.models[`seasonAndPondOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get pondenvironmentsModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.pondenvironmentAssociate(this.models[`seasonAndPondOptions`]);\r\n        return md;\r\n    }\r\n\r\n    public get pondprepareModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.pondprepareAssociate(\r\n            this.models[`seasonAndPondOptions`],\r\n            this.models[`costsOptions`],\r\n            this.models[`pondpreparedetailOptions`],\r\n            this.models[`incurredsOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get pondpreparedetailsModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.pondpreparedetailsAssociate(this.models[`pondprepareOptions`],\r\n        this.models[`storagesOptions`]);\r\n        return md;\r\n    }\r\n\r\n    public get incurredModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.incurredAssociate(\r\n            this.models[`pondprepareOptions`],\r\n            this.models[`userOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get pondsModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.pondsAssociate(\r\n            this.models[`ponduserrolesOptions`],\r\n            this.models[`seasonAndPondOptions`],\r\n            this.models[`userOptions`],\r\n            this.models[`seasonOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get pricesModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.pricesAssociate(this.models[`seasonOptions`]);\r\n        return md;\r\n    }\r\n\r\n    public get ponduserrolesModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.ponduserrolesAssociate(\r\n            this.models[`userOptions`],\r\n            this.models[`pondOptions`],\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get userRolesModel() {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.userRolesAssociate(\r\n            this.models[`ponduserrolesOptions`],\r\n            this.models[`userOptions`],\r\n            this.models[`seasonOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get usingVeterinaryModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.usingveterinaryAssociate(\r\n            this.models[`storagesOptions`],\r\n            this.models[`takecareOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get usingfoodsModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.usingfoodsAssociate(\r\n            this.models[`storagesOptions`],\r\n            this.models[`takecareOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get takecareModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.takecareAssociate(\r\n            this.models[`usingveterinaryOptions`],\r\n            this.models[`usingfoodOptions`],\r\n            this.models[`seasonAndPondOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get storagesModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.storagesAssociate(\r\n            this.models[`materialOptions`],\r\n            this.models[`storageOwnerOptions`],\r\n            this.models[`pondpreparedetailOptions`],\r\n            this.models[`usingfoodOptions`],\r\n            this.models[`usingveterinaryOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get ownerStoragesModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.storageOwnerAssociate(\r\n            this.models[`storagesOptions`],\r\n            this.models[`userOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get stockingdetailsModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.stockingdetailsAssociate(\r\n            this.models[`stockingOptions`],\r\n            this.models[`breedOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get stockingModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.stockingAssociate(\r\n            this.models[`stockingdetailOptions`],\r\n            this.models[`seasonAndPondOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get seasonModel () {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.seasonAssociate(\r\n            this.models[`boughtbreedOptions`],\r\n            this.models[`pricesOptions`],\r\n            this.models[`userOptions`],\r\n            this.models[`seasonAndPondOptions`],\r\n            this.models[`pondOptions`],\r\n            this.models[`userrolesOptions`],\r\n            this.models[`couponOptions`]\r\n        );\r\n        return md;\r\n    }\r\n\r\n    public get seasonAndPondModel() {\r\n        const md = this.model;\r\n        const modelBuilder: ModelBuilder = new ModelBuilder(md);\r\n        modelBuilder.seasonAndPondAssociate(\r\n            this.models[`diedfisherysOptions`],\r\n            this.models[`growthOptions`],\r\n            this.models[`harvestOptions`],\r\n            this.models[`ponddiaryOptions`],\r\n            this.models[`pondenvironmentsOptions`],\r\n            this.models[`pondprepareOptions`],\r\n            this.models[`pondOptions`],\r\n            this.models[`seasonOptions`],\r\n            this.models[`stockingOptions`],\r\n            this.models[`takecareOptions`]\r\n        );\r\n        return md;\r\n    }\r\n}\r\n","export * from './pondPrepare.schema';\r\nexport * from './seasons.schema';\r\nexport * from './ponds.schema';\r\nexport * from './pondDiary.schema';\r\n","module.exports = require(\"fs\");","module.exports = require(\"express\");","module.exports = require(\"moment-timezone\");","/*\r\n* The Promise module using bluebird\r\n*/\r\n\r\nimport * as Promise from 'bluebird';\r\nPromise.config({\r\n    warnings: {\r\n        wForgottenReturn: false\r\n    }\r\n});\r\n\r\nexport { Promise };\r\n","module.exports = require(\"bluebird\");","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function ponduserrolesToPond(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.POND_USER_ROLE_2_POND,\r\n        foreignKey: {\r\n            name: 'pondId',\r\n            field: 'pondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function ponduserrolesToUser(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.POND_USER_ROLE_2_USER,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as fs from 'fs';\r\nimport * as winston from 'winston';\r\n\r\nconst PATHS = {\r\n  LOG: `${process.cwd()}/logs`,\r\n  LOG_ERROR: `${process.cwd()}/logs/_error.log`,\r\n  LOG_INFO: `${process.cwd()}/logs/_info.log`,\r\n};\r\n// ensure log directory exists\r\n(() => fs.existsSync(PATHS.LOG) || fs.mkdirSync(PATHS.LOG))();\r\n\r\nexport const logger = new (winston.Logger)({\r\n  exitOnError: false,\r\n  transports: [\r\n    new winston.transports.File({\r\n      colorize: false,\r\n      filename: PATHS.LOG_INFO,\r\n      handleExceptions: true,\r\n      json: true,\r\n      level: 'info',\r\n      maxFiles: 2,\r\n      maxsize: 5242880, // 5MB\r\n      name: 'info',\r\n    }),\r\n    new (winston.transports.File)({\r\n      colorize: false,\r\n      filename: PATHS.LOG_ERROR,\r\n      handleExceptions: true,\r\n      json: true,\r\n      level: 'error',\r\n      maxFiles: 2,\r\n      maxsize: 5242880, // 5MB\r\n      name: 'error',\r\n    }),\r\n    new winston.transports.Console({\r\n      colorize: true,\r\n      handleExceptions: true,\r\n      json: false,\r\n      level: 'debug',\r\n      name: 'debug',\r\n    }),\r\n  ],\r\n});\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { userOptions } from '../models/objects';\r\nimport { Promise } from '../lib';\r\nimport DBHelper from '../helpers/db-helpers';\r\nimport { Sequelize, Transaction } from 'sequelize';\r\nimport { UserRole } from '../components';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport class UserServives extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = userOptions;\r\n    constructor() {\r\n        super(UserServives.optionsModel);\r\n        this.models = this.conn.usersModel;\r\n    }\r\n\r\n    public register(entity: any): Promise<any> {\r\n        const sequeliz: Sequelize = DBHelper.sequelize;\r\n        return new Promise((resolve, reject) => {\r\n            sequeliz.transaction({autocommit: true},(t: Transaction) => {\r\n                return this.models.create(entity.user);\r\n            }).catch(e => {\r\n                return resolve(e);\r\n            }).then((user: any) => {\r\n                if(user) {\r\n                    const userRoles: UserRole = new UserRole();\r\n                    userRoles.setUserId = user.userId;\r\n                    userRoles.setRoles = entity.roles;\r\n                    return userRoles.userRolesServices.models.create(userRoles);\r\n                }\r\n            }).catch(e => {\r\n                return resolve(e);\r\n            }).\r\n            then((res: any) => {\r\n                resolve(res ? res.dataValues : null);\r\n            });\r\n        });\r\n    }\r\n\r\n    public getUserByUsername(userCriteria: any): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            this.models.findOne(this.joinQuery(this.getQuery(userCriteria.getUsername))).then((user: any) => {\r\n                if(user) {\r\n                    resolve(user.dataValues);\r\n                } else {\r\n                    resolve(user);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    public registerChild(entity: any): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            this.models.create(entity).then((user) => {\r\n                resolve(user);\r\n            }).catch(err => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    public updateMyProfile(entity: any, options: any): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            this.models.update(entity, options).then((user: any) => {\r\n                resolve(user);\r\n            });\r\n        });\r\n    }\r\n\r\n    public changePassword(enity: any, query: any): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            this.models.update(enity, query).then((data: any) => {\r\n                resolve(data);\r\n            });\r\n        });\r\n    }\r\n\r\n    private joinQuery(userQuery: any): any {\r\n        const include =  {\r\n            include: [\r\n                {\r\n                    model: (this.models as any).sequelize.models.province,\r\n                    as: ActionAssociateDatabase.USER_2_PRO,\r\n                    require: true\r\n                },\r\n                {\r\n                    model: (this.models as any).sequelize.models.district,\r\n                    as: ActionAssociateDatabase.USER_2_DIS,\r\n                    require: true\r\n                },\r\n                {\r\n                    model: (this.models as any).sequelize.models.ward,\r\n                    as: ActionAssociateDatabase.USER_2_WAR,\r\n                    require: true\r\n                }\r\n            ],\r\n            attributes: [`userId`, `userUUId`, `firstname`, `lastname`, `username`, `password`, `birthday`, `town`, `district`, `province`, `status`, `phone`, `email`, `images`, `createdBy`, `createdDate`, `updatedBy`, `updatedDate`, `isDeleted`]\r\n        };\r\n        return { ...userQuery, ...include };\r\n    }\r\n\r\n    getSeasonWithUser(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            const query: any = {\r\n                include: [\r\n                    {\r\n                        model: (this.models as any).sequelize.models.seasons,\r\n                        as: ActionAssociateDatabase.USER_2_SEASON,\r\n                        limit: 1,\r\n                        order: [\r\n                            ['seasonId', 'DESC']\r\n                        ]\r\n                    }\r\n                ]\r\n            };\r\n            this.models.findAll(query).then(res => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n\r\n    getQuery(username: any): any {\r\n        return {\r\n            where: {\r\n                username\r\n            }\r\n        };\r\n    }\r\n}\r\n","export * from './district';\r\n","export * from './province';\r\n","export * from './ward';\r\n","module.exports = require(\"jsonwebtoken\");","import * as SocketIO from 'socket.io';\r\nimport { logger } from '../services/logger';\r\n\r\nexport class BaseSocketServer {\r\n    protected socketConnection: SocketIO.Socket;\r\n    constructor(protected io: SocketIO.Server) {\r\n        this.io.on('connection', (socket: SocketIO.Socket) => {\r\n            this.socketConnection = socket;\r\n            logger.info(`${ socket.id } is connected.`);\r\n            socket.on('disconnect', (reason) => {\r\n                logger.info(`${ socket.id } is disconnected. [Reason] is ${ reason }`);\r\n            });\r\n        });\r\n    }\r\n}\r\n","import { ServerExpress } from './app';\r\nimport { colorCli, port, host } from './config';\r\nimport * as greenlock from 'greenlock-express';\r\nimport * as Debug from 'debug';\r\nconst debug = Debug('express:server');\r\n\r\n// create http server port\r\nconst app = ServerExpress.bootstrap().app;\r\n// server.listen(process.env.PORT || port, () => {\r\n//     console.log(`${colorCli.WHITE}App listening on host ${colorCli.MAGENTA}http://${host}:${process.env.PORT || port}${colorCli.RESET}`);\r\n// });\r\n\r\ngreenlock.create({\r\n    email: 'ngnviethuan@gmail.com'     // The email address of the ACME user / hosting provider\r\n  , agreeTos: true                    // You must accept the ToS as the host which handles the certs\r\n  , configDir: '~/.config/acme/'      // Writable directory where certs will be saved\r\n  , communityMember: true             // Join the community to get notified of important updates\r\n  , telemetry: true                   // Contribute telemetry data to the project\r\n  \r\n    // Using your express app:\r\n    // simply export it as-is, then include it here\r\n  , app,\r\n  \r\n  // , debug: true\r\n  }).listen(80, 443);\r\n","import setEnvironment from './bin/setEnvironment';\r\nsetEnvironment();\r\nimport * as bodyParser from 'body-parser';\r\nimport * as cookieParser from 'cookie-parser';\r\nimport * as createError from 'http-errors';\r\nimport * as compression from 'compression';\r\nimport * as errorHandler from 'errorhandler';\r\nimport * as express from 'express';\r\nimport * as cors from 'cors';\r\nimport * as expressStatusMonitor from 'express-status-monitor';\r\nimport * as helmet from 'helmet';\r\nimport * as methodOverride from 'method-override';\r\nimport * as morgan from 'morgan';\r\nimport * as path from 'path';\r\nimport * as fileUpload from 'express-fileupload';\r\nimport * as SocketIO from 'socket.io';\r\nimport { createServer, Server } from 'http';\r\n// import { createServer, Server } from 'https';\r\n// import { readFileSync } from 'fs';\r\n\r\nimport { GoogleDrive } from './googleAPI/drive.google';\r\nimport DBHelper from './helpers/db-helpers';\r\n\r\n// socket import\r\nimport { BaseSocketServer } from './socketServer/BaseSocket';\r\n// import { PhSocket } from './socketServer/phSocket';\r\n\r\nimport { ApiRoutes } from './routes';\r\nimport { logger } from './services';\r\n\r\nimport { SocketBuild } from './socketServer/index';\r\n\r\n// import './services/connectionDB';\r\n\r\n/**\r\n * The server.\r\n *\r\n * @class Server\r\n */\r\nexport class ServerExpress {\r\n    /**\r\n     * Bootstrap the application.\r\n     *\r\n     * @class Server\r\n     * @method bootstrap\r\n     * @static\r\n     */\r\n    public static bootstrap(): ServerExpress {\r\n        return new ServerExpress();\r\n    }\r\n\r\n    public app: express.Application;\r\n    public server: Server;\r\n    public io: SocketIO.Server;\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @class Server\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        // create expressjs application\r\n        this.app = express();\r\n        // create server for socket io\r\n        this.server = createServer(this.app);\r\n\r\n        // // https config\r\n        // const certsPath = path.join(__dirname, '../certs', 'server');\r\n        // const caCertsPath = path.join(__dirname, '../certs', 'ca');\r\n        // const options: any = {\r\n        //     key: readFileSync(certsPath + '/my-server.key.pem', { encoding: 'utf8'}),\r\n        //     cert: readFileSync(certsPath + '/my-server.crt.pem', { encoding: 'utf8'}),\r\n        //     ca: readFileSync(caCertsPath + '/my-root-ca.crt.pem', { encoding: 'utf8'}),\r\n        //     requestCert: false,\r\n        //     rejectUnauthorized: false\r\n        // };\r\n        // this.server = createServer(options,this.app);\r\n\r\n        // Add socket server\r\n        this.io = SocketIO(this.server);\r\n        // socket client in /socket.io/socket.io.js\r\n        new SocketBuild(this.io);\r\n\r\n        // Google Drive API\r\n        new GoogleDrive();\r\n\r\n        // configure application\r\n        this.config();\r\n        // add routes\r\n        this.routes();\r\n\r\n        // handle error 404, ...etc\r\n        this.handleErr();\r\n\r\n        // using Database\r\n        DBHelper.getDatabaseConnection();\r\n    }\r\n\r\n    /**\r\n     * Configure application\r\n     *\r\n     * @class Server\r\n     * @method config\r\n     */\r\n    public async config() {\r\n        this.app.use(cors());\r\n\r\n        // add static paths\r\n        this.app.use('/assets', express.static(path.join(__dirname, '../public')));\r\n\r\n        // set template\r\n        this.app.set('views', path.join(__dirname, '../views'));\r\n        this.app.set('view engine', 'ejs');\r\n\r\n        // mount logger\r\n        this.app.use(morgan('tiny', {\r\n            stream: {\r\n                write: (message: string) => logger.info(message.trim()),\r\n            },\r\n        } as morgan.Options));\r\n\r\n        // mount urlencode parser\r\n        this.app.use(bodyParser.json({\r\n            limit: '50mb',\r\n        }));\r\n\r\n        // mount urlencode parser\r\n        this.app.use(bodyParser.urlencoded({\r\n            extended: false            \r\n        }));\r\n\r\n        // mount query string parser\r\n        this.app.use(cookieParser());\r\n\r\n        // mount override?\r\n        this.app.use(helmet());\r\n        this.app.use(compression());\r\n        this.app.use(methodOverride());\r\n        this.app.use(expressStatusMonitor());\r\n        this.app.use(fileUpload({\r\n            limits: { fileSize: 50 * 1024 * 1024 },\r\n        }));\r\n\r\n        // this.app.use(function (req, res, next) {\r\n        //     res.header('Access-Control-Allow-Origin', '*');\r\n        //     res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\r\n        //     next();\r\n        // });\r\n        // this.handleErr();\r\n    }\r\n\r\n    private handleErr = () => {\r\n        // catch 404 and forward to error handler\r\n        this.app.use((req: express.Request, res: express.Response, next: express.NextFunction) => {\r\n            next(createError(404));\r\n        });\r\n\r\n        // catch 404 and forward to error handler\r\n        this.app.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) => {\r\n            // err.status = 404;\r\n            // next(err);\r\n            // set locals, only providing error in development\r\n            res.locals.message = err.message;\r\n            res.locals.error = req.app.get('env') === 'development' ? err : {};\r\n\r\n            // render the error page\r\n            res.status(err.status || 500);\r\n            res.render('error');\r\n        });\r\n\r\n        // error handling\r\n        this.app.use(errorHandler());\r\n    }\r\n\r\n    /**\r\n     * Create and return Router.\r\n     *\r\n     * @class Server\r\n     * @method routes\r\n     * @return void\r\n     */\r\n    private routes = async () => {\r\n        this.app.use(ApiRoutes.path, ApiRoutes.router);\r\n    }\r\n}\r\n","import * as path from 'path';\r\nimport * as dotenv from 'dotenv';\r\nexport default function setEnvironment() {\r\n    if (process.env.NODE_ENV.trim() === 'debug') {\r\n        dotenv.config({\r\n            path: process.cwd() + '/debug.env'\r\n        });\r\n    }\r\n    else if (process.env.NODE_ENV.trim() === 'development') {\r\n        dotenv.config({\r\n            path: process.cwd() + '/.env'\r\n        });\r\n    } else if (process.env.NODE_ENV.trim() === 'production') {\r\n        dotenv.config({\r\n            path: process.cwd() + '/production.env'\r\n        });\r\n    }\r\n}\r\n","module.exports = require(\"dotenv\");","module.exports = require(\"body-parser\");","module.exports = require(\"cookie-parser\");","module.exports = require(\"http-errors\");","module.exports = require(\"compression\");","module.exports = require(\"errorhandler\");","module.exports = require(\"cors\");","module.exports = require(\"express-status-monitor\");","module.exports = require(\"helmet\");","module.exports = require(\"method-override\");","module.exports = require(\"morgan\");","module.exports = require(\"path\");","module.exports = require(\"express-fileupload\");","module.exports = require(\"socket.io\");","module.exports = require(\"http\");","module.exports = require(\"googleapis\");","export const ContentType = {\r\n    Gzip: 'application/gzip',\r\n    Json: 'application/json',\r\n    JsonUtf8: 'application/json; charset=utf8',\r\n};\r\n\r\nexport const apig = {\r\n    logLevel: 'INFO',\r\n    metricsEnabled: true,\r\n    origin: '*',\r\n};\r\n\r\nexport const AccessExposeHeaders = 'X-Pagination-Index,X-Pagination-Size,X-Pagination-TotalCount';\r\n\r\nexport interface IOptionsHttpResponse {\r\n    err?: any;\r\n    message?: any;\r\n    data?: any;\r\n    status?: number;\r\n    excludeStack?: any;\r\n    code?: string;\r\n    details?: any;\r\n}\r\n\r\nexport const IdDataTypes = {\r\n    Integer: 'Integer',\r\n    UuidV1: 'UuidV1',\r\n    UuidV4: 'UuidV4',\r\n};\r\n\r\nexport enum folderDrive {\r\n    uploadImageVNF = '1zh74DklADISZbcEYVix2nDDKd5wtt0-Z'\r\n}\r\n\r\nexport enum defaultImage {\r\n    userImage = '1pL4I4TNcKOf5kD2YTNXXJjuWtyJSBDE2',\r\n    pondImage = '1EVRh5NePZkOBxfKFDAD1RZ3AjHSWJ12W'\r\n}\r\n\r\nexport const isUUId4: RegExp = /^[0-9A-F]{8}-[0-9A-F]{4}-[4][0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i;\r\n\r\nexport interface ISearchOptions {\r\n    pageSizes?: string;\r\n    pageIndex?: string;\r\n    // order?: Array<[]>;\r\n    orderBy?: string;\r\n    orderType?: string;\r\n    between?: string[];\r\n    count?: string;\r\n    userId?: string;\r\n}\r\n\r\n/**\r\n * Những hạng mục đã được đánh dấu [✔] vui lòng không sửa đổi,\r\n * Nếu không sẽ xảy ra lỗi rất nghiêm trọng không fix nổi\r\n */\r\nexport enum ActionAssociateDatabase {\r\n\r\n    BOUGHT_BREED_DETAIL_2_COUPON = 'coupon', // ✔\r\n    BOUGHT_BREED_DETAIL_2_BREED = 'breed', // ✔\r\n\r\n    BOUGHT_BREED_2_BOUGHT_BREED_DETAIL = 'boughtbreedsToBoughtBreedDetails',\r\n    BOUGHT_BREED_2_USER = 'users',\r\n    BOUGHT_BREED_2_SEASON = 'season',\r\n\r\n    BREED_2_BOUGHT_BREED_DETAIL = 'boughBreedDetail',\r\n    BREED_2_STOKING_DETAIL = 'stockingDetails',\r\n    BREED_2_OWNER_BREED = 'owner',\r\n\r\n    COST_2_POND_PREPARE = 'costs',\r\n\r\n    COUPON_2_MATERIAL = 'materials',\r\n    COUPON_2_BOUGHT_BREED_DETAILS = 'boughtBreedDetails', // ✔\r\n    COUPON_2_SEASON = 'season', // ✔\r\n    COUPON_2_USER = 'user',\r\n\r\n    DIED_FISHERY_2_SEASON_AND_POND = 'seasonAndPond',\r\n\r\n    DISTRICT_2_USER = 'districtsToUser',\r\n\r\n    GROWTH_2_SEASON_AND_POND = 'seasonAndPond',\r\n\r\n    HARVEST_DETAIL_2_HARVEST = 'harvest', // ✔\r\n\r\n    HARVEST_2_HARVEST_DETAILS = 'details',\r\n    HARVEST_2_SEASON_AND_POND = 'harvestsnp', // ✔\r\n\r\n    MATERIAL_2_COUPON = 'coupon',\r\n    MATERIAL_2_POND_PREPARE = 'materialToPondPrepare',\r\n    MATERIAL_2_STORAGE = 'storage', // ✔\r\n    MATERIAL_2_USING_FOOD = 'usingFoods',\r\n    MATERIAL_2_USING_VETERINARY = 'usingVeterinay',\r\n\r\n    POND_DIARY_2_SEASON_AND_POND = 'snp', // ✔\r\n\r\n    POND_ENVIRONMENT_2_SEASON_AND_POND = 'environments',\r\n\r\n    POND_PREPARE_2_SEASON_AND_POND = 'seasonAndPond',\r\n    POND_PREPARE_2_COST = 'pondPrepare',\r\n    POND_PREPARE_2_POND_PREPARE_DETAILS = 'details',\r\n    POND_PREPARE_2_INCURREDS = 'incurreds',\r\n\r\n    POND_PREPARE_DETAIL_2_POND_PREPARE = 'pondPrepare',\r\n    POND_PREPARE_DETAIL_2_STORAGE = 'storages',\r\n    POND_PREPARE_DETAIL_2_COST = 'detailCost',\r\n\r\n    INCURREDS_TO_POND_PREPARE = 'pondPrepare',\r\n    INCURREDS_TO_USER = 'user',\r\n\r\n    POND_2_POND_USER_ROLE = 'pondUserRoles', // ✔\r\n    POND_2_SEASON = 'seasons',\r\n    POND_2_USER = 'user', // ✔\r\n    POND_2_EMPLOYEE_MAYNY_ROLES = 'users', // ✔\r\n    POND_2_SEASON_AND_POND = 'seasonsnp', // ✔\r\n\r\n    POND_USER_ROLE_2_USER = 'user', // ✔\r\n    POND_USER_ROLE_2_USER_ROLE = 'userRole',\r\n    POND_USER_ROLE_2_POND = 'pond',\r\n\r\n    PRICE_2_SEASON = 'prices',\r\n\r\n    PROVINCE_2_USER = 'provinces',\r\n\r\n    SEASON_AND_POND_2_SEASON = 'seasons',\r\n    SEASON_AND_POND_2_POND = 'ponds',\r\n    SEASON_AND_POND_2_GROWTH = 'seasonNPondToGrowth',\r\n    SEASON_AND_POND_2_DIED_FISH = 'diedFishSeason',\r\n    SEASON_AND_POND_2_HARVEST = 'toHarvests',\r\n    SEASON_AND_POND_2_POND_DIARY = 'seasonWithDiary',\r\n    SEASON_AND_POND_2_POND_PREPARE = 'withPondPrepare',\r\n    SEASON_AND_POND_2_TAKE_CARE = 'takeCares',\r\n    SEASON_AND_POND_2_STOCKING = 'stocking',\r\n    SEASON_AND_POND_2_POND_ENV = 'seasonWithEnvironment',\r\n\r\n    SEASON_2_BOUGHT_BREED = 'boughtBreed',\r\n    SEASON_2_PRICE = 'price',\r\n    SEASON_2_COUPON = 'coupon',\r\n    SEASON_2_USER = 'user', // ✔\r\n    SEASON_2_USER_ROLES = 'roles',\r\n    SEASON_2_POND = 'ponds',\r\n    SEASON_2_SEASON_AND_POND = 'seasonToSeasonNPond',\r\n    SEASON_2_STORAGE = 'storage',\r\n\r\n    STOCKING_2_STOCKING_DETAILS = 'details',\r\n    STOCKING_2_SEASON_AND_POND = 'seasonAndPond',\r\n\r\n    STOCKING_DETAILS_2_STOCKING = 'stocking',\r\n    STOCKING_DETAILS_2_BREED = 'breed',\r\n\r\n    STORAGE_2_POND_PREPARE_DETAILS = 'pondPrepareDetails', // ✔\r\n    STORAGE_2_MATERIAL = 'materials',\r\n    STORAGE_2_SEASON = 'storagesToSeason',\r\n    STORAGE_2_PRICE = 'storagesToPrices',\r\n    STORAGE_2_USING_FOOD = 'usingFoods',\r\n    STORAGE_2_USING_VETERINARY = 'usingveterinary',\r\n    STORAGE_2_OWNER = 'owner',\r\n\r\n    OWNER_TO_STORAGE = 'storages',\r\n    OWNER_TO_USER = 'user',\r\n\r\n    OWNER_BREED_TO_BREED = 'breeds',\r\n    OWNER_BREED_TO_USER = 'user',\r\n\r\n    TAKE_CARE_2_USING_FOOD = 'usingFoods',\r\n    TAKE_CARE_2_USING_VETERINARY = 'usingVeterinary',\r\n    TAKE_CARE_2_SEASON_AND_POND = 'seasonAndPond',\r\n\r\n    USER_ROLES_2_USER = 'userInfo',\r\n    USER_ROLES_2_SEASON = 'seasonRoles',\r\n    USER_ROLES_2_USER_BOSS = 'employees', // ✔\r\n    USER_ROLES_2_POND_USER_ROLE = 'pondUserRoles', // ✔\r\n\r\n    USER_2_ROLES_USER = 'roles', // ✔\r\n    USER_2_POND = 'ponds',\r\n    USER_2_POND_MANY_ROLES = 'pondsBy',\r\n    USER_2_COUPON = 'coupons',\r\n    USER_2_SEASON = 'seasons', // ✔\r\n    USER_2_BOUGHT_BREED = 'userToBoughtBreeds',\r\n    USER_2_PRO = 'provinces',\r\n    USER_2_DIS = 'districts',\r\n    USER_2_WAR = 'wards',\r\n    USER_2_ROLES_GET_EMPLOYEES = 'employees', // ✔\r\n    USER_2_POND_USER_ROLE = 'pondUserRole',\r\n    USER_2_OWNER_STORAGE = 'user',\r\n    USER_2_OWNER_BREED = 'ownerBreed',\r\n    USER_2_INCURREDS = 'incurreds',\r\n\r\n    USING_FOOD_2_STORAGE = 'storages',\r\n    USING_FOOD_2_TAKE_CARE = 'usingFoods',\r\n\r\n    USING_VETERINARY_2_STORAGE = 'storages',\r\n    USING_VETERINARY_2_TAKE_CARE = 'usingVeterinaryTakeCare',\r\n\r\n    WARD_2_USER = 'wards',\r\n}\r\n","/**\r\n * @description :: Custom library to process date time format\r\n * like get date, month, year or concat time together\r\n */\r\n\r\n/**\r\n * Module dependencies.\r\n */\r\n// import 'moment-timezone'\r\nimport * as moment from 'moment-timezone';\r\n\r\n/**\r\n * Define a DateUtil that supports some functions to work with date time\r\n */\r\nexport class DateUtil {\r\n\r\n   /**\r\n    * Get current datetime using moment\r\n    * @return {Date} The current date\r\n    */\r\n    public static getNow(): Date {\r\n        return moment().toDate();\r\n    }\r\n\r\n   /**\r\n    * Get current datetime for specify time zone\r\n    * @param {String} timeZone  The time zone name\r\n    * @param {String} format    The format pattern to be used\r\n    * @return {Date}            The current date in specify time zone\r\n    */\r\n    public static getNowByTimeZone(timeZone: string, format: string): string {\r\n        return moment().tz(timeZone).format(format);\r\n    }\r\n\r\n    /**\r\n     * Get current UTC datetime using moment\r\n     * @return {String} A string that represent curent UTC datetime (i.e. 2016-11-13T04:40:08Z)\r\n     */\r\n    public static getUTCDateTime(date?: Date): string {\r\n        return moment(date).utc().format();\r\n    }\r\n\r\n    /**\r\n     * Converts the given date with the format pattern\r\n     * @param {String} date             The date to be converted\r\n     * @param {String} format           The format pattern to be used\r\n     * @param {boolean} isUTC           The boolean value to specific the date is UTC or not\r\n     * @param {boolean} ignoreConvert   The flag to specific the date is convert to server time or not\r\n     * @return {String}                 The formatted date\r\n     */\r\n    public static formatDate(date: moment.MomentInput, format: string, isUTC?: boolean, ignoreConvert: boolean = false): string {\r\n        if (!date) {\r\n            return null;\r\n        }\r\n\r\n        if (isUTC) {\r\n            return moment.utc(date).format(format);\r\n        }\r\n\r\n        // Remove Z character from the date value to ignore convert to local time\r\n        if (ignoreConvert && typeof date === 'string') {\r\n            date = date.replace(new RegExp('Z', 'g'), '');\r\n        }\r\n\r\n        return moment(date).format(format);\r\n    }\r\n\r\n    /**\r\n     * Gets the date from the formatted date string\r\n     * @param {String} str The formatted date to be converted\r\n     * @param {String} format The format pattern is using\r\n     * @return {String} Return the date from the formatted date string\r\n     */\r\n    public static parse(str: moment.MomentInput, format?: moment.MomentFormatSpecification): Date {\r\n        if (str === null || str === '') {\r\n            return null;\r\n        }\r\n        return moment(str, format).toDate();\r\n    }\r\n\r\n    /**\r\n     * Converts the formatted date to the new format\r\n     * @param {String} str          The formatted date to be converted\r\n     * @param {String} format       The format pattern is using\r\n     * @param {String} newFormat    The new format pattern to be used\r\n     * @return {String} Return the new formatted date\r\n     */\r\n    public static refFormatDate(str: moment.MomentInput, format: moment.MomentFormatSpecification, newFormat: string): string {\r\n        const date: Date = this.parse(str, format);\r\n        return DateUtil.formatDate(date, newFormat);\r\n    }\r\n\r\n    /**\r\n     * To get the difference in another unit of measurement, pass that measurement as the second argument.\r\n     * @param {Date} date           The date to difference\r\n     * @param {Date} diffDate       The date to be diff\r\n     * @param {String} unitOfTime   The unit of time (months, years, days, etc... )\r\n     * @return {String} The difference in another unit of measurement\r\n     */\r\n    public static diffDate(date: moment.MomentInput, diffDate: moment.MomentInput, unitOfTime: moment.unitOfTime.Diff): number {\r\n        return moment(date).diff(diffDate, unitOfTime);\r\n    }\r\n\r\n    /**\r\n     * To add amount unit of time to specified date\r\n     * @param {Date} date           The input date\r\n     * @param {Date} amount         The amount unit that the input date will add\r\n     * @param {String} unitOfTime   The unit of time (months, years, days, etc... )\r\n     * @return {Date} The date after added amount of unit of time.\r\n     */\r\n    public static add(date: moment.MomentInput, amount: moment.DurationInputArg1, unitOfTime: moment.unitOfTime.DurationConstructor): Date {\r\n        return moment(date).add(amount, unitOfTime).toDate();\r\n    }\r\n\r\n    /**\r\n     * To subtract amount unit of time to specified date\r\n     * @param {Date} date           The input date\r\n     * @param {Date} amount         The amount unit that the input date will substract\r\n     * @param {String} unitOfTime   The unit of time (months, years, days, etc... )\r\n     * @return {Date} The date after subtracted amount of unit of time.\r\n     */\r\n    public static subtract(date: moment.MomentInput, amount: moment.DurationInputArg1, unitOfTime: moment.unitOfTime.DurationConstructor): Date {\r\n        return moment(date).subtract(amount, unitOfTime).toDate();\r\n    }\r\n\r\n    /**\r\n     * Calculate the date end of unit of time to specified date\r\n     * @param {Date} date           The input date\r\n     * @param {String} unitOfTime   The unit of time (months, years, days, etc... )\r\n     * @return {Date} The date end of unit of time.\r\n     */\r\n    public static endOf(date: moment.MomentInput, unitOfTime: moment.unitOfTime.StartOf): Date {\r\n        return moment(date).endOf(unitOfTime).toDate();\r\n    }\r\n\r\n    /**\r\n     * Calculate the date start of unit of time to specified date\r\n     * @param {Date} date           The input date\r\n     * @param {String} unitOfTime   The unit of time (months, years, days, etc... )\r\n     * @return {Date} The date end of unit of time.\r\n     */\r\n    public static startOf(date: moment.MomentInput, unitOfTime: moment.unitOfTime.StartOf): Date {\r\n        return moment(date).startOf(unitOfTime).toDate();\r\n    }\r\n}\r\n","import * as bcryptjs from 'bcryptjs';\r\nimport { Promise } from './promise';\r\n\r\nexport class Enscrypts {\r\n    public static getSalt(rounds: number): Promise<string> {\r\n        return Promise.resolve(bcryptjs.genSalt(rounds));\r\n    }\r\n\r\n    public static getSaltSync(rounds: number) {\r\n        return bcryptjs.genSaltSync(rounds);\r\n    }\r\n\r\n    public static hashing(text: string, salt: number | string): Promise<string> {\r\n        return Promise.resolve(bcryptjs.hash(text, salt));\r\n    }\r\n\r\n    public static hashingSync(text: string, salt: number | string): string {\r\n        return bcryptjs.hashSync(text, salt);\r\n    }\r\n\r\n    public static compare(candidate: string, hash: string): Promise<boolean> {\r\n        return Promise.resolve(bcryptjs.compare(candidate, hash));\r\n    }\r\n\r\n    public static compareSync(candidate: string, hash: string): boolean {\r\n        return bcryptjs.compareSync(candidate, hash);\r\n    }\r\n\r\n    /**\r\n     * Enscrypts.hashingSync('vietnamfishery', Enscrypts.getSaltSync(Math.floor((Math.random() * 12) + 1))) + '100%<3' +\r\n     */\r\n    protected reCryptToken = (tokenBCrypt: string, isBoss: boolean): string => {\r\n        const token = tokenBCrypt.split('.');\r\n        if (!isBoss) {\r\n            return token[0] + '.' + (token[1].slice(0, token[1].length - 1) + Math.floor((Math.random() * 9) + 1) + token[1][token[1].length - 1]) + '.' + token[2];\r\n        } else {\r\n            return token[0] + '.' + (token[1].slice(0, token[1].length - 1) + 0 + token[1][token[1].length - 1]) + '.' + token[2];\r\n        }\r\n    }\r\n\r\n    protected extractToken = (token: string): string => {\r\n        const tokenCheck = token.split('.');\r\n        return tokenCheck[0] + '.' + (tokenCheck[1].slice(0, tokenCheck[1].length - 1) + tokenCheck[1][tokenCheck[1].length]) + '.' + tokenCheck[2];\r\n    }\r\n}\r\n","module.exports = require(\"bcryptjs\");","import * as Stream from 'stream';\r\nimport { Promise } from 'bluebird';\r\n\r\nexport class CustomStream extends Stream {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    public static BufferToStream(buffer: Buffer) {\r\n        const stream = new this.Duplex();\r\n        stream.push(buffer);\r\n        stream.push(null);\r\n        return stream;\r\n    }\r\n\r\n    public static StreamToBuffer(stream: Stream) {\r\n        return new Promise((resolve, reject) => {\r\n            const buffers: Buffer[] = [];\r\n            stream.on('error', reject);\r\n            stream.on('data', (data) => buffers.push(data));\r\n            stream.on('end', () => resolve(Buffer.concat(buffers)));\r\n        });\r\n    }\r\n}\r\n","module.exports = require(\"stream\");","module.exports = require(\"os\");","import * as Sequeliz from 'sequelize';\r\n\r\nimport * as associations from './';\r\n\r\nexport class ModelBuilder {\r\n    constructor(private model: Sequeliz.Model<{}, any>) { }\r\n\r\n    boughtbreeddetailsAssociate(couponModel: any, breedsModel: any) {\r\n        associations.boughtbreeddetailsToCoupon(this.model, couponModel);\r\n        associations.boughtbreeddetailsToBreeds(this.model, breedsModel);\r\n    }\r\n\r\n    boughtbreedsAssociate(\r\n        seasonModel: any,\r\n        usersModel: any\r\n    ) {\r\n        associations.boughtbreedsToSeason(this.model, seasonModel);\r\n        associations.boughtbreedsToUser(this.model, usersModel);\r\n    }\r\n\r\n    breedsAssociate(\r\n        boughtBreedDetailsModel: any,\r\n        stockingDetailsModel: any,\r\n        breedOwnerModel: any\r\n    ) {\r\n        associations.breedToBoughBreedDetails(this.model, boughtBreedDetailsModel);\r\n        associations.breedsToStockingDetails(this.model, stockingDetailsModel);\r\n        associations.breedsToOwnerBreed(this.model, breedOwnerModel);\r\n    }\r\n\r\n    costsAssociate(pondPrepareModel: any) {\r\n        associations.costsToPondPrepare(this.model, pondPrepareModel);\r\n    }\r\n\r\n    couponAssociate(\r\n        materialModel: any,\r\n        usersModel: any,\r\n        seasonModel: any,\r\n        boughtBreedDetailsModel: any\r\n    ) {\r\n        associations.couponToMaterial(this.model, materialModel);\r\n        associations.couponToBoughtBreedDetails(this.model, boughtBreedDetailsModel);\r\n        associations.couponToUsers(this.model, usersModel);\r\n        associations.couponToSeason(this.model, seasonModel);\r\n    }\r\n\r\n    diedfisherysAssociate(seasonAndPondModel: any) {\r\n        associations.diedfisherysToSeasonAndPond(this.model, seasonAndPondModel);\r\n    }\r\n\r\n    districtAssociate(userModel: any) {\r\n        associations.districtToUser(this.model, userModel);\r\n    }\r\n\r\n    growthsAssociate(seasonAndPondModel: any) {\r\n        associations.growthsToSeasonAndPond(this.model, seasonAndPondModel);\r\n    }\r\n\r\n    harvestdetailsAssociate(harvestsModel: any) {\r\n        associations.harvestdetailsToHarvests(this.model, harvestsModel);\r\n    }\r\n\r\n    harvestsAssociate(harvestDetailModel: any, seasonAndPondModel: any) {\r\n        associations.harvestsToHarvestDetails(this.model, harvestDetailModel);\r\n        associations.harvestsToSeasonAndPond(this.model, seasonAndPondModel);\r\n    }\r\n\r\n    incurredAssociate(pondPrepareModel: any, userModel: any) {\r\n        associations.incurredsToPondPrepare(this.model, pondPrepareModel);\r\n        associations.incurredsToUser(this.model, userModel);\r\n    }\r\n\r\n    materialAssociate(\r\n        couponModel: any,\r\n        pondPrepareModel: any,\r\n        storageModel: any,\r\n        usingFoodModel: any,\r\n        usingVeterinayModel: any\r\n    ) {\r\n        associations.materialToCoupon(this.model, couponModel);\r\n        associations.materialToPondPrepare(this.model, pondPrepareModel);\r\n        associations.materialToStorages(this.model, storageModel);\r\n        associations.materialToUsingFood(this.model, usingFoodModel);\r\n        associations.materialToUsingVeterinary(this.model, usingVeterinayModel);\r\n    }\r\n\r\n    ponddiaryAssociate(seasonAndPondModel: any) {\r\n        associations.ponddiaryToSeasonAndPond(this.model, seasonAndPondModel);\r\n    }\r\n\r\n    pondenvironmentAssociate(seasonAndModel: any) {\r\n        associations.pondenvironmenToSeasonAndPond(this.model, seasonAndModel);\r\n    }\r\n\r\n    pondprepareAssociate(\r\n        seasonAndPondModel: any,\r\n        costsModel: any,\r\n        pondPrepareDetailModel: any,\r\n        incurredModel: any\r\n    ) {\r\n        associations.pondprepareToCosts(this.model, costsModel);\r\n        associations.pondprepareToPondPrepareDetails(this.model, pondPrepareDetailModel);\r\n        associations.pondprepareToSeasonAndPond(this.model, seasonAndPondModel);\r\n        associations.pondprepareToIncurred(this.model, incurredModel);\r\n    }\r\n\r\n    pondpreparedetailsAssociate(pondPrepareModel: any, storageModel: any) {\r\n        associations.pondpreparedetailsToStorage(this.model, storageModel);\r\n        associations.pondpreparedetailsToPondPrepare(this.model, pondPrepareModel);\r\n    }\r\n\r\n    pondsAssociate(pondUserRolesModel: any, seasonAndPondModel: any, userModel: any, seasonModel: any) {\r\n        associations.pondsToPondUserRoles(this.model, pondUserRolesModel);\r\n        associations.pondsToSeasonAndPond(this.model, seasonAndPondModel);\r\n        associations.pondsToUser(this.model, userModel);\r\n        associations.pondsToUserEmployee(this.model, userModel);\r\n        associations.pondToSeason(this.model, seasonModel);\r\n    }\r\n\r\n    ponduserrolesAssociate(\r\n        userModel: any,\r\n        pondsModel: any\r\n    ) {\r\n        associations.ponduserrolesToUser(this.model, userModel);\r\n        associations.ponduserrolesToPond(this.model, pondsModel);\r\n    }\r\n\r\n    pricesAssociate(seasonModel: any) {\r\n        associations.pricesToSeason(this.model, seasonModel);\r\n    }\r\n\r\n    provinceAssociate(userModel: any) {\r\n        associations.provinceToUser(this.model, userModel);\r\n    }\r\n\r\n    seasonAssociate(\r\n        boughtBreedModel: any,\r\n        priceModel: any,\r\n        userModel: any,\r\n        seasonAndPondModel: any,\r\n        pondsModel: any,\r\n        rolesUserModel: any,\r\n        couponModel: any\r\n    ) {\r\n        associations.seasonToBoughtBreed(this.model, boughtBreedModel);\r\n        associations.seasonToPrice(this.model, priceModel);\r\n        associations.seasonToUser(this.model, userModel);\r\n        associations.seasonToSNP(this.model, seasonAndPondModel);\r\n        associations.seasonToPond(this.model, pondsModel);\r\n        associations.seasonToUserRoles(this.model, rolesUserModel);\r\n        associations.seasonToCoupon(this.model, couponModel);\r\n    }\r\n\r\n    seasonAndPondAssociate(\r\n        diedFishModel: any,\r\n        growthModel: any,\r\n        harvestModel: any,\r\n        pondDiary: any,\r\n        pondEnvironmentModel: any,\r\n        pondPrepareModel: any,\r\n        pondsModel: any,\r\n        seasonModel: any,\r\n        stockingModel: any,\r\n        takeCareModel: any\r\n    ) {\r\n        associations.withDiedFish(this.model, diedFishModel);\r\n        associations.withGrowths(this.model, growthModel);\r\n        associations.withHarvest(this.model, harvestModel);\r\n        associations.withPondDiary(this.model, pondDiary);\r\n        associations.withPondEnv(this.model, pondEnvironmentModel);\r\n        associations.withPondPrepare(this.model, pondPrepareModel);\r\n        associations.withPond(this.model, pondsModel);\r\n        associations.withSeason(this.model, seasonModel);\r\n        associations.withStocking(this.model, stockingModel);\r\n        associations.withTakeCare(this.model, takeCareModel);\r\n    }\r\n\r\n    stockingAssociate(stockingdetailsModel: any, seasonAndPondModel: any) {\r\n        associations.stockingToSNP(this.model, seasonAndPondModel);\r\n        associations.stockingToStockingdetails(this.model, stockingdetailsModel);\r\n    }\r\n\r\n    stockingdetailsAssociate(stockingModel: any, breedsModel: any) {\r\n        associations.stockingdetailsToBreeds(this.model, breedsModel);\r\n        associations.stockingdetailsToStocking(this.model, stockingModel);\r\n    }\r\n\r\n    storagesAssociate(\r\n        materialsModel: any,\r\n        storageOwnerModel: any,\r\n        pondPrepareDetailModel: any,\r\n        usingFoodModel: any,\r\n        usingveterinaryModel: any\r\n    ) {\r\n        associations.storagesToMaterial(this.model, materialsModel);\r\n        associations.storagesToOwner(this.model, storageOwnerModel);\r\n        associations.storagesToPondPrePareDetail(this.model, pondPrepareDetailModel);\r\n        associations.storagesToUsingFood(this.model, usingFoodModel);\r\n        associations.storagesToUsingVeterinary(this.model, usingveterinaryModel);\r\n    }\r\n\r\n    storageOwnerAssociate(\r\n        storageModel: any,\r\n        userModel: any,\r\n    ) {\r\n        associations.ownerToStorage(this.model, storageModel);\r\n        associations.ownerToUser(this.model, userModel);\r\n    }\r\n\r\n    breedOwnerAssociate(\r\n        breedModel: any,\r\n        userModel: any\r\n    ) {\r\n        associations.ownerBreedToBreed(this.model, breedModel);\r\n        associations.ownerBreedToUser(this.model, userModel);\r\n    }\r\n\r\n    takecareAssociate(usingveterinaryModel: any, usingfoodsModel: any, seasonAndPondModel: any) {\r\n        associations.takecareToSNP(this.model, seasonAndPondModel);\r\n        associations.takecareToUsingfoods(this.model, usingfoodsModel);\r\n        associations.takecareToUsingveterinary(this.model, usingveterinaryModel);\r\n    }\r\n\r\n    userRolesAssociate(\r\n        pondUserRolesModel: any,\r\n        userModel: any,\r\n        seasonModel: any\r\n    ) {\r\n        associations.userrolesToPondUserRoles(this.model, pondUserRolesModel);\r\n        associations.userrolesToUsers(this.model, userModel);\r\n        associations.userrolesToUsersBoss(this.model, userModel);\r\n        associations.userrolesToSeason(this.model, seasonModel);\r\n    }\r\n\r\n    usersAssociate(\r\n        districtModel: any,\r\n        rolesUserModel: any,\r\n        pondsModel: any,\r\n        couponModel: any,\r\n        boughtbreedsModel: any,\r\n        provinceModel: any,\r\n        seasonModel: any,\r\n        wardModel: any,\r\n        ownerStorageModel: any,\r\n        breedOwnerModel: any,\r\n        pondUserRolesModel: any,\r\n        incurredModel: any\r\n    ) {\r\n        associations.userToDistrict(this.model, districtModel);\r\n        associations.userToRolesUser(this.model, rolesUserModel);\r\n        associations.userToPond(this.model, pondsModel);\r\n        associations.userToPondRolesBelongMany(this.model, pondsModel);\r\n        associations.userToCoupon(this.model, couponModel);\r\n        associations.userToBoughtBreeds(this.model, boughtbreedsModel);\r\n        associations.userToProvince(this.model, provinceModel);\r\n        associations.userToSeason(this.model, seasonModel);\r\n        associations.userToWard(this.model, wardModel);\r\n        associations.userToRolesBoss(this.model, rolesUserModel);\r\n        associations.userToOwnerStorage(this.model, ownerStorageModel);\r\n        associations.userToOwnerBreed(this.model, breedOwnerModel);\r\n        associations.userToPondUserRoles(this.model, pondUserRolesModel);\r\n        associations.userToIncurred(this.model, incurredModel);\r\n    }\r\n\r\n    usingfoodsAssociate(storageModel: any, takecareModel: any) {\r\n        associations.usingfoodsToStorage(this.model, storageModel);\r\n        associations.usingfoodsToTakecare(this.model, takecareModel);\r\n    }\r\n\r\n    usingveterinaryAssociate(storageModel: any, takecareModel: any) {\r\n        associations.usingveterinaryToStorage(this.model, storageModel);\r\n        associations.usingveterinaryToTakecare(this.model, takecareModel);\r\n    }\r\n\r\n    wardAssociate(userModel: any) {\r\n        associations.wardToUser(this.model, userModel);\r\n    }\r\n}\r\n","export * from './boughtbreeddetails.associate';\r\nexport * from './boughtbreeds.associate';\r\nexport * from './breeds.associate';\r\nexport * from './ownerBreed.associate';\r\nexport * from './costs.associate';\r\nexport * from './coupon.associate';\r\nexport * from './diedfisherys.associate';\r\nexport * from './growths.associate';\r\nexport * from './harvestdetails.associate';\r\nexport * from './harvests.associate';\r\nexport * from './material.associate';\r\nexport * from './ponddiary.associate';\r\nexport * from './pondenvironments.associate';\r\nexport * from './pondprepare.associate';\r\nexport * from './pondpreparedetails.associate';\r\nexport * from './ponds.associate';\r\nexport * from './ponduserroles.associate';\r\nexport * from './prices.associate';\r\nexport * from './ponduserroles.associate';\r\nexport * from './season.associate';\r\nexport * from './seasonandpond.associate';\r\nexport * from './stocking.associate';\r\nexport * from './stockingdetails.associate';\r\nexport * from './storages.associate';\r\nexport * from './storageOwner.associate';\r\nexport * from './takecare.associate';\r\nexport * from './users.associate';\r\nexport * from './userRoles.associate';\r\nexport * from './usingfoods.associate';\r\nexport * from './usingveterinary.associate';\r\nexport * from './province.associate';\r\nexport * from './district.associate';\r\nexport * from './ward.associate';\r\nexport * from './incurreds.associate';\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function boughtbreeddetailsToCoupon(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.BOUGHT_BREED_DETAIL_2_COUPON,\r\n        foreignKey: {\r\n            name: 'couponId',\r\n            field: 'couponId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function boughtbreeddetailsToBreeds(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.BOUGHT_BREED_DETAIL_2_BREED,\r\n        foreignKey: {\r\n            name: 'breedId',\r\n            field: 'breedId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function boughtbreedsToSeason(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.BOUGHT_BREED_2_SEASON,\r\n        foreignKey: {\r\n            name: 'seasonId',\r\n            field: 'seasonId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function boughtbreedsToUser(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.BOUGHT_BREED_2_USER,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function breedToBoughBreedDetails(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.BREED_2_BOUGHT_BREED_DETAIL,\r\n        foreignKey: {\r\n            name: 'breedId',\r\n            field: 'breedId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function breedsToStockingDetails(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.BREED_2_STOKING_DETAIL,\r\n        foreignKey: {\r\n            name: 'breedId',\r\n            field: 'breedId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function breedsToOwnerBreed(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.BREED_2_OWNER_BREED,\r\n        foreignKey: {\r\n            name: 'ownerId',\r\n            field: 'ownerId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function ownerBreedToBreed(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.OWNER_BREED_TO_BREED,\r\n        foreignKey: {\r\n            name: 'ownerId',\r\n            field: 'ownerId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function ownerBreedToUser(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.OWNER_BREED_TO_USER,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function costsToPondPrepare(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.COST_2_POND_PREPARE,\r\n        foreignKey: {\r\n            name: 'pondPrepareId',\r\n            field: 'pondPrepareId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function couponToMaterial(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.COUPON_2_MATERIAL,\r\n        foreignKey: {\r\n            name: 'couponId',\r\n            field: 'couponId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function couponToBoughtBreedDetails(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.COUPON_2_BOUGHT_BREED_DETAILS,\r\n        foreignKey: {\r\n            name: 'couponId',\r\n            field: 'couponId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function couponToUsers(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.COUPON_2_USER,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function couponToSeason(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.COUPON_2_SEASON,\r\n        foreignKey: {\r\n            name: 'seasonId',\r\n            field: 'seasonId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function diedfisherysToSeasonAndPond(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.DIED_FISHERY_2_SEASON_AND_POND,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function growthsToSeasonAndPond(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.GROWTH_2_SEASON_AND_POND,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function harvestdetailsToHarvests(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.HARVEST_DETAIL_2_HARVEST,\r\n        foreignKey: {\r\n            name: 'harvestId',\r\n            field: 'harvestId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function harvestsToHarvestDetails(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.HARVEST_2_HARVEST_DETAILS,\r\n        foreignKey: {\r\n            name: 'harvestId',\r\n            field: 'harvestId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function harvestsToSeasonAndPond(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.HARVEST_2_SEASON_AND_POND,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function materialToCoupon(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.MATERIAL_2_COUPON,\r\n        foreignKey: {\r\n            name: 'couponId',\r\n            field: 'couponId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function materialToPondPrepare(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.MATERIAL_2_POND_PREPARE,\r\n        foreignKey: {\r\n            name: 'materialId',\r\n            field: 'materialId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function materialToStorages(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.MATERIAL_2_STORAGE,\r\n        foreignKey: {\r\n            name: 'storageId',\r\n            field: 'storageId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function materialToUsingFood(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.MATERIAL_2_USING_FOOD,\r\n        foreignKey: {\r\n            name: 'materialId',\r\n            field: 'materialId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function materialToUsingVeterinary(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.MATERIAL_2_USING_VETERINARY,\r\n        foreignKey: {\r\n            name: 'materialId',\r\n            field: 'materialId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function ponddiaryToSeasonAndPond(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.POND_DIARY_2_SEASON_AND_POND,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function pondenvironmenToSeasonAndPond(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.POND_ENVIRONMENT_2_SEASON_AND_POND,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function pondprepareToCosts(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.POND_PREPARE_2_COST,\r\n        foreignKey: {\r\n            name: 'pondPrepareId',\r\n            field: 'pondPrepareId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function pondprepareToSeasonAndPond(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.POND_PREPARE_2_SEASON_AND_POND,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function pondprepareToPondPrepareDetails(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.POND_PREPARE_2_POND_PREPARE_DETAILS,\r\n        foreignKey: {\r\n            name: 'pondPrepareId',\r\n            field: 'pondPrepareId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function pondprepareToIncurred(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.POND_PREPARE_2_INCURREDS,\r\n        foreignKey: {\r\n            name: 'pondPrepareId',\r\n            field: 'pondPrepareId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function pondpreparedetailsToStorage(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.POND_PREPARE_DETAIL_2_STORAGE,\r\n        foreignKey: {\r\n            name: 'storageId',\r\n            field: 'storageId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function pondpreparedetailsToPondPrepare(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.POND_PREPARE_DETAIL_2_POND_PREPARE,\r\n        foreignKey: {\r\n            name: 'pondPrepareId',\r\n            field: 'pondPrepareId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function pondsToPondUserRoles(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n        foreignKey: {\r\n            name: 'pondId',\r\n            field: 'pondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function pondsToSeasonAndPond(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.POND_2_SEASON_AND_POND,\r\n        foreignKey: {\r\n            name: 'pondId',\r\n            field: 'pondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function pondsToUser(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.POND_2_USER,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function pondsToUserEmployee(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsToMany(model, {\r\n        as: ActionAssociateDatabase.POND_2_EMPLOYEE_MAYNY_ROLES,\r\n        through: 'ponduserroles',\r\n        foreignKey: {\r\n            name: 'pondId',\r\n            field: 'pondId'\r\n        },\r\n        otherKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function pondToSeason(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsToMany(model, {\r\n        as: ActionAssociateDatabase.POND_2_SEASON,\r\n        through: 'seasonsandpond',\r\n        foreignKey: {\r\n            name: 'pondId',\r\n            field: 'pondId'\r\n        },\r\n        otherKey: {\r\n            name: 'seasonId',\r\n            field: 'seasonId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function pricesToSeason(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.PRICE_2_SEASON,\r\n        foreignKey: {\r\n            name: 'seasonId',\r\n            field: 'seasonId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function seasonToBoughtBreed(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_2_BOUGHT_BREED,\r\n        foreignKey: {\r\n            name: 'seasonId',\r\n            field: 'seasonId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function seasonToPrice(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_2_PRICE,\r\n        foreignKey: {\r\n            name: 'seasonId',\r\n            field: 'seasonId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function seasonToUser(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.SEASON_2_USER,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function seasonToUserRoles(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.SEASON_2_USER_ROLES,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function seasonToSNP(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_2_SEASON_AND_POND,\r\n        foreignKey: {\r\n            name: 'seasonId',\r\n            field: 'seasonId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function seasonToCoupon(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_2_COUPON,\r\n        foreignKey: {\r\n            name: 'seasonId',\r\n            field: 'seasonId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function seasonToPond(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsToMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_2_POND,\r\n        through: 'seasonsandpond',\r\n        foreignKey: {\r\n            name: 'seasonId',\r\n            field: 'seasonId'\r\n        },\r\n        otherKey: {\r\n            name: 'pondId',\r\n            field: 'pondId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function withDiedFish(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_AND_POND_2_DIED_FISH,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function withGrowths(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_AND_POND_2_GROWTH,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function withHarvest(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_AND_POND_2_HARVEST,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function withPondDiary(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_AND_POND_2_POND_DIARY,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function withPondEnv(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_AND_POND_2_POND_ENV,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function withPondPrepare(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_AND_POND_2_POND_PREPARE,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function withSeason(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n        foreignKey: {\r\n            name: 'seasonId',\r\n            field: 'seasonId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function withPond(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.SEASON_AND_POND_2_POND,\r\n        foreignKey: {\r\n            name: 'pondId',\r\n            field: 'pondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function withStocking(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_AND_POND_2_STOCKING,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function withTakeCare(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.SEASON_AND_POND_2_TAKE_CARE,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function stockingToSNP(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.STOCKING_2_SEASON_AND_POND,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n\r\nexport function stockingToStockingdetails(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasOne(model, {\r\n        as: ActionAssociateDatabase.STOCKING_2_STOCKING_DETAILS,\r\n        foreignKey: {\r\n            name: 'stockingId',\r\n            field: 'stockingId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function stockingdetailsToBreeds(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.STOCKING_DETAILS_2_BREED,\r\n        foreignKey: {\r\n            name: 'breedId',\r\n            field: 'breedId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function stockingdetailsToStocking(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.STOCKING_DETAILS_2_STOCKING,\r\n        foreignKey: {\r\n            name: 'stockingId',\r\n            field: 'stockingId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function storagesToOwner(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.STORAGE_2_OWNER,\r\n        foreignKey: {\r\n            name: 'ownerId',\r\n            field: 'ownerId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function storagesToMaterial(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.STORAGE_2_MATERIAL,\r\n        foreignKey: {\r\n            name: 'storageId',\r\n            field: 'storageId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function storagesToPondPrePareDetail(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.STORAGE_2_POND_PREPARE_DETAILS,\r\n        foreignKey: {\r\n            name: 'storageId',\r\n            field: 'storageId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function storagesToUsingFood(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.STORAGE_2_USING_FOOD,\r\n        foreignKey: {\r\n            name: 'storageId',\r\n            field: 'storageId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function storagesToUsingVeterinary(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.STORAGE_2_USING_VETERINARY,\r\n        foreignKey: {\r\n            name: 'storageId',\r\n            field: 'storageId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function ownerToStorage(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.OWNER_TO_STORAGE,\r\n        foreignKey: {\r\n            name: 'ownerId',\r\n            field: 'ownerId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function ownerToUser(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.OWNER_TO_USER,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function takecareToSNP(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.TAKE_CARE_2_SEASON_AND_POND,\r\n        foreignKey: {\r\n            name: 'seasonAndPondId',\r\n            field: 'seasonAndPondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function takecareToUsingfoods(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.TAKE_CARE_2_USING_FOOD,\r\n        foreignKey: {\r\n            name: 'takeCareId',\r\n            field: 'takeCareId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n\r\nexport function takecareToUsingveterinary(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.TAKE_CARE_2_USING_VETERINARY,\r\n        foreignKey: {\r\n            name: 'takeCareId',\r\n            field: 'takeCareId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function userToBoughtBreeds(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.USER_2_BOUGHT_BREED,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n\r\nexport function userToDistrict(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.USER_2_DIS,\r\n        foreignKey: {\r\n            field: 'district',\r\n            name: 'district'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userToRolesUser(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.USER_2_ROLES_USER,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userToPond(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.USER_2_POND,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userToPondRolesBelongMany(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsToMany(model, {\r\n        as: ActionAssociateDatabase.USER_2_POND_MANY_ROLES,\r\n        through: 'ponduserroles',\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        },\r\n        otherKey: {\r\n            name: 'pondId',\r\n            field: 'pondId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userToCoupon(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.USER_2_COUPON,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userToProvince(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.USER_2_PRO,\r\n        foreignKey: {\r\n            name: 'province',\r\n            field: 'province'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userToSeason(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.USER_2_SEASON,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userToWard(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.USER_2_WAR,\r\n        foreignKey: {\r\n            name: 'town',\r\n            field: 'town'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userToRolesBoss(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.USER_2_ROLES_GET_EMPLOYEES,\r\n        foreignKey: {\r\n            name: 'bossId',\r\n            field: 'bossId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userToPondUserRoles(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.USER_2_POND_USER_ROLE,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userToOwnerStorage(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasOne(model, {\r\n        as: ActionAssociateDatabase.USER_2_OWNER_STORAGE,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userToOwnerBreed(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasOne(model, {\r\n        as: ActionAssociateDatabase.USER_2_OWNER_BREED,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userToIncurred(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.USER_2_INCURREDS,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function userrolesToPondUserRoles(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.USER_ROLES_2_POND_USER_ROLE,\r\n        foreignKey: {\r\n            name: 'rolesId',\r\n            field: 'rolesId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userrolesToUsers(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.USER_ROLES_2_USER,\r\n        foreignKey: {\r\n            name: 'userId',\r\n            field: 'userId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userrolesToUsersBoss(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.USER_ROLES_2_USER_BOSS,\r\n        foreignKey: {\r\n            name: 'bossId',\r\n            field: 'bossId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function userrolesToSeason(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.USER_ROLES_2_SEASON,\r\n        foreignKey: {\r\n            name: 'bossId',\r\n            field: 'bossId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function usingfoodsToStorage(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.USING_FOOD_2_STORAGE,\r\n        foreignKey: {\r\n            name: 'storageId',\r\n            field: 'storageId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function usingfoodsToTakecare(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.USING_FOOD_2_TAKE_CARE,\r\n        foreignKey: {\r\n            name: 'takeCareId',\r\n            field: 'takeCareId'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function usingveterinaryToStorage(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.USING_VETERINARY_2_STORAGE,\r\n        foreignKey: {\r\n            name: 'storageId',\r\n            field: 'storageId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function usingveterinaryToTakecare(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.USING_VETERINARY_2_TAKE_CARE,\r\n        foreignKey: {\r\n            name: 'takeCareId',\r\n            field: 'takeCareId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function provinceToUser(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.PROVINCE_2_USER,\r\n        foreignKey: {\r\n            name: 'provinceid',\r\n            field: 'provinceid'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function districtToUser(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.DISTRICT_2_USER,\r\n        foreignKey: {\r\n            name: 'districtid',\r\n            field: 'districtid'\r\n        }\r\n    });\r\n}\r\n\r\n//\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function wardToUser(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.hasMany(model, {\r\n        as: ActionAssociateDatabase.WARD_2_USER,\r\n        foreignKey: {\r\n            name: 'wardid',\r\n            field: 'wardid'\r\n        }\r\n    });\r\n}\r\n","import * as Sequeliz from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport function incurredsToPondPrepare(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.INCURREDS_TO_POND_PREPARE,\r\n        foreignKey: {\r\n            name: 'pondPrepareId',\r\n            field: 'pondPrepareId'\r\n        }\r\n    });\r\n}\r\n\r\nexport function incurredsToUser(thatmodel: Sequeliz.Model<{}, any>, model: Sequeliz.Model<{}, any>) {\r\n    return thatmodel.belongsTo(model, {\r\n        as: ActionAssociateDatabase.INCURREDS_TO_USER,\r\n        foreignKey: {\r\n            name: 'ownerId',\r\n            field: 'ownerId'\r\n        }\r\n    });\r\n}\r\n","import * as Sequelize from 'sequelize';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const boughtbreeddetailsOptions: any = _.merge({\r\n    tableName: 'boughtbreeddetails'\r\n},\r\n{\r\n    attributes: {\r\n        boughtBreedDetailId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n        },\r\n        boughtBreedDetailUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n        },\r\n        couponId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n        },\r\n        breedId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n        },\r\n        quantity: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: false,\r\n        },\r\n        unit: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: false\r\n        },\r\n        unitPrice: {\r\n            allowNull: false,\r\n            type: Sequelize.FLOAT,\r\n            // field: 'unitPrice'\r\n        },\r\n        soldAddress: {\r\n            type: Sequelize.STRING,\r\n            allowNull: true,\r\n        },\r\n        testingAgency: {\r\n            type: Sequelize.STRING,\r\n            allowNull: true,\r\n        },\r\n        descriptions: {\r\n            type: Sequelize.TEXT,\r\n            allowNull: true,\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true,\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'boughtbreeddetails'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const boughtbreedOptions: any = _.merge({\r\n    tableName: 'boughtbreeds'\r\n},\r\n{\r\n    attributes: {\r\n        boughtBreedId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n        },\r\n        boughtBreedUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n        },\r\n        userId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n        },\r\n        seasonId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n        },\r\n        createdBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true,\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: true,\r\n            defaultValue: 0,\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'boughtbreeds'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const breedOptions: any = _.merge({\r\n    tableName: 'breeds'\r\n},\r\n{\r\n    attributes: {\r\n        breedId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n        },\r\n        breedUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n        },\r\n        ownerId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n        },\r\n        breedName: {\r\n            type: Sequelize.STRING(80),\r\n        },\r\n        totalQuantity: {\r\n            type: Sequelize.BIGINT(20),\r\n        },\r\n        unit: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: false\r\n        },\r\n        loopOfBreed: {\r\n            type: Sequelize.INTEGER(11),\r\n            allowNull: false,\r\n        },\r\n        tips: {\r\n            type: Sequelize.TEXT,\r\n            allowNull: true,\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: true,\r\n            defaultValue: 0,\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'breeds'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const costsOptions: any = _.merge({\r\n    tableName: 'costs'\r\n},\r\n{\r\n    attributes: {\r\n        costId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n            // field: 'costId'\r\n        },\r\n        costUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n            // field: 'costUUId'\r\n        },\r\n        pondPrepareId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            // field: 'pondPrepareId'\r\n        },\r\n        label: {\r\n            type: Sequelize.STRING(100),\r\n            // field: 'label'\r\n        },\r\n        value: {\r\n            type: Sequelize.FLOAT,\r\n            // field: 'value'\r\n        },\r\n        responsible: {\r\n            type: Sequelize.STRING(100),\r\n            // field: 'responsible'\r\n        },\r\n        notes: {\r\n            type: Sequelize.TEXT,\r\n            allowNull: true,\r\n            // field: 'notes'\r\n        },\r\n        createdBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true,\r\n            // field: 'createdBy'\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'createdDate'\r\n        },\r\n        updatedBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true,\r\n            // field: 'updatedBy'\r\n        },\r\n        updatedDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'updatedDate'\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: true,\r\n            defaultValue: 0,\r\n            // field: 'isDeleted'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'costs'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const couponOptions: any = _.merge({\r\n    tableName: 'coupons'\r\n},\r\n{\r\n    attributes: {\r\n        couponId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true\r\n        },\r\n        userId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false\r\n        },\r\n        seasonId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            unique: true\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            }\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: true,\r\n            defaultValue: 0,\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'coupons'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const diedfisherysOptions: any = _.merge({\r\n    tableName: 'diedfisherys'\r\n},\r\n{\r\n    attributes: {\r\n        diedFisheryId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n            // field: 'diedFisheryId'\r\n        },\r\n        diedFisheryUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n            // field: 'diedFisheryUUId'\r\n        },\r\n        seasonAndPondId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            // field: 'seasonAndPondId'\r\n        },\r\n        card: {\r\n            type: Sequelize.INTEGER(1),\r\n            // field: 'card'\r\n        },\r\n        quantity: {\r\n            type: Sequelize.FLOAT,\r\n            // field: 'quantity'\r\n        },\r\n        solutions: {\r\n            type: Sequelize.TEXT,\r\n            allowNull: true,\r\n            // field: 'solutions'\r\n        },\r\n        employee: {\r\n            type: Sequelize.STRING(50),\r\n            allowNull: true,\r\n            // field: 'employee'\r\n        },\r\n        createdBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true,\r\n            // field: 'createdBy'\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'createdDate'\r\n        },\r\n        updatedBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true,\r\n            // field: 'updatedBy'\r\n        },\r\n        updatedDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'updatedDate'\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: true,\r\n            defaultValue: 0,\r\n            // field: 'isDeleted'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'diedfisherys'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport * as _ from 'lodash';\r\n\r\nexport const districtOptions: any = _.merge({\r\n    tableName: 'district'\r\n},\r\n{\r\n    attributes: {\r\n        districtid: {\r\n            type: Sequelize.STRING(5),\r\n            primaryKey: true,\r\n            // field: 'districtid'\r\n        },\r\n        name: {\r\n            type: Sequelize.STRING(100),\r\n            // field: 'name'\r\n        },\r\n        type: {\r\n            type: Sequelize.STRING(30),\r\n            // field: 'type'\r\n        },\r\n        location: {\r\n            type: Sequelize.STRING(30),\r\n            // field: 'location'\r\n        },\r\n        provinceid: {\r\n            type: Sequelize.STRING(5),\r\n            allowNull: false,\r\n            // field: 'provinceid'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'district',\r\n        createdAt: false,\r\n        updatedAt: false,\r\n        deletedAt: false,\r\n        defaultScope: {},\r\n        scopes: {}\r\n    }\r\n});\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const growthOptions: any = _.merge({\r\n    tableName: 'growths'\r\n},\r\n{\r\n    attributes: {\r\n        growthId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n            // field: 'growthId'\r\n        },\r\n        growthUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n            // field: 'growthUUId'\r\n        },\r\n        seasonAndPondId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            // field: 'seasonAndPondId'\r\n        },\r\n        averageDensity: {\r\n            type: Sequelize.FLOAT,\r\n            // field: 'averageDensity'\r\n        },\r\n        averageMass: {\r\n            type: Sequelize.FLOAT,\r\n            // field: 'averageMass'\r\n        },\r\n        speedOdGrowth: {\r\n            type: Sequelize.FLOAT,\r\n            // field: 'speedOdGrowth'\r\n        },\r\n        livingRatio: {\r\n            type: Sequelize.FLOAT,\r\n            // field: 'livingRatio'\r\n        },\r\n        createdBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true,\r\n            // field: 'createdBy'\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'createdDate'\r\n        },\r\n        updatedBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true,\r\n            // field: 'updatedBy'\r\n        },\r\n        updatedDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'updatedDate'\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: true,\r\n            defaultValue: 0,\r\n            // field: 'isDeleted'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'growths'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const harvestdetailOptions: any = _.merge({\r\n    tableName: 'harvestdetails'\r\n},\r\n{\r\n    attributes: {\r\n        harvestDetailUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n            // field: 'harvestIdDetailUUId'\r\n        },\r\n        harvestId: {\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n            // field: 'harvestId'\r\n        },\r\n        quantity: {\r\n            type: Sequelize.FLOAT,\r\n            // field: 'quantity'\r\n        },\r\n        unitPrice: {\r\n            type: Sequelize.FLOAT,\r\n            // field: 'unitPrice'\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: true,\r\n            defaultValue: 0,\r\n            // field: 'isDeleted'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'harvestdetails'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const harvestOptions: any = _.merge({\r\n    tableName: 'harvests'\r\n},\r\n{\r\n    attributes: {\r\n        harvestId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true\r\n        },\r\n        harvestUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false\r\n        },\r\n        seasonAndPondId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false\r\n        },\r\n        harvestName: {\r\n            type: Sequelize.STRING(50),\r\n            allowNull: true\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            }\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: true,\r\n            defaultValue: 0,\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'harvests'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const materialOptions: any = _.merge({\r\n    tableName: 'materials'\r\n},\r\n{\r\n    attributes: {\r\n        materialId : {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n            // field: 'materialId'\r\n        },\r\n        materialUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n            // field: 'materialUUId'\r\n        },\r\n        couponId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            // field: 'couponId'\r\n        },\r\n        storageId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            // field: 'storageId'\r\n        },\r\n        provider: {\r\n            type: Sequelize.STRING(100),\r\n            // field: 'provider'\r\n        },\r\n        providerAddress: {\r\n            type: Sequelize.STRING,\r\n            // field: 'providerAddress'\r\n        },\r\n        quantity: {\r\n            type: Sequelize.DOUBLE,\r\n            // field: 'quantity'\r\n        },\r\n        unit: {\r\n            type: Sequelize.INTEGER(1),\r\n            // field: 'unit'\r\n        },\r\n        unitPrice: {\r\n            type: Sequelize.FLOAT,\r\n            // field: 'unitPrice'\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: true,\r\n            defaultValue: 0,\r\n            // field: 'isDeleted'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'materials'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const ownerBreedOptions: any = _.merge({\r\n    tableName: 'ownerbreed'\r\n},\r\n{\r\n    attributes: {\r\n        ownerId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n        },\r\n        userId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'ownerbreed'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const ponddiaryOptions: any = _.merge({\r\n    tableName: 'ponddiary'\r\n},\r\n{\r\n    attributes: {\r\n        pondDiaryId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true\r\n        },\r\n        pondDiaryUUId: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: false,\r\n            unique: true\r\n        },\r\n        seasonAndPondId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false\r\n        },\r\n        diaryName: {\r\n            type: Sequelize.STRING(100)\r\n        },\r\n        fisheryQuantity: {\r\n            type: Sequelize.FLOAT\r\n        },\r\n        healthOfFishery: {\r\n            type: Sequelize.STRING(36)\r\n        },\r\n        pondVolume: {\r\n            type: Sequelize.FLOAT\r\n        },\r\n        diedFishery: {\r\n            type: Sequelize.INTEGER(11)\r\n        },\r\n        notes: {\r\n            type: Sequelize.TEXT\r\n        },\r\n        createdBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n        },\r\n        updatedBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true\r\n        },\r\n        updatedDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            }\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'ponddiary'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const pondenvironmentsOptions: any = _.merge({\r\n    tableName: 'pondenvironments'\r\n},\r\n{\r\n    attributes: {\r\n        pondEnvironmentId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n            // field: 'pondEnvironmentId'\r\n        },\r\n        pondEnvironmentUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n            // field: 'pondEnvironmentUUId'\r\n        },\r\n        seasonAndPondId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            // field: 'seasonAndPondId'\r\n        },\r\n        oxyMorning: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: true,\r\n            // field: 'oxyMorning'\r\n        },\r\n        oxyAfternoon: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: true,\r\n            // field: 'oxyAfternoon'\r\n        },\r\n        phMorning: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: true,\r\n            // field: 'phMorning'\r\n        },\r\n        phAfternoon: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: true,\r\n            // field: 'phAfternoon'\r\n        },\r\n        transparent: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: true,\r\n            // field: 'transparent'\r\n        },\r\n        salinity: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: true,\r\n            // field: 'salinity'\r\n        },\r\n        h2s: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: true,\r\n            // field: 'h2s'\r\n        },\r\n        nh3: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: true,\r\n            // field: 'nh3'\r\n        },\r\n        bazo: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: true,\r\n            // field: 'bazo'\r\n        },\r\n        createdBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true,\r\n            // field: 'createdBy'\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'createdDate'\r\n        },\r\n        updatedBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true,\r\n            // field: 'updatedBy'\r\n        },\r\n        updatedDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'updatedDate'\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n            // field: 'isDeleted'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'pondenvironments'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const pondprepareOptions: any = _.merge({\r\n    tableName: 'pondprepare'\r\n},\r\n{\r\n    attributes: {\r\n        pondPrepareId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n            // field: 'pondPrepareId'\r\n        },\r\n        pondPrepareUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n            // field: 'pondPrepareUUId'\r\n        },\r\n        seasonAndPondId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            // field: 'seasonAndPondId'\r\n        },\r\n        pondprepareName: {\r\n            type: Sequelize.STRING(50),\r\n            // field: 'pondprepareName'\r\n        },\r\n        // notes: {\r\n        //     type: Sequelize.TEXT,\r\n        //     allowNull: true,\r\n        //     // field: 'notes'\r\n        // },\r\n        createdBy: {\r\n            type: Sequelize.STRING(36),\r\n            // field: 'createdBy'\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'createdDate'\r\n        },\r\n        updatedBy: {\r\n            type: Sequelize.STRING(36),\r\n            // field: 'updatedBy'\r\n        },\r\n        updatedDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'updatedDate'\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n            // field: 'isDeleted'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'pondprepare'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const pondpreparedetailOptions: any = _.merge({\r\n    tableName: 'pondpreparedetails'\r\n},\r\n{\r\n    attributes: {\r\n        pondPrepareDetailId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n        },\r\n        pondPrepareDetailUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n        },\r\n        storageId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n        },\r\n        pondPrepareId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n        },\r\n        quantity: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: false,\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'pondpreparedetails',\r\n        createdBy: false,\r\n        updatedBy: false\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const pondOptions: any = _.merge({\r\n    tableName: 'ponds'\r\n},\r\n{\r\n    attributes: {\r\n        pondId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true\r\n        },\r\n        pondUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false\r\n        },\r\n        userId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false\r\n        },\r\n        pondName: {\r\n            type: Sequelize.STRING(50)\r\n        },\r\n        pondArea: {\r\n            type: Sequelize.FLOAT\r\n        },\r\n        pondDepth: {\r\n            type: Sequelize.FLOAT\r\n        },\r\n        createCost: {\r\n            type: Sequelize.FLOAT\r\n        },\r\n        pondCreatedDate: {\r\n            type: Sequelize.DATE\r\n        },\r\n        status: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: false,\r\n            defaultValue: 0\r\n        },\r\n        isFed: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: true,\r\n            defaultValue: 0\r\n        },\r\n        isDiary: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: true,\r\n            defaultValue: 0\r\n        },\r\n        images: {\r\n            type: Sequelize.TEXT({ length: '1000' }),\r\n            allowNull: true\r\n        },\r\n        pondLatitude: {\r\n            type: Sequelize.DOUBLE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return null;\r\n            }\r\n        },\r\n        pondLongitude: {\r\n            type: Sequelize.DOUBLE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return null;\r\n            }\r\n        },\r\n        createdBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            }\r\n        },\r\n        updatedBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true\r\n        },\r\n        updatedDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            }\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'ponds'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const ponduserrolesOptions: any = _.merge({\r\n    tableName: 'ponduserroles'\r\n},\r\n    {\r\n        attributes: {\r\n            pondUserRolesId: {\r\n                type: Sequelize.BIGINT(20),\r\n                autoIncrement: true,\r\n                primaryKey: true,\r\n                allowNull: false,\r\n            },\r\n            userId: {\r\n                type: Sequelize.BIGINT(20),\r\n                unique: true,\r\n                field: 'userId'\r\n            },\r\n            pondId: {\r\n                type: Sequelize.BIGINT(20),\r\n                unique: true,\r\n                field: 'pondId'\r\n            },\r\n            createdDate: {\r\n                type: Sequelize.DATE,\r\n                allowNull: true,\r\n                defaultValue: () => {\r\n                    return DateUtil.getUTCDateTime();\r\n                },\r\n                // field: 'createdDate'\r\n            },\r\n            isDeleted: {\r\n                type: Sequelize.INTEGER(1),\r\n                defaultValue: 0,\r\n                allowNull: true\r\n                // field: 'isDeleted'\r\n            }\r\n        },\r\n        options: {\r\n            tableName: 'ponduserroles',\r\n            defaultScope: {},\r\n            scopes: {}\r\n        }\r\n    }, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const pricesOptions: any = _.merge({\r\n    tableName: 'prices'\r\n},\r\n{\r\n    attributes: {\r\n        priceId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n            // field: 'priceId'\r\n        },\r\n        priceUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n            // field: 'priceUUId'\r\n        },\r\n        seasonId: {\r\n            type: Sequelize.BIGINT(20),\r\n            unique: true,\r\n            allowNull: false,\r\n            // field: 'seasonId'\r\n        },\r\n        totalCost: {\r\n            type: Sequelize.DOUBLE,\r\n            // field: 'totalCost'\r\n        },\r\n        totalProfit: {\r\n            type: Sequelize.DOUBLE,\r\n            // field: 'totalProfit'\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'createdDate'\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n            // field: 'isDeleted'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'prices'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const provinceOptions: any = _.merge({\r\n    tableName: 'province'\r\n},\r\n{\r\n    attributes: {\r\n        provinceid: {\r\n            type: Sequelize.STRING(5),\r\n            primaryKey: true,\r\n            // field: 'provinceid'\r\n        },\r\n        name: {\r\n            type: Sequelize.STRING(100),\r\n            // field: 'name'\r\n        },\r\n        type: {\r\n            type: Sequelize.STRING(30),\r\n            // field: 'type'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'province',\r\n        createdAt: false,\r\n        updatedAt: false,\r\n        deletedAt: false,\r\n        defaultScope: {},\r\n        scopes: {}\r\n    }\r\n});\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const seasonOptions: any = _.merge({\r\n    tableName: 'seasons'\r\n},\r\n{\r\n    attributes: {\r\n        seasonId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n            // field: 'seasonId'\r\n        },\r\n        seasonUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n            // field: 'seasonUUId'\r\n        },\r\n        userId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            // field: 'userId'\r\n        },\r\n        seasonName: {\r\n            type: Sequelize.STRING(100),\r\n            // field: 'seasonName'\r\n        },\r\n        status: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            // field: 'seasonName'\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'createdDate'\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n            // field: 'isDeleted'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'seasons'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const incurredsOptions: any = _.merge({\r\n    tableName: 'incurreds'\r\n},\r\n{\r\n    attributes: {\r\n        incurredId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n        },\r\n        incurredUUId: {\r\n            type: Sequelize.STRING(36),\r\n            unique: true,\r\n            allowNull: false,\r\n        },\r\n        pondPrepareId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n        },\r\n        ownerId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n        },\r\n        incurredName: {\r\n            type: Sequelize.STRING(100),\r\n            allowNull: false,\r\n        },\r\n        value: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: false,\r\n        },\r\n        notes: {\r\n            type: Sequelize.STRING(255),\r\n            allowNull: true,\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'incurreds',\r\n        createdBy: false,\r\n        updatedBy: false\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport * as _ from 'lodash';\r\n\r\nexport const seasonAndPondOptions: any = _.merge({\r\n    tableName: 'seasonsandpond'\r\n},\r\n{\r\n    attributes: {\r\n        seasonAndPondId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true\r\n        },\r\n        seasonId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            unique: true\r\n        },\r\n        pondId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            unique: true\r\n        }\r\n    },\r\n    options: {\r\n        createdAt: false,\r\n        updatedAt: false,\r\n        deletedAt: false,\r\n        hooks: {},\r\n        tableName: 'seasonsandpond'\r\n    }\r\n});\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const stockingOptions: any = _.merge({\r\n    tableName: 'stocking'\r\n},\r\n{\r\n    attributes: {\r\n        stockingId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n            // field: 'stockingId'\r\n        },\r\n        stockingUUId: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: false,\r\n            unique: true,\r\n            // field: 'stockingUUId'\r\n        },\r\n        seasonAndPondId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            // field: 'seasonAndPondId'\r\n        },\r\n        notes: {\r\n            type: Sequelize.TEXT,\r\n            allowNull: true,\r\n            // field: 'notes'\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'createdDate'\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n            // field: 'isDeleted'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'stocking'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const stockingdetailOptions: any = _.merge({\r\n    tableName: 'stockingdetails'\r\n},\r\n{\r\n    attributes: {\r\n        stockingDetailUUId: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: false,\r\n            unique: true,\r\n        },\r\n        breedId: {\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n        },\r\n        stockingId: {\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n        },\r\n        stockingQuantity: {\r\n            type: Sequelize.BIGINT(20),\r\n        },\r\n        phFirst: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: true,\r\n        },\r\n        salinityFirst: {\r\n            type: Sequelize.FLOAT,\r\n            allowNull: true,\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'stockingdetails'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const storagesOptions: any = _.merge({\r\n    tableName: 'storages'\r\n},\r\n{\r\n    attributes: {\r\n        storageId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true\r\n        },\r\n        storageUUId: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: false,\r\n            unique: true\r\n        },\r\n        ownerId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false\r\n        },\r\n        productName: {\r\n            type: Sequelize.STRING(100)\r\n        },\r\n        quantityStorages: {\r\n            type: Sequelize.DOUBLE\r\n        },\r\n        unit: {\r\n            type: Sequelize.INTEGER(1)\r\n        },\r\n        type: {\r\n            type: Sequelize.INTEGER(1)\r\n        },\r\n        descriptions: {\r\n            type: Sequelize.TEXT\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            }\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'storages'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const storageOwnerOptions: any = _.merge({\r\n    tableName: 'storageowner'\r\n},\r\n{\r\n    attributes: {\r\n        storageOwnerId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n        },\r\n        userId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'storageowner'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const takecareOptions: any = _.merge({\r\n    tableName: 'takecare'\r\n},\r\n{\r\n    attributes: {\r\n        takeCareId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true\r\n        },\r\n        takeCareUUId: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: false,\r\n            unique: true\r\n        },\r\n        seasonAndPondId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false\r\n        },\r\n        type: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: false\r\n        },\r\n        takeCareName: {\r\n            type: Sequelize.STRING(100),\r\n            allowNull: true\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            }\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'takecare'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const userOptions: any = _.merge({\r\n    tableName: 'users'\r\n},\r\n{\r\n    attributes: {\r\n        userId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n            // field: 'userId'\r\n        },\r\n        userUUId: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: false,\r\n            unique: true,\r\n            // field: 'userUUId'\r\n        },\r\n        firstname: {\r\n            type: Sequelize.STRING(50),\r\n            // field: 'firstname'\r\n        },\r\n        lastname: {\r\n            type: Sequelize.STRING(50),\r\n            // field: 'lastname'\r\n        },\r\n        birthday: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            // field: 'birthday'\r\n        },\r\n        addressContact: {\r\n            type: Sequelize.STRING,\r\n            allowNull: true,\r\n            // field: 'addressContact'\r\n        },\r\n        username: {\r\n            type: Sequelize.STRING(50),\r\n            allowNull: false,\r\n            unique: true,\r\n            // field: 'username'\r\n        },\r\n        password: {\r\n            type: Sequelize.STRING(100),\r\n            // field: 'password'\r\n        },\r\n        town: {\r\n            type: Sequelize.STRING(50),\r\n            allowNull: true,\r\n            // field: 'town'\r\n        },\r\n        district: {\r\n            type: Sequelize.STRING(50),\r\n            allowNull: true,\r\n            // field: 'district'\r\n        },\r\n        province: {\r\n            type: Sequelize.STRING(5),\r\n            allowNull: true,\r\n            // field: 'province'\r\n        },\r\n        status: {\r\n            type: Sequelize.INTEGER(1),\r\n            allowNull: false,\r\n            defaultValue: 0,\r\n            // field: 'status'\r\n        },\r\n        phone: {\r\n            type: Sequelize.STRING(15),\r\n            allowNull: true,\r\n            // field: 'phone'\r\n        },\r\n        email: {\r\n            type: Sequelize.STRING(100),\r\n            allowNull: true,\r\n            // field: 'email'\r\n        },\r\n        images: {\r\n            type: Sequelize.TEXT({ length: '1000' }),\r\n            allowNull: true,\r\n            // field: 'images'\r\n        },\r\n        createdBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true,\r\n            // field: 'createdBy'\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'createdDate'\r\n        },\r\n        updatedBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true,\r\n            // field: 'updatedBy'\r\n        },\r\n        updatedDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n            // field: 'updatedDate'\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n            // field: 'isDeleted'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'users'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const userrolesOptions: any = _.merge({\r\n    tableName: 'userroles'\r\n},\r\n{\r\n    attributes: {\r\n        rolesId: {\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true,\r\n            autoIncrement: true,\r\n        },\r\n        bossId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            unique: true,\r\n            index: true\r\n        },\r\n        userId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false,\r\n            unique: true,\r\n        },\r\n        roles: {\r\n            type: Sequelize.INTEGER(11),\r\n            unique: true,\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            },\r\n        },\r\n        updatedBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true,\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'userroles'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const usingfoodOptions: any = _.merge({\r\n    tableName: 'usingfoods'\r\n},\r\n{\r\n    attributes: {\r\n        usingFoodId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true\r\n        },\r\n        usingFoodUUId: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: false,\r\n            unique: true\r\n        },\r\n        takeCareId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false\r\n        },\r\n        storageId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false\r\n        },\r\n        massOfFishery: {\r\n            type: Sequelize.FLOAT\r\n        },\r\n        feedingRate: {\r\n            type: Sequelize.FLOAT\r\n        },\r\n        totalFood: {\r\n            type: Sequelize.FLOAT\r\n        },\r\n        createdBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            }\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'usingfoods'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport * as _ from 'lodash';\r\nimport { baseModel } from './base.model';\r\n\r\nexport const usingveterinaryOptions: any = _.merge({\r\n    tableName: 'usingveterinary'\r\n},\r\n{\r\n    attributes: {\r\n        usingVeterinaryId: {\r\n            autoIncrement: true,\r\n            type: Sequelize.BIGINT(20),\r\n            primaryKey: true\r\n        },\r\n        usingVeterinaryUUId: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: false,\r\n            unique: true\r\n        },\r\n        takeCareId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false\r\n        },\r\n        storageId: {\r\n            type: Sequelize.BIGINT(20),\r\n            allowNull: false\r\n        },\r\n        causesNSymptoms: {\r\n            type: Sequelize.STRING\r\n        },\r\n        averageSize: {\r\n            type: Sequelize.FLOAT\r\n        },\r\n        totalBiomass: {\r\n            type: Sequelize.FLOAT\r\n        },\r\n        quantity: {\r\n            type: Sequelize.FLOAT\r\n        },\r\n        result: {\r\n            type: Sequelize.STRING(100),\r\n        },\r\n        latestHarvestDate: {\r\n            type: Sequelize.INTEGER(11),\r\n            allowNull: true\r\n        },\r\n        mentor: {\r\n            type: Sequelize.STRING(50),\r\n            allowNull: true\r\n        },\r\n        createdBy: {\r\n            type: Sequelize.STRING(36),\r\n            allowNull: true\r\n        },\r\n        createdDate: {\r\n            type: Sequelize.DATE,\r\n            allowNull: true,\r\n            defaultValue: () => {\r\n                return DateUtil.getUTCDateTime();\r\n            }\r\n        },\r\n        isDeleted: {\r\n            type: Sequelize.INTEGER(1),\r\n            defaultValue: 0,\r\n            allowNull: true\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'usingveterinary'\r\n    }\r\n}, _.cloneDeep(baseModel));\r\n","import * as Sequelize from 'sequelize';\r\nimport * as _ from 'lodash';\r\n\r\nexport const wardOptions: any = _.merge({\r\n    tableName: 'ward'\r\n},\r\n{\r\n    attributes: {\r\n        wardid: {\r\n            type: Sequelize.STRING(5),\r\n            primaryKey: true,\r\n            // field: 'wardid'\r\n        },\r\n        name: {\r\n            type: Sequelize.STRING(100),\r\n            // field: 'name'\r\n        },\r\n        type: {\r\n            type: Sequelize.STRING(30),\r\n            // field: 'type'\r\n        },\r\n        location: {\r\n            type: Sequelize.STRING(30),\r\n            // field: 'location'\r\n        },\r\n        districtid: {\r\n            type: Sequelize.STRING(5),\r\n            allowNull: false,\r\n            // field: 'districtid'\r\n        }\r\n    },\r\n    options: {\r\n        tableName: 'ward',\r\n        createdAt: false,\r\n        updatedAt: false,\r\n        deletedAt: false,\r\n        defaultScope: {},\r\n        scopes: {}\r\n    }\r\n});\r\n","import { NextFunction, Request, Response, Router } from 'express';\r\nimport * as httpStatusCode from 'http-status-codes';\r\nimport { colorCli } from '../config';\r\n\r\nimport { BaseRoute } from './BaseRoute';\r\nimport { logger } from '../services';\r\nimport { PingRoute } from './ping';\r\nimport { UserRoute } from './users';\r\nimport { UploadRoute } from './upload';\r\nimport { GetFileRoute } from './getFile';\r\nimport { ProvinceRoute } from './province';\r\nimport { DistrictRoute } from './district';\r\nimport { WardRoute } from './ward';\r\nimport { PondRoute } from './ponds';\r\nimport { SeasonRoute } from './seasons';\r\nimport { PondPrepareRoute } from './pondPrepare';\r\nimport { PondPrepareDetailRoute } from './pondPrepareDetail';\r\nimport { StorageRoute } from './storages';\r\nimport { BreedRoute } from './breed';\r\nimport { StockingRoute } from './stocking';\r\nimport { DiedFisheryRoute } from './diedFishery';\r\nimport { GrowthsRoute } from './growths';\r\nimport { HarvestRoute } from './harvest';\r\nimport { UserRoleRoute } from './userRoles';\r\nimport { PondUserRolesRoute } from './pondUserRoles';\r\nimport { MaterialRoute } from './material';\r\nimport { SeasonAndPondRoute } from './seasonAndPond';\r\nimport { UsingFoodRoute } from './usingFood';\r\nimport { PondDiaryRoute } from './pondDiary';\r\nimport { TakeCareRoute } from './takeCare';\r\nimport { UsingVeterinaryRoute } from './usingVeterinary';\r\nimport { CostsRoute } from './costs';\r\n/**\r\n * / route\r\n *\r\n * @class User\r\n */\r\nexport class ApiRoutes extends BaseRoute {\r\n    public static path = '/api/v1';\r\n    private static instance: ApiRoutes;\r\n\r\n    /**\r\n     * @class ApiRoutes\r\n     * @constructor\r\n     */\r\n    private constructor () {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    /**\r\n     * @class ApiRoute\r\n     * @method getRouter\r\n     * @returns {Router}\r\n     */\r\n    static get router (): Router {\r\n        if (!this.instance) {\r\n            this.instance = new ApiRoutes();\r\n        }\r\n        return this.instance.router;\r\n    }\r\n\r\n    /**\r\n     * @class ApiRoute\r\n     * @method init\r\n     */\r\n    private init () {\r\n        // console.log('\\x1b[36m%s\\x1b[0m', 'I am cyan');\r\n        console.log(`\\n${ colorCli.YELLOW }###################################################\\n${ colorCli.YELLOW }##         WELCOME TO VIETNAM FISHERY API        ##\\n${ colorCli.YELLOW }##             Creating api routes...            ##\\n${ colorCli.YELLOW }###################################################\\n`);\r\n\r\n        // add index page route\r\n        this.router.get('/', this.get);\r\n        this.router.use(BreedRoute.path, BreedRoute.router);\r\n        this.router.use(CostsRoute.path, CostsRoute.router);\r\n        this.router.use(DiedFisheryRoute.path, DiedFisheryRoute.router);\r\n        this.router.use(DistrictRoute.path, DistrictRoute.router);\r\n        this.router.use(GetFileRoute.path, GetFileRoute.router);\r\n        this.router.use(GrowthsRoute.path, GrowthsRoute.router);\r\n        this.router.use(HarvestRoute.path, HarvestRoute.router);\r\n        this.router.use(MaterialRoute.path, MaterialRoute.router);\r\n        // this.router.use(PingRoute.path, PingRoute.router);\r\n        this.router.use(PondDiaryRoute.path, PondDiaryRoute.router);\r\n        this.router.use(PondPrepareRoute.path, PondPrepareRoute.router);\r\n        this.router.use(PondPrepareDetailRoute.path, PondPrepareDetailRoute.router);\r\n        this.router.use(PondRoute.path, PondRoute.router);\r\n        this.router.use(PondUserRolesRoute.path, PondUserRolesRoute.router);\r\n        this.router.use(ProvinceRoute.path, ProvinceRoute.router);\r\n        this.router.use(SeasonAndPondRoute.path, SeasonAndPondRoute.router);\r\n        this.router.use(SeasonRoute.path, SeasonRoute.router);\r\n        this.router.use(StockingRoute.path, StockingRoute.router);\r\n        this.router.use(StorageRoute.path, StorageRoute.router);\r\n        this.router.use(TakeCareRoute.path, TakeCareRoute.router);\r\n        this.router.use(UploadRoute.path, UploadRoute.router);\r\n        this.router.use(UserRoleRoute.path, UserRoleRoute.router);\r\n        this.router.use(UserRoute.path, UserRoute.router);\r\n        this.router.use(UsingFoodRoute.path, UsingFoodRoute.router);\r\n        this.router.use(UsingVeterinaryRoute.path, UsingVeterinaryRoute.router);\r\n        this.router.use(WardRoute.path, WardRoute.router);\r\n\r\n        // log total endpoint\r\n        console.log(`\\n${ colorCli.CYAN }###################################################\\n${ colorCli.CYAN }##        Total endpoints of api is: ${ colorCli.YELLOW }${ BaseRoute.countEndpoints }${ colorCli.CYAN }         ##\\n${ colorCli.CYAN }###################################################\\n`);\r\n    }\r\n\r\n    /**\r\n     * @class ApiRoute\r\n     * @method index\r\n     * @param req {Request} The express Request object.\r\n     * @param res {Response} The express Response object.\r\n     * @param next {NextFunction} Execute the next method.\r\n     */\r\n    private async get (req: Request, res: Response, next: NextFunction) {\r\n        res.status(httpStatusCode.OK).render('index');\r\n    }\r\n}\r\n","module.exports = require(\"http-status-codes\");","module.exports = require(\"is-my-json-valid\");","export * from './users.route';\r\n","import { NextFunction, Request, Response } from 'express';\r\nimport { logger, UserRolesServices, ProvinceServices, DistrictServives, WardServices, PondsServices, UserServives , PondUserRolesServices} from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { User, UserRole, OwnerBreed, OwnerStorage } from '../../components';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Enscrypts } from '../../lib';\r\nimport * as jwt from 'jsonwebtoken';\r\nimport { GoogleDrive } from '../../googleAPI/drive.google';\r\nimport { defaultImage } from '../../common';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { Transaction } from 'sequelize';\r\nimport { readFileSync } from 'fs';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class UserRoute extends BaseRoute {\r\n    public static path = '/user';\r\n    private static instance: UserRoute;\r\n    private cert: Buffer = readFileSync(process.cwd() + '/authKey/jwtRS256.key');\r\n    private userRolesServices: UserRolesServices = new UserRolesServices();\r\n    private provinceServices: ProvinceServices = new ProvinceServices();\r\n    private districtServives: DistrictServives = new DistrictServives();\r\n    private wardServices: WardServices = new WardServices();\r\n    private pondsServices: PondsServices = new PondsServices();\r\n    private userServives: UserServives = new UserServives();\r\n    private pondUserRolesServices: PondUserRolesServices = new PondUserRolesServices();\r\n    /**\r\n     * @class UserRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!UserRoute.instance) {\r\n            UserRoute.instance = new UserRoute();\r\n        }\r\n        return UserRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[UserRoute] Creating user route.');\r\n\r\n        // vertify login\r\n        this.router.get('/vertify', this.vertify);\r\n        this.router.get('/vertify/boss', this.vertifyBoss);\r\n        this.router.get('/vertify/roles/storage', this.vertifyStorageRoles);\r\n        this.router.get('/vertify/roles/pond', this.vertifyPondRoles);\r\n        this.router.get('/vertify/roles/pond/:pondUUId', this.vertifyRolesOfPond);\r\n\r\n        // add route boss\r\n        this.router.post('/register', this.register);\r\n        this.router.post('/login', this.login);\r\n        this.router.get('/get', Authentication.isLogin, this.getUserInfo);\r\n        this.router.get('/getWithUpdate', Authentication.isLogin, this.getUserInfoWithUpdate);\r\n        this.router.put('/update', Authentication.isLogin, this.updateUserProfile);\r\n        this.router.put('/update/password', Authentication.isLogin, this.updateUserPassword);\r\n\r\n        // employees\r\n        this.router.post('/register/employee', Authentication.isLogin, this.regiterEmployee);\r\n        this.router.get('/gets/employees', Authentication.isLogin, this.getEmployee);\r\n        this.router.get('/gets/employees/withoutIsDelete', Authentication.isLogin, this.getEmployeesWithoutIsDelete);\r\n        this.router.get('/get/employee', Authentication.isLogin, this.getEmplyeeById);\r\n        this.router.get('/gets/employees/pond', Authentication.isLogin, this.getEmployeesPondRole);\r\n        this.router.get('/gets/all/employees/pond', Authentication.isLogin, this.getAllPondAndEmployees);\r\n        this.router.put('/update/employee', Authentication.isLogin, this.updateEmployee);\r\n        this.router.post('/insert/employee/role', Authentication.isLogin, this.insertOnlyRole);\r\n\r\n        // log endPoint\r\n        this.logEndpoints(this.router, UserRoute.path);\r\n    }\r\n\r\n    private register = async (request: Request, response: Response, next: NextFunction) => {\r\n        const user: User = new User();\r\n        const { firstname, lastname, username, password } = request.body;\r\n        user.setUserUUId = uuidv4();\r\n        user.setFirstname = firstname;\r\n        user.setLastname = lastname;\r\n        user.setUsername = username;\r\n        const hash = user.hashPassword(password);\r\n        user.setPassword = hash;\r\n        user.setImages = defaultImage.userImage;\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            const userCreated: any = await user.userServices.models.create(user, {\r\n                transaction: t\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Tên người dùng đã được sử dụng, vui lòng thử tên khác.'\r\n                });\r\n                return t.rollback();\r\n            });\r\n            if(userCreated.userId) {\r\n                const storageOwner: OwnerStorage = new OwnerStorage();\r\n                storageOwner.setOwnerStorages(null, userCreated.userId);\r\n                const breedOwner: OwnerBreed = new OwnerBreed();\r\n                breedOwner.setOwnerBreed(null, userCreated.userId);\r\n                const sOwner: any = await storageOwner.storegeOwnwerServices.models.create(storageOwner, { transaction: t })\r\n                    .catch(e => {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Có lỗi xảy ra, vui lòng thực hiện lại.'\r\n                        });\r\n                        t.rollback();\r\n                    });\r\n                const bOwner: any = await breedOwner.breedOwnwerServices.models.create(breedOwner, { transaction: t })\r\n                    .catch(e => {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Có lỗi xảy ra, vui lòng thực hiện lại.'\r\n                        });\r\n                        t.rollback();\r\n                    });\r\n                if(sOwner && bOwner) {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Tạo tài khoản thành công, vui lòng đợi trong khi chúng tôi chuyển bạn về trang trước...'\r\n                    });\r\n                    t.commit();\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Có lỗi xảy ra, vui lòng thực hiện lại.'\r\n                    });\r\n                    t.rollback();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private login = async (request: Request, response: Response, next: NextFunction) => {\r\n        const user: User = new User();\r\n        const { username, password } = request.body;\r\n        user.setUsername = username;\r\n        user.setPassword = password;\r\n        user.userServices.models.findOne({\r\n            include: [\r\n                {\r\n                    model: this.userRolesServices.models,\r\n                    as: ActionAssociateDatabase.USER_2_ROLES_USER,\r\n                    required: false,\r\n                    attributes: ['userId', 'roles', 'bossId']\r\n                },\r\n                {\r\n                    model: this.userRolesServices.models,\r\n                    as: ActionAssociateDatabase.USER_2_ROLES_GET_EMPLOYEES,\r\n                    required: false,\r\n                    attributes: ['userId', 'roles']\r\n                },\r\n                {\r\n                    model: this.pondUserRolesServices.models,\r\n                    as: ActionAssociateDatabase.USER_2_POND_USER_ROLE,\r\n                    required: false,\r\n                    attributes: ['userId', 'pondId'],\r\n                    include: [\r\n                        {\r\n                            model: this.pondsServices.models,\r\n                            as: ActionAssociateDatabase.POND_USER_ROLE_2_POND,\r\n                            attributes: ['pondUUId']\r\n                        }\r\n                    ]\r\n                }\r\n            ],\r\n            where: {\r\n                username\r\n            },\r\n            attributes: ['userId', 'userUUId', 'lastname', 'firstname', 'username', 'password', 'createdDate', 'createdBy']\r\n        }).then((u: any) => {\r\n            if(!u) {\r\n                response.json({\r\n                    success: false,\r\n                    message: 'Sai tài khoản, mật khẩu, vui lòng thử lại!'\r\n                });\r\n            } else {\r\n                Enscrypts.compare(user.getPassword, u.password).then((isMatch: boolean) => {\r\n                    if(isMatch) {\r\n                        delete u.dataValues.password;\r\n                        const content: any = u.dataValues;\r\n                        content.isLogin = true;\r\n                        const token: any = jwt.sign(content, this.cert, {\r\n                            algorithm: 'RS512'\r\n                        });\r\n                        response.json({\r\n                            success: true,\r\n                            token\r\n                        });\r\n                    } else {\r\n                        response.json({\r\n                            success: false,\r\n                            message: 'Sai tài khoản, mật khẩu, vui lòng thử lại!'\r\n                        });\r\n                    }\r\n                }).catch(err => {\r\n                    response.json({\r\n                        success: false,\r\n                        message: 'Sai tài khoản, mật khẩu, vui lòng thử lại!'\r\n                    });\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            response.json({\r\n                success: false,\r\n                message: 'Sai tài khoản, mật khẩu, vui lòng thử lại!'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * get cho chức năng xem thông tin\r\n     */\r\n    private getUserInfo = async (request: Request, response: Response) => {\r\n        const user: User = new User();\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const decodeToken: any = Authentication.detoken(token);\r\n        const { userId } = decodeToken;\r\n        user.userServices.models.findOne({\r\n            include: [\r\n                {\r\n                    model: this.provinceServices.models,\r\n                    as: ActionAssociateDatabase.USER_2_PRO\r\n                },\r\n                {\r\n                    model: this.districtServives.models,\r\n                    as: ActionAssociateDatabase.USER_2_DIS,\r\n                },\r\n                {\r\n                    model: this.wardServices.models,\r\n                    as: ActionAssociateDatabase.USER_2_WAR\r\n                }\r\n            ],\r\n            where: {\r\n                userId\r\n            }\r\n        })\r\n        .then((user$: any) => {\r\n            if(!user$) {\r\n                response.json({\r\n                    success: false,\r\n                    message: 'Có lỗi xảy ra vui lòng thử lại!'\r\n                });\r\n            } else {\r\n                delete user$.dataValues[`password`];\r\n                response.json(user$.dataValues);\r\n            }\r\n        }).catch(err => {\r\n            response.json({\r\n                success: false,\r\n                message: 'Có lỗi xảy ra vui lòng thử lại!'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * get cho chưc năng update, khong can join tinh huyen xa\r\n     */\r\n    private getUserInfoWithUpdate = async (request: Request, response: Response, next: NextFunction) => {\r\n        const user: User = new User();\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const decodeToken: any = Authentication.detoken(token);\r\n        user.setUsername = decodeToken.username;\r\n        user.login().then((user$: any) => {\r\n            if(!user$) {\r\n                response.json({\r\n                    success: false,\r\n                    message: 'Có lỗi xảy ra vui lòng thử lại!'\r\n                });\r\n            } else {\r\n                delete user$[`password`];\r\n                response.json(user$);\r\n            }\r\n        }).catch(err => {\r\n            response.json({\r\n                success: false,\r\n                message: 'Có lỗi xảy ra vui lòng thử lại!'\r\n            });\r\n        });\r\n    }\r\n\r\n    private updateUserProfile = async (request: any, response: Response, next: NextFunction) => {\r\n        const user: User = new User();\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const decodetoken: any = Authentication.detoken(token);\r\n        const { firstname, lastname, birthday, email, phone, town, district, province, images } = request.body;\r\n        user.setUser(decodetoken.userId,undefined,firstname,lastname,undefined,null,birthday,email,phone,undefined,town,district,province,null,images,undefined,undefined,undefined,undefined,undefined);\r\n        if(request.files) {\r\n            GoogleDrive.upload(request,response,next).then((data: any) => {\r\n                if(data.fileId) {\r\n                    user.setImages = data.fileId;\r\n                    user.updateMyProfile().then(res => {\r\n                        if(Array.isArray(res)) {\r\n                            response.status(200).json({\r\n                                success: true,\r\n                                fileId: data.fileId,\r\n                                message: 'Hồ sơ đã được cập nhật.'\r\n                            });\r\n                        } else {\r\n                            response.status(200).json({\r\n                                success: false,\r\n                                message: 'Đã có lỗi xảy ra, xin vui lòng thử lại!'\r\n                    });\r\n                        }\r\n                    }).catch(e => {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Đã có lỗi xảy ra, xin vui lòng thử lại!',\r\n                            error: e\r\n                        });\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã có lỗi xảy ra, xin vui lòng thử lại!'\r\n                    });\r\n                }\r\n            });\r\n        } else {\r\n            user.updateMyProfile().then(res => {\r\n                if(Array.isArray(res)) {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Hồ sơ đã được cập nhật.'\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã có lỗi xảy ra, xin vui lòng thử lại!'\r\n                    });\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, xin vui lòng thử lại!',\r\n                    error: e\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    private updateUserPassword = async (request: Request, response: Response, next: NextFunction) => {\r\n        const user: User = new User();\r\n        const { oldPassword, newPassword } = request.body;\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const decodeToken: any = Authentication.detoken(token);\r\n        user.setUsername = decodeToken.username;\r\n        user.login().then((data: any) => {\r\n            Enscrypts.compare(oldPassword, data.password).then((isMatch: boolean) => {\r\n                if(!isMatch) {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Sai mật khẩu cũ!'\r\n                    });\r\n                } else {\r\n                    user.setUserId = decodeToken.userId;\r\n                    user.setPassword = newPassword;\r\n                    user.changePassword().then((data$: any) => {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: 'Thực hiện thành công, vui lòng đợi hệ thống chuyển sang trang trước.'\r\n                        });\r\n                    }).catch(e => {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Có lỗi xảy ra vui lòng thử lại!',\r\n                            error: e\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    private regiterEmployee = async (request: Request, response: Response, next: NextFunction) => {\r\n        const user: User = new User();\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { username, password, firstname, lastname, roles } = request.body;\r\n        user.setUserUUId = uuidv4();\r\n        user.setFirstname = firstname;\r\n        user.setLastname = lastname;\r\n        user.setUsername = username;\r\n        const hash = user.hashPassword(password);\r\n        user.setPassword = hash;\r\n        user.setImages = defaultImage.userImage;\r\n        user.setCreatedBy = deToken.userUUId;\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            const userCreated: any = await user.userServices.models.create(user, {\r\n                transaction: t\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Tên người dùng đã được sử dụng, vui lòng thử tên khác.'\r\n                });\r\n            });\r\n            if(userCreated) {\r\n                const userRoles: UserRole = new UserRole();\r\n                userRoles.setUserRoles(null, deToken.userId, userCreated.userId, roles);\r\n                const role: any = await userRoles.userRolesServices.models.create(userRoles, {\r\n                    transaction: t\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Có lỗi xảy ra, vui lòng thực hiện lại.'\r\n                    });\r\n                    t.rollback();\r\n                });\r\n                if(role) {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Tạo tài khoản thành công, vui lòng đợi trong khi chúng tôi chuyển bạn về trang trước...'\r\n                    });\r\n                    t.commit();\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Có lỗi xảy ra, vui lòng thực hiện lại.'\r\n                    });\r\n                    t.rollback();\r\n                }\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Có lỗi xảy ra, vui lòng thực hiện lại.'\r\n                });\r\n                t.rollback();\r\n            }\r\n        });\r\n    }\r\n\r\n    private getEmployee = async (request: Request, response: Response, next: NextFunction) => {\r\n        const user: User = new User();\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const decodetoken: any = Authentication.detoken(token);\r\n        user.userServices.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.userRolesServices.models,\r\n                    as: ActionAssociateDatabase.USER_2_ROLES_USER,\r\n                    where: {\r\n                        bossId: decodetoken.userId,\r\n                        [this.userRolesServices.Op.and]: {\r\n                            userId: {\r\n                                [this.userRolesServices.Op.ne]: decodetoken.userId\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            ]\r\n        }).then(async (employees: any[]) => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                employees\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi không mong muốn, vui lòng thử lại.'\r\n            });\r\n            throw e;\r\n        });\r\n    }\r\n\r\n    private getEmplyeeById = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { rolesid }: any = request.headers;\r\n        const user: User = new User();\r\n        this.userRolesServices.models.findOne({\r\n            include: [\r\n                {\r\n                    model: user.userServices.models,\r\n                    as: ActionAssociateDatabase.USER_ROLES_2_USER\r\n                }\r\n            ],\r\n            where: {\r\n                rolesId: (rolesid * 1)\r\n            }\r\n        }).then(roles => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                roles\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thực hiện lại...'\r\n            });\r\n        });\r\n    }\r\n\r\n    private insertOnlyRole = async (request: Request, response: Response, next: NextFunction) => {\r\n        const userRoles: UserRole = new UserRole();\r\n        const { userId, roles } = request.body;\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        userRoles.setBossId = deToken.userId;\r\n        userRoles.setUserId = userId;\r\n        userRoles.setRoles = roles;\r\n        userRoles.userRolesServices.models.upsert(userRoles.getFields(userRoles))\r\n        .then((res: any) => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: 'Phân quyền thành công.'\r\n            });\r\n        }).catch(e => {\r\n            e;\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thực hiện lại...'\r\n            });\r\n        });\r\n    }\r\n\r\n    private updateEmployee = async (request: Request, response: Response, next: NextFunction) => {\r\n        const userRoles: UserRole = new UserRole();\r\n        const { rolesId, roles, isDeleted } = request.body;\r\n        userRoles.setRolesId = rolesId;\r\n        userRoles.setRoles = roles;\r\n        userRoles.setIsDeleted = isDeleted;\r\n        userRoles.update().then((res: any) => {\r\n            if(res.length > 0) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: 'Cập nhật thành công.'\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thực hiện lại...'\r\n            });\r\n        });\r\n    }\r\n\r\n    private getEmployeesPondRole = async (request: Request, response: Response, next: NextFunction) => {\r\n        const user: User = new User();\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        user.userServices.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.pondsServices.models,\r\n                    through: {\r\n                        where: {\r\n                            isDeleted: 0\r\n                        }\r\n                    },\r\n                    as: ActionAssociateDatabase.USER_2_POND_MANY_ROLES,\r\n                    where: {\r\n                        userId: deToken.userId\r\n                    }\r\n                }\r\n            ]\r\n        }).then((res: any) => {\r\n            if(res.length > 0) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    employees: res\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Bạn không có nhân viên có quyền quản lý ao.'\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private getAllPondAndEmployees = async (request: Request, response: Response, next: NextFunction) => {\r\n        const user: User = new User();\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        user.userServices.models.findOne({\r\n            include: [\r\n                {\r\n                    model: this.userRolesServices.models,\r\n                    as: ActionAssociateDatabase.USER_ROLES_2_USER_BOSS,\r\n                    where: {\r\n                        roles: 1\r\n                    },\r\n                    attributes: ['userId'],\r\n                    include: [\r\n                        {\r\n                            model: user.userServices.models,\r\n                            as: ActionAssociateDatabase.USER_ROLES_2_USER,\r\n                            attributes: ['userId', 'userUUId', 'username', 'lastname', 'firstname']\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    model: this.pondsServices.models,\r\n                    as: ActionAssociateDatabase.USER_2_POND\r\n                }\r\n            ],\r\n            where: {\r\n                userId: deToken.userId\r\n            },\r\n            attributes: []\r\n        }).then((res: any) => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                user: res\r\n            });\r\n        }).catch(e => {\r\n            console.log(e);\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private getEmployeesWithoutIsDelete = async (request: Request, response: Response, next: NextFunction) => {\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const user: User = new User();\r\n        user.userServices.models.findAll({\r\n            where: {\r\n                createdBy: deToken.userUUId\r\n            }\r\n        }).then(employees => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                employees\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private vertify = async (request: Request, response: Response, next: NextFunction) => {\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        jwt.verify(token, Authentication.cert, {\r\n            algorithms: ['RS512', 'RS256']\r\n        }, (err, data) => {\r\n            if(err) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Bạn cần đăng nhập để tiếp tục.'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: 'Đăng nhập thành công!'\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    private vertifyBoss = async (request: Request, response: Response, next: NextFunction) => {\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        if(!token) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: '',\r\n                isBoss: false\r\n            });\r\n        }\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        this.userServives.models.findOne({\r\n            where: {\r\n                userId,\r\n                createdBy: null\r\n            }\r\n        }).then(res => {\r\n            if(res) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    isBoss: true\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: '',\r\n                    isBoss: false\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi xác thực người dùng.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private vertifyPondRoles = async (request: Request, response: Response, next: NextFunction) => {\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        if(!token) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: ''\r\n            });\r\n        }\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        this.userServives.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.userRolesServices.models,\r\n                    as: ActionAssociateDatabase.USER_2_ROLES_USER,\r\n                    required: false\r\n                }\r\n            ],\r\n            where: {\r\n                [this.sequeliz.Op.or]: [\r\n                    {\r\n                        '$roles.roles$': 1,\r\n                        userId\r\n                    },\r\n                    {\r\n                        userId,\r\n                        createdBy: null\r\n                    }\r\n                ]\r\n            } as any\r\n        }).then((res: any) => {\r\n            if(res.length) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: ''\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: ''\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            e;\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi xác thực người dùng.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private vertifyStorageRoles = async (request: Request, response: Response, next: NextFunction) => {\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        if(!token) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: ''\r\n            });\r\n        }\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        this.userServives.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.userRolesServices.models,\r\n                    as: ActionAssociateDatabase.USER_2_ROLES_USER,\r\n                    required: false\r\n                }\r\n            ],\r\n            where: {\r\n                [this.sequeliz.Op.or]: [\r\n                    {\r\n                        '$roles.roles$': 2,\r\n                        userId\r\n                    },\r\n                    {\r\n                        userId,\r\n                        createdBy: null\r\n                    }\r\n                ]\r\n            } as any\r\n        }).then((res: any) => {\r\n            if(res.length) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: ''\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: ''\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi xác thực người dùng.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private vertifyRolesOfPond = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondUUId } = request.params;\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        if(!token) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi xác thực người dùng.'\r\n            });\r\n        }\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        this.pondUserRolesServices.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.pondsServices.models,\r\n                    as: ActionAssociateDatabase.POND_USER_ROLE_2_POND,\r\n                    where: {\r\n                        pondUUId\r\n                    }\r\n                }\r\n            ],\r\n            where: {\r\n                userId\r\n            }\r\n        }).then((res: any) => {\r\n            if(res.length) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: ''\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: ''\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi xác thực người dùng.'\r\n            });\r\n        });\r\n    }\r\n}\r\n","module.exports = require(\"winston\");","import * as del from 'del';\r\n\r\nexport const fileFilter = (req, file, cb) => {\r\n  // accept image only\r\n  if (!file.originalname.match(/\\.(jpg|jpeg|png|gif|xlsx|xls|csv|zip)$/)) {\r\n    return cb(new Error('File format not allowed!'), false);\r\n  }\r\n  cb(undefined, true);\r\n};\r\n\r\nexport const cleanFolder = (folderPath: string) => {\r\n  // delete files inside folder but not the folder itself\r\n  del.sync([`${folderPath}/**`, `!${folderPath}`]);\r\n};\r\n","module.exports = require(\"del\");","export * from './boughtBreed';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { BoughtBreedServives } from '../../services'; // import services\r\n\r\nexport class BoughtBreed extends BaseComponent {\r\n    public boughtBreedServives: BoughtBreedServives;\r\n    private boughtBreedId: number;\r\n    private boughtBreedUUId: string;\r\n    private userId: number;\r\n    private seasonId: number;\r\n    private createdBy: string;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.boughtBreedServives = new BoughtBreedServives();\r\n        this.services = this.boughtBreedServives;\r\n    }\r\n\r\n    public set setBoughtBreedId(boughtBreedId: number) {\r\n        this.boughtBreedId = boughtBreedId ? boughtBreedId : null;\r\n    }\r\n\r\n    public set setBoughtBreedUUId(boughtBreedUUId: string) {\r\n        this.boughtBreedUUId = boughtBreedUUId;\r\n    }\r\n\r\n    public set setUserId(userId: number) {\r\n        this.userId = userId;\r\n    }\r\n\r\n    public set setSeasonId(seasonId: number) {\r\n        this.seasonId = seasonId;\r\n    }\r\n\r\n    public set setCreatedBy(createdBy: string) {\r\n        this.createdBy =  createdBy;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setBoughtBreeds(\r\n        boughtBreedId: number,\r\n        boughtBreedUUId: string,\r\n        userId: number,\r\n        seasonId: number,\r\n        createdBy?: string,\r\n        createdDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setBoughtBreedId = boughtBreedId;\r\n        this.setBoughtBreedUUId = boughtBreedUUId;\r\n        this.setUserId = userId;\r\n        this.setSeasonId = seasonId;\r\n        this.setCreatedBy = createdBy;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getBoughtBreedId(): number {\r\n        return this.boughtBreedId;\r\n    }\r\n\r\n    public get getBoughtBreedUUId(): string {\r\n        return this.boughtBreedUUId;\r\n    }\r\n\r\n    public get getUserId(): number {\r\n        return this.userId;\r\n    }\r\n\r\n    public get getSeasonId(): number {\r\n        return this.seasonId;\r\n    }\r\n\r\n    public get getCreatedBy(): string {\r\n        return this.createdBy;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './boughtBreedDetail';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { BoughtBreedDetailsServives } from '../../services'; // import services\r\n\r\nexport class BoughtBreedDetail extends BaseComponent {\r\n    public boughtBreedDetailsServives: BoughtBreedDetailsServives;\r\n    private boughtBreedDetailId: number;\r\n    private boughtBreedDetailUUId: string;\r\n    private couponId: number;\r\n    private breedId: number;\r\n    private quantity: number;\r\n    private unit: number;\r\n    private unitPrice: number;\r\n    private soldAddress: string;\r\n    private testingAgency: string;\r\n    private descriptions: string;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.boughtBreedDetailsServives = new BoughtBreedDetailsServives();\r\n        this.services = this.boughtBreedDetailsServives;\r\n    }\r\n\r\n    public set setBoughtBreedDetailId(boughtBreedDetailId: number) {\r\n        this.boughtBreedDetailId = boughtBreedDetailId;\r\n    }\r\n\r\n    public set setBoughtBreedDetailUUId(boughtBreedDetailUUId: string) {\r\n        this.boughtBreedDetailUUId = boughtBreedDetailUUId;\r\n    }\r\n\r\n    public set setCouponId(couponId: number) {\r\n        this.couponId = couponId;\r\n    }\r\n\r\n    public set setBreedId(breedId: number) {\r\n        this.breedId = breedId;\r\n    }\r\n\r\n    public set setQuantity(quantity: number) {\r\n        this.quantity = quantity;\r\n    }\r\n\r\n    public set setUnit(unit: number) {\r\n        this.unit = unit;\r\n    }\r\n\r\n    public set setUnitPrice(unitPrice: number) {\r\n        this.unitPrice = unitPrice;\r\n    }\r\n\r\n    public set setSoldAddress(soldAddress: string) {\r\n        this.soldAddress = soldAddress;\r\n    }\r\n\r\n    public set setTestingAgency(testingAgency: string) {\r\n        this.testingAgency = testingAgency;\r\n    }\r\n\r\n    public set setDescriptions(descriptions: string) {\r\n        this.descriptions = descriptions;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setBoughtBreedDetails(\r\n        boughtBreedDetailId: number,\r\n        boughtBreedDetailUUId: string,\r\n        couponId: number,\r\n        breedId: number,\r\n        quantity: number,\r\n        unit: number,\r\n        unitPrice: number,\r\n        soldAddress?: string,\r\n        testingAgency?: string,\r\n        descriptions?: string,\r\n        isDeleted?: number,\r\n    ) {\r\n        this.setBoughtBreedDetailId = boughtBreedDetailId;\r\n        this.setBoughtBreedDetailUUId = boughtBreedDetailUUId;\r\n        this.setCouponId = couponId;\r\n        this.setBreedId = breedId;\r\n        this.setQuantity = quantity;\r\n        this.setUnit = unit;\r\n        this.setUnitPrice = unitPrice;\r\n        this.setSoldAddress = soldAddress;\r\n        this.setTestingAgency = testingAgency;\r\n        this.setDescriptions = descriptions;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getBoughtBreedDetailId(): number {\r\n        return this.boughtBreedDetailId;\r\n    }\r\n\r\n    public get getBoughtBreedDetailUUId(): string {\r\n        return this.boughtBreedDetailUUId;\r\n    }\r\n\r\n    public get getCouponId(): number {\r\n        return this.couponId;\r\n    }\r\n\r\n    public get getBreedId(): number {\r\n        return this.breedId;\r\n    }\r\n\r\n    public get getQuantity(): number {\r\n        return this.quantity;\r\n    }\r\n\r\n    public get getUnit(): number {\r\n        return this.unit;\r\n    }\r\n\r\n    public get getUnitPrice(): number {\r\n        return this.unitPrice;\r\n    }\r\n\r\n    public get getSoldAddress(): string {\r\n        return this.soldAddress;\r\n    }\r\n\r\n    public get getTestingAgency(): string {\r\n        return this.testingAgency;\r\n    }\r\n\r\n    public get getDescriptions(): string {\r\n        return this.descriptions;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './breed';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { BreedServives } from '../../services'; // import services\r\n\r\nexport class Breed extends BaseComponent {\r\n    public breedServives: BreedServives;\r\n    private breedId: number;\r\n    private breedUUId: string;\r\n    private ownerId: number;\r\n    private breedName: string;\r\n    private totalQuantity: number;\r\n    private loopOfBreed: number;\r\n    private unit: number;\r\n    private tips: string;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.breedServives = new BreedServives();\r\n        this.services = this.breedServives;\r\n    }\r\n\r\n    public set setBreedId(breedId: number) {\r\n        this.breedId = breedId;\r\n    }\r\n\r\n    public set setBreedUUId(breedUUId: string) {\r\n        this.breedUUId = breedUUId;\r\n    }\r\n\r\n    public set setOwnerId(userId: number) {\r\n        this.ownerId = userId;\r\n    }\r\n\r\n    public set setBreedName(breedName: string) {\r\n        this.breedName = breedName;\r\n    }\r\n\r\n    public set setTotalQuantity(totalQuantity: number) {\r\n        this.totalQuantity = totalQuantity;\r\n    }\r\n\r\n    public set setUnit(unit: number) {\r\n        this.unit = unit;\r\n    }\r\n\r\n    public set setLoopOfBreed(loopOfBreed: number) {\r\n        this.loopOfBreed = loopOfBreed;\r\n    }\r\n\r\n    public set setTips(tips: string) {\r\n        this.tips = tips;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setBreed(\r\n        breedId: number,\r\n        breedUUId: string,\r\n        ownerId: number,\r\n        breedName: string,\r\n        totalQuantity: number,\r\n        unit: number,\r\n        loopOfBreed: number,\r\n        tips?: string,\r\n        createdDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setBreedId = breedId;\r\n        this.setBreedUUId = breedUUId;\r\n        this.setOwnerId = ownerId;\r\n        this.setBreedName = breedName;\r\n        this.setTotalQuantity = totalQuantity;\r\n        this.setUnit = unit;\r\n        this.setLoopOfBreed = loopOfBreed;\r\n        this.setTips = tips;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getBreedId(): number {\r\n        return this.breedId;\r\n    }\r\n\r\n    public get getBreedUUId(): string {\r\n        return this.breedUUId;\r\n    }\r\n\r\n    public get getOwnerId(): number {\r\n        return this.ownerId;\r\n    }\r\n\r\n    public get getBreedName(): string {\r\n        return this.breedName;\r\n    }\r\n\r\n    public get getTotalQuantity(): number {\r\n        return this.totalQuantity;\r\n    }\r\n\r\n    public get getUnit(): number {\r\n        return this.unit;\r\n    }\r\n\r\n    public get getLoopOfBreed(): number {\r\n        return this.loopOfBreed;\r\n    }\r\n\r\n    public get getTips(): string {\r\n        return this.tips;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './breedOwner';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { BreedOwnwerServices } from '../../services'; // import services\r\n\r\nexport class OwnerBreed extends BaseComponent {\r\n    public breedOwnwerServices: BreedOwnwerServices;\r\n    private ownerId: number;\r\n    private userId: number;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.breedOwnwerServices = new BreedOwnwerServices();\r\n        this.services = this.breedOwnwerServices;\r\n    }\r\n\r\n    public set setOwnerId(ownerId: number) {\r\n        this.ownerId = ownerId;\r\n    }\r\n\r\n    public set setUserId(userId: number) {\r\n        this.userId = userId;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setOwnerBreed(\r\n        ownerId: number,\r\n        userId: number,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setOwnerId = ownerId;\r\n        this.setUserId = userId;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getOwnerId(): number {\r\n        return this.ownerId;\r\n    }\r\n\r\n    public get getUserId(): number {\r\n        return this.userId;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './cost';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { CostsServives } from '../../services'; // import services\r\n\r\nexport class Cost extends BaseComponent {\r\n    public costsServives: CostsServives;\r\n    private costId: number;\r\n    private costUUId: string;\r\n    private pondPrepareId: number;\r\n    private label: string;\r\n    private value: number;\r\n    private responsible: string;\r\n    private notes: string;\r\n    private createdBy: string;\r\n    private createdDate: Date;\r\n    private updatedBy: string;\r\n    private updatedDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.costsServives = new CostsServives();\r\n        this.services = this.costsServives;\r\n    }\r\n\r\n    public set setCostId(costId: number) {\r\n        this.costId = costId;\r\n    }\r\n\r\n    public set setCostUUId(costUUId: string) {\r\n        this.costUUId = costUUId;\r\n    }\r\n\r\n    public set setPondPrepareId(pondPrepareId: number) {\r\n        this.pondPrepareId = pondPrepareId;\r\n    }\r\n\r\n    public set setLabel(label: string) {\r\n        this.label = label;\r\n    }\r\n\r\n    public set setValue(value: number) {\r\n        this.value = value;\r\n    }\r\n\r\n    public set setResponsible(responsible: string) {\r\n        this.responsible = responsible;\r\n    }\r\n\r\n    public set setNotes(notes: string) {\r\n        this.notes = notes;\r\n    }\r\n\r\n    public set setCreatedBy(createdBy: string) {\r\n        this.createdBy = createdBy;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setUpdatedBy(updatedBy: string) {\r\n        this.updatedBy = updatedBy;\r\n    }\r\n\r\n    public set setUpdatedDate(updatedDate: Date) {\r\n        this.updatedDate = updatedDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setCost(\r\n            costId: number,\r\n            costUUId: string,\r\n            pondPrepareId: number,\r\n            label: string,\r\n            value: number,\r\n            responsible: string,\r\n            notes: string,\r\n            createdBy?: string,\r\n            createdDate?: Date,\r\n            updatedBy?: string,\r\n            updatedDate?: Date,\r\n            isDeleted?: number\r\n        ) {\r\n            this.setCostId = costId;\r\n            this.setCostUUId = costUUId;\r\n            this.setPondPrepareId = pondPrepareId;\r\n            this.setLabel = label;\r\n            this.setValue = value;\r\n            this.setResponsible = responsible;\r\n            this.setNotes = notes;\r\n            this.setCreatedBy = createdBy;\r\n            this.setCreatedDate = createdDate;\r\n            this.setUpdatedBy = updatedBy;\r\n            this.setUpdatedDate = updatedDate;\r\n            this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getCostId(): number {\r\n        return this.costId;\r\n    }\r\n\r\n    public get getCostUUId(): string {\r\n        return this.costUUId;\r\n    }\r\n\r\n    public get getPondPrepareId(): number {\r\n        return this.pondPrepareId;\r\n    }\r\n\r\n    public get getLabel(): string {\r\n        return this.label;\r\n    }\r\n\r\n    public get getValue(): number {\r\n        return this.value;\r\n    }\r\n\r\n    public get getResponsible(): string {\r\n        return this.responsible;\r\n    }\r\n\r\n    public get getNotes(): string {\r\n        return this.notes;\r\n    }\r\n\r\n    public get getCreatedBy(): string {\r\n        return this.createdBy;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getUpdatedBy(): string {\r\n        return this.updatedBy;\r\n    }\r\n\r\n    public get getUpdatedDate(): Date {\r\n        return this.updatedDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './coupon';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { CouponServives } from '../../services'; // import services\r\n\r\nexport class Coupon extends BaseComponent {\r\n    public couponServives: CouponServives;\r\n    private couponId: number;\r\n    private userId: number;\r\n    private seasonId: number;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.couponServives = new CouponServives();\r\n        this.services = this.couponServives;\r\n    }\r\n\r\n    public set setCouponId(couponId: number) {\r\n        this.couponId = couponId;\r\n    }\r\n\r\n    public set setUserId(userId: number) {\r\n        this.userId = userId;\r\n    }\r\n\r\n    public set setSeasonId(seasonId: number) {\r\n        this.seasonId = seasonId;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setCoupon(\r\n        couponId: number,\r\n        userId: number,\r\n        seasonId: number,\r\n        createdDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setCouponId = couponId;\r\n        this.setUserId = userId;\r\n        this.setSeasonId= seasonId;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getCouponId(): number {\r\n        return this.couponId;\r\n    }\r\n\r\n    public get getUserId (): number {\r\n        return this.userId;\r\n    }\r\n\r\n    public get getSeasonId(): number {\r\n        return this.seasonId;\r\n    }\r\n\r\n    public get getCreatedDate (): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted (): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './diedFishery';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { DiedFisherysServives } from '../../services'; // import services\r\n\r\nexport class DiedFishery extends BaseComponent {\r\n    public diedFisherysServives: DiedFisherysServives;\r\n    private diedFisheryId: number;\r\n    private diedFisheryUUId: string;\r\n    private seasonAndPondId: number;\r\n    private card: number;\r\n    private quantity: number;\r\n    private solutions: string;\r\n    private employee: string;\r\n    private createdBy: string;\r\n    private createdDate: Date;\r\n    private updatedBy: string;\r\n    private updatedDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.diedFisherysServives = new DiedFisherysServives();\r\n        this.services = this.diedFisherysServives;\r\n    }\r\n\r\n    public set setDiedFisheryId(diedFisheryId: number) {\r\n        this.diedFisheryId = diedFisheryId;\r\n    }\r\n\r\n    public set setDiedFisheryUUId(diedFisheryUUId: string) {\r\n        this.diedFisheryUUId = diedFisheryUUId;\r\n    }\r\n\r\n    public set setSeasonAndPondId(seasonAndPondId: number) {\r\n        this.seasonAndPondId = seasonAndPondId;\r\n    }\r\n\r\n    public set setCard(card: number) {\r\n        this.card = card;\r\n    }\r\n\r\n    public set setQuantity(quantity: number) {\r\n        this.quantity = quantity;\r\n    }\r\n\r\n    public set setSolutions(solutions: string) {\r\n        this.solutions = solutions;\r\n    }\r\n\r\n    public set setEmployee(employee: string) {\r\n        this.employee = employee;\r\n    }\r\n\r\n    public set setCreatedBy(createdBy: string) {\r\n        this.createdBy = createdBy;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setUpdatedBy(updatedBy: string) {\r\n        this.updatedBy = updatedBy;\r\n    }\r\n\r\n    public set setUpdatedDate(updatedDate: Date) {\r\n        this.updatedDate = updatedDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setDiedfisherys(\r\n        diedFisheryId: number,\r\n        diedFisheryUUId: string,\r\n        seasonAndPondId: number,\r\n        card: number,\r\n        quantity: number,\r\n        solutions?: string,\r\n        employee?: string,\r\n        createdBy?: string,\r\n        createdDate?: Date,\r\n        updatedBy?: string,\r\n        updatedDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setDiedFisheryId = diedFisheryId;\r\n        this.setDiedFisheryUUId = diedFisheryUUId;\r\n        this.setSeasonAndPondId = seasonAndPondId;\r\n        this.setCard = card;\r\n        this.setQuantity = quantity;\r\n        this.setSolutions = solutions;\r\n        this.setEmployee = employee;\r\n        this.setCreatedBy = createdBy;\r\n        this.setCreatedDate = createdDate;\r\n        this.setUpdatedBy = updatedBy;\r\n        this.setUpdatedDate = updatedDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getDiedFisheryId(): number {\r\n        return this.diedFisheryId;\r\n    }\r\n\r\n    public get getDiedFisheryUUId(): string {\r\n        return this.diedFisheryUUId;\r\n    }\r\n\r\n    public get getSeasonAndPondId(): number {\r\n        return this.seasonAndPondId;\r\n    }\r\n\r\n    public get getCard(): number {\r\n        return this.card;\r\n    }\r\n\r\n    public get getQuantity(): number {\r\n        return this.quantity;\r\n    }\r\n\r\n    public get getSolutions(): string {\r\n        return this.solutions;\r\n    }\r\n\r\n    public get getEmployee(): string {\r\n        return this.employee;\r\n    }\r\n\r\n    public get getCreatedBy(): string {\r\n        return this.createdBy;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getUpdatedBy(): string {\r\n        return this.updatedBy;\r\n    }\r\n\r\n    public get getUpdatedDate(): Date {\r\n        return this.updatedDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { DistrictServives } from '../../services';\r\n\r\nexport class District extends BaseComponent {\r\n    public districtServives: DistrictServives;\r\n    private districtid: string;\r\n    private name: string;\r\n    private type: string;\r\n    private location: string;\r\n    private provinceid: string;\r\n\r\n    constructor() {\r\n        super();\r\n        this.districtServives = new DistrictServives();\r\n        this.services = this.districtServives;\r\n    }\r\n\r\n    public setDistrictid(districtid: string) {\r\n        this.districtid = districtid;\r\n    }\r\n\r\n    public setName(name: string) {\r\n        this.name = name;\r\n    }\r\n\r\n    public setType(type: string) {\r\n        this.type = type;\r\n    }\r\n\r\n    public setLocation(location: string) {\r\n        this.location = location;\r\n    }\r\n\r\n    public setProvinceid(provinceid: string) {\r\n        this.provinceid = provinceid;\r\n    }\r\n\r\n    public get getDistrictId() {\r\n        return this.districtid;\r\n    }\r\n\r\n    public get getDistrictName() {\r\n        return this.name;\r\n    }\r\n\r\n    public get getDistrictType() {\r\n        return this.type;\r\n    }\r\n\r\n    public get getDistrictLocation() {\r\n        return this.location;\r\n    }\r\n\r\n    public get getProvinceIdWithDistrict() {\r\n        return this.provinceid;\r\n    }\r\n\r\n    getAllDistrict(): Promise<District[]> {\r\n        return new Promise((resolve, reject) => {\r\n            this.districtServives.getAll(null).then((res: any[])  => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n\r\n    getDistrictByProvinceId(proId): Promise<District[]> {\r\n        return new Promise((resolve, reject) => {\r\n            this.districtServives.getByProviceId(proId).then((res: any[])  => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './growth';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { GrowthsServives } from '../../services'; // import services\r\n\r\nexport class Growth extends BaseComponent {\r\n    public growthsServives: GrowthsServives;\r\n    private growthId: number;\r\n    private growthUUId: string;\r\n    private seasonAndPondId: number;\r\n    private averageDensity: number;\r\n    private averageMass: number;\r\n    private speedOdGrowth: number;\r\n    private livingRatio: number;\r\n    private createdBy: string;\r\n    private createdDate: Date;\r\n    private updatedBy: string;\r\n    private updatedDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.growthsServives = new GrowthsServives();\r\n        this.services = this.growthsServives;\r\n    }\r\n\r\n    public set setGrowthId(growthId: number) {\r\n        this.growthId = growthId;\r\n    }\r\n\r\n    public set setGrowthUUId(growthUUId: string) {\r\n        this.growthUUId = growthUUId;\r\n    }\r\n\r\n    public set setSeasonAndPondId(seasonAndPondId: number) {\r\n        this.seasonAndPondId = seasonAndPondId;\r\n    }\r\n\r\n    public set setAverageDensity(averageDensity: number) {\r\n        this.averageDensity = averageDensity;\r\n    }\r\n\r\n    public set setAverageMass(averageMass: number) {\r\n        this.averageMass = averageMass;\r\n    }\r\n\r\n    public set setSpeedOdGrowth(speedOdGrowth: number) {\r\n        this.speedOdGrowth = speedOdGrowth;\r\n    }\r\n\r\n    public set setLivingRatio(livingRatio: number) {\r\n        this.livingRatio = livingRatio;\r\n    }\r\n\r\n    public set setCreatedBy(createdBy: string) {\r\n        this.createdBy = createdBy;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setUpdatedBy(updatedBy: string) {\r\n        this.updatedBy = updatedBy;\r\n    }\r\n\r\n    public set setUpdatedDate(updatedDate: Date) {\r\n        this.updatedDate = updatedDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setGrowths(\r\n        growthId: number,\r\n        growthUUId: string,\r\n        seasonAndPondId: number,\r\n        averageDensity: number,\r\n        averageMass: number,\r\n        speedOdGrowth: number,\r\n        livingRatio: number,\r\n        createdBy?: string,\r\n        createdDate?: Date,\r\n        updatedBy?: string,\r\n        updatedDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setGrowthId = growthId;\r\n        this.setGrowthUUId = growthUUId;\r\n        this.seasonAndPondId = seasonAndPondId;\r\n        this.setAverageDensity = averageDensity;\r\n        this.setAverageMass = averageMass;\r\n        this.setSpeedOdGrowth = speedOdGrowth;\r\n        this.setLivingRatio = livingRatio;\r\n        this.setCreatedBy = createdBy;\r\n        this.setCreatedDate = createdDate;\r\n        this.setUpdatedBy = updatedBy;\r\n        this.setUpdatedDate = updatedDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getGrowthId(): number {\r\n        return this.growthId;\r\n    }\r\n\r\n    public get getGrowthUUId(): string {\r\n        return this.growthUUId;\r\n    }\r\n\r\n    public get getSeasonAndPondId(): number {\r\n        return this.seasonAndPondId;\r\n    }\r\n\r\n    public get getAverageDensity(): number {\r\n        return this.averageDensity;\r\n    }\r\n\r\n    public get getAverageMass(): number {\r\n        return this.averageMass;\r\n    }\r\n\r\n    public get getSpeedOdGrowth(): number {\r\n        return this.speedOdGrowth;\r\n    }\r\n\r\n    public get getLivingRatio(): number {\r\n        return this.livingRatio;\r\n    }\r\n\r\n    public get getCreatedBy(): string {\r\n        return this.createdBy;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getUpdatedBy(): string {\r\n        return this.updatedBy;\r\n    }\r\n\r\n    public get getUpdatedDate(): Date {\r\n        return this.updatedDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './harvestDetail';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { HarvestDetailsServives } from '../../services'; // import services\r\n\r\nexport class HarvestDetail extends BaseComponent {\r\n    public harvestDetailsServives: HarvestDetailsServives;\r\n    private harvestDetailUUId: string;\r\n    private harvestId: number;\r\n    private quantity: number;\r\n    private unitPrice: number;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.harvestDetailsServives = new HarvestDetailsServives();\r\n        this.services = this.harvestDetailsServives;\r\n    }\r\n\r\n    public set setHarvestIdDetailUUId(harvestIdDetailUUId: string) {\r\n        this.harvestDetailUUId = harvestIdDetailUUId;\r\n    }\r\n\r\n    public set setHarvestId(harvestId: number) {\r\n        this.harvestId = harvestId;\r\n    }\r\n\r\n    public set setQuantity(quantity: number) {\r\n        this.quantity = quantity;\r\n    }\r\n\r\n    public set setUnitPrice(unitPrice: number) {\r\n        this.unitPrice = unitPrice;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setHarvestdetails(\r\n        harvestIdDetailUUId: string,\r\n        harvestId: number,\r\n        quantity: number,\r\n        unitPrice: number,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setHarvestIdDetailUUId = harvestIdDetailUUId;\r\n        this.setHarvestId = harvestId;\r\n        this.setQuantity = quantity;\r\n        this.setUnitPrice = unitPrice;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getHarvestDetailUUId(): string {\r\n        return this.harvestDetailUUId;\r\n    }\r\n\r\n    public get getHarvestId(): number {\r\n        return this.harvestId;\r\n    }\r\n\r\n    public get getQuantity(): number {\r\n        return this.quantity;\r\n    }\r\n\r\n    public get getUnitPrice(): number {\r\n        return this.unitPrice;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './harvest';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { HarvestsServives } from '../../services'; // import services\r\n\r\nexport class Harvest extends BaseComponent {\r\n    public harvestsServives: HarvestsServives;\r\n    private harvestId: number;\r\n    private harvestUUId: string;\r\n    private seasonAndPondId: number;\r\n    private harvestName: string;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.harvestsServives = new HarvestsServives();\r\n        this.services = this.harvestsServives;\r\n    }\r\n\r\n    public set setHarvestId(harvestId: number) {\r\n        this.harvestId = harvestId;\r\n    }\r\n\r\n    public set setHarvestUUId(harvestUUId: string) {\r\n        this.harvestUUId = harvestUUId;\r\n    }\r\n\r\n    public set setSeasonAndPondId(seasonAndPondId: number) {\r\n        this.seasonAndPondId = seasonAndPondId;\r\n    }\r\n\r\n    public set setHarvestName(harvestName: string) {\r\n        this.harvestName = harvestName;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setHarvests(\r\n        harvestId: number,\r\n        harvestUUId: string,\r\n        seasonAndPondId: number,\r\n        harvestName: string,\r\n        createdDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setHarvestId = harvestId;\r\n        this.setHarvestUUId = harvestUUId;\r\n        this.setSeasonAndPondId = seasonAndPondId;\r\n        this.setHarvestName = harvestName;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getHarvestId(): number {\r\n        return this.harvestId;\r\n    }\r\n\r\n    public get getHarvestUUId(): string {\r\n        return this.harvestUUId;\r\n    }\r\n\r\n    public get getsetSeasonAndPondId(): number {\r\n        return this.seasonAndPondId;\r\n    }\r\n\r\n    public get getHarvestName(): string {\r\n        return this.harvestName;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './material';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { MaterialServives } from '../../services';\r\n\r\nexport class Material extends BaseComponent {\r\n    public materialServives: MaterialServives;\r\n    private materialId: number;\r\n    private materialUUId: string;\r\n    private couponId: number;\r\n    private storageId: number;\r\n    private provider: string;\r\n    private providerAddress: string;\r\n    private quantity: number;\r\n    private unit: number;\r\n    private unitPrice: number;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.materialServives = new MaterialServives();\r\n        this.services = this.materialServives;\r\n    }\r\n\r\n    public set setMaterialId(materialId: number) {\r\n        this.materialId = materialId;\r\n    }\r\n\r\n    public set setMaterialUUId(materialUUId: string) {\r\n        this.materialUUId = materialUUId;\r\n    }\r\n\r\n    public set setCouponId(couponId: number) {\r\n        this.couponId = couponId;\r\n    }\r\n\r\n    public set setStorageId(storageId: number) {\r\n        this.storageId = storageId;\r\n    }\r\n\r\n    public set setProvider(provider: string) {\r\n        this.provider = provider;\r\n    }\r\n\r\n    public set setProviderAddress(providerAddress: string) {\r\n        this.providerAddress = providerAddress;\r\n    }\r\n\r\n    public set setQuantity(quantity: number) {\r\n        this.quantity = quantity;\r\n    }\r\n\r\n    public set setUnit(unit: number) {\r\n        this.unit = unit;\r\n    }\r\n\r\n    public set setUnitPrice(unitPrice: number) {\r\n        this.unitPrice = unitPrice;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setMaterial(\r\n        materialId: number,\r\n        materialUUId: string,\r\n        couponId: number,\r\n        storageId: number,\r\n        provider: string,\r\n        providerAddress: string,\r\n        quantity: number,\r\n        unit: number,\r\n        unitPrice: number,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setMaterialId = materialId;\r\n        this.setMaterialUUId = materialUUId;\r\n        this.setCouponId = couponId;\r\n        this.setStorageId = storageId;\r\n        this.setProvider = provider;\r\n        this.setProviderAddress = providerAddress;\r\n        this.setQuantity = quantity;\r\n        this.setUnit = unit;\r\n        this.setUnitPrice = unitPrice;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getMaterialId(): number {\r\n        return this.materialId;\r\n    }\r\n\r\n    public get getMaterialUUId(): string {\r\n        return this.materialUUId;\r\n    }\r\n\r\n    public get getCouponId(): number {\r\n        return this.couponId;\r\n    }\r\n\r\n    public get getStorageId(): number {\r\n        return this.storageId;\r\n    }\r\n\r\n    public get getProvider(): string {\r\n        return this.provider;\r\n    }\r\n\r\n    public get getProviderAddress(): string {\r\n        return this.providerAddress;\r\n    }\r\n\r\n    public get getQuantity(): number {\r\n        return this.quantity;\r\n    }\r\n\r\n    public get getUnit(): number {\r\n        return this.unit;\r\n    }\r\n\r\n    public get getUnitPrice(): number {\r\n        return this.unitPrice;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './pondEnvironment';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { PondEnvironmentsServices } from '../../services'; // import services\r\n\r\nexport class PondEnvironment extends BaseComponent {\r\n    public pondEnvironmentsServices: PondEnvironmentsServices;\r\n    private pondEnvironmentId: number;\r\n    private pondEnvironmentUUId: string;\r\n    private seasonAndPondId: number;\r\n    private oxyMorning: number;\r\n    private oxyAfternoon: number;\r\n    private phMorning: number;\r\n    private phAfternoon: number;\r\n    private transparent: number;\r\n    private salinity: number;\r\n    private h2s: number;\r\n    private nh3: number;\r\n    private bazo: number;\r\n    private createdBy: string;\r\n    private createdDate: Date;\r\n    private updatedBy: string;\r\n    private updatedDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.pondEnvironmentsServices = new PondEnvironmentsServices();\r\n        this.services = this.pondEnvironmentsServices;\r\n    }\r\n\r\n    public set setPondEnvironmentId(pondEnvironmentId: number) {\r\n        this.pondEnvironmentId = pondEnvironmentId;\r\n    }\r\n\r\n    public set setPondEnvironmentUUId(pondEnvironmentUUId: string) {\r\n        this.pondEnvironmentUUId = pondEnvironmentUUId;\r\n    }\r\n\r\n    public set setSeasonAndPondId(seasonAndPondId: number) {\r\n        this.seasonAndPondId = seasonAndPondId;\r\n    }\r\n\r\n    public set setOxyMorning(oxyMorning: number) {\r\n        this.oxyMorning = oxyMorning;\r\n    }\r\n\r\n    public set setOxyAfternoon(oxyAfternoon: number) {\r\n        this.oxyAfternoon = oxyAfternoon;\r\n    }\r\n\r\n    public set setPhMorning(phMorning: number) {\r\n        this.phMorning = phMorning;\r\n    }\r\n\r\n    public set setPhAfternoon(phAfternoon: number) {\r\n        this.phAfternoon = phAfternoon;\r\n    }\r\n\r\n    public set setTransparent(transparent: number) {\r\n        this.transparent = transparent;\r\n    }\r\n\r\n    public set setSalinity(salinity: number) {\r\n        this.salinity = salinity;\r\n    }\r\n\r\n    public set setH2s(h2s: number) {\r\n        this.h2s = h2s;\r\n    }\r\n\r\n    public set setNh3(nh3: number) {\r\n        this.nh3 = nh3;\r\n    }\r\n\r\n    public set setBazo(bazo: number) {\r\n        this.bazo = bazo;\r\n    }\r\n\r\n    public set setCreatedBy(createdBy: string) {\r\n        this.createdBy = createdBy;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setUpdatedBy(updatedBy: string) {\r\n        this.updatedBy = updatedBy;\r\n    }\r\n\r\n    public set setUpdatedDate(updatedDate: Date) {\r\n        this.updatedDate = updatedDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setPondenvironments(\r\n        pondEnvironmentId: number,\r\n        pondEnvironmentUUId: string,\r\n        seasonAndPondId: number,\r\n        oxyMorning: number,\r\n        oxyAfternoon: number,\r\n        phMorning: number,\r\n        phAfternoon: number,\r\n        transparent: number,\r\n        salinity: number,\r\n        h2s: number,\r\n        nh3: number,\r\n        bazo: number,\r\n        createdBy?: string,\r\n        createdDate?: Date,\r\n        updatedBy?: string,\r\n        updatedDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setPondEnvironmentId = pondEnvironmentId;\r\n        this.setPondEnvironmentUUId = pondEnvironmentUUId;\r\n        this.setSeasonAndPondId = seasonAndPondId;\r\n        this.setOxyMorning = oxyMorning;\r\n        this.setOxyAfternoon = oxyAfternoon;\r\n        this.setPhMorning = phMorning;\r\n        this.setPhAfternoon = phAfternoon;\r\n        this.setTransparent = transparent;\r\n        this.setSalinity = salinity;\r\n        this.setH2s = h2s;\r\n        this.setNh3 = nh3;\r\n        this.setBazo = bazo;\r\n        this.setCreatedBy = createdBy;\r\n        this.setCreatedDate = createdDate;\r\n        this.setUpdatedBy = updatedBy;\r\n        this.setUpdatedDate = updatedDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getPondEnvironmentId(): number {\r\n        return this.pondEnvironmentId;\r\n    }\r\n\r\n    public get getPondEnvironmentUUId(): string {\r\n        return this.pondEnvironmentUUId;\r\n    }\r\n\r\n    public get getSeasonAndPondId(): number {\r\n        return this.seasonAndPondId;\r\n    }\r\n\r\n    public get getOxyMorning(): number {\r\n        return this.oxyMorning;\r\n    }\r\n\r\n    public get getOxyAfternoon(): number {\r\n        return this.oxyAfternoon;\r\n    }\r\n\r\n    public get getPhMorning(): number {\r\n        return this.phMorning;\r\n    }\r\n\r\n    public get getPhAfternoon(): number {\r\n        return this.phAfternoon;\r\n    }\r\n\r\n    public get getTransparent(): number {\r\n        return this.transparent;\r\n    }\r\n\r\n    public get getSalinity(): number {\r\n        return this.salinity;\r\n    }\r\n\r\n    public get getH2s(): number {\r\n        return this.h2s;\r\n    }\r\n\r\n    public get getNh3(): number {\r\n        return this.nh3;\r\n    }\r\n\r\n    public get getBazo(): number {\r\n        return this.bazo;\r\n    }\r\n\r\n    public get getCreatedBy(): string {\r\n        return this.createdBy;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getUpdatedBy(): string {\r\n        return this.updatedBy;\r\n    }\r\n\r\n    public get getUpdatedDate(): Date {\r\n        return this.updatedDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './pondUserRole';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { PondUserRolesServices } from '../../services';\r\n\r\nexport class PondUserRole extends BaseComponent {\r\n    public pondUserRolesServices: PondUserRolesServices;\r\n    private pondUserRolesId: number;\r\n    private userId: number;\r\n    private pondId: number;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.pondUserRolesServices = new PondUserRolesServices();\r\n        this.services = this.pondUserRolesServices;\r\n    }\r\n\r\n    public set setPondUserRolesId(id: number) {\r\n        this.pondUserRolesId = id;\r\n    }\r\n\r\n    public set setUserId(userId: number) {\r\n        this.userId = userId;\r\n    }\r\n\r\n    public set setPondId(pondId: number) {\r\n        this.pondId = pondId;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setPondUserRoles(pondUserRolesId?: number, userId?: number, pondId?: number, createdDate?: Date, isDeleted?: number) {\r\n        this.setPondUserRolesId = pondUserRolesId;\r\n        this.setUserId = userId;\r\n        this.setPondId = pondId;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getPondUserRolesId(): number {\r\n        return this.pondUserRolesId;\r\n    }\r\n\r\n    public get getUserId(): number {\r\n        return this.userId;\r\n    }\r\n\r\n    public get getPondId(): number {\r\n        return this.pondId;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './pondDiary';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { PondDiaryServices } from '../../services'; // import services\r\n\r\nexport class PondDiary extends BaseComponent {\r\n    public pondDiaryServices: PondDiaryServices;\r\n    private pondDiaryId: number;\r\n    private pondDiaryUUId: string;\r\n    private seasonAndPondId: number;\r\n    private diaryName: string;\r\n    private fisheryQuantity: number;\r\n    private healthOfFishery: string;\r\n    private pondVolume: number;\r\n    private diedFishery: number;\r\n    private notes: string;\r\n    private createdBy?: string;\r\n    private createdDate?: Date;\r\n    private updatedBy?: string;\r\n    private updatedDate?: Date;\r\n    private isDeleted?: number;\r\n    constructor() {\r\n        super();\r\n        this.pondDiaryServices = new PondDiaryServices();\r\n        this.services = this.pondDiaryServices;\r\n    }\r\n\r\n    public set setPondDiaryId(pondDiaryId: number) {\r\n        this.pondDiaryId = pondDiaryId;\r\n    }\r\n\r\n    public set setPondDiaryUUId(pondDiaryUUId: string) {\r\n        this.pondDiaryUUId = pondDiaryUUId;\r\n    }\r\n\r\n    public set setSeasonAndPondId(seasonAndPondId: number) {\r\n        this.seasonAndPondId = seasonAndPondId;\r\n    }\r\n\r\n    public set setDiaryName(diaryName: string) {\r\n        this.diaryName = diaryName;\r\n    }\r\n\r\n    public set setFisheryQuantity(fisheryQuantity: number) {\r\n        this.fisheryQuantity = fisheryQuantity;\r\n    }\r\n\r\n    public set setHealthOfFishery(healthOfFishery: string) {\r\n        this.healthOfFishery = healthOfFishery;\r\n    }\r\n\r\n    public set setPondVolume(pondVolume: number) {\r\n        this.pondVolume = pondVolume;\r\n    }\r\n\r\n    public set setDiedFishery(diedFishery: number) {\r\n        this.diedFishery = diedFishery;\r\n    }\r\n\r\n    public set setNotes(notes: string) {\r\n        this.notes = notes;\r\n    }\r\n\r\n    public set setCreatedBy(createdBy: string) {\r\n        this.createdBy = createdBy;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setUpdatedBy(updatedBy: string) {\r\n        this.updatedBy = updatedBy;\r\n    }\r\n\r\n    public set setUpdatedDate(updatedDate: Date) {\r\n        this.updatedDate = updatedDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setPonddiary(\r\n        pondDiaryId: number,\r\n        pondDiaryUUId: string,\r\n        seasonAndPondId: number,\r\n        diaryName: string,\r\n        fisheryQuantity: number,\r\n        healthOfFishery: string,\r\n        pondVolume: number,\r\n        diedFishery: number,\r\n        notes: string,\r\n        createdBy?: string,\r\n        createdDate?: Date,\r\n        updatedBy?: string,\r\n        updatedDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setPondDiaryId = pondDiaryId;\r\n        this.setPondDiaryUUId = pondDiaryUUId;\r\n        this.setSeasonAndPondId= seasonAndPondId;\r\n        this.setDiaryName = diaryName;\r\n        this.setFisheryQuantity = fisheryQuantity;\r\n        this.setHealthOfFishery = healthOfFishery;\r\n        this.setPondVolume = pondVolume;\r\n        this.setDiedFishery = diedFishery;\r\n        this.setNotes = notes;\r\n        this.setCreatedBy = createdBy;\r\n        this.setCreatedDate = createdDate;\r\n        this.setUpdatedBy = updatedBy;\r\n        this.setUpdatedDate = updatedDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getPondDiaryId(): number {\r\n        return this.pondDiaryId;\r\n    }\r\n\r\n    public get getPondDiaryUUId(): string {\r\n        return this.pondDiaryUUId;\r\n    }\r\n\r\n    public get getSeasonAndPondId(): number {\r\n        return this.seasonAndPondId;\r\n    }\r\n\r\n    public get getDiaryName(): string {\r\n        return this.diaryName;\r\n    }\r\n\r\n    public get getFisheryQuantity(): number {\r\n        return this.fisheryQuantity;\r\n    }\r\n\r\n    public get getHealthOfFishery(): string {\r\n        return this.healthOfFishery;\r\n    }\r\n\r\n    public get getPondVolume(): number {\r\n        return this.pondVolume;\r\n    }\r\n\r\n    public get getDiedFishery(): number {\r\n        return this.diedFishery;\r\n    }\r\n\r\n    public get getNotes(): string {\r\n        return this.notes;\r\n    }\r\n\r\n    public get getPrimary(): object {\r\n        return {\r\n            pondDiaryId: this.getPondDiaryId\r\n        };\r\n    }\r\n\r\n    public get getCreatedBy(): string {\r\n        return this.createdBy;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getUpdatedBy(): string {\r\n        return this.updatedBy;\r\n    }\r\n\r\n    public get getUpdatedDate(): Date {\r\n        return this.updatedDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n\r\n    // public get getForgeinKey(): object {\r\n    //     return {\r\n    //         pondId: this.getPondId,\r\n    //         seasonId: this.getSeasonId\r\n    //     };\r\n    // }\r\n}\r\n","export * from './pondPrepare';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { PondPrepareServices } from '../../services'; // import services\r\n\r\nexport class PondPrepare extends BaseComponent {\r\n    public pondPrepareServices: PondPrepareServices;\r\n    private pondPrepareId: number;\r\n    private pondPrepareUUId: string;\r\n    private seasonAndPondId: number;\r\n    private pondprepareName: string;\r\n    private createdBy: string;\r\n    private createdDate: Date;\r\n    private updatedBy: string;\r\n    private updatedDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.pondPrepareServices = new PondPrepareServices();\r\n        this.services = this.pondPrepareServices;\r\n    }\r\n\r\n    public set setPondPrepareId(pondPrepareId: number) {\r\n        this.pondPrepareId = pondPrepareId;\r\n    }\r\n\r\n    public set setPondPrepareUUId(pondPrepareUUId: string) {\r\n        this.pondPrepareUUId = pondPrepareUUId;\r\n    }\r\n\r\n    public set setSeasonAndPondId(seasonAndPondId: number) {\r\n        this.seasonAndPondId = seasonAndPondId;\r\n    }\r\n\r\n    public set setPondprepareName(pondprepareName: string) {\r\n        this.pondprepareName = pondprepareName;\r\n    }\r\n\r\n    public set setCreatedBy(createdBy: string) {\r\n        this.createdBy = createdBy;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setUpdatedBy(updatedBy: string) {\r\n        this.updatedBy = updatedBy;\r\n    }\r\n\r\n    public set setUpdatedDate(updatedDate: Date) {\r\n        this.updatedDate = updatedDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setPondprepare(\r\n        pondPrepareId: number,\r\n        pondPrepareUUId: string,\r\n        seasonAndPondId: number,\r\n        pondprepareName: string,\r\n        createdBy?: string,\r\n        createdDate?: Date,\r\n        updatedBy?: string,\r\n        updatedDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setPondPrepareId = pondPrepareId;\r\n        this.setPondPrepareUUId = pondPrepareUUId;\r\n        this.setSeasonAndPondId = seasonAndPondId;\r\n        this.setPondprepareName = pondprepareName;\r\n        this.setCreatedBy = createdBy;\r\n        this.setCreatedDate = createdDate;\r\n        this.setUpdatedBy = updatedBy;\r\n        this.setUpdatedDate = updatedDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getPondPrepareId(): number {\r\n        return this.pondPrepareId;\r\n    }\r\n\r\n    public get getPondPrepareUUId(): string {\r\n        return this.pondPrepareUUId;\r\n    }\r\n\r\n    public get getSeasonAndPondId(): number {\r\n        return this.seasonAndPondId;\r\n    }\r\n\r\n    public get getPondprepareName(): string {\r\n        return this.pondprepareName;\r\n    }\r\n\r\n    public get getCreatedBy(): string {\r\n        return this.createdBy;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getUpdatedBy(): string {\r\n        return this.updatedBy;\r\n    }\r\n\r\n    public get getUpdatedDate(): Date {\r\n        return this.updatedDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n\r\n}\r\n","export * from './pondPrepareDetails';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { PondPrepareDetailsServices } from '../../services'; // import services\r\n\r\nexport class PondPrepareDetail extends BaseComponent {\r\n    public pondPrepareDetailsServices: PondPrepareDetailsServices;\r\n    private pondPrepareDetailId: number;\r\n    private pondPrepareDetailUUId: string;\r\n    private storageId: number;\r\n    private pondPrepareId: number;\r\n    private quantity: number;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.pondPrepareDetailsServices = new PondPrepareDetailsServices();\r\n        this.services = this.pondPrepareDetailsServices;\r\n    }\r\n\r\n    public set setPondPrepareDetailId(pondPrepareDetailId: number) {\r\n        this.pondPrepareDetailId = pondPrepareDetailId;\r\n    }\r\n\r\n    public set setPondPrepareDetailUUId(pondPrepareDetailUUId: string) {\r\n        this.pondPrepareDetailUUId = pondPrepareDetailUUId;\r\n    }\r\n\r\n    public set setPondPrepareId(pondPrepareId: number) {\r\n        this.pondPrepareId = pondPrepareId;\r\n    }\r\n\r\n    public set setStorageId(storageId: number) {\r\n        this.storageId = storageId;\r\n    }\r\n\r\n    public set setQuantity(quantity: number) {\r\n        this.quantity = quantity;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setPondpreparedetails(\r\n        pondPrepareDetailId: number,\r\n        pondPrepareDetailUUId: string,\r\n        pondPrepareId: number,\r\n        storageId: number,\r\n        quantity: number,\r\n        createdDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setPondPrepareDetailUUId = pondPrepareDetailUUId;\r\n        this.setPondPrepareId = pondPrepareId;\r\n        this.setStorageId = storageId;\r\n        this.setPondPrepareDetailId = pondPrepareDetailId;\r\n        this.setQuantity = quantity;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getPondPrepareDetailUUId(): string {\r\n        return this.pondPrepareDetailUUId;\r\n    }\r\n\r\n    public get getPondPrepareId(): number {\r\n        return this.pondPrepareId;\r\n    }\r\n\r\n    public get getMaterialId(): number {\r\n        return this.storageId;\r\n    }\r\n\r\n    public get getPondPrepareDetailId(): number {\r\n        return this.pondPrepareDetailId;\r\n    }\r\n\r\n    public get getQuantity(): number {\r\n        return this.quantity;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './pond';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { PondsServices } from '../../services';\r\n\r\nexport class Pond extends BaseComponent {\r\n    public pondsServices: PondsServices;\r\n    private pondId: number;\r\n    private pondUUId: string;\r\n    private userId: number;\r\n    private pondName: string;\r\n    private pondArea: number;\r\n    private pondDepth: number;\r\n    private createCost: number;\r\n    private pondCreatedDate: Date;\r\n    private status: number;\r\n    private isFed: number;\r\n    private isDiary: number;\r\n    private images: string;\r\n    private pondLatitude: number;\r\n    private pondLongitude: number;\r\n    private createdBy: string;\r\n    private createdDate: Date;\r\n    private updatedBy: string;\r\n    private updatedDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.pondsServices = new PondsServices();\r\n        this.services = this.pondsServices;\r\n    }\r\n\r\n    public set setPondId(pondId: number) {\r\n        this.pondId = pondId;\r\n    }\r\n\r\n    public set setPondUUId(pondUUId: string) {\r\n        this.pondUUId = pondUUId;\r\n    }\r\n\r\n    public set setUserId(userId: number) {\r\n        this.userId = userId;\r\n    }\r\n\r\n    public set setPondName(pondName: string) {\r\n        this.pondName = pondName;\r\n    }\r\n\r\n    public set setPondArea(pondArea: number) {\r\n        this.pondArea = pondArea;\r\n    }\r\n\r\n    public set setPondDepth(pondDepth: number) {\r\n        this.pondDepth = pondDepth;\r\n    }\r\n\r\n    public set setCreateCost(createCost: number) {\r\n        this.createCost = createCost;\r\n    }\r\n\r\n    public set setPondCreatedDate(pondCreatedDate: Date) {\r\n        this.pondCreatedDate = pondCreatedDate;\r\n    }\r\n\r\n    public set setStatus(status: number) {\r\n        this.status = status;\r\n    }\r\n\r\n    public set setIsFed(isFed: number) {\r\n        this.isFed = isFed;\r\n    }\r\n\r\n    public set setIsDiary(isDiary: number) {\r\n        this.isDiary = isDiary;\r\n    }\r\n\r\n    public set setImages(images: string) {\r\n        this.images = images;\r\n    }\r\n\r\n    public set setPondLatitude(pondLatitude: number) {\r\n        this.pondLatitude = pondLatitude;\r\n    }\r\n\r\n    public set setPondLongitude(pondLongitude: number) {\r\n        this.pondLongitude = pondLongitude;\r\n    }\r\n\r\n    public set setCreatedBy(createdBy: string) {\r\n        this.createdBy = createdBy;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setUpdatedBy(updatedBy: string) {\r\n        this.updatedBy = updatedBy;\r\n    }\r\n\r\n    public set setUpdatedDate(updatedDate: Date) {\r\n        this.updatedDate = updatedDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setPond(\r\n        pondId: number,\r\n        pondUUId: string,\r\n        userId: number,\r\n        pondName: string,\r\n        pondArea: number,\r\n        pondDepth: number,\r\n        createCost: number,\r\n        pondCreatedDate: Date,\r\n        status: number,\r\n        isFed: number,\r\n        isDiary: number,\r\n        images: string,\r\n        pondLatitude?: number,\r\n        pondLongitude?: number,\r\n        createdBy?: string,\r\n        createdDate?: Date,\r\n        updatedBy?: string,\r\n        updatedDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setPondId = pondId;\r\n        this.setPondUUId = pondUUId;\r\n        this.setUserId = userId;\r\n        this.setPondName = pondName;\r\n        this.setPondArea = pondArea;\r\n        this.setPondDepth = pondDepth;\r\n        this.setCreateCost = createCost;\r\n        this.setStatus = status || status === 0 ? status * 1 : null;\r\n        this.setIsFed = isFed;\r\n        this.setIsDiary = isDiary;\r\n        this.setImages = images;\r\n        this.setPondLatitude = pondLatitude;\r\n        this.setPondLongitude = pondLongitude;\r\n        this.setPondCreatedDate = pondCreatedDate;\r\n        this.setCreatedBy = createdBy;\r\n        this.setCreatedDate = createdDate;\r\n        this.setUpdatedBy = updatedBy;\r\n        this.setUpdatedDate = updatedDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getPondId(): number {\r\n        return this.pondId;\r\n    }\r\n\r\n    public get getPondUUId(): string {\r\n        return this.pondUUId;\r\n    }\r\n\r\n    public get getUserId(): number {\r\n        return this.userId;\r\n    }\r\n\r\n    public get getPondName(): string {\r\n        return this.pondName;\r\n    }\r\n\r\n    public get getPondArea(): number {\r\n        return this.pondArea;\r\n    }\r\n\r\n    public get getPondDepth(): number {\r\n        return this.pondDepth;\r\n    }\r\n\r\n    public get getCreateCost(): number {\r\n        return this.createCost;\r\n    }\r\n\r\n    public get getStatus(): Date {\r\n        return this.pondCreatedDate;\r\n    }\r\n\r\n    public get getIsFed(): number {\r\n        return this.status;\r\n    }\r\n\r\n    public get getIsDiary(): number {\r\n        return this.isFed;\r\n    }\r\n\r\n    public get getImages(): number {\r\n        return this.isDiary;\r\n    }\r\n\r\n    public get getPondLatitude(): string {\r\n        return this.images;\r\n    }\r\n\r\n    public get getPondLongitude(): number {\r\n        return this.pondLatitude;\r\n    }\r\n\r\n    public get getPondCreatedDate(): number {\r\n        return this.pondLongitude;\r\n    }\r\n\r\n    public get getCreatedBy(): string {\r\n        return this.createdBy;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getUpdatedBy(): string {\r\n        return this.updatedBy;\r\n    }\r\n\r\n    public get getUpdatedDate(): Date {\r\n        return this.updatedDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './price';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { PricesServices } from '../../services'; // import services\r\n\r\nexport class Price extends BaseComponent {\r\n    public pricesServices: PricesServices;\r\n    private priceId: number;\r\n    private priceUUId: string;\r\n    private seasonId: number;\r\n    private totalCost: number;\r\n    private totalProfit: number;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.pricesServices = new PricesServices();\r\n        this.services = this.pricesServices;\r\n    }\r\n\r\n    public set setPriceId(priceId: number) {\r\n        this.priceId = priceId;\r\n    }\r\n\r\n    public set setPriceUUId(priceUUId: string) {\r\n        this.priceUUId = priceUUId;\r\n    }\r\n\r\n    public set setSeasonId(seasonId: number) {\r\n        this.seasonId = seasonId;\r\n    }\r\n\r\n    public set setTotalCost(totalCost: number) {\r\n        this.totalCost = totalCost;\r\n    }\r\n\r\n    public set setTotalProfit(totalProfit: number) {\r\n        this.totalProfit = totalProfit;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setPrices(\r\n        priceId: number,\r\n        priceUUId: string,\r\n        seasonId: number,\r\n        totalCost: number,\r\n        totalProfit: number,\r\n        createdDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setPriceId = priceId;\r\n        this.setPriceUUId = priceUUId;\r\n        this.setSeasonId = seasonId;\r\n        this.setTotalCost = totalCost;\r\n        this.setTotalProfit = totalProfit;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getPriceId(): number {\r\n        return this.priceId;\r\n    }\r\n\r\n    public get getPriceUUId(): string {\r\n        return this.priceUUId;\r\n    }\r\n\r\n    public get getSeasonId(): number {\r\n        return this.seasonId;\r\n    }\r\n\r\n    public get getTotalCost(): number {\r\n        return this.totalCost;\r\n    }\r\n\r\n    public get getTotalProfit(): number {\r\n        return this.totalProfit;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { ProvinceServices } from '../../services';\r\n\r\nexport class Province extends BaseComponent {\r\n    public provinceServices: ProvinceServices;\r\n    private provinceid: string;\r\n    private name: string;\r\n    private type: string;\r\n\r\n    constructor() {\r\n        super();\r\n        this.provinceServices = new ProvinceServices();\r\n    }\r\n\r\n    public set setProvinceid(provinceid: string) {\r\n        this.provinceid = provinceid;\r\n    }\r\n\r\n    public set setName(name: string) {\r\n        this.name = name;\r\n    }\r\n\r\n    public set setType(type: string) {\r\n        this.type = type;\r\n    }\r\n\r\n    public setProvince(provinceid: string, name: string, type: string) {\r\n        this.setProvinceid = provinceid;\r\n        this.setName = name;\r\n        this.setType = type;\r\n    }\r\n\r\n    public get getProvinceid(): string {\r\n        return this.provinceid;\r\n    }\r\n\r\n    public get getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    public get getType(): string {\r\n        return this.type;\r\n    }\r\n\r\n    getAllProvince(): Promise<Province[]> {\r\n        return  new Promise((resolve, reject) => {\r\n            this.provinceServices.getAll(null).then((res: any[])  => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './season';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { SeasonServices } from '../../services'; // import services\r\n\r\nexport class Season extends BaseComponent {\r\n    public seasonServices: SeasonServices;\r\n    private seasonId: number;\r\n    private seasonUUId: string;\r\n    private userId: number;\r\n    private seasonName: string;\r\n    private status: number;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n\r\n    constructor() {\r\n        super();\r\n        this.seasonServices = new SeasonServices();\r\n        this.services = this.seasonServices;\r\n    }\r\n\r\n    public set setSeasonId(seasonId: number) {\r\n        this.seasonId = seasonId;\r\n    }\r\n\r\n    public set setSeasonUUId(seasonUUId: string) {\r\n        this.seasonUUId = seasonUUId;\r\n    }\r\n\r\n    public set setUserId(userId: number) {\r\n        this.userId = userId;\r\n    }\r\n\r\n    public set setSeasonName(seasonName: string) {\r\n        this.seasonName = seasonName;\r\n    }\r\n\r\n    public set setStatus(status: number) {\r\n        this.status = status;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setSeason(\r\n        seasonId: number,\r\n        seasonUUId: string,\r\n        userId: number,\r\n        seasonName: string,\r\n        status: number,\r\n        createdDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setSeasonId = seasonId;\r\n        this.setSeasonUUId = seasonUUId;\r\n        this.setUserId = userId;\r\n        this.setSeasonName = seasonName;\r\n        this.setStatus = status;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getSeasonId(): number {\r\n        return this.seasonId;\r\n    }\r\n\r\n    public get getSeasonUUId(): string {\r\n        return this.seasonUUId;\r\n    }\r\n\r\n    public get getUserId(): number {\r\n        return this.userId;\r\n    }\r\n\r\n    public get getSeasonName(): string {\r\n        return this.seasonName;\r\n    }\r\n\r\n    public get getStatus(): number {\r\n        return this.status;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n\r\n    public get getPrimary(): any {\r\n        return {\r\n            seasonId: this.seasonId\r\n        };\r\n    }\r\n}\r\n","export * from './seasonsAndPond';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { SeasonAndPondServices } from '../../services'; // import services\r\n\r\nexport class SeasonsAndPond extends BaseComponent {\r\n    public seasonAndPondServices: SeasonAndPondServices;\r\n    private seasonAndPondId: number;\r\n    private seasonId: number;\r\n    private pondId: number;\r\n\r\n    constructor() {\r\n        super();\r\n        this.seasonAndPondServices = new SeasonAndPondServices();\r\n        this.services = this.seasonAndPondServices;\r\n    }\r\n\r\n    public set setSeasonAndPondId(seasonAndPondId: number) {\r\n        this.seasonAndPondId = seasonAndPondId;\r\n    }\r\n\r\n    public set setSeasonId(seasonId: number) {\r\n        this.seasonId = seasonId;\r\n    }\r\n\r\n    public set setPondId(pondId: number) {\r\n        this.pondId = pondId;\r\n    }\r\n\r\n    public setSeasonsAndPond(\r\n        seasonAndPondId: number,\r\n        seasonId: number,\r\n        pondId: number,\r\n    ) {\r\n        this.setSeasonAndPondId = seasonAndPondId;\r\n        this.setSeasonId= seasonId;\r\n        this.setPondId = pondId;\r\n    }\r\n\r\n    public get getSeasonAndPondId(): number {\r\n        return this.seasonAndPondId;\r\n    }\r\n\r\n    public get getSeasonId(): number {\r\n        return this.seasonId;\r\n    }\r\n\r\n    public get getPondId(): number {\r\n        return this.pondId;\r\n    }\r\n}\r\n","export * from './stocking';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { StockingServices } from '../../services'; // import services\r\n\r\nexport class Stocking extends BaseComponent {\r\n    public stockingServices: StockingServices;\r\n    private stockingId: number;\r\n    private stockingUUId: string;\r\n    private seasonAndPondId: number;\r\n    private notes: string;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.stockingServices = new StockingServices();\r\n        this.services = this.stockingServices;\r\n    }\r\n\r\n    public set setStockingId(stockingId: number) {\r\n        this.stockingId = stockingId;\r\n    }\r\n\r\n    public set setStockingUUId(stockingUUId: string) {\r\n        this.stockingUUId = stockingUUId;\r\n    }\r\n\r\n    public set setSeasonAndPondId(seasonAndPondId: number) {\r\n        this.seasonAndPondId = seasonAndPondId;\r\n    }\r\n\r\n    public set setNotes(notes: string) {\r\n        this.notes = notes;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setStocking(\r\n        stockingId: number,\r\n        stockingUUId: string,\r\n        seasonAndPondId: number,\r\n        notes: string,\r\n        createdDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setStockingId = stockingId;\r\n        this.setStockingUUId = stockingUUId;\r\n        this.setSeasonAndPondId = seasonAndPondId;\r\n        this.setNotes = notes;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getStockingId(): number {\r\n        return this.stockingId;\r\n    }\r\n\r\n    public get getStockingUUId(): string {\r\n        return this.stockingUUId;\r\n    }\r\n\r\n    public get getSeasonAndPondId(): number {\r\n        return this.seasonAndPondId;\r\n    }\r\n\r\n    public get getNotes(): string {\r\n        return this.notes;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './stockingDetail';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { StockingDetailsServices } from '../../services'; // import services\r\n\r\nexport class StockingDetail extends BaseComponent {\r\n    public stockingDetailsServices: StockingDetailsServices;\r\n    private stockingDetailUUId: string;\r\n    private breedId: number;\r\n    private stockingId: number;\r\n    private stockingQuantity: number;\r\n    private phFirst: number;\r\n    private salinityFirst: number;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.stockingDetailsServices = new StockingDetailsServices();\r\n        this.services = this.stockingDetailsServices;\r\n    }\r\n\r\n    public set setStockingDetailUUId(stockingDetailUUId: string) {\r\n        this.stockingDetailUUId = stockingDetailUUId;\r\n    }\r\n\r\n    public set setBreedId(breedId: number) {\r\n        this.breedId = breedId;\r\n    }\r\n\r\n    public set setStockingId(stockingId: number) {\r\n        this.stockingId = stockingId;\r\n    }\r\n\r\n    public set setStockingQuantity(stockingQuantity: number) {\r\n        this.stockingQuantity = stockingQuantity;\r\n    }\r\n\r\n    public set setPhFirst(phFirst: number) {\r\n        this.phFirst = phFirst;\r\n    }\r\n\r\n    public set setSalinityFirst(salinityFirst: number) {\r\n        this.salinityFirst = salinityFirst;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setStockingdetails(\r\n        stockingDetailUUId: string,\r\n        breedId: number,\r\n        stockingId: number,\r\n        stockingQuantity: number,\r\n        phFirst?: number,\r\n        salinityFirst?: number,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setStockingDetailUUId = stockingDetailUUId;\r\n        this.setBreedId = breedId;\r\n        this.setStockingId = stockingId;\r\n        this.setStockingQuantity = stockingQuantity;\r\n        this.setPhFirst = phFirst;\r\n        this.setSalinityFirst = salinityFirst;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getStockingDetailUUId(): string {\r\n        return this.stockingDetailUUId;\r\n    }\r\n\r\n    public get getBreedId(): number {\r\n        return this.breedId;\r\n    }\r\n\r\n    public get getStockingId(): number {\r\n        return this.stockingId;\r\n    }\r\n\r\n    public get getStockingQuantity(): number {\r\n        return this.stockingQuantity;\r\n    }\r\n\r\n    public get getPhFirst(): number {\r\n        return this.phFirst;\r\n    }\r\n\r\n    public get getSalinityFirst(): number {\r\n        return this.salinityFirst;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './storage';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { StoregeServices } from '../../services';\r\n\r\nexport class Storage extends BaseComponent {\r\n    public storegeServices: StoregeServices;\r\n    private storageId: number;\r\n    private storageUUId: string;\r\n    private ownerId: number;\r\n    private productName: string;\r\n    private quantityStorages: number;\r\n    private unit: number;\r\n    private type: number;\r\n    private descriptions: string;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.storegeServices = new StoregeServices();\r\n        this.services = this.storegeServices;\r\n    }\r\n\r\n    public set setStorageId(storageId: number) {\r\n        this.storageId = storageId;\r\n    }\r\n\r\n    public set setStorageUUId(storageUUId: string) {\r\n        this.storageUUId = storageUUId;\r\n    }\r\n\r\n    public set setOwnerId(userId: number) {\r\n        this.ownerId = userId;\r\n    }\r\n\r\n    public set setProductName(productName: string) {\r\n        this.productName = productName;\r\n    }\r\n\r\n    public set setQuantityStorages(quantityStorages: number) {\r\n        this.quantityStorages = quantityStorages;\r\n    }\r\n\r\n    public set setUnit(unit: number) {\r\n        this.unit = unit;\r\n    }\r\n\r\n    public set setType(type: number) {\r\n        this.type = type;\r\n    }\r\n\r\n    public set setDescriptions(descriptions: string) {\r\n        this.descriptions = descriptions;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setStorages(\r\n        storageId: number,\r\n        storageUUId: string,\r\n        ownerId: number,\r\n        productName: string,\r\n        quantityStorages: number,\r\n        unit: number,\r\n        type: number,\r\n        descriptions: string,\r\n        createdDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setStorageId = storageId;\r\n        this.setStorageUUId = storageUUId;\r\n        this.setOwnerId = ownerId;\r\n        this.setProductName = productName;\r\n        this.setQuantityStorages = quantityStorages;\r\n        this.setUnit = unit;\r\n        this.setType = type;\r\n        this.setDescriptions = descriptions;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getStorageId(): number {\r\n        return this.storageId;\r\n    }\r\n\r\n    public get getStorageUUId(): string {\r\n        return this.storageUUId;\r\n    }\r\n\r\n    public get getOwnerId(): number {\r\n        return this.ownerId;\r\n    }\r\n\r\n    public get getProductName(): string {\r\n        return this.productName;\r\n    }\r\n\r\n    public get getQuantityStorages(): number {\r\n        return this.quantityStorages;\r\n    }\r\n\r\n    public get getUnit(): number {\r\n        return this.unit;\r\n    }\r\n\r\n    public get getType(): number {\r\n        return this.type;\r\n    }\r\n\r\n    public get getDescriptions(): string {\r\n        return this.descriptions;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './storageOwner';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { StoregeOwnwerServices } from '../../services'; // import services\r\n\r\nexport class OwnerStorage extends BaseComponent {\r\n    public storegeOwnwerServices: StoregeOwnwerServices;\r\n    private storageOwnerId: number;\r\n    private userId: number;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.storegeOwnwerServices = new StoregeOwnwerServices();\r\n        this.services = this.storegeOwnwerServices;\r\n    }\r\n\r\n    public set setStorageOwnerId(storageOwnerId: number) {\r\n        this.storageOwnerId = storageOwnerId;\r\n    }\r\n\r\n    public set setUserId(userId: number) {\r\n        this.userId = userId;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setOwnerStorages(\r\n        storageOwnerId: number,\r\n        userId: number,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setStorageOwnerId = storageOwnerId;\r\n        this.setUserId = userId;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getStorageOwnerId(): number {\r\n        return this.storageOwnerId;\r\n    }\r\n\r\n    public get getUserId(): number {\r\n        return this.userId;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './takeCare';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { TakeCareServices } from '../../services'; // import services\r\n\r\nexport class TakeCare extends BaseComponent {\r\n    public takeCareServices: TakeCareServices;\r\n    private takeCareId: number;\r\n    private takeCareUUId: string;\r\n    private seasonAndPondId: number;\r\n    private type: number;\r\n    private takeCareName: string;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.takeCareServices = new TakeCareServices();\r\n        this.services = this.takeCareServices;\r\n    }\r\n\r\n    public set setTakeCareId(takeCareId: number) {\r\n        this.takeCareId = takeCareId;\r\n    }\r\n\r\n    public set setTakeCareUUId(takeCareUUId: string) {\r\n        this.takeCareUUId = takeCareUUId;\r\n    }\r\n\r\n    public set setSeasonAndPondId(seasonAndPondId: number) {\r\n        this.seasonAndPondId = seasonAndPondId;\r\n    }\r\n\r\n    public set setTakeType(type: number) {\r\n        this.type = type;\r\n    }\r\n\r\n    public set setTakeCareName(takeCareName: string) {\r\n        this.takeCareName = takeCareName;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setTakecare(\r\n        takeCareId: number,\r\n        takeCareUUId: string,\r\n        seasonAndPondId: number,\r\n        type: number,\r\n        takeCareName?: string,\r\n        createdDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setTakeCareId = takeCareId;\r\n        this.setTakeCareUUId = takeCareUUId;\r\n        this.setSeasonAndPondId= seasonAndPondId;\r\n        this.setTakeType = type;\r\n        this.setTakeCareName = takeCareName;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getTakeCareId(): number {\r\n        return this.takeCareId;\r\n    }\r\n\r\n    public get getTakeCareUUId(): string {\r\n        return this.takeCareUUId;\r\n    }\r\n\r\n    public get getSeasonAndPondId(): number {\r\n        return this.seasonAndPondId;\r\n    }\r\n\r\n    public get getTakeCareName(): string {\r\n        return this.takeCareName;\r\n    }\r\n\r\n    public get getTakeType(): number {\r\n        return this.type;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './userRole';\r\n","import { UserRolesServices } from '../../services';\r\nimport { BaseComponent } from '../baseComponents';\r\n\r\nexport class UserRole extends BaseComponent {\r\n    public userRolesServices: UserRolesServices;\r\n    private rolesId: number;\r\n    private bossId: number;\r\n    private userId: number;\r\n    private roles: number;\r\n    private createdDate: Date;\r\n    private updatedBy: string;\r\n    private isDeleted: number;\r\n\r\n    public constructor() {\r\n        super();\r\n        this.userRolesServices = new UserRolesServices();\r\n        this.services = this.userRolesServices;\r\n    }\r\n\r\n    public set setRolesId(rolesId: number) {\r\n        this.rolesId = rolesId;\r\n    }\r\n\r\n    public set setBossId(bossId: number) {\r\n        this.bossId = bossId;\r\n    }\r\n\r\n    public set setUserId(userId: number) {\r\n        this.userId = userId;\r\n    }\r\n\r\n    public set setRoles(roles: number) {\r\n        this.roles = roles;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setUpdatedBy(updatedBy: string) {\r\n        this.updatedBy = updatedBy;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setUserRoles(\r\n        rolesId: number,\r\n        bossId: number,\r\n        userId: number,\r\n        roles: number,\r\n        createdDate?: Date,\r\n        updatedBy?: string,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setRolesId = rolesId;\r\n        this.setBossId = bossId;\r\n        this.setUserId = userId;\r\n        this.setRoles = roles;\r\n        this.setCreatedDate = createdDate;\r\n        this.setUpdatedBy = updatedBy;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getRolesId(): number {\r\n        return this.rolesId;\r\n    }\r\n\r\n    public get getBossId(): number {\r\n        return this.bossId;\r\n    }\r\n\r\n    public get getUserId(): number {\r\n        return this.userId;\r\n    }\r\n\r\n    public get getRoles(): number {\r\n        return this.roles;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getUpdatedBy(): string {\r\n        return this.updatedBy;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './user';\r\n","import { Enscrypts } from '../../lib/';\r\nimport { UserServives } from '../../services';\r\nimport { BaseComponent } from '../baseComponents';\r\nimport { Promise } from '../../lib';\r\n\r\nexport class User extends BaseComponent {\r\n    public userServices: UserServives;\r\n    private userId: number;\r\n    private userUUId: string;\r\n    private firstname: string;\r\n    private lastname: string;\r\n    private birthday: Date;\r\n    private addressContact: string;\r\n    private username: string;\r\n    private password: string;\r\n    private town: string;\r\n    private district: string;\r\n    private province: string;\r\n    private status: number;\r\n    private phone: string;\r\n    private email: string;\r\n    private images: string;\r\n    private createdBy: string;\r\n    private createdDate: Date;\r\n    private updatedBy: string;\r\n    private updatedDate: Date;\r\n    private isDeleted: number;\r\n\r\n    constructor() {\r\n        super();\r\n        this.userServices = new UserServives();\r\n        this.services = this.userServices;\r\n        this.primary = {\r\n            username: this.getUsername\r\n        };\r\n        this.foreignKey = [\r\n\r\n        ];\r\n    }\r\n\r\n    public set setUserId(userId: number) {\r\n        this.userId = userId;\r\n    }\r\n\r\n    public set setUserUUId(userUUId: string) {\r\n        this.userUUId = userUUId;\r\n    }\r\n\r\n    public set setFirstname(firstname: string) {\r\n        this.firstname = firstname;\r\n    }\r\n\r\n    public set setLastname(lastname: string) {\r\n        this.lastname = lastname;\r\n    }\r\n\r\n    public set setUsername(username: string) {\r\n        this.username = username ? username.toLowerCase().trim() : username;\r\n    }\r\n\r\n    public set setPassword(password: string) {\r\n        this.password = password;\r\n    }\r\n\r\n    public set setBirthday(birthday: Date) {\r\n        this.birthday = birthday;\r\n    }\r\n\r\n    public set setEmail(email: string) {\r\n        this.email = email;\r\n    }\r\n\r\n    public set setPhone(phone: string) {\r\n        this.phone = phone;\r\n    }\r\n\r\n    public set setAddressContact(addressContact: string) {\r\n        this.addressContact = addressContact;\r\n    }\r\n\r\n    public set setTown(town: string) {\r\n        this.town = town;\r\n    }\r\n\r\n    public set setDistrict(district: string) {\r\n        this.district = district;\r\n    }\r\n\r\n    public set setProvince(province: string) {\r\n        this.province = province;\r\n    }\r\n\r\n    public set setStatus(status: number) {\r\n        this.status = status;\r\n    }\r\n\r\n    public set setImages(images: string) {\r\n        this.images = images;\r\n    }\r\n\r\n    public set setCreatedBy(createdBy: string) {\r\n        this.createdBy = createdBy;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setUpdatedBy(updatedBy: string) {\r\n        this.updatedBy = updatedBy;\r\n    }\r\n\r\n    public set setUpdatedDate(updatedDate: Date) {\r\n        this.updatedDate = updatedDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setUser(\r\n        userId: number,\r\n        userUUId: string,\r\n        firstname: string,\r\n        lastname: string,\r\n        username: string,\r\n        password: string,\r\n        birthday?: Date,\r\n        email?: string,\r\n        phone?: string,\r\n        addressContact?: string,\r\n        town?: string,\r\n        district?: string,\r\n        province?: string,\r\n        status?: number,\r\n        images?: string,\r\n        createdBy?: string,\r\n        createdDate?: Date,\r\n        updatedBy?: string,\r\n        updatedDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setUserId = userId;\r\n        this.setUserUUId = userUUId;\r\n        this.setFirstname = firstname;\r\n        this.setLastname = lastname;\r\n        this.setUsername = username;\r\n        this.setPassword = password;\r\n        this.setBirthday = birthday;\r\n        this.setEmail = email;\r\n        this.setPhone = phone;\r\n        this.setAddressContact = addressContact;\r\n        this.setTown = town;\r\n        this.setDistrict = district;\r\n        this.setProvince = province;\r\n        this.setStatus = status;\r\n        this.setImages = images;\r\n        this.setCreatedBy = createdBy;\r\n        this.setCreatedDate = createdDate;\r\n        this.setUpdatedBy = updatedBy;\r\n        this.setUpdatedDate = updatedDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getUserId() {\r\n        return this.userId;\r\n    }\r\n\r\n    public get getUserUUId() {\r\n        return this.userUUId;\r\n    }\r\n\r\n    public get getFirstname() {\r\n        return this.firstname;\r\n    }\r\n\r\n    public get getLastname() {\r\n        return this.lastname;\r\n    }\r\n\r\n    public get getUsername() {\r\n        return this.username;\r\n    }\r\n\r\n    public get getPassword() {\r\n        return this.password;\r\n    }\r\n\r\n    public get getBirthday() {\r\n        return this.birthday;\r\n    }\r\n\r\n    public get getEmail() {\r\n        return this.email;\r\n    }\r\n\r\n    public get getPhone() {\r\n        return this.phone;\r\n    }\r\n\r\n    public get getAddressContact() {\r\n        return this.addressContact;\r\n    }\r\n\r\n    public get getTown() {\r\n        return this.town;\r\n    }\r\n\r\n    public get getDistrict() {\r\n        return this.district;\r\n    }\r\n\r\n    public get getProvince() {\r\n        return this.province;\r\n    }\r\n\r\n    public get getStatus() {\r\n        return this.status;\r\n    }\r\n\r\n    public get getImages() {\r\n        return this.images;\r\n    }\r\n\r\n    public get getCreatedBy() {\r\n        return this.createdBy;\r\n    }\r\n\r\n    public get getCreatedDate() {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getUpdatedBy() {\r\n        return this.updatedBy;\r\n    }\r\n\r\n    public get getUpdatedDate() {\r\n        return this.updatedDate;\r\n    }\r\n\r\n    public get getIsDeleted() {\r\n        return this.isDeleted;\r\n    }\r\n\r\n    public register(): Promise<User> {\r\n        return new Promise((resolve, reject) => {\r\n            Enscrypts.getSalt(Math.floor((Math.random() * 12) + 1)).then(salt => {\r\n                Enscrypts.hashing(this.password, salt).then(hash => {\r\n                    this.setPassword = hash;\r\n                    this.userServices.register(this).then(res => {\r\n                        resolve(res);\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    public login(): Promise<User> {\r\n        return new Promise((resolve, reject) => {\r\n            this.userServices.getUserByUsername(this).then((user$: User) => {\r\n                resolve(user$);\r\n            });\r\n        });\r\n    }\r\n\r\n    public updateMyProfile(): Promise<User> {\r\n        return new Promise((resolve, reject) => {\r\n            this.userServices.update(this.getFields(this)).then(res => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n\r\n    public changePassword(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            Enscrypts.getSalt(Math.floor((Math.random() * 12) + 1)).then((salt: string) => {\r\n                Enscrypts.hashing(this.password, salt).then((hash: string) => {\r\n                    this.password = hash;\r\n                    this.userServices.update(this.getFields(this)).then((res: any) => {\r\n                        resolve(res);\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    public hashPassword = (pass: string): string => {\r\n        const salt = Enscrypts.getSaltSync(Math.floor((Math.random() * 12) + 1));\r\n        return Enscrypts.hashingSync(pass, salt);\r\n    }\r\n}\r\n","export * from './usingFood';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { UsingFoodsServices } from '../../services'; // import services\r\n\r\nexport class UsingFood extends BaseComponent {\r\n    public usingFoodsServices: UsingFoodsServices;\r\n    private usingFoodId: number;\r\n    private usingFoodUUId: string;\r\n    private takeCareId: number;\r\n    private storageId: number;\r\n    private massOfFishery: number;\r\n    private feedingRate: number;\r\n    private totalFood: number;\r\n    private createdBy: string;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.usingFoodsServices = new UsingFoodsServices();\r\n        this.services = this.usingFoodsServices;\r\n    }\r\n\r\n    public set setUsingFoodId(usingFoodId: number) {\r\n        this.usingFoodId = usingFoodId;\r\n    }\r\n\r\n    public set setUsingFoodUUId(usingFoodUUId: string) {\r\n        this.usingFoodUUId = usingFoodUUId;\r\n    }\r\n\r\n    public set setStorageId(storageId: number) {\r\n        this.storageId = storageId;\r\n    }\r\n\r\n    public set setTakeCareId(takeCareId: number) {\r\n        this.takeCareId = takeCareId;\r\n    }\r\n\r\n    public set setMassOfFishery(massOfFishery: number) {\r\n        this.massOfFishery = massOfFishery;\r\n    }\r\n\r\n    public set setFeedingRate(feedingRate: number) {\r\n        this.feedingRate = feedingRate;\r\n    }\r\n\r\n    public set setTotalFood(totalFood: number) {\r\n        this.totalFood = totalFood;\r\n    }\r\n\r\n    public set setCreatedBy(createdBy: string) {\r\n        this.createdBy = createdBy;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setUsingFoods(\r\n        usingFoodId: number,\r\n        usingFoodUUId: string,\r\n        storageId: number,\r\n        takeCareId: number,\r\n        massOfFishery: number,\r\n        feedingRate: number,\r\n        totalFood: number,\r\n        createdBy?: string,\r\n        createdDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setUsingFoodId = usingFoodId;\r\n        this.setUsingFoodUUId = usingFoodUUId;\r\n        this.setTakeCareId = takeCareId;\r\n        this.setStorageId = storageId;\r\n        this.setMassOfFishery = massOfFishery;\r\n        this.setFeedingRate = feedingRate;\r\n        this.setTotalFood = totalFood;\r\n        this.setCreatedBy = createdBy;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getUsingFoodId(): number {\r\n        return this.usingFoodId;\r\n    }\r\n\r\n    public get getUsingFoodUUId(): string {\r\n        return this.usingFoodUUId;\r\n    }\r\n\r\n    public get getStorageId(): number {\r\n        return this.storageId;\r\n    }\r\n\r\n    public get getTakeCareId(): number {\r\n        return this.takeCareId;\r\n    }\r\n\r\n    public get getMassOfFishery(): number {\r\n        return this.massOfFishery;\r\n    }\r\n\r\n    public get getFeedingRate(): number {\r\n        return this.feedingRate;\r\n    }\r\n\r\n    public get getTotalFood(): number {\r\n        return this.totalFood;\r\n    }\r\n\r\n    public get getCreatedBy(): string {\r\n        return this.createdBy;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","export * from './usingVeterinary';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { UsingVeterinaryServices } from '../../services';\r\n\r\nexport class UsingVeterinary extends BaseComponent {\r\n    public usingVeterinaryServices: UsingVeterinaryServices;\r\n    private usingVeterinaryId: number;\r\n    private usingVeterinaryUUId: string;\r\n    private takeCareId: number;\r\n    private storageId: number;\r\n    private causesNSymptoms: string;\r\n    private averageSize: number;\r\n    private totalBiomass: number;\r\n    private quantity: number;\r\n    private result: string;\r\n    private latestHarvestDate: number;\r\n    private mentor: string;\r\n    private createdBy: string;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.usingVeterinaryServices = new UsingVeterinaryServices();\r\n        this.services = this.usingVeterinaryServices;\r\n    }\r\n\r\n    public set setUsingVeterinaryId(usingVeterinaryId: number) {\r\n        this.usingVeterinaryId = usingVeterinaryId;\r\n    }\r\n\r\n    public set setUsingVeterinaryUUId(usingVeterinaryUUId: string) {\r\n        this.usingVeterinaryUUId = usingVeterinaryUUId;\r\n    }\r\n\r\n    public set setTakeCareId(takeCareId: number) {\r\n        this.takeCareId = takeCareId;\r\n    }\r\n\r\n    public set setStorageId(storageId: number) {\r\n        this.storageId = storageId;\r\n    }\r\n\r\n    public set setCausesNSymptoms(causesNSymptoms: string) {\r\n        this.causesNSymptoms = causesNSymptoms;\r\n    }\r\n\r\n    public set setAverageSize(averageSize: number) {\r\n        this.averageSize = averageSize;\r\n    }\r\n\r\n    public set setTotalBiomass(totalBiomass: number) {\r\n        this.totalBiomass = totalBiomass;\r\n    }\r\n\r\n    public set setQuantity(quantity: number) {\r\n        this.quantity = quantity;\r\n    }\r\n\r\n    public set setResult(result: string) {\r\n        this.result = result;\r\n    }\r\n\r\n    public set setLatestHarvestDate(latestHarvestDate: number) {\r\n        this.latestHarvestDate = latestHarvestDate;\r\n    }\r\n\r\n    public set setMentor(mentor: string) {\r\n        this.mentor = mentor;\r\n    }\r\n\r\n    public set setCreatedBy(createdBy: string) {\r\n        this.createdBy = createdBy;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setUsingveterinary(\r\n        usingVeterinaryId: number,\r\n        usingVeterinaryUUId: string,\r\n        takeCareId: number,\r\n        storageId: number,\r\n        causesNSymptoms: string,\r\n        averageSize: number,\r\n        totalBiomass: number,\r\n        quantity: number,\r\n        result: string,\r\n        latestHarvestDate: number,\r\n        mentor: string,\r\n        createdBy?: string,\r\n        createdDate?: Date,\r\n        isDeleted?: number\r\n    ) {\r\n        this.setUsingVeterinaryId = usingVeterinaryId;\r\n        this.setUsingVeterinaryUUId = usingVeterinaryUUId;\r\n        this.setStorageId = storageId;\r\n        this.setTakeCareId = takeCareId;\r\n        this.setCausesNSymptoms = causesNSymptoms;\r\n        this.setAverageSize = averageSize;\r\n        this.setTotalBiomass = totalBiomass;\r\n        this.setQuantity = quantity;\r\n        this.setResult = result;\r\n        this.setLatestHarvestDate = latestHarvestDate;\r\n        this.setMentor = mentor;\r\n        this.setCreatedBy = createdBy;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getUsingVeterinaryId(): number {\r\n        return this.usingVeterinaryId;\r\n    }\r\n\r\n    public get getUsingVeterinaryUUId(): string {\r\n        return this.usingVeterinaryUUId;\r\n    }\r\n\r\n    public get getTakeCareId(): number {\r\n        return this.takeCareId;\r\n    }\r\n\r\n    public get getStorageId(): number {\r\n        return this.storageId;\r\n    }\r\n\r\n    public get getCausesNSymptoms(): string {\r\n        return this.causesNSymptoms;\r\n    }\r\n\r\n    public get getAverageSize(): number {\r\n        return this.averageSize;\r\n    }\r\n\r\n    public get getTotalBiomass(): number {\r\n        return this.totalBiomass;\r\n    }\r\n\r\n    public get getQuantity(): number {\r\n        return this.quantity;\r\n    }\r\n\r\n    public get getResult(): string {\r\n        return this.result;\r\n    }\r\n\r\n    public get getLatestHarvestDate(): number {\r\n        return this.latestHarvestDate;\r\n    }\r\n\r\n    public get getMentor(): string {\r\n        return this.mentor;\r\n    }\r\n\r\n    public get getCreatedBy(): string {\r\n        return this.createdBy;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { WardServices } from '../../services';\r\n\r\nexport class Ward extends BaseComponent {\r\n    public wardServices: WardServices;\r\n    private wardid: string;\r\n    private name: string;\r\n    private type: string;\r\n    private location: string;\r\n    private districtid: string;\r\n\r\n    constructor() {\r\n        super();\r\n        this.wardServices = new WardServices();\r\n    }\r\n\r\n    public set setWardid(wardid: string) {\r\n        this.wardid = wardid;\r\n    }\r\n\r\n    public set setName(name: string) {\r\n        this.name = name;\r\n    }\r\n\r\n    public set setType(type: string) {\r\n        this.type = type;\r\n    }\r\n\r\n    public set setLocation(location: string) {\r\n        this.location = location;\r\n    }\r\n\r\n    public set setDistrictid(districtid: string) {\r\n        this.districtid = districtid;\r\n    }\r\n\r\n    public get getWardid(): string {\r\n        return this.wardid;\r\n    }\r\n\r\n    public get getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    public get getType(): string {\r\n        return this.type;\r\n    }\r\n\r\n    public get getLocation(): string {\r\n        return this.location;\r\n    }\r\n\r\n    public get getDistrictid(): string {\r\n        return this.districtid;\r\n    }\r\n\r\n    getAllWard(): Promise<Ward[]> {\r\n        return  new Promise((resolve, reject) => {\r\n            this.wardServices.getAll().then((res: any[])  => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n\r\n    getDistrictByDistrictId(disId): Promise<Ward[]> {\r\n        return  new Promise((resolve, reject) => {\r\n            this.wardServices.getByDistrictId(disId).then((res: any[])  => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './incurreds';\r\n","import { BaseComponent } from '../baseComponents';\r\nimport { IncurredsServices } from '../../services';\r\n\r\nexport class Incurred extends BaseComponent {\r\n    public incurredsServices: IncurredsServices;\r\n    private incurredId: number;\r\n    private incurredUUId: string;\r\n    private pondPrepareId: number;\r\n    private ownerId: number;\r\n    private incurredName: string;\r\n    private value: number;\r\n    private notes: string;\r\n    private createdDate: Date;\r\n    private isDeleted: number;\r\n    constructor() {\r\n        super();\r\n        this.incurredsServices = new IncurredsServices();\r\n        this.services = this.incurredsServices;\r\n    }\r\n\r\n    public set setIncurredId(incurredId: number) {\r\n        this.incurredId = incurredId;\r\n    }\r\n\r\n    public set setIncurredUUId(incurredUUId: string) {\r\n        this.incurredUUId = incurredUUId;\r\n    }\r\n\r\n    public set setPondPrepareId(pondPrepareId: number) {\r\n        this.pondPrepareId = pondPrepareId;\r\n    }\r\n\r\n    public set setOwnerId(ownerId: number) {\r\n        this.ownerId = ownerId;\r\n    }\r\n\r\n    public set setIncurredName(incurredName: string) {\r\n        this.incurredName = incurredName;\r\n    }\r\n\r\n    public set setValue(value: number) {\r\n        this.value = value;\r\n    }\r\n\r\n    public set setNotes(notes: string) {\r\n        this.notes = notes;\r\n    }\r\n\r\n    public set setCreatedDate(createdDate: Date) {\r\n        this.createdDate = createdDate;\r\n    }\r\n\r\n    public set setIsDeleted(isDeleted: number) {\r\n        this.isDeleted = isDeleted;\r\n    }\r\n\r\n    public setIncurred(\r\n        incurredId: number,\r\n        incurredUUId: string,\r\n        pondPrepareId: number,\r\n        ownerId: number,\r\n        incurredName: string,\r\n        value: number,\r\n        notes: string,\r\n        createdDate?: Date,\r\n        isDeleted?: number,\r\n    ) {\r\n        this.setIncurredId = incurredId;\r\n        this.setIncurredUUId = incurredUUId;\r\n        this.setPondPrepareId = pondPrepareId;\r\n        this.setOwnerId = ownerId;\r\n        this.setIncurredName = incurredName;\r\n        this.setValue = value;\r\n        this.setNotes = notes;\r\n        this.setCreatedDate = createdDate;\r\n        this.setIsDeleted = isDeleted;\r\n    }\r\n\r\n    public get getIncurredId(): number {\r\n        return this.incurredId;\r\n    }\r\n\r\n    public get getIncurredUUId(): string {\r\n        return this.incurredUUId;\r\n    }\r\n\r\n    public get getPondPrepareId(): number {\r\n        return this.pondPrepareId;\r\n    }\r\n\r\n    public get getOwnerId(): number {\r\n        return this.ownerId;\r\n    }\r\n\r\n    public get getIncurredName(): string {\r\n        return this.incurredName;\r\n    }\r\n\r\n    public get getValue(): number {\r\n        return this.value;\r\n    }\r\n\r\n    public get getNotes(): string {\r\n        return this.notes;\r\n    }\r\n\r\n    public get getCreatedDate(): Date {\r\n        return this.createdDate;\r\n    }\r\n\r\n    public get getIsDeleted(): number {\r\n        return this.isDeleted;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { boughtbreeddetailsOptions } from '../models/objects';\r\n\r\nexport class BoughtBreedDetailsServives extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = boughtbreeddetailsOptions;\r\n    constructor() {\r\n        super(BoughtBreedDetailsServives.optionsModel);\r\n        this.models = this.conn.boughtbreeddetailsModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { boughtbreedOptions } from '../models/objects';\r\n\r\nexport class BoughtBreedServives extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = boughtbreedOptions;\r\n    constructor() {\r\n        super(BoughtBreedServives.optionsModel);\r\n        this.models = this.conn.boughtbreedsModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { breedOptions } from '../models/objects';\r\n\r\nexport class BreedServives extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = breedOptions;\r\n    constructor() {\r\n        super(BreedServives.optionsModel);\r\n        this.models = this.conn.breedsModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { ownerBreedOptions } from '../models/objects';\r\n\r\nexport class BreedOwnwerServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = ownerBreedOptions;\r\n    constructor() {\r\n        super(BreedOwnwerServices.optionsModel);\r\n        this.models = this.conn.breedOwnerModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { costsOptions } from '../models/objects';\r\n\r\nexport class CostsServives extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = costsOptions;\r\n    constructor() {\r\n        super(CostsServives.optionsModel);\r\n        this.models = this.conn.costsModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { couponOptions } from '../models/objects';\r\n\r\nexport class CouponServives extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = couponOptions;\r\n    constructor() {\r\n        super(CouponServives.optionsModel);\r\n        this.models = this.conn.couponModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { diedfisherysOptions } from '../models/objects';\r\n\r\nexport class DiedFisherysServives extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = diedfisherysOptions;\r\n    constructor() {\r\n        super(DiedFisherysServives.optionsModel);\r\n        this.models = this.conn.diedfisherysModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { districtOptions } from '../models/objects';\r\n\r\nexport class DistrictServives extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = districtOptions;\r\n    constructor() {\r\n        super(DistrictServives.optionsModel);\r\n        this.models = this.conn.districtModel;\r\n    }\r\n\r\n    getByProviceId(id): Promise<any[]> {\r\n        return new Promise((resolve, reject) => {\r\n            this.models.findAll({\r\n                where: {\r\n                    provinceid: id\r\n                }\r\n            }).then((res: any) => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { growthOptions } from '../models/objects';\r\n\r\nexport class GrowthsServives extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = growthOptions;\r\n    constructor() {\r\n        super(GrowthsServives.optionsModel);\r\n        this.models = this.conn.growthsModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { harvestdetailOptions } from '../models/objects';\r\n\r\nexport class HarvestDetailsServives extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = harvestdetailOptions;\r\n    constructor() {\r\n        super(HarvestDetailsServives.optionsModel);\r\n        this.models = this.conn.harvestdetailsModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { harvestOptions } from '../models/objects';\r\n\r\nexport class HarvestsServives extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = harvestOptions;\r\n    constructor() {\r\n        super(HarvestsServives.optionsModel);\r\n        this.models = this.conn.harvestModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { materialOptions } from '../models/objects';\r\n\r\nexport class MaterialServives extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = materialOptions;\r\n    constructor() {\r\n        super(MaterialServives.optionsModel);\r\n        this.models = this.conn.materialModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { ponddiaryOptions } from '../models/objects';\r\n\r\nexport class PondDiaryServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = ponddiaryOptions;\r\n    constructor() {\r\n        super(PondDiaryServices.optionsModel);\r\n        this.models = this.conn.ponddiaryModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { pondenvironmentsOptions } from '../models/objects';\r\n\r\nexport class PondEnvironmentsServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = pondenvironmentsOptions;\r\n    constructor() {\r\n        super(PondEnvironmentsServices.optionsModel);\r\n        this.models = this.conn.pondenvironmentsModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { pondpreparedetailOptions } from '../models/objects';\r\n\r\nexport class PondPrepareDetailsServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = pondpreparedetailOptions;\r\n    constructor() {\r\n        super(PondPrepareDetailsServices.optionsModel);\r\n        this.models = this.conn.pondpreparedetailsModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { pondprepareOptions } from '../models/objects';\r\n\r\nexport class PondPrepareServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = pondprepareOptions;\r\n    constructor() {\r\n        super(PondPrepareServices.optionsModel);\r\n        this.models = this.conn.pondprepareModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { pondOptions } from '../models/objects';\r\nimport { UserRolesServices, PondUserRolesServices, UserServives } from './';\r\nimport { ActionAssociateDatabase } from '../common';\r\nimport { Promise } from '../lib';\r\nimport { Sequelize, Transaction } from 'sequelize';\r\nimport DBHelper from '../helpers/db-helpers';\r\nimport { UserRole, PondUserRole } from '../components';\r\n\r\nexport class PondsServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = pondOptions;\r\n    private userRolesServices: UserRolesServices = new UserRolesServices();\r\n    private pondUserRolesServices: PondUserRolesServices = new PondUserRolesServices();\r\n    private userServives: UserServives = new UserServives();\r\n    constructor() {\r\n        super(PondsServices.optionsModel);\r\n        this.models = this.conn.pondsModel;\r\n    }\r\n\r\n    insert(entity: any): Promise<any> {\r\n        const sequeliz: Sequelize = DBHelper.sequelize;\r\n        return new Promise((resolve, reject) => {\r\n            sequeliz.transaction({autocommit: false},(t: Transaction) => {\r\n                return this.models.create(entity.pond);\r\n            }).then((pond: any) => {\r\n                if(pond) {\r\n                    const pondUserRole: PondUserRole = new PondUserRole();\r\n                    pondUserRole.setUserId = entity.userId;\r\n                    pondUserRole.setPondId = pond.pondId;\r\n                    return pondUserRole.pondUserRolesServices.models.create(pondUserRole);\r\n                }\r\n            }).then((roles: any) => {\r\n                if(roles) {\r\n                    resolve(roles);\r\n                }\r\n            }).catch(e => {\r\n                return resolve(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    get(entity: any): Promise<any> {\r\n        const sequeliz: Sequelize = DBHelper.sequelize;\r\n        return new Promise((resolve, reject) => {\r\n            sequeliz.transaction({autocommit: false},(t: Transaction) => {\r\n                return (new UserRole()).userRolesServices.models.findOne({\r\n                    where: {\r\n                        userId: entity.userId,\r\n                        [this.Op.and]: {\r\n                            [this.Op.or]: [\r\n                                {roles: 0},\r\n                                {roles: 1}\r\n                            ]\r\n                        }\r\n                    }\r\n                });\r\n            }).then((roles) => {\r\n                if(roles) {\r\n                    return this.models.findAll({\r\n                        include: [\r\n                            {\r\n                                model: this.pondUserRolesServices.models,\r\n                                as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                                where: {\r\n                                    userId: entity.userId\r\n                                }\r\n                            }\r\n                        ]\r\n                    });\r\n                } else {\r\n                    resolve({\r\n                        success: false,\r\n                        message: 'Bạn không có quyền truy cập API này.'\r\n                    });\r\n                }\r\n            }).then((ponds: any) => {\r\n                if(ponds) {\r\n                    resolve({\r\n                        success: true,\r\n                        ponds\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    getById(pondId: number, userId?: number): Promise<any> {\r\n        const sequeliz: Sequelize = DBHelper.sequelize;\r\n        return new Promise((resolve, reject) => {\r\n            sequeliz.transaction({autocommit: false},(t: Transaction) => {\r\n                return (new UserRole()).userRolesServices.models.findOne({\r\n                    where: {\r\n                        userId,\r\n                        [this.Op.and]: {\r\n                            [this.Op.or]: [\r\n                                {roles: 0},\r\n                                {roles: 1}\r\n                            ]\r\n                        }\r\n                    }\r\n                });\r\n            }).then((roles) => {\r\n                if(roles) {\r\n                    return this.models.findOne({\r\n                        include: [\r\n                            {\r\n                                model: this.pondUserRolesServices.models,\r\n                                as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                                where: {\r\n                                    userId\r\n                                }\r\n                            }\r\n                        ],\r\n                        where: {\r\n                            pondId\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    resolve({\r\n                        success: false,\r\n                        message: 'Bạn không có quyền truy cập API này.'\r\n                    });\r\n                }\r\n            }).then((pond: any) => {\r\n                if(pond) {\r\n                    resolve({\r\n                        success: true,\r\n                        pond\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    getQuery(criteria: any): any {\r\n        return {\r\n            include: [\r\n                {\r\n                    model: (this.models as any).sequelize.models.pondUserRoles,\r\n                    as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                    where: criteria\r\n                }\r\n            ]\r\n        };\r\n    }\r\n\r\n    test = (): Promise<any> => {\r\n        const md = this.models;\r\n        return new Promise((resolve, reject) => {\r\n            const query: any = {\r\n                include: [\r\n                    {\r\n                        model: this.pondUserRolesServices.models,\r\n                        as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                        attributes: ['rolesId', 'pondId'],\r\n                        required: true,\r\n                        include: [\r\n                            {\r\n                                model: this.userRolesServices.models,\r\n                                as: ActionAssociateDatabase.POND_USER_ROLE_2_USER,\r\n                                include: [\r\n                                    {\r\n                                        model: (this.models as any).sequelize.models.users,\r\n                                        as: ActionAssociateDatabase.USER_ROLES_2_USER,\r\n                                        where: {\r\n                                            userId: 103\r\n                                        }\r\n                                    }\r\n                                ],\r\n                                where: {\r\n                                    [this.Op.or]: [\r\n                                        {\r\n                                            roles: 0\r\n                                        },\r\n                                        {\r\n                                            roles: 1\r\n                                        }\r\n                                    ]\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            };\r\n            this.models.findAll(query).then(res => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n\r\n    testAll = (): Promise<any> => {\r\n        return new Promise((resolve, reject) => {\r\n            this.models.findOne({\r\n                order: [\r\n                    ['createdDate', 'DESC']\r\n                ]\r\n            }).then(res => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { pricesOptions } from '../models/objects';\r\n\r\nexport class PricesServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = pricesOptions;\r\n    constructor() {\r\n        super(PricesServices.optionsModel);\r\n        this.models = this.conn.pricesModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { provinceOptions } from '../models/objects';\r\n\r\nexport class ProvinceServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = provinceOptions;\r\n    constructor() {\r\n        super(ProvinceServices.optionsModel);\r\n        this.models = this.conn.provinceModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { ponduserrolesOptions } from '../models/objects';\r\n\r\nexport class PondUserRolesServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = ponduserrolesOptions;\r\n    constructor() {\r\n        super(PondUserRolesServices.optionsModel);\r\n        this.models = this.conn.ponduserrolesModel ;\r\n    }\r\n    testpr = (): Promise<any> => {\r\n        return new Promise((resolve, reject) => {\r\n            const query: any = {\r\n                include: [\r\n                    {\r\n                        model: (this.models as any).sequelize.models.userroles,\r\n                        // as: 'userroles'\r\n                        limit: 1\r\n                    }\r\n                ]\r\n            };\r\n            this.models.findAll(query).then(res => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { seasonOptions } from '../models/objects';\r\nimport { Promise } from '../lib';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport class SeasonServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = seasonOptions;\r\n    constructor() {\r\n        super(SeasonServices.optionsModel);\r\n        this.models = this.conn.seasonModel;\r\n    }\r\n\r\n    // getAll(options: any, criteria: any): Promise<any[]> {\r\n    //     return new Promise((resolve,reject) => {\r\n    //         const where: any = {\r\n    //             userId: criteria.userId\r\n    //         };\r\n    //         const query: any = { ...options, where };\r\n    //         this.models.findAll(query).then(res => {\r\n    //             resolve(res);\r\n    //         });\r\n    //     });\r\n    // }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { stockingdetailOptions } from '../models/objects';\r\n\r\nexport class StockingDetailsServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = stockingdetailOptions;\r\n    constructor() {\r\n        super(StockingDetailsServices.optionsModel);\r\n        this.models = this.conn.stockingdetailsModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { stockingOptions } from '../models/objects';\r\n\r\nexport class StockingServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = stockingOptions;\r\n    constructor() {\r\n        super(StockingServices.optionsModel);\r\n        this.models = this.conn.stockingModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { storagesOptions } from '../models/objects';\r\n\r\nexport class StoregeServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = storagesOptions;\r\n    constructor() {\r\n        super(StoregeServices.optionsModel);\r\n        this.models = this.conn.storagesModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { storageOwnerOptions } from '../models/objects';\r\n\r\nexport class StoregeOwnwerServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = storageOwnerOptions;\r\n    constructor() {\r\n        super(StoregeOwnwerServices.optionsModel);\r\n        this.models = this.conn.ownerStoragesModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { takecareOptions } from '../models/objects';\r\n\r\nexport class TakeCareServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = takecareOptions;\r\n    constructor() {\r\n        super(TakeCareServices.optionsModel);\r\n        this.models = this.conn.takecareModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { userrolesOptions } from '../models/objects';\r\nimport { ActionAssociateDatabase } from '../common';\r\n\r\nexport class UserRolesServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = userrolesOptions;\r\n    constructor() {\r\n        super(UserRolesServices.optionsModel);\r\n        this.models = this.conn.userRolesModel;\r\n    }\r\n\r\n    testUserAssociate = (): Promise<any> => {\r\n        return new Promise((resolve, reject) => {\r\n            const query: any = {\r\n                include: [\r\n                    {\r\n                        model: (this.models as any).sequelize.models.users,\r\n                        as: ActionAssociateDatabase.USER_ROLES_2_USER\r\n                    }\r\n                ]\r\n            };\r\n            this.models.findAll(query).then(res => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n\r\n    getQuery(criteria: any): any {\r\n        return {\r\n            where: criteria\r\n        };\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { usingfoodOptions } from '../models/objects';\r\n\r\nexport class UsingFoodsServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = usingfoodOptions;\r\n    constructor(\r\n    ) {\r\n        super(UsingFoodsServices.optionsModel);\r\n        this.models = this.conn.usingfoodsModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { usingveterinaryOptions } from '../models/objects';\r\n\r\nexport class UsingVeterinaryServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = usingveterinaryOptions;\r\n    constructor() {\r\n        super(UsingVeterinaryServices.optionsModel);\r\n        this.models = this.conn.usingVeterinaryModel;\r\n\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { wardOptions } from '../models/objects';\r\nimport { Promise } from '../lib';\r\n\r\nexport class WardServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = wardOptions;\r\n    constructor() {\r\n        super(WardServices.optionsModel);\r\n        this.models = this.conn.wardModel;\r\n    }\r\n\r\n    getAll(): Promise<any[]> {\r\n        return new Promise((resolve, reject) => {\r\n            this.models.findAll({\r\n                offset: 0,\r\n                limit: 50\r\n            }).then((obj: any) => {\r\n                resolve(obj);\r\n            });\r\n        });\r\n    }\r\n\r\n    getByDistrictId(id): Promise<any[]> {\r\n        return new Promise((resolve, reject) => {\r\n            this.models.findAll({\r\n                where: {\r\n                    districtid: id\r\n                }\r\n            }).then((obj: any) => {\r\n                resolve(obj);\r\n            });\r\n        });\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { seasonAndPondOptions } from '../models/objects';\r\n\r\nexport class SeasonAndPondServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = seasonAndPondOptions;\r\n    constructor() {\r\n        super(SeasonAndPondServices.optionsModel);\r\n        this.models = this.conn.seasonAndPondModel;\r\n    }\r\n}\r\n","import { BaseServices } from './base.services';\r\nimport { IOptionsModelDB } from '../interfaces';\r\nimport { incurredsOptions } from '../models/objects';\r\n\r\nexport class IncurredsServices extends BaseServices {\r\n    protected static optionsModel: IOptionsModelDB = incurredsOptions;\r\n    constructor() {\r\n        super(IncurredsServices.optionsModel);\r\n        this.models = this.conn.incurredModel;\r\n    }\r\n}\r\n","// Unique ID creation requires a high quality random # generator.  In node.js\n// this is pretty straight-forward - we use the crypto API.\n\nvar crypto = require('crypto');\n\nmodule.exports = function nodeRNG() {\n  return crypto.randomBytes(16);\n};\n","module.exports = require(\"crypto\");","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([bth[buf[i++]], bth[buf[i++]], \n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]]]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","export * from './upload.route';\r\n","import { NextFunction, Request, Response } from 'express';\r\nimport { logger } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { GoogleDrive } from '../../googleAPI/drive.google';\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class UploadRoute extends BaseRoute {\r\n    public static path = '/uploads';\r\n    private static instance: UploadRoute;\r\n    /**\r\n     * @class UploadRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!UploadRoute.instance) {\r\n            UploadRoute.instance = new UploadRoute();\r\n        }\r\n        return UploadRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[UploadRoute] Creating upload route.');\r\n\r\n        // add route\r\n        this.router.post('/image', GoogleDrive.upload);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, UploadRoute.path);\r\n    }\r\n}\r\n","export * from './getFile.route';\r\n","import { logger } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { GoogleDrive } from '../../googleAPI/drive.google';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class GetFileRoute extends BaseRoute {\r\n    public static path = '/getFile';\r\n    private static instance: GetFileRoute;\r\n    /**\r\n     * @class GetFileRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!GetFileRoute.instance) {\r\n            GetFileRoute.instance = new GetFileRoute();\r\n        }\r\n        return GetFileRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[GetFileRoute] Creating get file route.');\r\n\r\n        // add route\r\n        this.router.get('/image/:fileId', GoogleDrive.getFile);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, GetFileRoute.path);\r\n    }\r\n}\r\n","export * from './province.route';\r\n","import { Request, Response } from 'express';\r\nimport { logger } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { Province } from '../../components/province';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class ProvinceRoute extends BaseRoute {\r\n    public static path = '/province';\r\n    private static instance: ProvinceRoute;\r\n    /**\r\n     * @class ProvinceRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!ProvinceRoute.instance) {\r\n            ProvinceRoute.instance = new ProvinceRoute();\r\n        }\r\n        return ProvinceRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[ProvinceRoute] Creating province route.');\r\n\r\n        // add route\r\n        this.router.get('/', this.getAllProvince);\r\n\r\n        // log endpoint\r\n        this.logEndpoints(this.router, ProvinceRoute.path);\r\n    }\r\n\r\n    private getAllProvince = async (request: Request, response: Response) => {\r\n        const province = new Province();\r\n        province.getAllProvince().then((res: any[]) => {\r\n            response.status(200).json(res);\r\n        });\r\n    }\r\n}\r\n","export * from './district.route';\r\n","import { Request, Response } from 'express';\r\nimport { logger } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { District } from '../../components/district';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class DistrictRoute extends BaseRoute {\r\n    public static path = '/district';\r\n    private static instance: DistrictRoute;\r\n    /**\r\n     * @class DistrictRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!DistrictRoute.instance) {\r\n            DistrictRoute.instance = new DistrictRoute();\r\n        }\r\n        return DistrictRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[DistrictRoute] Creating district route.');\r\n\r\n        // add route\r\n        this.router.get('/', this.getAllDistrict);\r\n\r\n        // log enpoint\r\n        this.logEndpoints(this.router, DistrictRoute.path);\r\n    }\r\n\r\n    private getAllDistrict = async (request: Request, response: Response) => {\r\n        const district = new District();\r\n        if (!request.headers.provinceid) {\r\n            district.getAllDistrict().then((res: any[]) => {\r\n                response.status(200).json(res);\r\n            });\r\n        } else {\r\n            district.getDistrictByProvinceId(request.headers.provinceid).then((res: any[]) => {\r\n                response.status(200).json(res);\r\n            });\r\n        }\r\n    }\r\n}\r\n","export * from './ward.route';\r\n","import { Request, Response } from 'express';\r\nimport { logger } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { Ward } from '../../components/ward';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class WardRoute extends BaseRoute {\r\n    public static path = '/ward';\r\n    private static instance: WardRoute;\r\n    /**\r\n     * @class WardRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!WardRoute.instance) {\r\n            WardRoute.instance = new WardRoute();\r\n        }\r\n        return WardRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[WardRoute] Creating ward route.');\r\n\r\n        // add route\r\n        this.router.get('/', this.getAllWard);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, WardRoute.path);\r\n    }\r\n\r\n    private getAllWard = async (request: Request, response: Response) => {\r\n        const ward = new Ward();\r\n        if (!request.headers.districtid) {\r\n            ward.getAllWard().then((res: any[]) => {\r\n                response.status(200).json(res);\r\n            });\r\n        } else {\r\n            ward.getDistrictByDistrictId(request.headers.districtid).then((res: any[]) => {\r\n                response.status(200).json(res);\r\n            });\r\n        }\r\n    }\r\n}\r\n","export * from './ponds.route';\r\n","import { Pond } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, UserServives, UserRolesServices, PondUserRolesServices, SeasonServices, PondsServices, SeasonAndPondServices } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { defaultImage, ActionAssociateDatabase } from '../../common';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { GoogleDrive } from '../../googleAPI/drive.google';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { Transaction, FindOptions } from 'sequelize';\r\nimport { addPondSchema } from '../../schemas';\r\nimport { DateUtil } from '../../lib';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class PondRoute extends BaseRoute {\r\n    public static path = '/ponds';\r\n    private static instance: PondRoute;\r\n    private userServives: UserServives = new UserServives();\r\n    private userRolesServices: UserRolesServices = new UserRolesServices();\r\n    private pondUserRolesServices: PondUserRolesServices = new PondUserRolesServices();\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private pondsServices: PondsServices = new PondsServices();\r\n    private seasonAndPondServices: SeasonAndPondServices = new SeasonAndPondServices();\r\n\r\n    /**\r\n     * @class PondRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!PondRoute.instance) {\r\n            PondRoute.instance = new PondRoute();\r\n        }\r\n        return PondRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[PondRoute] Creating pond route.');\r\n\r\n        // add route\r\n        this.router.get('/gets', Authentication.isLogin, this.getPonds); // get ponds\r\n        this.router.get('/get/:pondUUId', Authentication.isLogin, this.getPondByPondUUId);  // get với UUID\r\n        // this.router.get('/gets/withoutImage', Authentication.isLogin, this.getPondWithoutImages); // get all kèm với quyền - không hình [bỏ]\r\n        // this.router.get('/gets/employees', Authentication.isLogin, this.getEmployeePondRoles); // get nhân viên theo ao [không sử dụng]\r\n        // this.router.get('/gets/advanced', Authentication.isLogin, this.getPondAdvanceds); // [gộp vào gets]\r\n        // this.router.get('/gets/season/:seasonUUId', Authentication.isLogin, this.getPondBySeasonUUId); // get ao theo vụ nuôi với seasonUUId\r\n        this.router.get('/gets/boss', Authentication.isLogin, this.getPondOfBoss);\r\n        this.router.post('/add', Authentication.isLogin, this.addPond); // Thêm ao\r\n        // this.router.post('/gets/seasonUUId', Authentication.isLogin, this.getPostPondBySeasonUUId); // get ao theo vụ nuôi [nên đổi về phương thức get]\r\n        // this.router.post('/count', Authentication.isLogin, this.countPond); // đếm ao của user - [tích hwjp vào gets]\r\n        // this.router.post('/seasons/count', Authentication.isLogin, this.countSeasonWithPond); // nên tích hợp vào get pond\r\n        this.router.post('/get/notin/seasonAndPond', Authentication.isLogin, this.getPondNotInSeasonAndPond); // get số ao không có trong vụ [to GET]\r\n        this.router.post('/gets/ownerSeason/WithImage', Authentication.isLogin, this.getPondByOwnerSeasonWithImage); // /** Xem xét */get ao của người dùng hiện tại có hình ảnh\r\n        this.router.post('/gets/notEmployee', Authentication.isLogin, this.getPondWithUserNotManage); // Xem xét\r\n        this.router.post('/gets/not/manage', Authentication.isLogin, this.getPondWithoutManager); // Xem xét\r\n        this.router.put('/update', Authentication.isLogin, this.updatePondWithUUId); // Cập nhật [Ok]\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, PondRoute.path);\r\n    }\r\n\r\n    private addPond = async (request: any, response: Response, next: NextFunction) => {\r\n        const validate: any = this.validator(addPondSchema);\r\n        const dataCheck: any = {\r\n            pondName: request.body.pondName,\r\n            createCost: request.body.createCost - 0,\r\n            pondArea: request.body.pondArea - 0,\r\n            pondCreatedDate: new Date(request.body.pondCreatedDate).toJSON(),\r\n            pondDepth: request.body.pondDepth - 0,\r\n            pondLatitude: (request.body.pondLatitude - 0) || null,\r\n            pondLongitude: (request.body.pondLongitude - 0) || null,\r\n            status: request.body.status - 0\r\n        };\r\n        const validater: boolean = validate(dataCheck);\r\n        if(validater) {\r\n            const pond: Pond = new Pond();\r\n            const token: string = request.headers.authorization.split(' ')[1];\r\n            const deToken: any = Authentication.detoken(token);\r\n            const { pondName, pondCreatedDate, pondArea, pondDepth, createCost, pondLatitude, pondLongitude, status } = request.body;\r\n            if(pondCreatedDate > DateUtil.getNow()) {\r\n                return response.status(200).json({\r\n                    success: false,\r\n                    message: 'Ngày tạo ao không thể lớn hơn ngày hiện tại.'\r\n                });\r\n            } else {\r\n                if (request.files) {\r\n                    GoogleDrive.upload(request, response, next).then((data: any) => {\r\n                        if (data.fileId) {\r\n                            pond.setPond(null, uuidv4(), deToken.userId, pondName, pondArea, pondDepth, createCost, pondCreatedDate, status, status === 1 ? 1 : 0, status === 1 ? 1 : 0, data.fileId, pondLatitude !== '' ? pondLatitude : undefined, pondLongitude !== '' ? pondLongitude : undefined);\r\n                            pond.pondsServices.models.create(pond).then((pond$: Pond) => {\r\n                                response.status(200).json({\r\n                                    success: true,\r\n                                    message: 'Thêm ao mới thành công.'\r\n                                });\r\n                            }).catch(e => {\r\n                                response.status(200).json({\r\n                                    success: false,\r\n                                    message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n                                });\r\n                            });\r\n                        } else {\r\n                            response.status(200).json({\r\n                                success: false,\r\n                                message: 'Đã có lỗi xảy ra, xin vui lòng thử lại!'\r\n                            });\r\n                        }\r\n                    });\r\n                } else {\r\n                    pond.setPond(null, uuidv4(), deToken.userId, pondName, pondArea, pondDepth, createCost, pondCreatedDate, status, status === 1 ? 1 : 0, status === 1 ? 1 : 0, defaultImage.pondImage, pondLatitude !== '' ? pondLatitude : undefined, pondLongitude !== '' ? pondLongitude : undefined);\r\n                    pond.pondsServices.models.create(pond).then((pond$: Pond) => {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: 'Thêm ao mới thành công.'\r\n                        });\r\n                    }).catch(e => {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n        } else {\r\n            if(validate.error.includes('pondName')) {\r\n                return response.status(200).json({\r\n                    success: false,\r\n                    message: 'Tên ao không hợp lệ.'\r\n                });\r\n            } else\r\n            if(validate.error.includes('createCost')) {\r\n                return response.status(200).json({\r\n                    success: false,\r\n                    message: 'Phí tạo ao không hợp lệ.'\r\n                });\r\n            } else\r\n            if(validate.error.includes('pondArea')) {\r\n                return response.status(200).json({\r\n                    success: false,\r\n                    message: 'Diện tích ao không hợp lệ.'\r\n                });\r\n            } else \r\n            if(validate.error.includes('pondCreatedDate')) {\r\n                return response.status(200).json({\r\n                    success: false,\r\n                    message: 'Ngày tạo ao không hợp lệ.'\r\n                });\r\n            } else\r\n            if(validate.error.includes('pondDepth')) {\r\n                return response.status(200).json({\r\n                    success: false,\r\n                    message: 'Độ sâu ao không hợp lệ.'\r\n                });\r\n            } else \r\n            if(validate.error.includes('status')) {\r\n                return response.status(200).json({\r\n                    success: false,\r\n                    message: 'Trạng thái ao không hợp lệ.'\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private getEmployeePondRoles = async (request: Request, response: Response, next: NextFunction) => {\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const decodetoken: any = Authentication.detoken(token);\r\n        this.userRolesServices.models.findAll({\r\n            where: {\r\n                bossId: decodetoken.userId,\r\n                [this.userRolesServices.Op.and]: {\r\n                    roles: 1\r\n                }\r\n            },\r\n            include: [\r\n                {\r\n                    model: this.userServives.models,\r\n                    as: ActionAssociateDatabase.USER_ROLES_2_USER,\r\n                    attributes: ['userId', 'userUUId', 'lastname', 'firstname', 'username', 'createdDate', 'createdBy']\r\n                }\r\n            ]\r\n        })\r\n            .then(async (employees: any[]) => {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    employees\r\n                });\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi không mong muốn, vui lòng thử lại.'\r\n                });\r\n                throw e;\r\n            });\r\n    }\r\n\r\n    private getPonds = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonUUId, status, seasonId, all } = request.query;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        const seasonPresent: any = await this.seasonServices.models.findOne({\r\n            where: {\r\n                [this.sequeliz.Op.or]: [\r\n                    {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    },\r\n                    {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    }\r\n                ]\r\n            } as any\r\n        });\r\n        let query: FindOptions<any> = {};\r\n        if(((seasonPresent ? !!Object.keys(seasonPresent).length : false) && (seasonPresent.seasonId === seasonId || seasonPresent.seasonUUId === seasonUUId)) || Boolean(all) === true) {\r\n            query = {\r\n                include: [\r\n                    {\r\n                        model: this.userServives.models,\r\n                        as: ActionAssociateDatabase.POND_2_EMPLOYEE_MAYNY_ROLES,\r\n                        required: false,\r\n                        attributes: ['userId', 'username', 'firstname', 'lastname', 'userUUId']\r\n                    },\r\n                    {\r\n                        model: this.pondUserRolesServices.models,\r\n                        as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                        required: false,\r\n                        attributes: []\r\n                    },\r\n                    {\r\n                        model: this.seasonServices.models,\r\n                        as: ActionAssociateDatabase.POND_2_SEASON,\r\n                        required: (!!seasonUUId || !!seasonId),\r\n                        where: {\r\n                            userId: ownerId,\r\n                            status: 0\r\n                        },\r\n                        attributes: []\r\n                    },\r\n                    {\r\n                        model: this.seasonAndPondServices.models,\r\n                        as: ActionAssociateDatabase.POND_2_SEASON_AND_POND,\r\n                        required: false\r\n                    }\r\n                ],\r\n                where: {\r\n                    [this.sequeliz.Op.or]: [\r\n                        {\r\n                            userId: deToken.userId\r\n                        },\r\n                        {\r\n                            '$ponduserroles.userId$': deToken.userId\r\n                        }\r\n                    ]\r\n                } as any\r\n            };\r\n            if(!!seasonUUId) {\r\n                if(!isBoss) {\r\n                    return response.status(200).json({\r\n                        success: false,\r\n                        message: 'Bạn không có quyền thao tác này!'\r\n                    });\r\n                }\r\n                query = {\r\n                    include: [\r\n                        {\r\n                            model: this.userServives.models,\r\n                            as: ActionAssociateDatabase.POND_2_EMPLOYEE_MAYNY_ROLES,\r\n                            required: false,\r\n                            attributes: ['userId', 'username', 'firstname', 'lastname', 'userUUId']\r\n                        },\r\n                        {\r\n                            model: this.pondUserRolesServices.models,\r\n                            as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                            required: false,\r\n                            attributes: []\r\n                        },\r\n                        {\r\n                            model: this.seasonServices.models,\r\n                            as: ActionAssociateDatabase.POND_2_SEASON,\r\n                            where: {\r\n                                seasonUUId,\r\n                                userId: ownerId\r\n                            },\r\n                            attributes: []\r\n                        },\r\n                        {\r\n                            model: this.seasonAndPondServices.models,\r\n                            as: ActionAssociateDatabase.POND_2_SEASON_AND_POND,\r\n                            required: false\r\n                        }\r\n                    ],\r\n                    where: {\r\n                        [this.sequeliz.Op.or]: [\r\n                            {\r\n                                userId: deToken.userId\r\n                            },\r\n                            {\r\n                                '$ponduserroles.userId$': deToken.userId\r\n                            }\r\n                        ]\r\n                    } as any\r\n                };\r\n            }\r\n            if(!!seasonId) {\r\n                if(!isBoss) {\r\n                    return response.status(200).json({\r\n                        success: false,\r\n                        message: 'Bạn không có quyền thao tác này!'\r\n                    });\r\n                }\r\n                query = {\r\n                    include: [\r\n                        {\r\n                            model: this.userServives.models,\r\n                            as: ActionAssociateDatabase.POND_2_EMPLOYEE_MAYNY_ROLES,\r\n                            required: false,\r\n                            attributes: ['userId', 'username', 'firstname', 'lastname', 'userUUId']\r\n                        },\r\n                        {\r\n                            model: this.pondUserRolesServices.models,\r\n                            as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                            required: false,\r\n                            attributes: []\r\n                        },\r\n                        {\r\n                            model: this.seasonServices.models,\r\n                            as: ActionAssociateDatabase.POND_2_SEASON,\r\n                            where: {\r\n                                seasonId,\r\n                                userId: ownerId\r\n                            },\r\n                            attributes: []\r\n                        },\r\n                        {\r\n                            model: this.seasonAndPondServices.models,\r\n                            as: ActionAssociateDatabase.POND_2_SEASON_AND_POND,\r\n                            required: false\r\n                        }\r\n                    ],\r\n                    where: {\r\n                        [this.sequeliz.Op.or]: [\r\n                            {\r\n                                userId: deToken.userId\r\n                            },\r\n                            {\r\n                                '$ponduserroles.userId$': deToken.userId\r\n                            }\r\n                        ]\r\n                    } as any\r\n                };\r\n            }\r\n            if(!!status) {\r\n                if(status.includes('notnull')) /** Ao đang nuôi + đang nâng cấp */ {\r\n                    const notIn: any = {\r\n                        status: {\r\n                            [this.sequeliz.Op.notIn]: [0]\r\n                        }\r\n                    };\r\n                    query.where = {\r\n                        ...query.where,\r\n                        ...notIn\r\n                    };\r\n                } else if(status.includes('forPrepare')) /** Ao trống + đang nâng cấp */ {\r\n                    const condition: any = {\r\n                        status: {\r\n                            [this.sequeliz.Op.notIn]: [1]\r\n                        }\r\n                    };\r\n                    query.where = {\r\n                        ...query.where,\r\n                        ... condition\r\n                    };\r\n                } else if(status.includes('forStocking')) /** Ao trống + đang nuôi */ {\r\n                    const condition: any = {\r\n                        status: {\r\n                            [this.sequeliz.Op.notIn]: [2]\r\n                        }\r\n                    };\r\n                    query.where = {\r\n                        ...query.where,\r\n                        ... condition\r\n                    };\r\n                } else /** theo status gui len */ {\r\n                    query.where = {\r\n                        ...query.where,\r\n                        status: status as any - 0\r\n                    };\r\n                }\r\n            }\r\n        } else {\r\n            query = {\r\n                include: [\r\n                    {\r\n                        model: this.seasonAndPondServices.models,\r\n                        as: ActionAssociateDatabase.POND_2_SEASON_AND_POND,\r\n                        include: [\r\n                            {\r\n                                model: this.seasonServices.models,\r\n                                as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                                where: {\r\n                                    [this.sequeliz.Op.or]: [\r\n                                        {\r\n                                            seasonUUId\r\n                                        },\r\n                                        {\r\n                                            seasonId\r\n                                        }\r\n                                    ]\r\n                                }\r\n                            }\r\n                        ]\r\n                    },\r\n                    {\r\n                        model: this.pondUserRolesServices.models,\r\n                        as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                        required: false,\r\n                        attributes: []\r\n                    },\r\n                    {\r\n                        model: this.userServives.models,\r\n                        as: ActionAssociateDatabase.POND_2_EMPLOYEE_MAYNY_ROLES,\r\n                        required: false\r\n                    }\r\n                ],\r\n                where: {\r\n                    [this.sequeliz.Op.or]: [\r\n                        {\r\n                            userId: deToken.userId\r\n                        },\r\n                        {\r\n                            '$ponduserroles.userId$': deToken.userId\r\n                        }\r\n                    ]\r\n                } as any\r\n            };\r\n        }\r\n        this.pondsServices.models.findAll(query).then(async (res: any) => {\r\n            if(!Object.keys(res).length) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy ao.',\r\n                    ponds: []\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    ponds: res\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xãy ra, xin vui lòng thử lại!'\r\n            });\r\n        });\r\n    }\r\n\r\n    private getPondOfBoss = async (request: Request, response: Response, next: NextFunction) => {\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n\r\n        if (!isBoss) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Dừng lại! Truy cập là trái phép.'\r\n            });\r\n        } else {\r\n            this.pondsServices.models.findAll({\r\n                where: {\r\n                    userId\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n                });\r\n            }).then((res: any) => {\r\n                if (!res.length) {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Bạn không có ao nào trong hệ thống'\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: '',\r\n                        ponds: res\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private getPondWithoutImages = async (request: Request, response: Response, next: NextFunction) => {\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const pond: Pond = new Pond();\r\n        pond.pondsServices.models.findAll(({\r\n            include: [\r\n                {\r\n                    model: this.userServives.models,\r\n                    as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                    required: false,\r\n                    // attributes: ['userId', 'username', 'firstname', 'lastname', 'userUUId']\r\n                },\r\n                {\r\n                    model: this.pondUserRolesServices.models,\r\n                    as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                    required: false,\r\n                    attributes: []\r\n                }\r\n            ],\r\n            where: {\r\n                [this.sequeliz.Op.or]: [\r\n                    {\r\n                        userId: deToken.userId\r\n                    },\r\n                    {\r\n                        '$ponduserroles.userId$': deToken.userId\r\n                    }\r\n                ]\r\n            }\r\n        } as any)).then(async (res: any) => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                ponds: res\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xãy ra, xin vui lòng thử lại!',\r\n                e\r\n            });\r\n        });\r\n    }\r\n\r\n    private getPondNotInSeasonAndPond = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonUUId } = request.body;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            let ponds: any = await this.seasonAndPondServices.models.findAll({\r\n                include: [\r\n                    {\r\n                        model: this.seasonServices.models,\r\n                        as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                        where: {\r\n                            seasonUUId,\r\n                            userId: ownerId\r\n                        },\r\n                        attributes: []\r\n                    }\r\n                ],\r\n                attributes: ['pondId'],\r\n                transaction: t\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Lỗi đường truyền, vui lòng thử lại sau.'\r\n                });\r\n                return t.rollback();\r\n            });\r\n            if (ponds.length) {\r\n                ponds = ponds.map(element => {\r\n                    return element.pondId;\r\n                });\r\n                const p: any = await this.pondsServices.models.findAll({\r\n                    where: {\r\n                        pondId: {\r\n                            [this.sequeliz.Op.notIn]: ponds\r\n                        },\r\n                        userId: ownerId\r\n                    },\r\n                    transaction: t\r\n                }).catch(e => {\r\n                    e;\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Lỗi đường truyền, vui lòng thử lại sau.'\r\n                    });\r\n                    t.rollback();\r\n                });\r\n                if (!p) {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Không tìm thấy ao.'\r\n                    });\r\n                    t.rollback();\r\n                } else {\r\n                    t.commit();\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: '',\r\n                        ponds: p\r\n                    });\r\n                }\r\n            } else {\r\n                const p: any = await this.pondsServices.models.findAll({\r\n                    where: {\r\n                        userId: ownerId\r\n                    },\r\n                    transaction: t\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Lỗi đường truyền, vui lòng thử lại sau.'\r\n                    });\r\n                    t.rollback();\r\n                });\r\n                if (!p) {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Không tìm thấy ao.'\r\n                    });\r\n                    t.rollback();\r\n                } else {\r\n                    t.commit();\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: '',\r\n                        ponds: p\r\n                    });\r\n                }\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi đường truyền, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private getPondByPondUUId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const pond: Pond = new Pond();\r\n        const { pondUUId } = request.params;\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const decodetoken: any = Authentication.detoken(token);\r\n        const query: any = {\r\n            include: [\r\n                {\r\n                    model: this.pondUserRolesServices.models,\r\n                    as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                    required: false,\r\n                    include: [\r\n                        {\r\n                            model: this.userServives.models,\r\n                            as: ActionAssociateDatabase.POND_USER_ROLE_2_USER,\r\n                            attributes: ['userId', 'userUUId', 'lastname', 'firstname', 'username', 'createdDate', 'createdBy']\r\n                        }\r\n                    ]\r\n                }\r\n            ],\r\n            where: {\r\n                pondUUId,\r\n                [pond.pondsServices.Op.and]: {\r\n                    [this.sequeliz.Op.or]: [\r\n                        {\r\n                            userId: decodetoken.userId\r\n                        },\r\n                        {\r\n                            '$ponduserroles.userId$': decodetoken.userId\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        };\r\n        pond.pondsServices.models.findOne(query).then((pond$: any) => {\r\n            if (pond$) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    pond: pond$.dataValues\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Bạn không có quyền truy cập'\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private updatePondWithUUId = async (request: any, response: Response, next: NextFunction) => {\r\n        const pond: Pond = new Pond();\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        if (!isBoss) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Dừng lại! Truy cập là trái phép.'\r\n            });\r\n        }\r\n        const { pondUUId, pondName, pondCreatedDate, pondArea, pondDepth, createCost, pondLatitude, pondLongitude, status, isFed, isDiary } = request.body;\r\n        if (!pondUUId) {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Hành động không được phép, vui lòng thử lại sau!'\r\n            });\r\n        } else {\r\n            if (request.files) {\r\n                GoogleDrive.upload(request, response, next).then((data: any) => {\r\n                    if (data.fileId) {\r\n                        pond.setPond(null, uuidv4(), deToken.userId, pondName, pondArea, pondDepth, createCost, pondCreatedDate, status, status === 1 ? 1 : 0, status === 1 ? 1 : 0, data.fileId, pondLatitude !== '' ? pondLatitude : undefined, pondLongitude !== '' ? pondLongitude : undefined);\r\n                        pond.pondsServices.models.update({\r\n                            pondName, pondCreatedDate, pondArea, pondDepth, createCost, images:\r\n                                data.fileId, pondLatitude, pondLongitude, status, isFed, isDiary\r\n                        }, {\r\n                                where: {\r\n                                    pondUUId\r\n                                },\r\n                                returning: true\r\n                            }).then((pond$: any) => {\r\n                                response.status(200).json({\r\n                                    success: true,\r\n                                    message: 'Cập nhật thành công.'\r\n                                });\r\n                            }).catch(e => {\r\n                                response.status(200).json({\r\n                                    success: false,\r\n                                    message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n                                });\r\n                            });\r\n                    } else {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Đã có lỗi xảy ra, xin vui lòng thử lại!'\r\n                        });\r\n                    }\r\n                });\r\n            } else {\r\n                pond.pondsServices.models.update({\r\n                    pondName, pondCreatedDate, pondArea, pondDepth, createCost, pondLatitude, pondLongitude, status, isFed\r\n                }, {\r\n                        where: {\r\n                            pondUUId\r\n                        }\r\n                    }).then((pond$: any) => {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: 'Cập nhật thành công.'\r\n                        });\r\n                    }).catch(e => {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n                        });\r\n                    });\r\n            }\r\n        }\r\n    }\r\n\r\n    private getPondBySeasonUUId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonUUId } = request.params;\r\n        const pond: Pond = new Pond();\r\n        pond.pondsServices.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.POND_2_SEASON,\r\n                    where: {\r\n                        seasonUUId\r\n                    },\r\n                    attributes: []\r\n                }\r\n            ]\r\n        }).then((ponds: any) => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                ponds\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: '',\r\n                e\r\n            });\r\n        });\r\n    }\r\n\r\n    private getPostPondBySeasonUUId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonUUId, ownerId } = request.body;\r\n        const pond: Pond = new Pond();\r\n        pond.pondsServices.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.POND_2_SEASON,\r\n                    where: {\r\n                        seasonUUId\r\n                    },\r\n                    attributes: []\r\n                }\r\n            ],\r\n            where: {\r\n                userId: ownerId\r\n            }\r\n        }).then((ponds: any) => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                ponds\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: '',\r\n                e\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get ao các ao của vụ hiện tại\r\n     * có check status\r\n     */\r\n    private getPondByOwnerSeason = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { status } = request.body;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        const query: any = {\r\n            include: [\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    },\r\n                    attributes: []\r\n                },\r\n                {\r\n                    model: this.seasonAndPondServices.models,\r\n                    as: ActionAssociateDatabase.POND_2_SEASON_AND_POND,\r\n                    attributes: []\r\n                }\r\n            ],\r\n            where: {\r\n                userId: ownerId\r\n            }\r\n        };\r\n        if (status) {\r\n            const where: any = {\r\n                status\r\n            };\r\n            query.where = {\r\n                ...query.where,\r\n                ...where\r\n            };\r\n        }\r\n        this.pondsServices.models.findAll(query).then(res => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                ponds: res\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi đường truyền, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private getPondByOwnerSeasonWithImage = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { ownerId, status } = request.body;\r\n        const query: any = {\r\n            include: [\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    },\r\n                    attributes: []\r\n                },\r\n                {\r\n                    model: this.seasonAndPondServices.models,\r\n                    as: ActionAssociateDatabase.POND_2_SEASON_AND_POND,\r\n                    attributes: []\r\n                }\r\n            ],\r\n            where: {\r\n                userId: ownerId\r\n            }\r\n        };\r\n        if (status) {\r\n            const where: any = {\r\n                status\r\n            };\r\n            query.where = {\r\n                ...query.where,\r\n                ...where\r\n            };\r\n        }\r\n        this.pondsServices.models.findAll(query).then(async (res: any[]) => {\r\n            if (res.length > 0) {\r\n                const endData = [];\r\n                for (const e of res) {\r\n                    e[`images`] = await GoogleDrive.delayGetFileById(e.images);\r\n                    endData.push(e);\r\n                }\r\n                response.status(200).json({\r\n                    success: true,\r\n                    ponds: endData\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    ponds: []\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            e;\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xãy ra, xin vui lòng thử lại!'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get ao mà người dùng đó không có quyền - sử dụng cho chức năng phân quyền ao\r\n     * Get theo pondUserRolesId\r\n     * @method POST\r\n     */\r\n    private getPondWithoutManager = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { employeeId } = request.body;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        if (!isBoss) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Dừng lại! Truy cập là trái phép.'\r\n            });\r\n        } else {\r\n            if (employeeId) {\r\n                const pondByManage: any = await this.pondUserRolesServices.models.findAll({\r\n                    where: {\r\n                        userId: employeeId\r\n                    }\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Có lỗi xảy ra, vui lòng thử lại sau.'\r\n                    });\r\n                });\r\n                const query: FindOptions<any> = {\r\n                    include: [],\r\n                    where: {}\r\n                };\r\n                if (pondByManage.length) {\r\n                    query.where = {\r\n                        userId,\r\n                        [this.sequeliz.Op.notIn]: pondByManage\r\n                    };\r\n                } else {\r\n                    query.where = {\r\n                        userId,\r\n                    };\r\n                }\r\n                this.pondsServices.models.findAll(query).then(async (res: any[]) => {\r\n                    if (!res.length) {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: 'Không tìm thấy ao.',\r\n                            ponds: []\r\n                        });\r\n                    } else {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: '',\r\n                            ponds: res\r\n                        });\r\n                    }\r\n                }).catch(e => {\r\n                    e;\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã có lỗi xảy ra.'\r\n                    });\r\n                });\r\n            } else {\r\n                return response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra.'\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Đếm tổng số ao của người dùng\r\n     */\r\n    private countPond = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondOwner } = request.body;\r\n        const pond: Pond = new Pond();\r\n        pond.pondsServices.models.findAndCountAll({\r\n            where: {\r\n                userId: pondOwner\r\n            }\r\n        }).then(res => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                pondsQuantity: res.count\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @method GET\r\n     * Hàm lấy danh sách ao của người dùng đang đăng nhập\r\n     * request - token\r\n     * option - image: boolean get ao kèm thêm hình\r\n     * option - isnull: boolean get ao trống\r\n     * option - isnotnull: boolean get ao đang nuôi thả\r\n     * option - isupgrade: boolean get ao đang nâng cấp\r\n     * option - seasonid: string|number get ao theo vụ chỉ định\r\n     */\r\n    private getPondAdvanceds = async (request: Request, response: Response, next: NextFunction) => {\r\n        // flagged\r\n        const { image, isnull, isnotnull, isupgrade, seasonid, notRoles, userid, seasonuuid } = request.headers;\r\n\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        // init query\r\n        const query: FindOptions<any> = {\r\n            include: [],\r\n            where: {}\r\n        };\r\n        if (!isBoss) {\r\n            // vụ mặc định\r\n            const presentSeason: any = {\r\n                model: this.seasonServices.models,\r\n                as: ActionAssociateDatabase.POND_2_SEASON,\r\n                where: {\r\n                    userId: ownerId,\r\n                    status: 0\r\n                }\r\n            };\r\n            // các ao có quyền\r\n            const rule: any = {\r\n                model: this.pondUserRolesServices.models,\r\n                as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                where: {\r\n                    userId\r\n                }\r\n            };\r\n            query.include.push(presentSeason);\r\n            query.include.push(rule);\r\n        } else {\r\n            if (!seasonid) {\r\n                // load vụ mặc định\r\n                const presentSeason: any = {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    }\r\n                };\r\n                query.include.push(presentSeason);\r\n            } else if(seasonuuid) /* load theo id vụ yêu cầu */ {\r\n                const requestSeason: any = {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        seasonUUId: seasonuuid\r\n                    }\r\n                };\r\n                query.include.push(requestSeason);\r\n            } else  {\r\n                // load theo id vụ yêu cầu\r\n                const requestSeason: any = {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        seasonId: seasonid\r\n                    }\r\n                };\r\n                query.include.push(requestSeason);\r\n            }\r\n        }\r\n        if (isnull === 'true') {\r\n            // ao trống\r\n            query.where = {\r\n                status: 0\r\n            };\r\n        } else if (isnotnull === 'true') {\r\n            // ao đang nuôi\r\n            query.where = {\r\n                status: 1\r\n            };\r\n        } else if (isupgrade === 'true') {\r\n            // ao đang nâng cấp\r\n            query.where = {\r\n                status: 2\r\n            };\r\n        }\r\n        this.pondsServices.models.findAll(query).then(async (res: any[]) => {\r\n            if (!res.length) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy ao khả dụng.',\r\n                    ponds: []\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    ponds: res\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra.'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @method POST\r\n     * Đếm số vụ của ao chỉ định\r\n     */\r\n    private countSeasonWithPond = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondUUId } = request.body;\r\n        this.seasonAndPondServices.models.findAndCountAll({\r\n            include: [\r\n                {\r\n                    model: this.pondsServices.models,\r\n                    as: ActionAssociateDatabase.SEASON_AND_POND_2_POND,\r\n                    where: {\r\n                        pondUUId\r\n                    },\r\n                    attributes: []\r\n                }\r\n            ]\r\n        }).then(res => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                count: res.count\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Có lỗi xảy ra.'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get All pond mà người dùng chỉ định không có quản lý\r\n     * @method POST\r\n     * @param request.body.employeeId\r\n     */\r\n    private getPondWithUserNotManage = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { employeeId } = request.body;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        if (!isBoss) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Dừng lại! Truy cập là trái phép.'\r\n            });\r\n        } else {\r\n            if (employeeId) {\r\n                const pondByManage: any = await this.pondUserRolesServices.models.findAll({\r\n                    where: {\r\n                        userId: employeeId\r\n                    }\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Có lỗi xảy ra, vui lòng thử lại sau.'\r\n                    });\r\n                });\r\n                const query: FindOptions<any> = {\r\n                    include: [],\r\n                    where: {}\r\n                };\r\n                if (pondByManage.length) {\r\n                    query.where = {\r\n                        userId,\r\n                        pondId: {\r\n                            [this.sequeliz.Op.notIn]: pondByManage.map((e: any) => e.pondId)\r\n                        }\r\n                    };\r\n                } else {\r\n                    query.where = {\r\n                        userId,\r\n                    };\r\n                }\r\n                this.pondsServices.models.findAll(query).then(async (res: any[]) => {\r\n                    if (!res.length) {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: 'Không tìm thấy ao.',\r\n                            ponds: []\r\n                        });\r\n                    } else {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: '',\r\n                            ponds: res\r\n                        });\r\n                    }\r\n                }).catch(e => {\r\n                    e;\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã có lỗi xảy ra.'\r\n                    });\r\n                });\r\n            } else {\r\n                return response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra.'\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n","export const addPondPrepareSchema = {\r\n    type: 'object',\r\n    properties: {\r\n        pondId: {\r\n            required: true,\r\n            type: ['number', 'string']\r\n        },\r\n        ownerId: {\r\n            required: true,\r\n            type: ['number', 'string']\r\n        },\r\n        pondPrepareName: {\r\n            required: true,\r\n            type: 'string'\r\n        },\r\n        detailsOfPrepare: {\r\n            required: true,\r\n            type: 'array',\r\n            items: {\r\n                type: 'object',\r\n                properties: {\r\n                    storageId: 'number',\r\n                    quantity: {\r\n                        type: 'integer',\r\n                        minimum: 1\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    additionalProperties: false\r\n};\r\n","export const addSeasonSchema = {\r\n    type: 'object',\r\n    properties: {\r\n        seasonName: {\r\n            require: true,\r\n            type: ['string', 'number']\r\n        }\r\n    },\r\n    additionalProperties: false\r\n};\r\n\r\nexport const updateSeasonsSchema = {\r\n    type: 'object',\r\n    properties: {\r\n        seasonName: {\r\n            require: false,\r\n            type: ['string', 'number']\r\n        },\r\n        seasonId: {\r\n            require: false,\r\n            type: ['string', 'number'],\r\n            minimum: 0\r\n        },\r\n        seasonUUId: {\r\n            require: false,\r\n            type: ['string'],\r\n            minimum: 36,\r\n            maximum: 36\r\n        },\r\n        status: {\r\n            require: false,\r\n            type: ['string', 'number'],\r\n            enum: ['0', '1', 0, 1]\r\n        },\r\n        additionalProperties: false\r\n    }\r\n};\r\n","export const addPondSchema = {\r\n    type: 'object',\r\n    properties: {\r\n        pondName: {\r\n            required: true,\r\n            type: 'string',\r\n            maxlenght: 50\r\n        },\r\n        pondCreatedDate: {\r\n            required: true,\r\n            type: 'string',\r\n            pattern: /^(?![+-]?\\d{4,5}-?(?:\\d{2}|W\\d{2})T)(?:|(\\d{4}|[+-]\\d{5})-?(?:|(0\\d|1[0-2])(?:|-?([0-2]\\d|3[0-1]))|([0-2]\\d{2}|3[0-5]\\d|36[0-6])|W([0-4]\\d|5[0-3])(?:|-?([1-7])))(?:(?!\\d)|T(?=\\d)))(?:|([01]\\d|2[0-4])(?:|:?([0-5]\\d)(?:|:?([0-5]\\d)(?:|\\.(\\d{3})))(?:|[zZ]|([+-](?:[01]\\d|2[0-4]))(?:|:?([0-5]\\d)))))$/\r\n        },\r\n        pondArea: {\r\n            required: true,\r\n            type: 'number',\r\n            minimum: 0\r\n        },\r\n        pondDepth: {\r\n            required: true,\r\n            type: 'number',\r\n            minimum: 0\r\n        },\r\n        createCost: {\r\n            required: true,\r\n            type: 'number',\r\n            minimum: 0\r\n        },\r\n        pondLatitude: {\r\n            required: false,\r\n            type: ['number', null]\r\n        },\r\n        pondLongitude: {\r\n            required: false,\r\n            type: ['number', null]\r\n        },\r\n        status: {\r\n            required: true,\r\n            type: ['number'],\r\n            enum: [0, 1, 2]\r\n        }\r\n    },\r\n    additionalProperties: false\r\n};\r\n","import { isUUId4 } from '../common';\r\n\r\nexport const updatePondDiariesSchema = {\r\n    type: 'object',\r\n    properties: {\r\n        pondDiaryUUId: {\r\n            type: 'string',\r\n            required: true,\r\n            pattern: isUUId4\r\n        },\r\n        diaryName: {\r\n            required: false,\r\n            type: ['string']\r\n        },\r\n        fisheryQuantity: {\r\n            required: false,\r\n            type: ['number'],\r\n            minimum: 0\r\n        },\r\n        healthOfFishery: {\r\n            required: false,\r\n            type: ['string']\r\n        },\r\n        pondVolume: {\r\n            required: false,\r\n            type: ['number'],\r\n            minimum: 0\r\n        },\r\n        diedFishery: {\r\n            required: false,\r\n            type: ['integer'],\r\n            minimum: 0\r\n        },\r\n        notes: {\r\n            required: false,\r\n            type: ['string', 'null']\r\n        }\r\n    },\r\n    additionalProperties: true\r\n};\r\n","export * from './seasons.route';\r\n","import { Season } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, SeasonServices, UserRolesServices, UserServives, PondsServices } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { Transaction, FindOptions } from 'sequelize';\r\nimport { addSeasonSchema, updateSeasonsSchema } from '../../schemas';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class SeasonRoute extends BaseRoute {\r\n    public static path = '/seasons';\r\n    private static instance: SeasonRoute;\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private pondsServices: PondsServices = new PondsServices();\r\n    private userServives: UserServives = new UserServives();\r\n    private userRolesServices: UserRolesServices = new UserRolesServices();\r\n\r\n    /**\r\n     * @class SeasonRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!SeasonRoute.instance) {\r\n            SeasonRoute.instance = new SeasonRoute();\r\n        }\r\n        return SeasonRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[SeasonRoute] Creating season route.');\r\n\r\n        // add route\r\n        this.router.get('/gets', Authentication.isLogin, this.getSeasons);\r\n        this.router.get('/gets/:seasonUUId', Authentication.isLogin, this.getSeasonByUUId);\r\n        this.router.post('/add', Authentication.isLogin, Authentication.isBoss, this.addSeason);\r\n        this.router.put('/update', Authentication.isLogin, Authentication.isBoss, this.updateSeason);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, SeasonRoute.path);\r\n    }\r\n\r\n    /**\r\n     * Thêm mới vụ với điều kiện:\r\n     * - Mỗi user chỉ có 1 vụ có status 0 trong tổng số vụ\r\n     * - Tất cả ao đều được thu hoạch xong\r\n     *\r\n     * Cập nhật lại bảng Ponds:\r\n     * - status\r\n     * - isFed\r\n     * - isDiary\r\n     */\r\n    private addSeason = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonName } = request.body;\r\n        const validate: any = this.validator(addSeasonSchema);\r\n        const filter: any = this.validator.filter(addSeasonSchema);\r\n        const filtered: any = filter(request.body);\r\n        const validater: boolean = validate(filtered);\r\n        if (validater) {\r\n            // start authozation info\r\n            const token: string = request.headers.authorization.split(' ')[1];\r\n            const deToken: any = Authentication.detoken(token);\r\n            const { userId } = deToken;\r\n\r\n            const wasHarvest: any = await this.pondsServices.models.findAll({\r\n                where: {\r\n                    userId,\r\n                    status: 1\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, vui lòng thử lại sau!'\r\n                });\r\n            });\r\n            // Còn vụ chưa thu hoạch\r\n            if (!!wasHarvest.length) {\r\n                return response.status(200).json({\r\n                    success: false,\r\n                    message: 'Bạn không thể thêm vụ nuôi mới khi còn ao chưa thu hoạch.',\r\n                    wasHarvest: false\r\n                });\r\n            }\r\n            this.sequeliz.transaction().then(async (t: Transaction) => {\r\n                const resetStatus: any = await this.pondsServices.models.update({\r\n                    status: 0,\r\n                    isFed: 0,\r\n                    isDiary: 0\r\n                }, {\r\n                        where: {\r\n                            userId,\r\n                            status: 1\r\n                        },\r\n                        transaction: t\r\n                    }).catch(e => {\r\n                        return t.rollback();\r\n                    });\r\n                const onUpdate: any = await this.seasonServices.models.update({\r\n                    status: 1\r\n                }, {\r\n                        where: {\r\n                            userId,\r\n                            status: 0\r\n                        },\r\n                        returning: true,\r\n                        transaction: t\r\n                    }).catch(e => {\r\n                        return t.rollback();\r\n                    });\r\n\r\n                if (onUpdate) {\r\n                    const season = new Season();\r\n                    season.setSeason(null, uuidv4(), userId, seasonName, 0);\r\n                    season.seasonServices.models.create(season, {\r\n                        transaction: t\r\n                    }).then((res: any) => {\r\n                        if (res) {\r\n                            response.status(200).json({\r\n                                success: true,\r\n                                message: 'Thêm vụ thành công!',\r\n                                season: res\r\n                            });\r\n                            t.commit();\r\n                        }\r\n                    }).catch(e => {\r\n                        return t.rollback();\r\n                    });\r\n                } else {\r\n                    return t.rollback();\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Có lỗi xảy ra vui lòng kiểm tra lại!'\r\n                });\r\n            });\r\n        } else {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: 'Vui lòng cung cấp đúng tên vụ.'\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get All vụ theo user\r\n     * chức năng của admin\r\n     */\r\n    private getSeasons = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { present } = request.query;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n\r\n        const query: FindOptions<any> = {\r\n            where: {\r\n                userId: isBoss ? userId : ownerId\r\n            },\r\n            order: [\r\n                ['createdDate', 'DESC']\r\n            ]\r\n        };\r\n\r\n        if(!!present) {\r\n            query.where = {\r\n                ...query.where,\r\n                status: 0\r\n            };\r\n        }\r\n\r\n        this.seasonServices.models.findAll(query).then(ss => {\r\n            if (ss) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    seasons: ss\r\n                });\r\n\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Bạn không có vụ nào được kích hoạt, vui lòng kích hoạt một vụ mùa trong hệ thống.',\r\n                    seasons: null\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            e;\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xãy ra, xin vui lòng thử lại!'\r\n            });\r\n        });\r\n    }\r\n\r\n    private updateSeason = async (request: Request, response: Response, next: NextFunction) => {\r\n        // validate\r\n        const validate: any = this.validator(updateSeasonsSchema);\r\n        const filter: any = this.validator.filter(updateSeasonsSchema);\r\n        const filtered: any = filter(request.body);\r\n        const validater: boolean = validate(filtered);\r\n        if(validater) {\r\n            const { seasonId, seasonUUId, seasonName, status } = request.body;\r\n            const data: any = {\r\n                ...(seasonName ? {seasonName} : {}),\r\n                ...(status ? {status} : {}),\r\n            };\r\n            this.seasonServices.models.update(data, {\r\n                where: {\r\n                    [this.sequeliz.Op.or]: [\r\n                        {seasonId},\r\n                        {seasonUUId}\r\n                    ]\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, vui lòng thử lại sau!'\r\n                });\r\n            }).then(res => {\r\n                if(res) {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Cập nhật thành công!'\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Thất bại.'\r\n                    });\r\n                }\r\n            });\r\n        } else {\r\n            console.log(validate.error);\r\n        }\r\n    }\r\n\r\n    private getSeasonByUUId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonUUId } = request.params;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n\r\n        const season: Season = new Season();\r\n        season.seasonServices.models.findOne({\r\n            include: [\r\n                {\r\n                    model: this.userServives.models,\r\n                    as: ActionAssociateDatabase.SEASON_2_USER,\r\n                    include: [\r\n                        {\r\n                            model: this.userRolesServices.models,\r\n                            as: ActionAssociateDatabase.USER_2_ROLES_GET_EMPLOYEES,\r\n                            required: false,\r\n                            where: {\r\n                                [this.sequeliz.Op.or]: [\r\n                                    {\r\n                                        bossId: userId\r\n                                    },\r\n                                    {\r\n                                        userId\r\n                                    }\r\n                                ]\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            ],\r\n            where: {\r\n                seasonUUId,\r\n                userId: ownerId\r\n            }\r\n        }).then((res: Season) => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                season: res\r\n            });\r\n        }).catch(e => {\r\n            e;\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    // private getSeasonById = async (request: Request, response: Response, next: NextFunction) => {\r\n    //     const { seasonId } = request.body;\r\n    //     this.seasonServices.models.findById(seasonId).then((res: Season) => {\r\n    //         response.status(200).json({\r\n    //             success: true,\r\n    //             message: '',\r\n    //             season: res\r\n    //         });\r\n    //     }).catch(e => {\r\n    //         response.status(200).json({\r\n    //             success: false,\r\n    //             message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n    //         });\r\n    //     });\r\n    // }\r\n\r\n    // private getPresentSeason = async (request: Request, response: Response, next: NextFunction) => {\r\n    //     const { ownerid } = request.headers;\r\n    //     this.seasonServices.models.findOne({\r\n    //         where: {\r\n    //             userId: ownerid,\r\n    //             status: 0\r\n    //         }\r\n    //     }).then((res: any) => {\r\n    //         if (res) {\r\n    //             response.status(200).json({\r\n    //                 success: true,\r\n    //                 message: '',\r\n    //                 season: res.dataValues\r\n    //             });\r\n    //         } else {\r\n    //             response.status(200).json({\r\n    //                 success: false,\r\n    //                 message: 'Bạn không có vụ nào được kích hoạt, vui lòng kích hoạt một vụ mùa trong hệ thống.'\r\n    //             });\r\n    //         }\r\n    //     }).catch(e => {\r\n    //         response.status(200).json({\r\n    //             success: false,\r\n    //             message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n    //         });\r\n    //     });\r\n    // }\r\n}\r\n","export * from './pondPrepare.route';\r\n","import { PondPrepare, PondPrepareDetail, Storage, Pond, SeasonsAndPond, Incurred } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, PondPrepareServices, SeasonAndPondServices, SeasonServices, PondsServices, IncurredsServices, PondPrepareDetailsServices, StoregeServices, MaterialServives, UserServives } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { ActionAssociateDatabase, defaultImage } from '../../common';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { Transaction } from 'sequelize';\r\nimport { DateUtil } from '../../lib';\r\nimport { addPondPrepareSchema } from '../../schemas';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class PondPrepareRoute extends BaseRoute {\r\n    public static path = '/pondPrepares';\r\n    private static instance: PondPrepareRoute;\r\n    private pondPrepareServices: PondPrepareServices = new PondPrepareServices();\r\n    private seasonAndPondServices: SeasonAndPondServices = new SeasonAndPondServices();\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private pondsServices: PondsServices = new PondsServices();\r\n    private incurredsServices: IncurredsServices = new IncurredsServices();\r\n    private pondPrepareDetailsServices: PondPrepareDetailsServices = new PondPrepareDetailsServices();\r\n    private storegeServices: StoregeServices = new StoregeServices();\r\n    private userServives: UserServives = new UserServives();\r\n    /**\r\n     * @class PondPrepareRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!PondPrepareRoute.instance) {\r\n            PondPrepareRoute.instance = new PondPrepareRoute();\r\n        }\r\n        return PondPrepareRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[PondPrepareRoute] Creating action preparing of pond route.');\r\n\r\n        // add route pond prepare\r\n        this.router.post('/add', Authentication.isLogin, this.addPrepare);\r\n        this.router.post('/addNew', Authentication.isLogin, this.addNewPrepare);\r\n        this.router.post('/add/exiting-pond', Authentication.isLogin, this.addPrepareOldPond);\r\n        this.router.post('/gets', Authentication.isLogin, this.getPondPrepares);\r\n        this.router.post('/gets/uuid', Authentication.isLogin, this.getPondPrepareByPondPrePareUUId);\r\n        this.router.put('/update', Authentication.isLogin, this.updatePondPrepare);\r\n\r\n        // add route incurred\r\n        this.router.post('/incurreds/add', Authentication.isLogin, this.addIncurred);\r\n        this.router.post('/incurreds/get/uuid', Authentication.isLogin, this.getIncurredByIncurredUUId);\r\n        this.router.put('/incurreds/update', Authentication.isLogin, this.updateIncurred);\r\n\r\n        // log enpoints\r\n        this.logEndpoints(this.router, PondPrepareRoute.path);\r\n    }\r\n\r\n    private getPondPrepares = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonId, pondId } = request.body;\r\n        this.pondPrepareServices.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.pondPrepareDetailsServices.models,\r\n                    as: ActionAssociateDatabase.POND_PREPARE_2_POND_PREPARE_DETAILS,\r\n                    required: false,\r\n                    include: [\r\n                        {\r\n                            model: this.storegeServices.models,\r\n                            as: ActionAssociateDatabase.POND_PREPARE_DETAIL_2_STORAGE\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    model: this.incurredsServices.models,\r\n                    required: false,\r\n                    as: ActionAssociateDatabase.POND_PREPARE_2_INCURREDS,\r\n                    include: [\r\n                        {\r\n                            model: this.userServives.models,\r\n                            as: ActionAssociateDatabase.INCURREDS_TO_USER,\r\n                            attributes: ['userId', 'userUUId', 'lastname', 'firstname', 'username', 'createdDate', 'createdBy']\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    model: this.seasonAndPondServices.models,\r\n                    as: ActionAssociateDatabase.POND_PREPARE_2_SEASON_AND_POND,\r\n                    where: {\r\n                        pondId,\r\n                        seasonId\r\n                    }\r\n                }\r\n            ]\r\n        }).then((res) => {\r\n            if (!res.length) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy nhật ký chuẩn bị ao của ao này.'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    pondPrepares: res\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private getPondPrepareByPondPrePareUUId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondPrepareUUId } = request.body;\r\n        this.pondPrepareServices.models.findOne({\r\n            where: {\r\n                pondPrepareUUId\r\n            }\r\n        }).then(res => {\r\n            if (!res) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy nhật ký chuẩn bị ao.'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    pondPrepare: res\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Chức năng click vào 1 đợt chuẩn bị cụ thể\r\n     */\r\n    private getById = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondprepareid } = request.headers;\r\n        const pondPrepare: PondPrepare = new PondPrepare();\r\n        pondPrepare.setPondPrepareId = (pondprepareid as any) - 0;\r\n        pondPrepare.getById(pondPrepare.getPondPrepareId).then(res => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                pondPrepare: res\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Không có thông tin của đợt chuẩn bị này, vui lòng kiểm tra lại, cảm ơn!'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Update tên vụ\r\n     */\r\n    private updatePondPrepare = async (request: Request, response: Response, next: NextFunction) => {\r\n        const pondPrepare: PondPrepare = new PondPrepare();\r\n        const { pondPrepareId, pondprepareName } = request.body;\r\n        if (!pondPrepareId) {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Hành động không khuyến khích, vui lòng quay lại sau.'\r\n            });\r\n            return response.end();\r\n        }\r\n        pondPrepare.setPondPrepareId = pondPrepareId;\r\n        pondPrepare.setPondprepareName = pondprepareName;\r\n        pondPrepare.update().then(res => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: 'Cập nhật thành công.'\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau, cảm ơn!'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Thêm hoạt động chuẩn bị - transaction cũ\r\n     */\r\n    private addPrepare = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondId, ownerId, pondPrepareId, storageId, quantity, seasonAndPondId } = request.body;\r\n        if (!seasonAndPondId) {\r\n            const seasonAndPond: any = await this.seasonAndPondServices.models.findOne({\r\n                include: [\r\n                    {\r\n                        model: this.seasonServices.models,\r\n                        as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                        where: {\r\n                            userId: ownerId,\r\n                            status: 0\r\n                        },\r\n                        attributes: []\r\n                    }\r\n                ],\r\n                where: {\r\n                    pondId\r\n                },\r\n                attributes: ['seasonAndPondId']\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                });\r\n            });\r\n            return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n                const storage: Storage = new Storage();\r\n                const str: any = await storage.storegeServices.models.update(\r\n                    {\r\n                        quantityStorages: this.sequeliz.literal(`quantityStorages - ${quantity}`)\r\n                    },\r\n                    {\r\n                        where: {\r\n                            storageId\r\n                        },\r\n                        transaction: t\r\n                    }\r\n                ).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã xảy ra lỗi vui lòng thử lại sau.',\r\n                    });\r\n                    t.rollback();\r\n                });\r\n                if (str) {\r\n                    const pondPrepareDetail: PondPrepareDetail = new PondPrepareDetail();\r\n                    pondPrepareDetail.setPondpreparedetails(null, uuidv4(), pondPrepareId, storageId, quantity);\r\n                    pondPrepareDetail.pondPrepareDetailsServices.models.create(pondPrepareDetail, {\r\n                        transaction: t\r\n                    }).then(res => {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: 'Thêm thành công.'\r\n                        });\r\n                        t.commit();\r\n                    }).catch(e => {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.',\r\n                            e\r\n                        });\r\n                        t.rollback();\r\n                    });\r\n                }\r\n            });\r\n        } else {\r\n            return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n                const storage: Storage = new Storage();\r\n                const str: any = await storage.storegeServices.models.update(\r\n                    {\r\n                        quantityStorages: this.sequeliz.literal(`quantityStorages - ${quantity}`)\r\n                    },\r\n                    {\r\n                        where: {\r\n                            storageId\r\n                        },\r\n                        transaction: t\r\n                    }\r\n                ).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã xảy ra lỗi vui lòng thử lại sau.',\r\n                    });\r\n                    t.rollback();\r\n                });\r\n                if (str) {\r\n                    const pondPrepareDetail: PondPrepareDetail = new PondPrepareDetail();\r\n                    pondPrepareDetail.setPondpreparedetails(null, uuidv4(), pondPrepareId, storageId, quantity);\r\n                    pondPrepareDetail.pondPrepareDetailsServices.models.create(pondPrepareDetail, {\r\n                        transaction: t\r\n                    }).then(res => {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: 'Thêm thành công.'\r\n                        });\r\n                        t.commit();\r\n                    }).catch(e => {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.',\r\n                            e\r\n                        });\r\n                        t.rollback();\r\n                    });\r\n                }\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    private addPrepareOldPond = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondId, ownerId, pondPrepareName, detailsOfPrepare } = request.body;\r\n        const validate: any = this.validator(addPondPrepareSchema);\r\n        const filter: any = this.validator.filter(addPondPrepareSchema);\r\n        const filtered: any = filter(request.body);\r\n        const validater: boolean = validate(filtered);\r\n        if (validater) {\r\n            const snp: any = await this.seasonAndPondServices.models.findOne({\r\n                include: [\r\n                    {\r\n                        model: this.seasonServices.models,\r\n                        as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                        where: {\r\n                            userId: ownerId,\r\n                            status: 0\r\n                        },\r\n                        attributes: []\r\n                    }\r\n                ],\r\n                where: {\r\n                    pondId\r\n                },\r\n                attributes: ['seasonAndPondId']\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                });\r\n            });\r\n            if (!snp) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                });\r\n            } else {\r\n                return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n                    const pondPrepare: PondPrepare = new PondPrepare();\r\n                    pondPrepare.setPondprepare(null, uuidv4(), snp.seasonAndPondId, pondPrepareName);\r\n                    const pp: any = await pondPrepare.pondPrepareServices.models.create(pondPrepare, {\r\n                        transaction: t\r\n                    }).catch(e => {\r\n                        t.rollback();\r\n                    });\r\n                    if (pp) {\r\n                        const successArr: any[] = [];\r\n                        for (const detail of detailsOfPrepare) {\r\n                            const storage: Storage = new Storage();\r\n                            const str: any = await storage.storegeServices.models.update(\r\n                                {\r\n                                    quantityStorages: this.sequeliz.literal(`quantityStorages - ${detail.quantity}`)\r\n                                },\r\n                                {\r\n                                    where: {\r\n                                        storageId: detail.storageId\r\n                                    },\r\n                                    transaction: t\r\n                                }\r\n                            ).catch(e => {\r\n                                if (e.message === 'FailQuantity') {\r\n                                    response.status(200).json({\r\n                                        success: false,\r\n                                        message: 'Số lượng cơ sở vật chất trong kho không đủ.'\r\n                                    });\r\n                                } else {\r\n                                    response.status(200).json({\r\n                                        success: false,\r\n                                        message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.',\r\n                                    });\r\n                                }\r\n                            });\r\n                            if (!!str) {\r\n                                const pondPrepareDetail: PondPrepareDetail = new PondPrepareDetail();\r\n                                pondPrepareDetail.setPondpreparedetails(null, uuidv4(), pp.pondPrepareId, detail.storageId, detail.quantity);\r\n                                const ppd: any = await pondPrepareDetail.pondPrepareDetailsServices.models.create(pondPrepareDetail, {\r\n                                    transaction: t\r\n                                });\r\n                                if (ppd) {\r\n                                    successArr.push(1);\r\n                                }\r\n                            }\r\n                        }\r\n                        if (detailsOfPrepare.length === successArr.length) {\r\n                            t.commit();\r\n                            response.status(200).json({\r\n                                success: true,\r\n                                message: 'Thêm thành công.'\r\n                            });\r\n                        } else {\r\n                            return t.rollback();\r\n                        }\r\n                    } else {\r\n                        return t.rollback();\r\n                    }\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.',\r\n                    });\r\n                });\r\n            }\r\n        } else {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Số lượng là số nguyên và lớn hơn 1, vui lòng nhập lại!'\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Thêm hoạt động chuẩn bị ao\r\n     * Sau khi quá trình thêm kết thúc người dùng sẽ có một ao mới\r\n     */\r\n    private addNewPrepare = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondPrepareId, pondPrepareName, detailsOfPrepare } = request.body; // init\r\n        const { pondName, pondArea, pondDepth, createCost, pondLatitude, pondLongitude, status } = request.body; // Thông tin của ao mới\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n\r\n        if (!isBoss) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Bạn không đủ quyền truy cập api này.'\r\n            });\r\n        }\r\n\r\n        /** Chuẩn bị cho ao mới */\r\n        if (!pondPrepareId) {\r\n            return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n                const pond: Pond = new Pond();\r\n                pond.setPond(null, uuidv4(), ownerId, pondName, pondArea, pondDepth, createCost, DateUtil.getUTCDateTime() as any, status, status === 1 ? 1 : 0, status === 1 ? 1 : 0, defaultImage.pondImage, pondLatitude !== '' ? pondLatitude : undefined, pondLongitude !== '' ? pondLongitude : undefined);\r\n                const p: any = await this.pondsServices.models.create(pond, {\r\n                    transaction: t\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                    });\r\n                    return t.rollback();\r\n                });\r\n                if (!p) {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Lỗi dữ liệu đường truyền, vui lòng thử lại sau'\r\n                    });\r\n                    return t.rollback();\r\n                } else {\r\n                    const ss: any = await this.seasonServices.models.findOne({\r\n                        where: {\r\n                            userId: ownerId,\r\n                            status: 0\r\n                        },\r\n                        transaction: t\r\n                    }).catch(e => {\r\n                        t.rollback();\r\n                    });\r\n                    if (!ss) {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Bạn không có vụ đang kích hoạt, vui lòng kích hoạt vụ mùa để tiếp tục sử dụng hệ thống.'\r\n                        });\r\n                        return t.rollback();\r\n                    } else {\r\n                        const seasonAndPond: SeasonsAndPond = new SeasonsAndPond();\r\n                        seasonAndPond.setSeasonsAndPond(null, ss.seasonId, p.pondId);\r\n                        const snp: any = await seasonAndPond.seasonAndPondServices.models.create(seasonAndPond, {\r\n                            transaction: t\r\n                        }).catch(e => {\r\n                            return t.rollback();\r\n                        });\r\n                        if (!snp) {\r\n                            return t.rollback();\r\n                        } else {\r\n                            const pondPrepare: PondPrepare = new PondPrepare();\r\n                            pondPrepare.setPondprepare(null, uuidv4(), snp.seasonAndPondId, pondPrepareName);\r\n                            const pp: any = await pondPrepare.pondPrepareServices.models.create(pondPrepare, {\r\n                                transaction: t\r\n                            }).catch(e => {\r\n                                return t.rollback();\r\n                            });\r\n                            if (pp) {\r\n                                const successArr: any[] = [];\r\n                                for (const detail of detailsOfPrepare) {\r\n                                    const storage: Storage = new Storage();\r\n                                    const str: any = await storage.storegeServices.models.update(\r\n                                        {\r\n                                            quantityStorages: this.sequeliz.literal(`quantityStorages - ${detail.quantity}`)\r\n                                        },\r\n                                        {\r\n                                            where: {\r\n                                                storageId: detail.storageId\r\n                                            },\r\n                                            transaction: t\r\n                                        }\r\n                                    ).catch(e => {\r\n                                        if(e.message.includes('FailQuantity')) {\r\n                                            response.status(200).json({\r\n                                                success: false,\r\n                                                message: 'Không đủ số lượng trong kho.'\r\n                                            });\r\n                                        }\r\n                                        return t.rollback();\r\n                                    });\r\n                                    if (!!str) {\r\n                                        const pondPrepareDetail: PondPrepareDetail = new PondPrepareDetail();\r\n                                        pondPrepareDetail.setPondpreparedetails(null, uuidv4(), pp.pondPrepareId, detail.storageId, detail.quantity);\r\n                                        const ppd: any = await pondPrepareDetail.pondPrepareDetailsServices.models.create(pondPrepareDetail, {\r\n                                            transaction: t\r\n                                        }).catch(e => {\r\n                                            response.status(200).json({\r\n                                                success: false,\r\n                                                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.',\r\n                                            });\r\n                                            return t.rollback();\r\n                                        });\r\n                                        if (ppd) {\r\n                                            successArr.push(1);\r\n                                        } else {\r\n                                            return t.rollback();\r\n                                        }\r\n                                    }\r\n                                }\r\n                                if (detailsOfPrepare.length === successArr.length) {\r\n                                    response.status(200).json({\r\n                                        success: true,\r\n                                        message: 'Thêm thành công.'\r\n                                    });\r\n                                    return t.commit();\r\n                                }\r\n                            } else {\r\n                                return t.rollback();\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            // .catch(e => {\r\n            //     if(e.message.includes('FailQuantity')) {\r\n            //         return response.status(200).json({\r\n            //             success: false,\r\n            //             message: 'Không đủ số lượng trong kho.'\r\n            //         });\r\n            //     } else {\r\n            //         return response.status(200).json({\r\n            //             success: false,\r\n            //             message: 'Đã xảy ra lỗi vui lòng thử lại sau.',\r\n            //         });\r\n            //     }\r\n            // });\r\n        }\r\n    }\r\n\r\n    private addIncurred = async (request: Request, response: Response, next: NextFunction) => {\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const { pondPrepareId, incurredName, value, notes } = request.body;\r\n        const incurred: Incurred = new Incurred();\r\n        incurred.setIncurred(null, uuidv4(), pondPrepareId, userId, incurredName, value, notes);\r\n        incurred.incurredsServices.models.create(incurred).then(res => {\r\n            if (!res) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: 'Thêm thành phí phát sinh thành công.'\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private updateIncurred = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { incurredUUId, incurredName, value, notes } = request.body;\r\n        this.incurredsServices.models.update({\r\n            incurredName, value, notes\r\n        }, {\r\n                where: {\r\n                    incurredUUId\r\n                },\r\n                returning: true\r\n            }).then(res => {\r\n                if (!res) {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Cập nhật thành công phí phát sinh thành công.'\r\n                    });\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                });\r\n            });\r\n    }\r\n\r\n    private getIncurredByIncurredUUId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { incurredUUId } = request.body;\r\n        this.incurredsServices.models.findOne({\r\n            where: {\r\n                incurredUUId\r\n            }\r\n        }).then(res => {\r\n            if (!res) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy thông tin chi phí phát sinh.'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    incurred: res\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './pondPrepareDetails.route';\r\n","import { PondPrepareDetail, Material } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { Transaction } from 'sequelize';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class PondPrepareDetailRoute extends BaseRoute {\r\n    public static path = '/PondPrepareDetails';\r\n    private static instance: PondPrepareDetailRoute;\r\n    /**\r\n     * @class PondPrepareDetailRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!PondPrepareDetailRoute.instance) {\r\n            PondPrepareDetailRoute.instance = new PondPrepareDetailRoute();\r\n        }\r\n        return PondPrepareDetailRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[PondPrepareDetailRoute] Creating details of preparing pond action route.');\r\n\r\n        // add route\r\n        this.router.post('/add', Authentication.isLogin, this.addDetail);\r\n        this.router.put('/update', Authentication.isLogin, this.updatePondPrepare);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, PondPrepareDetailRoute.path);\r\n    }\r\n\r\n    /**\r\n     * Thêm lần chuẩn bị\r\n     * @params [seasonAndPondId, pondprepareName, notes?, materialId]\r\n     */\r\n    private addDetail = async (request: Request, response: Response, next: NextFunction) => {\r\n        const pondPrepareDetail: PondPrepareDetail = new PondPrepareDetail();\r\n        const { pondPrepareId, materialId, quantity } = request.body;\r\n        pondPrepareDetail.setPondpreparedetails(undefined, uuidv4(), pondPrepareId, materialId, quantity);\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            const material = new Material();\r\n            return material.materialServives.models.update({\r\n                quantity: this.sequeliz.literal(`quantity - ${ quantity }`),\r\n            }, {\r\n                where: {\r\n                    materialId\r\n                },\r\n                transaction: t\r\n            }).then(async () => {\r\n                return pondPrepareDetail.pondPrepareDetailsServices.models.create(pondPrepareDetail, { transaction: t }).then(() => {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Thao tác thành công.'\r\n                    });\r\n                    return t.commit();\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Có lỗi xảy ra, chưa thêm được nhật ký chuẩn bị, xin thử lại, cảm ơn!'\r\n                    });\r\n                });\r\n            }).catch(e => {\r\n                t.rollback();\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Trong kho không đủ số lượng, vui lòng kiểm tra lại, cảm ơn!'\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    private updatePondPrepare = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { materialId, pondPrepareId, quantityOld, quantityNew, pondPrepareDetailId } = request.body;\r\n        const quantity = (quantityOld * 1) - (quantityNew * 1);\r\n        const pondPrepareDetail: PondPrepareDetail = new PondPrepareDetail();\r\n        pondPrepareDetail.setPondpreparedetails(pondPrepareDetailId, undefined, pondPrepareId, materialId, quantity);\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            const material = new Material();\r\n            return material.materialServives.models.update({\r\n                quantity: this.sequeliz.literal(`quantity + ${ quantity }`),\r\n            }, {\r\n                where: {\r\n                    materialId\r\n                },\r\n                transaction: t\r\n            }).then(async () => {\r\n                return pondPrepareDetail.pondPrepareDetailsServices.models.update(pondPrepareDetail, {\r\n                    where: {\r\n                        // pondPrepareDetailId: pondPrepareDetail.getPondPrepareDetailId,\r\n                        // [material.materialServives.Op.any]: {\r\n                        //     createdDate:\r\n                        // }\r\n                    },\r\n                    transaction: t\r\n                }).then(() => {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Cập nhật thành công!'\r\n                    });\r\n                    return t.commit();\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Có lỗi xảy ra, vui lòng thử lại, cảm ơn!'\r\n                    });\r\n                    t.rollback();\r\n                });\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Trong kho không đủ số lượng, vui lòng kiểm tra lại, cảm ơn!'\r\n                });\r\n                t.rollback();\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './storages.route';\r\n","import { Storage, Coupon, Material } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, StoregeServices, StoregeOwnwerServices, UserRolesServices, UserServives, SeasonServices, CouponServives, MaterialServives, BoughtBreedDetailsServives, BreedServives } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { Transaction, FindOptions } from 'sequelize';\r\n\r\n/**\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class StorageRoute extends BaseRoute {\r\n    public static path = '/storages';\r\n    private static instance: StorageRoute;\r\n    private storegeOwnwerServices: StoregeOwnwerServices = new StoregeOwnwerServices();\r\n    private userRolesServices: UserRolesServices = new UserRolesServices();\r\n    private userServives: UserServives = new UserServives();\r\n    private storegeServices: StoregeServices = new StoregeServices();\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private couponServives: CouponServives = new CouponServives();\r\n    private materialServives: MaterialServives = new MaterialServives();\r\n    private boughtBreedDetailsServives: BoughtBreedDetailsServives = new BoughtBreedDetailsServives();\r\n    private breedServives: BreedServives = new BreedServives();\r\n    /**\r\n     * @class StorageRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!StorageRoute.instance) {\r\n            StorageRoute.instance = new StorageRoute();\r\n        }\r\n        return StorageRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[StorageRoute] Creating storage route.');\r\n\r\n        // add route\r\n        this.router.get('/gets', Authentication.isLogin, this.getStorages);\r\n        this.router.get('/gets/:storageId', Authentication.isLogin, this.getStorageById);\r\n        this.router.get('/coupons/gets/:seasonId', Authentication.isLogin, this.getCoupon);\r\n        this.router.post('/add', Authentication.isLogin, this.addStorage);\r\n        this.router.put('/update', Authentication.isLogin, this.updateStorage);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, StorageRoute.path);\r\n    }\r\n\r\n    private addStorage = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { couponId, itemArr } = request.body;\r\n\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n\r\n        this.userServives.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.userRolesServices.models,\r\n                    as: ActionAssociateDatabase.USER_2_ROLES_GET_EMPLOYEES,\r\n                    required: false,\r\n                    where: {\r\n                        [this.sequeliz.Op.or]: [\r\n                            {\r\n                                userId\r\n                            },\r\n                            {\r\n                                bossId: userId\r\n                            },\r\n                        ],\r\n                        roles: 2\r\n                    } as any\r\n                },\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.USER_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    }\r\n                }\r\n            ]\r\n        } as any).then(res => {\r\n            if (!res.length) {\r\n                return response.status(200).json({\r\n                    success: false,\r\n                    message: 'Bạn không có vụ nào đang hoạt động, vui lòng thêm một vụ và quay lại sau.'\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Bạn không có quyền truy cập api này.'\r\n            });\r\n        });\r\n\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            const boss: any = await this.storegeOwnwerServices.models.findOne({\r\n                include: [\r\n                    {\r\n                        model: this.userServives.models,\r\n                        as: ActionAssociateDatabase.OWNER_TO_USER,\r\n                        include: [\r\n                            {\r\n                                model: this.seasonServices.models,\r\n                                as: ActionAssociateDatabase.USER_2_SEASON,\r\n                                where: {\r\n                                    userId: ownerId,\r\n                                    status: 0\r\n                                }\r\n                            },\r\n                            {\r\n                                model: this.userRolesServices.models,\r\n                                as: ActionAssociateDatabase.USER_2_ROLES_GET_EMPLOYEES,\r\n                                required: false,\r\n                                where: {\r\n                                    [this.sequeliz.Op.or]: [\r\n                                        {\r\n                                            userId\r\n                                        },\r\n                                        {\r\n                                            bossId: userId\r\n                                        },\r\n                                    ],\r\n                                    roles: 2\r\n                                } as any\r\n                            }\r\n                        ],\r\n                        attributes: ['userId', 'userUUId', 'lastname', 'firstname', 'username', 'createdDate', 'createdBy']\r\n                    }\r\n                ],\r\n                where: {\r\n                    userId: ownerId\r\n                },\r\n                transaction: t\r\n            });\r\n            if (boss && boss.user.seasons.length) {\r\n                const coupon: Coupon = new Coupon();\r\n                coupon.setUserId = userId;\r\n                coupon.setSeasonId = boss.user.seasons[0].seasonId;\r\n                const cp: any = await coupon.couponServives.models.create(coupon, {\r\n                    transaction: t\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Lỗi xác thực người dùng, vui lòng liên hệ nhà cung cấp để được hỗ trợ.'\r\n                    });\r\n                    t.rollback();\r\n                });\r\n                if (cp) {\r\n                    const result: any[] = [];\r\n                    for (const item of itemArr) {\r\n                        const storage: Storage = new Storage();\r\n                        if (typeof item.product === 'string')/* Là vật phẩm mới */ {\r\n                            storage.setStorages(null, uuidv4(), boss.storageOwnerId, item.product, item.quantity, item.unit, item.type, item.descriptions);\r\n                            const sto: any = await storage.storegeServices.models.create(storage, {\r\n                                transaction: t\r\n                            }).catch(e => {\r\n                                response.status(200).json({\r\n                                    success: false,\r\n                                    message: `Thực hiện không thành công, vui lòng kiểm tra và thử lại sau.`,\r\n                                    position: item.position,\r\n                                    couponId: cp.couponId\r\n                                });\r\n                                t.rollback();\r\n                            });\r\n                            if (sto) {\r\n                                const material: Material = new Material();\r\n                                material.setMaterial(null, uuidv4(), cp.couponId, sto.storageId, item.provider, item.providerAddress, item.quantity, item.unit, item.unitPrice);\r\n                                const mat: any = await material.materialServives.models.create(material, {\r\n                                    transaction: t\r\n                                }).catch(async e => {\r\n                                    if (e.message.includes('FailWithInsertQuantityOfMaterials')) {\r\n                                        response.status(200).json({\r\n                                            success: false,\r\n                                            message: 'Lỗi nhập liệu số lượng vui lòng kiểm tra lại.',\r\n                                            position: item.position,\r\n                                            couponId: cp.couponId\r\n                                        });\r\n                                    } else {\r\n                                        response.status(200).json({\r\n                                            success: false,\r\n                                            message: `Thực hiện không thành công, vui lòng kiểm tra và thử lại sau.`,\r\n                                            position: item.position,\r\n                                            couponId: cp.couponId\r\n                                        });\r\n                                    }\r\n                                    t.rollback();\r\n                                });\r\n                                if (mat) {\r\n                                    result.push(mat);\r\n                                } else {\r\n                                    response.status(200).json({\r\n                                        success: false,\r\n                                        message: `Thực hiện không thành công, vui lòng kiểm tra và thử lại sau.`,\r\n                                        position: item.position,\r\n                                        couponId: cp.couponId\r\n                                    });\r\n                                    t.rollback();\r\n                                }\r\n                            } else {\r\n                                response.status(200).json({\r\n                                    success: false,\r\n                                    message: 'Thực hiện không thành công, vui lòng kiểm tra và thử lại sau.'\r\n                                });\r\n                                t.rollback();\r\n                            }\r\n                        } else/** Vật phẩm cũ */ {\r\n                            const sUpdate: any = await storage.storegeServices.models.update({\r\n                                quantityStorages: this.sequeliz.literal(`quantityStorages + ${item.quantity}`)\r\n                            }, {\r\n                                    where: {\r\n                                        storageId: item.product.storageId,\r\n                                        unit: item.product.unit\r\n                                    },\r\n                                    transaction: t\r\n                                }).catch(e => {\r\n                                    response.status(200).json({\r\n                                        success: false,\r\n                                        message: 'Lỗi nhập liệu vui lòng kiểm tra lại.'\r\n                                    });\r\n                                    t.rollback();\r\n                                });\r\n                            if (sUpdate.length > 0) {\r\n                                const material: Material = new Material();\r\n                                material.setMaterial(null, uuidv4(), cp.couponId, item.product.storageId, item.provider, item.providerAddress, item.quantity, item.product.unit, item.unitPrice);\r\n                                const mat = await material.materialServives.models.create(material, { transaction: t }).catch(e => {\r\n                                    if (e.message.includes('FailWithInsertQuantityOfMaterials')) {\r\n                                        response.status(200).json({\r\n                                            success: false,\r\n                                            message: 'Lỗi nhập liệu số lượng vui lòng kiểm tra lại.',\r\n                                            position: item.position,\r\n                                            couponId: cp.couponId\r\n                                        });\r\n                                    } else {\r\n                                        response.status(200).json({\r\n                                            success: false,\r\n                                            message: `Thực hiện không thành công, vui lòng kiểm tra và thử lại sau.`,\r\n                                            position: item.position,\r\n                                            couponId: cp.couponId\r\n                                        });\r\n                                    }\r\n                                    t.rollback();\r\n                                });\r\n                                if (mat) {\r\n                                    result.push(mat);\r\n                                } else {\r\n                                    response.status(200).json({\r\n                                        success: false,\r\n                                        message: `Thực hiện không thành công, vui lòng kiểm tra và thử lại sau.`,\r\n                                        position: item.position,\r\n                                        couponId: cp.couponId\r\n                                    });\r\n                                    t.rollback();\r\n                                }\r\n                            } else {\r\n                                response.status(200).json({\r\n                                    success: false,\r\n                                    message: `Lỗi nhập liệu số lượng vui lòng kiểm tra lại.`,\r\n                                    position: item.position,\r\n                                    couponId: cp.couponId\r\n                                });\r\n                                t.rollback();\r\n                            }\r\n                        }\r\n                    }\r\n                    if (result.length === itemArr.length) {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: 'Thêm thành công.'\r\n                        });\r\n                        t.commit();\r\n                    } else {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Có lỗi xảy ra, vui lòng thử lại sau.',\r\n                            couponId: cp.couponId\r\n                        });\r\n                        t.rollback();\r\n                    }\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Thực hiện không thành công, vui lòng thử lại sau.'\r\n                    });\r\n                    t.rollback();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private getStorages = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { type } = request.headers;\r\n\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy === null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n\r\n        this.storegeServices.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.storegeOwnwerServices.models,\r\n                    as: ActionAssociateDatabase.STORAGE_2_OWNER,\r\n                    include: [\r\n                        {\r\n                            model: this.userServives.models,\r\n                            as: ActionAssociateDatabase.OWNER_TO_USER,\r\n                            include: [\r\n                                {\r\n                                    model: this.userRolesServices.models,\r\n                                    as: ActionAssociateDatabase.USER_2_ROLES_GET_EMPLOYEES,\r\n                                    required: false\r\n                                }\r\n                            ],\r\n                            attributes: ['userId', 'userUUId', 'lastname', 'firstname', 'username', 'createdDate', 'createdBy']\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    model: this.materialServives.models,\r\n                    as: ActionAssociateDatabase.STORAGE_2_MATERIAL,\r\n                    include: [\r\n                        {\r\n                            model: this.couponServives.models,\r\n                            as: ActionAssociateDatabase.MATERIAL_2_COUPON\r\n                        }\r\n                    ]\r\n                }\r\n            ],\r\n            where: {\r\n                [this.sequeliz.Op.or]: [\r\n                    {\r\n                        '$owner.userId$': userId,\r\n                    },\r\n                    {\r\n                        '$owner->user->employees.userId$': userId,\r\n                        '$owner->user->employees.roles$': 2\r\n                    },\r\n                    {\r\n                        '$owner->user->employees.userId$': userId,\r\n                        '$owner->user->employees.roles$': 1\r\n                    }\r\n                ],\r\n                type: (type as any) - 0\r\n            } as any\r\n        }).then((s: any) => {\r\n            if (!s.length) {\r\n                return response.status(200).json({\r\n                    success: false,\r\n                    message: 'Bạn không có vật phẩm nào trong kho của mình!',\r\n                    storages: s\r\n                });\r\n            }\r\n            return response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                storages: s\r\n            });\r\n        }).catch(e => {\r\n            e;\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Có lỗi xảy ra, vui lòng thử lại sau!'\r\n            });\r\n        });\r\n    }\r\n\r\n    private getStorageById =  async (request: Request, response: Response, next: NextFunction) => {\r\n        //\r\n    }\r\n\r\n    private updateStorage = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { storageUUId } = request.body;\r\n    }\r\n\r\n    /**\r\n     * @method POST\r\n     */\r\n    private getCoupon = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonId } = request.params;\r\n        const query: FindOptions<any> = {\r\n            include: [\r\n                {\r\n                    model: this.materialServives.models,\r\n                    as: ActionAssociateDatabase.COUPON_2_MATERIAL,\r\n                    required: false,\r\n                    include: [\r\n                        {\r\n                            model: this.storegeServices.models,\r\n                            as: ActionAssociateDatabase.MATERIAL_2_STORAGE\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    model: this.boughtBreedDetailsServives.models,\r\n                    as: ActionAssociateDatabase.COUPON_2_BOUGHT_BREED_DETAILS,\r\n                    required: false,\r\n                    include: [\r\n                        {\r\n                            model: this.breedServives.models,\r\n                            as: ActionAssociateDatabase.BOUGHT_BREED_DETAIL_2_BREED\r\n                        }\r\n                    ]\r\n                }\r\n            ],\r\n            where: {\r\n                seasonId\r\n            }\r\n        };\r\n        this.couponServives.models.findAll(query).then(res => {\r\n            if (!res.length) {\r\n                return response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy bất kỳ lịch sử nhập kho nào.',\r\n                    coupons: res\r\n                });\r\n            }\r\n            return response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                coupons: res\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.',\r\n                e\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './breed.route';\r\n","import { Coupon } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { BoughtBreed, Breed, BoughtBreedDetail } from '../../components';\r\nimport { logger, UserRolesServices, UserServives, BreedOwnwerServices, BreedServives, SeasonServices, BoughtBreedDetailsServives, CouponServives } from '../../services';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { Transaction, FindOptions } from 'sequelize';\r\nimport * as uuidv4 from 'uuid/v4';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class BreedRoute extends BaseRoute {\r\n    public static path = '/breeds';\r\n    private static instance: BreedRoute;\r\n    private breedOwnwerServices: BreedOwnwerServices = new BreedOwnwerServices();\r\n    private userRolesServices: UserRolesServices = new UserRolesServices();\r\n    private userServives: UserServives = new UserServives();\r\n    private breedServives: BreedServives = new BreedServives();\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private boughtBreedDetailsServives: BoughtBreedDetailsServives = new BoughtBreedDetailsServives();\r\n    private couponServives: CouponServives = new CouponServives();\r\n    /**\r\n     * @class BreedRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!BreedRoute.instance) {\r\n            BreedRoute.instance = new BreedRoute();\r\n        }\r\n        return BreedRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[BreedRoute] Creating breed route.');\r\n\r\n        // add route\r\n        this.router.get('/gets', Authentication.isLogin, this.getBreed);\r\n        this.router.post('/add', Authentication.isLogin, this.addBreed);\r\n\r\n        // Log path\r\n        this.logEndpoints(this.router, BreedRoute.path);\r\n    }\r\n\r\n    addBreed = async (request: Request, response: Response) => {\r\n        const { couponId, itemArr } = request.body;\r\n\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n\r\n        // this.userServives.models.findAll({\r\n        //     include: [\r\n        //         {\r\n        //             model: this.userRolesServices.models,\r\n        //             as: ActionAssociateDatabase.USER_2_ROLES_USER,\r\n        //             required: false,\r\n        //             where: {\r\n        //                 userId\r\n        //             }\r\n        //         },\r\n        //         {\r\n        //             model: this.userRolesServices.models,\r\n        //             as: ActionAssociateDatabase.USER_2_ROLES_GET_EMPLOYEES,\r\n        //             required: false,\r\n        //             where: {\r\n        //                 bossId: userId\r\n        //             }\r\n        //         },\r\n        //         {\r\n        //             model: this.seasonServices.models,\r\n        //             as: ActionAssociateDatabase.USER_2_SEASON,\r\n        //             where: {\r\n        //                 userId,\r\n        //                 status: 0\r\n        //             }\r\n        //         }\r\n        //     ]\r\n        // } as any).then(res => {\r\n        //     if (!res.length) {\r\n        //         return response.status(200).json({\r\n        //             success: false,\r\n        //             message: 'Bạn không có vụ nào đang hoạt động, vui lòng thêm một vụ và quay lại sau.'\r\n        //         });\r\n        //     }\r\n        // }).catch(e => {\r\n        //     return response.status(200).json({\r\n        //         success: false,\r\n        //         message: 'Bạn không có quyền truy cập api này.'\r\n        //     });\r\n        // });\r\n\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            const boss: any = await this.breedOwnwerServices.models.findOne({\r\n                include: [\r\n                    {\r\n                        model: this.userServives.models,\r\n                        as: ActionAssociateDatabase.OWNER_TO_USER,\r\n                        include: [\r\n                            {\r\n                                model: this.seasonServices.models,\r\n                                as: ActionAssociateDatabase.USER_2_SEASON,\r\n                                where: {\r\n                                    userId: ownerId,\r\n                                    status: 0\r\n                                }\r\n                            },\r\n                            {\r\n                                model: this.userRolesServices.models,\r\n                                as: ActionAssociateDatabase.USER_2_ROLES_GET_EMPLOYEES,\r\n                                required: false,\r\n                                where: {\r\n                                    [this.sequeliz.Op.or]: [\r\n                                        {\r\n                                            userId\r\n                                        },\r\n                                        {\r\n                                            bossId: userId\r\n                                        },\r\n                                    ],\r\n                                    roles: 2\r\n                                } as any\r\n                            }\r\n                        ],\r\n                        attributes: ['userId', 'userUUId', 'lastname', 'firstname', 'username', 'createdDate', 'createdBy']\r\n                    }\r\n                ],\r\n                where: {\r\n                    userId: ownerId\r\n                },\r\n                transaction: t\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n                });\r\n                t.rollback();\r\n            });\r\n            // Là chủ và phiên nhập mới\r\n            if (boss && boss.user.seasons.length) {\r\n                const coupon: Coupon = new Coupon();\r\n                coupon.setUserId = userId;\r\n                coupon.setSeasonId = boss.user.seasons[0].seasonId;\r\n                const cp: any = await coupon.couponServives.models.create(coupon, {\r\n                    transaction: t\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Lỗi xác thực người dùng, vui lòng liên hệ nhà cung cấp để được hỗ trợ.'\r\n                    });\r\n                    t.rollback();\r\n                });\r\n                if (cp) {\r\n                    const result: any[] = [];\r\n                    for (const item of itemArr) {\r\n                        const breed: Breed = new Breed();\r\n                        if (typeof item.breedName === 'string') {\r\n                            breed.setBreed(null, uuidv4(), boss.ownerId, item.breedName, item.quantity, item.unit, item.loopOfBreed);\r\n                            const bre: any = await breed.breedServives.models.create(breed, {\r\n                                transaction: t\r\n                            }).catch(e => {\r\n                                response.status(200).json({\r\n                                    success: false,\r\n                                    message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n                                });\r\n                                t.rollback();\r\n                            });\r\n                            if (bre) {\r\n                                const boughtBreedDetail: BoughtBreedDetail = new BoughtBreedDetail();\r\n                                boughtBreedDetail.setBoughtBreedDetails(null, uuidv4(),cp.couponId, bre.breedId, item.quantity, item.unit, item.unitPrice, item.soldAddress, item.testingAgency, item.testingAgency);\r\n                                const mat: any = await boughtBreedDetail.boughtBreedDetailsServives.models.create(boughtBreedDetail, {\r\n                                    transaction: t\r\n                                }).catch(async e => {\r\n                                    if (e.message.includes('FailQuantityBoughtBreedDetails')) {\r\n                                        response.status(200).json({\r\n                                            success: false,\r\n                                            message: 'Lỗi nhập liệu số lượng vui lòng kiểm tra lại.',\r\n                                            position: item.position,\r\n                                            couponId: cp.couponId\r\n                                        });\r\n                                    } else {\r\n                                        response.status(200).json({\r\n                                            success: false,\r\n                                            message: `Thực hiện không thành công, vui lòng kiểm tra và thử lại sau.`,\r\n                                            position: item.position,\r\n                                            couponId: cp.couponId\r\n                                        });\r\n                                    }\r\n                                    t.rollback();\r\n                                });\r\n                                if (mat) {\r\n                                    result.push(mat);\r\n                                }\r\n                            }\r\n                        } else {\r\n                            const sUpdate: any = await breed.breedServives.models.update({\r\n                                totalQuantity: this.sequeliz.literal(`totalQuantity + ${item.quantity}`)\r\n                            }, {\r\n                                    where: {\r\n                                        breedId: item.breedName.breedId,\r\n                                        unit: item.breedName.unit\r\n                                    },\r\n                                    returning: true,\r\n                                    transaction: t\r\n                                }).catch(e => {\r\n                                    if (e.message.includes('FailQuantityBreed')) {\r\n                                        response.status(200).json({\r\n                                            success: false,\r\n                                            message: 'Lỗi nhập liệu số lượng vui lòng kiểm tra lại.',\r\n                                            position: item.position,\r\n                                            couponId: cp.couponId\r\n                                        });\r\n                                    } else {\r\n                                        response.status(200).json({\r\n                                            success: false,\r\n                                            message: `Thực hiện không thành công, vui lòng kiểm tra và thử lại sau.`,\r\n                                            position: item.position,\r\n                                            couponId: cp.couponId\r\n                                        });\r\n                                    }\r\n                                    t.rollback();\r\n                                });\r\n                            if (sUpdate.length > 0) {\r\n                                const boughtBreedDetail: BoughtBreedDetail = new BoughtBreedDetail();\r\n                                boughtBreedDetail.setBoughtBreedDetails(null, uuidv4(), cp.couponId, item.breedName.breedId, item.quantity, item.breedName.unit, item.unitPrice, item.soldAddress, item.testingAgency, item.testingAgency);\r\n                                const boughtBre = await boughtBreedDetail.boughtBreedDetailsServives.models.create(boughtBreedDetail, { transaction: t }).catch(e => {\r\n                                    if (e.message.includes('FailQuantityBoughtBreedDetails')) {\r\n                                        response.status(200).json({\r\n                                            success: false,\r\n                                            message: 'Lỗi nhập liệu số lượng vui lòng kiểm tra lại.',\r\n                                            position: item.position,\r\n                                            couponId: cp.couponId\r\n                                        });\r\n                                    } else {\r\n                                        response.status(200).json({\r\n                                            success: false,\r\n                                            message: `Thực hiện không thành công, vui lòng kiểm tra và thử lại sau.`,\r\n                                            position: item.position,\r\n                                            couponId: cp.couponId\r\n                                        });\r\n                                    }\r\n                                    t.rollback();\r\n                                });\r\n                                result.push(boughtBre);\r\n                            } else {\r\n                                t.rollback();\r\n                                response.status(200).json({\r\n                                    success: false,\r\n                                    message: `Có lỗi xảy ra.`,\r\n                                    position: item.position,\r\n                                    couponId: cp.couponId\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                    if (result.length === itemArr.length) {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: 'Thao tác thành công.'\r\n                        });\r\n                        t.commit();\r\n                    } else {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Có lỗi xảy ra, vui lòng thử lại sau.',\r\n                            couponId: cp.couponId\r\n                        });\r\n                        t.rollback();\r\n                    }\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Thực hiện không thành công, vui lòng thử lại sau.'\r\n                    });\r\n                    t.rollback();\r\n                }\r\n            }\r\n            // // Nhân viên và phiên nhập mới\r\n            // else if (!boss && !boughtBreedId) {\r\n            //     boss = await this.userRolesServices.models.findOne({\r\n            //         where: {\r\n            //             userId: deToken.userId,\r\n            //             [this.userRolesServices.Op.and]: {\r\n            //                 roles: 2\r\n            //             }\r\n            //         },\r\n            //         include: [\r\n            //             {\r\n            //                 model: this.userServives.models,\r\n            //                 as: ActionAssociateDatabase.USER_ROLES_2_USER_BOSS,\r\n            //                 include: [\r\n            //                     {\r\n            //                         model: this.breedOwnwerServices.models,\r\n            //                         as: ActionAssociateDatabase.USER_2_OWNER_BREED\r\n            //                     }\r\n            //                 ],\r\n            //                 attributes: ['userId', 'userUUId', 'lastname', 'firstname', 'username', 'createdDate', 'createdBy']\r\n            //             }\r\n            //         ],\r\n            //         transaction: t\r\n            //     }).catch(e => {\r\n            //         response.status(200).json({\r\n            //             success: false,\r\n            //             message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n            //         });\r\n            //         t.rollback();\r\n            //     });\r\n            //     if (boss) {\r\n            //         const ss: any = await this.seasonServices.models.findOne({\r\n            //             where: {\r\n            //                 userId: deToken.userId,\r\n            //                 status: 0\r\n            //             }\r\n            //         }).catch(e => {\r\n            //             response.status(200).json({\r\n            //                 success: false,\r\n            //                 message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n            //             });\r\n            //             t.rollback();\r\n            //         });\r\n            //         if (!ss) {\r\n            //             response.status(200).json({\r\n            //                 success: false,\r\n            //                 message: 'Hiện tại bạn chưa có vụ nào được kích hoạt vui lòng thêm một vụ.'\r\n            //             });\r\n            //             t.rollback();\r\n            //         } else {\r\n            //             const boughtBreed: BoughtBreed = new BoughtBreed();\r\n            //             boughtBreed.setBoughtBreedUUId = uuidv4();\r\n            //             boughtBreed.setUserId = deToken.userId;\r\n            //             boughtBreed.setSeasonId = ss.seasonId;\r\n            //             const bb: any = await boughtBreed.boughtBreedServives.models.create(boughtBreed, {\r\n            //                 transaction: t\r\n            //             });\r\n            //             if (bb) {\r\n            //                 const result: any[] = [];\r\n            //                 for (const item of itemArr) {\r\n            //                     const breed: Breed = new Breed();\r\n            //                     if (typeof item.breedName === 'string') {\r\n            //                         breed.setBreed(null, uuidv4(), boss.ownerId, item.breedName, item.quantity, item.unit, item.loopOfBreed);\r\n            //                         const bre: any = await breed.breedServives.models.create(breed, {\r\n            //                             transaction: t\r\n            //                         }).catch(e => {\r\n            //                             response.status(200).json({\r\n            //                                 success: false,\r\n            //                                 message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n            //                             });\r\n            //                             t.rollback();\r\n            //                         });\r\n            //                         if (bre) {\r\n            //                             const boughtBreedDetail: BoughtBreedDetail = new BoughtBreedDetail();\r\n            //                             boughtBreedDetail.setBoughtBreedDetails(null, uuidv4(), bb.boughtBreedId, bre.breedId, item.quantity, item.unit, item.unitPrice, item.soldAddress, item.testingAgency, item.testingAgency);\r\n            //                             const mat: any = await boughtBreedDetail.boughtBreedDetailsServives.models.create(boughtBreedDetail, {\r\n            //                                 transaction: t\r\n            //                             }).catch(async e => {\r\n            //                                 response.status(200).json({\r\n            //                                     success: false,\r\n            //                                     message: `Thực hiện không thành công, bị lỗi ở form nhập thứ ${item.position + 1}.`,\r\n            //                                     couponId: bb.boughtBreedId\r\n            //                                 });\r\n            //                                 t.rollback();\r\n            //                             });\r\n            //                             if (mat) {\r\n            //                                 result.push(mat);\r\n            //                             }\r\n            //                         }\r\n            //                     } else {\r\n            //                         const sUpdate: any = await breed.breedServives.models.update({\r\n            //                             totalQuantity: this.sequeliz.literal(`totalQuantity + ${item.quantity}`)\r\n            //                         }, {\r\n            //                                 where: {\r\n            //                                     breedId: item.breedName.breedId\r\n            //                                 },\r\n            //                                 transaction: t\r\n            //                             }).catch(e => {\r\n            //                                 response.status(200).json({\r\n            //                                     success: false,\r\n            //                                     message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n            //                                 });\r\n            //                                 t.rollback();\r\n            //                             });\r\n            //                         if (sUpdate.length > 0) {\r\n            //                             const boughtBreedDetail: BoughtBreedDetail = new BoughtBreedDetail();\r\n            //                             boughtBreedDetail.setBoughtBreedDetails(null, uuidv4(), bb.boughtBreedId, item.breedName.breedId, item.quantity, item.unit, item.unitPrice, item.soldAddress, item.testingAgency, item.testingAgency);\r\n            //                             const boughtBre = await boughtBreedDetail.boughtBreedDetailsServives.models.create(boughtBreedDetail, { transaction: t }).catch(e => {\r\n            //                                 response.status(200).json({\r\n            //                                     success: false,\r\n            //                                     message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n            //                                 });\r\n            //                                 t.rollback();\r\n            //                             });\r\n            //                             result.push(boughtBre);\r\n            //                         } else {\r\n            //                             t.rollback();\r\n            //                             response.status(200).json({\r\n            //                                 success: false,\r\n            //                                 message: `Thực hiện không thành công, bị lỗi ở form nhập thứ ${item.position + 1}.`,\r\n            //                                 position: item.position,\r\n            //                                 couponId: bb.boughtBreedId\r\n            //                             });\r\n            //                         }\r\n            //                     }\r\n            //                 }\r\n            //                 if (result.length === itemArr.length) {\r\n            //                     response.status(200).json({\r\n            //                         success: true,\r\n            //                         message: 'Thêm thành công, vui lòng đợi...'\r\n            //                     });\r\n            //                     t.commit();\r\n            //                 } else {\r\n            //                     response.status(200).json({\r\n            //                         success: false,\r\n            //                         message: 'Có lỗi xảy ra, vui lòng thử lại sau.',\r\n            //                         couponId: bb.boughtBreedId\r\n            //                     });\r\n            //                     t.rollback();\r\n            //                 }\r\n            //             }\r\n            //         }\r\n            //     } else {\r\n            //         response.status(200).json({\r\n            //             success: false,\r\n            //             message: 'Bạn chưa đủ thẩm quyền thực hiện thao tác, vui lòng liên hệ với quản lý của bạn để được hỗ trợ.'\r\n            //         });\r\n            //     }\r\n            // }\r\n            // // Nhân viên và phiên nhập cũ\r\n            // else if (!boss && boughtBreedId) {\r\n            //     boss = await this.userRolesServices.models.findOne({\r\n            //         where: {\r\n            //             userId: deToken.userId,\r\n            //             [this.userRolesServices.Op.and]: {\r\n            //                 roles: 2\r\n            //             }\r\n            //         },\r\n            //         include: [\r\n            //             {\r\n            //                 model: this.userServives.models,\r\n            //                 as: ActionAssociateDatabase.USER_ROLES_2_USER_BOSS,\r\n            //                 include: [\r\n            //                     {\r\n            //                         model: this.breedOwnwerServices.models,\r\n            //                         as: ActionAssociateDatabase.USER_2_OWNER_BREED\r\n            //                     }\r\n            //                 ],\r\n            //                 attributes: ['userId', 'userUUId', 'lastname', 'firstname', 'username', 'createdDate', 'createdBy']\r\n            //             }\r\n            //         ],\r\n            //         transaction: t\r\n            //     }).catch(e => {\r\n            //         response.status(200).json({\r\n            //             success: false,\r\n            //             message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n            //         });\r\n            //         t.rollback();\r\n            //     });\r\n            //     if (boss) {\r\n            //         const result: any[] = [];\r\n            //         for (const item of itemArr) {\r\n            //             const breed: Breed = new Breed();\r\n            //             if (typeof item.breedName === 'string') {\r\n            //                 breed.setBreed(null, uuidv4(), boss.ownerId, item.breedName, item.quantity, item.unit, item.loopOfBreed);\r\n            //                 const bre: any = await breed.breedServives.models.create(breed, {\r\n            //                     transaction: t\r\n            //                 }).catch(e => {\r\n            //                     response.status(200).json({\r\n            //                         success: false,\r\n            //                         message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n            //                     });\r\n            //                     t.rollback();\r\n            //                 });\r\n            //                 if (bre) {\r\n            //                     const boughtBreedDetail: BoughtBreedDetail = new BoughtBreedDetail();\r\n            //                     boughtBreedDetail.setBoughtBreedDetails(null, uuidv4(), boughtBreedId, bre.breedId, item.quantity, item.unit, item.unitPrice, item.soldAddress, item.testingAgency, item.testingAgency);\r\n            //                     const mat: any = await boughtBreedDetail.boughtBreedDetailsServives.models.create(boughtBreedDetail, {\r\n            //                         transaction: t\r\n            //                     }).catch(async e => {\r\n            //                         response.status(200).json({\r\n            //                             success: false,\r\n            //                             message: `Thực hiện không thành công, bị lỗi ở form nhập thứ ${item.position + 1}.`,\r\n            //                             position: item.position,\r\n            //                             boughtBreedId\r\n            //                         });\r\n            //                         t.rollback();\r\n            //                     });\r\n            //                     if (mat) {\r\n            //                         result.push(mat);\r\n            //                     }\r\n            //                 }\r\n            //             } else {\r\n            //                 const sUpdate: any = await breed.breedServives.models.update({\r\n            //                     totalQuantity: this.sequeliz.literal(`totalQuantity + ${item.quantity}`)\r\n            //                 }, {\r\n            //                         where: {\r\n            //                             breedId: item.breedName.breedId\r\n            //                         },\r\n            //                         transaction: t\r\n            //                     }).catch(e => {\r\n            //                         response.status(200).json({\r\n            //                             success: false,\r\n            //                             message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n            //                         });\r\n            //                         t.rollback();\r\n            //                     });\r\n            //                 if (sUpdate.length > 0) {\r\n            //                     const boughtBreedDetail: BoughtBreedDetail = new BoughtBreedDetail();\r\n            //                     boughtBreedDetail.setBoughtBreedDetails(null, uuidv4(), boughtBreedId, item.breedName.breedId, item.quantity, item.unit, item.unitPrice, item.soldAddress, item.testingAgency, item.testingAgency);\r\n            //                     const boughtBre = await boughtBreedDetail.boughtBreedDetailsServives.models.create(boughtBreedDetail, { transaction: t }).catch(e => {\r\n            //                         response.status(200).json({\r\n            //                             success: false,\r\n            //                             message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n            //                         });\r\n            //                         t.rollback();\r\n            //                     });\r\n            //                     result.push(boughtBre);\r\n            //                 } else {\r\n            //                     t.rollback();\r\n            //                     response.status(200).json({\r\n            //                         success: false,\r\n            //                         message: `Thực hiện không thành công, bị lỗi ở form nhập thứ ${item.position + 1}.`,\r\n            //                         position: item.position,\r\n            //                         boughtBreedId\r\n            //                     });\r\n            //                 }\r\n            //             }\r\n            //         }\r\n            //         if (result.length === itemArr.length) {\r\n            //             response.status(200).json({\r\n            //                 success: true,\r\n            //                 message: 'Thêm thành công, vui lòng đợi...'\r\n            //             });\r\n            //             t.commit();\r\n            //         } else {\r\n            //             response.status(200).json({\r\n            //                 success: false,\r\n            //                 message: 'Có lỗi xảy ra, vui lòng thử lại sau.',\r\n            //                 boughtBreedId\r\n            //             });\r\n            //             t.rollback();\r\n            //         }\r\n            //     } else {\r\n            //         response.status(200).json({\r\n            //             success: false,\r\n            //             message: 'Bạn chưa đủ thẩm quyền thực hiện thao tác, vui lòng liên hệ với quản lý của bạn để được hỗ trợ.'\r\n            //         });\r\n            //     }\r\n            // }\r\n        });\r\n    }\r\n\r\n    getBreed = async (request: Request, response: Response) => {\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy === null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n\r\n        const query: FindOptions<any> = {\r\n            include: [\r\n                {\r\n                    model: this.breedOwnwerServices.models,\r\n                    as: ActionAssociateDatabase.BREED_2_OWNER_BREED,\r\n                    include: [\r\n                        {\r\n                            model: this.userServives.models,\r\n                            as: ActionAssociateDatabase.OWNER_BREED_TO_USER,\r\n                            include: [\r\n                                {\r\n                                    model: this.userRolesServices.models,\r\n                                    as: ActionAssociateDatabase.USER_2_ROLES_GET_EMPLOYEES,\r\n                                    required: false\r\n                                }\r\n                            ],\r\n                            attributes: ['userId', 'userUUId', 'lastname', 'firstname', 'username', 'createdDate', 'createdBy']\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    model: this.boughtBreedDetailsServives.models,\r\n                    as: ActionAssociateDatabase.BREED_2_BOUGHT_BREED_DETAIL,\r\n                    include: [\r\n                        {\r\n                            model: this.couponServives.models,\r\n                            as: ActionAssociateDatabase.BOUGHT_BREED_DETAIL_2_COUPON\r\n                        }\r\n                    ]\r\n                }\r\n            ],\r\n            where: {\r\n                [this.sequeliz.Op.or]: [\r\n                    {\r\n                        '$owner.userId$': userId,\r\n                    },\r\n                    {\r\n                        '$owner->user->employees.userId$': userId,\r\n                        '$owner->user->employees.roles$': 2\r\n                    },\r\n                    {\r\n                        '$owner->user->employees.userId$': userId,\r\n                        '$owner->user->employees.roles$': 2\r\n                    }\r\n                ]\r\n            } as any\r\n        };\r\n        this.breedServives.models.findAll(query).then((res: any) => {\r\n            if (!res.length) {\r\n                return response.status(200).json({\r\n                    success: false,\r\n                    message: 'Hiện tại trong kho không có giống nào.',\r\n                    breeds: res\r\n                });\r\n            }\r\n            return response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                breeds: res\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra!'\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './stocking.route';\r\n","import { Stocking, StockingDetail } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, SeasonServices, SeasonAndPondServices, BreedServives, StockingServices, StockingDetailsServices, PondsServices, UserServives, PondUserRolesServices } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { Transaction, FindOptions, UpdateOptions } from 'sequelize';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class StockingRoute extends BaseRoute {\r\n    public static path = '/stocking';\r\n    private static instance: StockingRoute;\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private seasonAndPondServices: SeasonAndPondServices = new SeasonAndPondServices();\r\n    private breedServives: BreedServives = new BreedServives();\r\n    private stockingServices: StockingServices = new StockingServices();\r\n    private stockingDetailsServices: StockingDetailsServices = new StockingDetailsServices();\r\n    private pondsServices: PondsServices = new PondsServices();\r\n    private userServives: UserServives = new UserServives();\r\n    private pondUserRolesServices: PondUserRolesServices = new PondUserRolesServices();\r\n    /**\r\n     * @class StockingRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!StockingRoute.instance) {\r\n            StockingRoute.instance = new StockingRoute();\r\n        }\r\n        return StockingRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[StockingRoute] Creating stocking route.');\r\n\r\n        // add route\r\n        this.router.post('/add', Authentication.isLogin, this.addStocking);\r\n        this.router.post('/gets', Authentication.isLogin, this.getStocking);\r\n        this.router.post('/get/stockingDetailUUId', Authentication.isLogin, this.getStockingDetailsByStockingDetailsUUId);\r\n        this.router.put('/update', Authentication.isLogin, this.updateStockingDetailsByStockingDetailsUUId);\r\n\r\n        // log endpoint\r\n        this.logEndpoints(this.router, StockingRoute.path);\r\n    }\r\n\r\n    private addStocking = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondId, breedId, stockingQuantity, phFirst, salinityFirst, notes, createdDate } = request.body;\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        const seasonAndPond: any = await this.seasonAndPondServices.models.findOne({\r\n            include: [\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    },\r\n                    attributes: []\r\n                }\r\n            ],\r\n            where: {\r\n                pondId\r\n            },\r\n            attributes: ['seasonAndPondId']\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        });\r\n        if(seasonAndPond) {\r\n            this.sequeliz.transaction().then(async (t: Transaction) => {\r\n                const stocking: Stocking = new Stocking();\r\n                stocking.setStocking(null, uuidv4(), seasonAndPond.seasonAndPondId, notes, createdDate);\r\n                const st: any = await stocking.stockingServices.models.create(stocking, {\r\n                    transaction: t\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                    });\r\n                    t.rollback();\r\n                });\r\n                if (st) {\r\n                    const onUpdate: any = await this.breedServives.models.update(\r\n                        {\r\n                            totalQuantity: this.sequeliz.literal(`totalQuantity - ${stockingQuantity}`)\r\n                        },\r\n                        {\r\n                            where: {\r\n                                breedId // lấy ra từ form select get từ api breed, chỉ có breed của owner hiện tại\r\n                            }\r\n                        }\r\n                    ).catch(e => {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                        });\r\n                        t.rollback();\r\n                    });\r\n                    if (onUpdate) {\r\n                        const stockingDetail: StockingDetail = new StockingDetail();\r\n                        stockingDetail.setStockingdetails(uuidv4(), breedId, st.stockingId, stockingQuantity, phFirst, salinityFirst);\r\n                        const std: any = await stockingDetail.stockingDetailsServices.models.create(stockingDetail, {\r\n                            transaction: t\r\n                        }).catch(e => {\r\n                            response.status(200).json({\r\n                                success: false,\r\n                                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                            });\r\n                            t.rollback();\r\n                        });\r\n                        if(!!Object.keys(std).length) {\r\n                            this.pondsServices.models.update({\r\n                                status: 1\r\n                            }, {\r\n                                where: {\r\n                                    pondId\r\n                                },\r\n                                transaction: t\r\n                            }).then(res => {\r\n                                if(!!Object.keys(res).length) {\r\n                                    t.commit();\r\n                                    return response.status(200).json({\r\n                                        success: true,\r\n                                        message: 'Thêm nhật ký thả nuôi thành công.'\r\n                                    });\r\n                                } else {\r\n                                    t.rollback();\r\n                                    response.status(200).json({\r\n                                        success: false,\r\n                                        message: 'Không thể thêm nhật ký thả nuôi.'\r\n                                    });\r\n                                }\r\n                            }).catch(e => {\r\n                                t.rollback();\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                });\r\n            });\r\n        } else {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        }\r\n    }\r\n\r\n    private getStocking = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonId, ownerId } = request.body;\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        this.stockingServices.models.findAll(({\r\n            include: [\r\n                {\r\n                    model: this.seasonAndPondServices.models,\r\n                    as: ActionAssociateDatabase.STOCKING_2_SEASON_AND_POND,\r\n                    where: {\r\n                        seasonId\r\n                    },\r\n                    include: [\r\n                        {\r\n                            model: this.seasonServices.models,\r\n                            as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                            where: {\r\n                                userId: ownerId\r\n                            },\r\n                            attributes: []\r\n                        },\r\n                        {\r\n                            model: this.pondsServices.models,\r\n                            as: ActionAssociateDatabase.SEASON_AND_POND_2_POND,\r\n                            include: [\r\n                                {\r\n                                    model: this.userServives.models,\r\n                                    as: ActionAssociateDatabase.POND_2_EMPLOYEE_MAYNY_ROLES,\r\n                                    required: false,\r\n                                    attributes: []\r\n                                },\r\n                                {\r\n                                    model: this.pondUserRolesServices.models,\r\n                                    as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                                    required: false,\r\n                                    attributes: []\r\n                                }\r\n                            ]\r\n                        }\r\n                    ],\r\n                },\r\n                {\r\n                    model: this.stockingDetailsServices.models,\r\n                    as: ActionAssociateDatabase.STOCKING_2_STOCKING_DETAILS,\r\n                    include: [\r\n                        {\r\n                            model: this.breedServives.models,\r\n                            as: ActionAssociateDatabase.STOCKING_DETAILS_2_BREED\r\n                        }\r\n                    ]\r\n                }\r\n            ],\r\n            where: {\r\n                [this.sequeliz.Op.or]: [\r\n                    {\r\n                        '$seasonAndPond->ponds.userId$': deToken.userId\r\n                    },\r\n                    {\r\n                        '$seasonAndPond->ponds->users->ponduserroles.userId$': deToken.userId\r\n                    }\r\n                ]\r\n            }\r\n        } as any)).then(res => {\r\n            if (!res.length) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy nhật ký thả ao.',\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    stocking: res\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.',\r\n                e\r\n            });\r\n        });\r\n    }\r\n\r\n    private getStockingDetailsByStockingDetailsUUId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { stockingDetailUUId } = request.body;\r\n        this.stockingDetailsServices.models.findOne({\r\n            where: {\r\n                stockingDetailUUId\r\n            }\r\n        }).then(res => {\r\n            if (!res) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy hoạt động thả nuôi.'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    stockingDetails: res\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Có lỗi xảy ra.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private updateStockingDetailsByStockingDetailsUUId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { stockingDetailUUId, breedId, stockingQuantity, oldValue, phFirst, salinityFirst } = request.body;\r\n        let onUpdate: any = {};\r\n        if(stockingQuantity >=  oldValue) {\r\n            onUpdate = {\r\n                totalQuantity: this.sequeliz.literal(`totalQuantity - ${ stockingQuantity - oldValue }`)\r\n            };\r\n        } else {\r\n            onUpdate = {\r\n                totalQuantity: this.sequeliz.literal(`totalQuantity + ${ oldValue - stockingQuantity }`)\r\n            };\r\n        }\r\n        this.breedServives.models.update({\r\n            ...onUpdate,\r\n            salinityFirst,\r\n            phFirst\r\n        }, {\r\n            where: {\r\n                breedId\r\n            }\r\n        }).then(ok => {\r\n            this.stockingDetailsServices.models.update({\r\n                stockingQuantity\r\n            }, {\r\n                where: {\r\n                    stockingDetailUUId\r\n                },\r\n                returning: true\r\n            }).then(res => {\r\n                if (!res.length) {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Thất bại, vui lòng thử lại sau.'\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Cập nhật thành công!'\r\n                    });\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Có lỗi xảy ra.'\r\n                });\r\n            });\r\n        }).catch(e => {\r\n            e;\r\n            if(e.message.includes('FailQuantityBreed')) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Số lượng không phù hợp, vui lòng kiểm tra lại!'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, vui lòng thử lại sau!'\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n","export * from './diedFishery.route';\r\n","import { DiedFishery } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, SeasonAndPondServices, SeasonServices, DiedFisherysServives } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\n\r\n/**\r\n * @api {all} /ping Died Fishery Request customer object\r\n * @apiName Died Fishery\r\n * @apiGroup Died Fishery\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class DiedFisheryRoute extends BaseRoute {\r\n    public static path = '/diedFishery';\r\n    private static instance: DiedFisheryRoute;\r\n    private seasonAndPondServices: SeasonAndPondServices = new SeasonAndPondServices();\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private diedFisherysServives: DiedFisherysServives = new DiedFisherysServives();\r\n    /**\r\n     * @class DiedFisheryRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!DiedFisheryRoute.instance) {\r\n            DiedFisheryRoute.instance = new DiedFisheryRoute();\r\n        }\r\n        return DiedFisheryRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[DiedFisheryRoute] Creating Died Fishery route.');\r\n\r\n        // add route\r\n        this.router.post('/add', Authentication.isLogin, this.addDiedFishery);\r\n        this.router.post('/gets', Authentication.isLogin, this.getDiedFishery);\r\n        this.router.post('/get/diedFisheryUUId', Authentication.isLogin, this.getDiedFisheryByDiedFisheryUUId);\r\n        this.router.put('/update', Authentication.isLogin, this.updateDiedFisheryByDiedFisheryUUId);\r\n\r\n        // log path\r\n        this.logEndpoints(this.router, DiedFisheryRoute.path);\r\n    }\r\n\r\n    //  Add DiedFishery\r\n    private addDiedFishery = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondId, ownerId, card, quantity, solutions, employee } = request.body;\r\n        const seasonAndPond: any = await this.seasonAndPondServices.models.findOne({\r\n            include: [\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    },\r\n                    attributes: []\r\n                }\r\n            ],\r\n            where: {\r\n                pondId\r\n            },\r\n            attributes: ['seasonAndPondId']\r\n        }).catch(e => {\r\n            e;\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        });\r\n        if(!!Object.keys(seasonAndPond).length) {\r\n            const diedFishery: DiedFishery = new DiedFishery();\r\n            diedFishery.setDiedfisherys(null, uuidv4(), seasonAndPond.seasonAndPondId, card, quantity, solutions, employee);\r\n            diedFishery.diedFisherysServives.models.create(diedFishery).then(res => {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: 'Thêm thành công.'\r\n                });\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                });\r\n            });\r\n        } else {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi đường truyền!'\r\n            });\r\n        }\r\n    }\r\n\r\n    private getDiedFishery = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonId, pondId, ownerId } = request.body;\r\n        this.diedFisherysServives.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.seasonAndPondServices.models,\r\n                    as: ActionAssociateDatabase.DIED_FISHERY_2_SEASON_AND_POND,\r\n                    where: {\r\n                        seasonId,\r\n                        pondId\r\n                    }\r\n                }\r\n            ],\r\n            order: [\r\n                ['createdDate', 'DESC']\r\n            ]\r\n        }).then((wastes) => {\r\n            if(!wastes.length) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy nhật ký sử lý chất thải.'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    wastes\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi, vui lòng thử lại sau.',\r\n            });\r\n        });\r\n    }\r\n\r\n    private getDiedFisheryByDiedFisheryUUId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { diedFisheryUUId } = request.body;\r\n        this.diedFisherysServives.models.findOne({\r\n            where: {\r\n                diedFisheryUUId\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi đường truyền, vui lòng thử lại sau.'\r\n            });\r\n        }).then((res: any) => {\r\n            if(!res) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy.'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    waste: res.dataValues\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    private updateDiedFisheryByDiedFisheryUUId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { diedFisheryUUId, card, quantity, solutions, employee } = request.body;\r\n        const diedFishery: DiedFishery = new DiedFishery();\r\n        diedFishery.setDiedfisherys(null, diedFisheryUUId, undefined, card, quantity, solutions, employee);\r\n        this.diedFisherysServives.models.update({ card, quantity, solutions, employee }, {\r\n            where: {\r\n                diedFisheryUUId\r\n            },\r\n            returning: true\r\n        }).then((res: any) => {\r\n            if (!res.length) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, xin vui lòng thử lại sau!'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: 'Cập nhật thông tin tăng trưởng thành công!'\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau!'\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './growths.route';\r\n","import { Growth } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, SeasonAndPondServices, GrowthsServives, SeasonServices } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { Transaction } from 'sequelize';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class GrowthsRoute extends BaseRoute {\r\n    public static path = '/growths';\r\n    private static instance: GrowthsRoute;\r\n    private growthsServives: GrowthsServives = new GrowthsServives();\r\n    private seasonAndPondServices: SeasonAndPondServices = new SeasonAndPondServices();\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    /**\r\n     * @class GrowthsRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!GrowthsRoute.instance) {\r\n            GrowthsRoute.instance = new GrowthsRoute();\r\n        }\r\n        return GrowthsRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[GrowthsRoute] Creating growth route.');\r\n\r\n        // add route\r\n        this.router.post('/add', Authentication.isLogin, this.addGrowth);\r\n        this.router.post('/gets', Authentication.isLogin, this.getGrowths);\r\n        this.router.post('/get/growthUUId', Authentication.isLogin, this.getGrowthByUUId);\r\n        this.router.put('/update', Authentication.isLogin, this.updateGrowth);\r\n\r\n        // log enpoints\r\n        this.logEndpoints(this.router, GrowthsRoute.path);\r\n    }\r\n\r\n    // Get getgrowths\r\n    private getGrowths = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonId, pondId, ownerId } = request.body;\r\n        this.growthsServives.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.seasonAndPondServices.models,\r\n                    as: ActionAssociateDatabase.GROWTH_2_SEASON_AND_POND,\r\n                    where: {\r\n                        seasonId,\r\n                        pondId\r\n                    }\r\n                }\r\n            ],\r\n            order: [\r\n                ['createdDate', 'DESC']\r\n            ]\r\n        }).then((growths) => {\r\n            if(!!growths.length) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    growths\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy thông tin tăng trưởng.',\r\n                    growths: []\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi, vui lòng thử lại sau.',\r\n            });\r\n        });\r\n    }\r\n\r\n    //  Add addgrowth\r\n    private addGrowth = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondId, ownerId, averageDensity, averageMass, speedOdGrowth, livingRatio } = request.body;\r\n        const seasonAndPond: any = await this.seasonAndPondServices.models.findOne({\r\n            include: [\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    },\r\n                    attributes: []\r\n                }\r\n            ],\r\n            where: {\r\n                pondId\r\n            },\r\n            attributes: ['seasonAndPondId']\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        });\r\n        const growth: Growth = new Growth();\r\n        if(seasonAndPond) {\r\n            growth.setGrowths(null, uuidv4(), seasonAndPond.seasonAndPondId, averageDensity, averageMass, speedOdGrowth, livingRatio);\r\n            growth.growthsServives.models.create(growth).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                });\r\n            }).then(res => {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: 'Thêm thành công.'\r\n                });\r\n            });\r\n        } else {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        }\r\n    }\r\n\r\n    private getGrowthByUUId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { growthUUId } = request.body;\r\n        this.growthsServives.models.findOne({\r\n            where: {growthUUId}\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi đường truyền, vui lòng thử lại sau.'\r\n            });\r\n        }).then((res: any) => {\r\n            if(!res) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy.'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    growth: res.dataValues\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    // Update growth by Id\r\n    private updateGrowth = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { growthUUId, averageDensity, averageMass, speedOdGrowth, livingRatio } = request.body;\r\n        const growth: Growth = new Growth();\r\n        growth.setGrowthUUId = growthUUId;\r\n        if (!growthUUId) {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Hành động không được phép, vui lòng thử lại sau!'\r\n            });\r\n        } else {\r\n            growth.setGrowths(undefined, growthUUId, undefined, averageDensity, averageMass, speedOdGrowth, livingRatio, undefined, undefined, undefined, undefined, undefined);\r\n            growth.growthsServives.models.update(growth.getFields(growth), {\r\n                where: {\r\n                    growthUUId\r\n                },\r\n                returning: true\r\n            }).then((res: any) => {\r\n                if (!res) {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã có lỗi xảy ra, xin vui lòng thử lại sau!'\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Cập nhật thông tin tăng trưởng thành công!'\r\n                    });\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, vui lòng thử lại sau!'\r\n                });\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n}\r\n","export * from './harvest.route';\r\n","import { Harvest, HarvestDetail } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, SeasonAndPondServices, SeasonServices, HarvestsServives, HarvestDetailsServives, PondsServices, StockingServices, StockingDetailsServices, BreedServives } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { Transaction } from 'sequelize';\r\n\r\n/**\r\n * @api {all} /harvests Harvest Request customer object\r\n * @apiName Harvest\r\n * @apiGroup Harvest\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class HarvestRoute extends BaseRoute {\r\n    public static path = '/harvests';\r\n    private static instance: HarvestRoute;\r\n    private seasonAndPondServices: SeasonAndPondServices = new SeasonAndPondServices();\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private harvestsServives: HarvestsServives = new HarvestsServives();\r\n    private harvestDetailsServives: HarvestDetailsServives = new HarvestDetailsServives();\r\n    private pondsServices: PondsServices = new PondsServices();\r\n    private stockingServices: StockingServices = new StockingServices();\r\n    private stockingDetailsServices: StockingDetailsServices = new StockingDetailsServices();\r\n    private breedServives: BreedServives = new BreedServives();\r\n\r\n    /**\r\n     * @class HarvestRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!HarvestRoute.instance) {\r\n            HarvestRoute.instance = new HarvestRoute();\r\n        }\r\n        return HarvestRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[HarvestRoute] Creating harvest route.');\r\n\r\n        // add route\r\n        this.router.post('/add', Authentication.isLogin, this.addHarvest);\r\n        this.router.post('/gets', Authentication.isLogin, this.getHarvest);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, HarvestRoute.path);\r\n    }\r\n\r\n    // Get harvest\r\n    private addHarvest = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondId, ownerId, harvestId, harvestName, quantity, unitPrice } = request.body;\r\n        const seasonAndPond: any = await this.seasonAndPondServices.models.findOne({\r\n            include: [\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    },\r\n                    attributes: []\r\n                }\r\n            ],\r\n            where: {\r\n                pondId\r\n            },\r\n            attributes: ['seasonAndPondId']\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        });\r\n        // Lần thu hoạch mới\r\n        if(!harvestId) {\r\n            return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n                const harvest: Harvest = new Harvest();\r\n                harvest.setHarvests(null, uuidv4(), seasonAndPond.seasonAndPondId, harvestName);\r\n                const hv: any = await harvest.harvestsServives.models.create(harvest, {\r\n                    transaction: t\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                    });\r\n                    t.rollback();\r\n                });\r\n                if(hv) {\r\n                    const harvestDetail: HarvestDetail = new HarvestDetail();\r\n                    harvestDetail.setHarvestdetails(uuidv4(), hv.harvestId, quantity, unitPrice);\r\n                    harvestDetail.harvestDetailsServives.models.create(harvestDetail, {\r\n                        transaction: t\r\n                    }).catch(e => {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                        });\r\n                        t.rollback();\r\n                    }).then(res => {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: 'Thêm thành công.'\r\n                        });\r\n                        t.commit();\r\n                    });\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                });\r\n            });\r\n        } else {\r\n            const harvestDetail: HarvestDetail = new HarvestDetail();\r\n            harvestDetail.setHarvestdetails(uuidv4(), harvestId, quantity, unitPrice);\r\n            harvestDetail.harvestDetailsServives.models.create(harvestDetail).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                });\r\n            }).then(res => {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: 'Thêm thành công.'\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @method POST\r\n     */\r\n    private getHarvest = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonId, pondId } = request.body;\r\n        this.harvestsServives.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.seasonAndPondServices.models,\r\n                    as: ActionAssociateDatabase.HARVEST_2_SEASON_AND_POND,\r\n                    include: [\r\n                        {\r\n                            model: this.seasonServices.models,\r\n                            as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                            where: {\r\n                                seasonId\r\n                            }\r\n                        },\r\n                        {\r\n                            model: this.pondsServices.models,\r\n                            as: ActionAssociateDatabase.SEASON_AND_POND_2_POND,\r\n                            where: {\r\n                                pondId\r\n                            }\r\n                        },\r\n                        {\r\n                            model: this.stockingServices.models,\r\n                            as: ActionAssociateDatabase.SEASON_AND_POND_2_STOCKING,\r\n                            required: false,\r\n                            include: [\r\n                                {\r\n                                    model: this.stockingDetailsServices.models,\r\n                                    as: ActionAssociateDatabase.STOCKING_2_STOCKING_DETAILS,\r\n                                    include: [\r\n                                        {\r\n                                            model: this.breedServives.models,\r\n                                            as: ActionAssociateDatabase.STOCKING_DETAILS_2_BREED\r\n                                        }\r\n                                    ]\r\n                                }\r\n                            ]\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    model: this.harvestDetailsServives.models,\r\n                    as: ActionAssociateDatabase.HARVEST_2_HARVEST_DETAILS\r\n                }\r\n            ]\r\n        }).then(res => {\r\n            if(!res.length) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy nhật ký thu hoạch.'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    harvests: res\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            e;\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './userRoles.route';\r\n","import { NextFunction, Request, Response } from 'express';\r\nimport { logger, UserServives, UserRolesServices } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { UserRole } from '../../components';\r\nimport { Transaction, FindOptions } from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../../common';\r\n\r\n/**\r\n * @api {get} /user/roles UserRoles Request customer object\r\n * @apiName UserRoles\r\n * @apiGroup UserRoles\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class UserRoleRoute extends BaseRoute {\r\n    public static path = '/userRoles';\r\n    private static instance: UserRoleRoute;\r\n    private userServives: UserServives = new UserServives();\r\n    private userRolesServices: UserRolesServices = new UserRolesServices();\r\n    /**\r\n     * @class UserRoleRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!UserRoleRoute.instance) {\r\n            UserRoleRoute.instance = new UserRoleRoute();\r\n        }\r\n        return UserRoleRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[UserRoleRoute] Creating roles of user route.');\r\n\r\n        // add route\r\n        this.router.get('/gets', Authentication.isLogin, this.getAllMyEmployee);\r\n        this.router.get('/get/:roleId', Authentication.isLogin, this.getRoleByRoleId);\r\n        this.router.put('/delete', Authentication.isLogin, this.deleteRoles);\r\n        this.router.put('/upsert', Authentication.isLogin, this.upsertRoles);\r\n        this.router.put('/change', Authentication.isLogin, this.changeRoles);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, UserRoleRoute.path);\r\n    }\r\n\r\n    /**\r\n     * Get Employees with boss of farm\r\n     * @method GET\r\n     * @param request.headers\r\n     * ```\r\n     *      {\r\n     *          authorization: \"token\",\r\n     *          roles: '' || '1' || '2'\r\n     *      }\r\n     * ```\r\n     */\r\n    private getAllMyEmployee = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { roles } = request.headers;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        // create query\r\n        const query: FindOptions<any> = {\r\n            include: [],\r\n            where: {}\r\n        };\r\n\r\n        // get userInfo\r\n        const userInfo: any = {\r\n            model: this.userServives.models,\r\n            as: ActionAssociateDatabase.USER_ROLES_2_USER,\r\n            attributes: ['userId', 'userUUId', 'lastname', 'firstname', 'username', 'createdDate', 'createdBy']\r\n        };\r\n        query.include.push(userInfo);\r\n\r\n        // tmp where\r\n        // let where: any = {};\r\n        if (isBoss) {\r\n            if (roles) {\r\n                // get with roles\r\n                query.where = {\r\n                    bossId: userId,\r\n                    roles // 1 is pond using role\r\n                };\r\n            } else {\r\n                // get without roles\r\n                query.where = {\r\n                    bossId: userId\r\n                };\r\n            }\r\n        } else {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Dừng lại! Truy cập là trái phép.'\r\n            });\r\n        }\r\n        this.userRolesServices.models.findAll(query).then((res: any) => {\r\n            if (res) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    employees: res\r\n                });\r\n            } else {\r\n                if (roles === '1') {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Bạn không có nhân viên quản lý AO nào cả.'\r\n                    });\r\n                } else if (roles === '2') {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Bạn không có nhân viên quản lý KHO nào cả.'\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Bạn không có nhân viên nào cả. Vui lòng thêm tài khoản cho nhân viên và thử lại sau.'\r\n                    });\r\n                }\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xãy ra, xin vui lòng thử lại!'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get Role by roleId\r\n     * @method GET\r\n     * @param request.params {Request} The express Request object.\r\n     */\r\n    private getRoleByRoleId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { roleId } = request.params;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        if(!isBoss) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Dừng lại! Truy cập là trái phép.'\r\n            });\r\n        }\r\n        this.userRolesServices.models.findById(roleId).then((role: UserRole) => {\r\n                if (role) {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: '',\r\n                        role\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Không tìm thấy danh mục phân quyền này.'\r\n                    });\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau.'\r\n                });\r\n            });\r\n    }\r\n\r\n    private deleteRoles = async (request: Request, response: Response, next: NextFunction) => {\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const { rolesId } = request.body;\r\n        this.userRolesServices.models.destroy({\r\n            where: {\r\n                bossId: userId,\r\n                rolesId\r\n            }\r\n        }).then((res: any) => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: 'Thu hồi thành công!'\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi đường truyền, vui lòng thử lại sau!'\r\n            });\r\n        });\r\n    }\r\n\r\n    private upsertRoles = async (request: Request, response: Response, next: NextFunction) => {\r\n        const userRole: UserRole = new UserRole();\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId, roles, isDeleted } = request.body;\r\n        userRole.setBossId = deToken.userId;\r\n        userRole.setUserId = userId;\r\n        userRole.setRoles = roles;\r\n        userRole.setIsDeleted = isDeleted;\r\n        const main: any = await this.userRolesServices.models.findAll({\r\n            where: {\r\n                userId,\r\n                bossId: deToken.userId\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n        if(!main) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Bạn không có quyền thao tác này!'\r\n            });\r\n        }\r\n        userRole.userRolesServices.models.upsert(userRole.getFields(), {\r\n            fields: ['roles', 'isDeleted'],\r\n            returning: true\r\n        }).then((res: any) => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: 'Thao tác thành công.'\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private changeRoles = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { rolesId, userId, roles, isDeleted } = request.body;\r\n        let userRole: UserRole = new UserRole();\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            userRole = new UserRole();\r\n            userRole.setRolesId = rolesId;\r\n            userRole.setIsDeleted = 1;\r\n            userRole.userRolesServices.models.upsert(userRole.getFields(), {\r\n                fields: ['roles', 'isDeleted'],\r\n                returning: true,\r\n                transaction: t\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau!'\r\n                });\r\n                t.rollback();\r\n            }).then(async (result: any) => {\r\n                const token: string = request.headers.authorization.split(' ')[1];\r\n                const deToken: any = Authentication.detoken(token);\r\n                userRole = new UserRole();\r\n                userRole.setBossId = deToken.userId;\r\n                userRole.setUserId = userId;\r\n                userRole.setRoles = roles;\r\n                userRole.setIsDeleted = 0;\r\n                userRole.userRolesServices.models.upsert(userRole.getFields(), {\r\n                    fields: ['roles', 'isDeleted'],\r\n                    returning: true,\r\n                    transaction: t\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã có lỗi xảy ra, vui lòng kiểm tra và thử lại sau!'\r\n                    });\r\n                    t.rollback();\r\n                }).then(async (res: any) => {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Thực hiện thành công.'\r\n                    });\r\n                    t.commit();\r\n                });\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './pondsUsersRoles.route';\r\n","import { PondUserRole } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, PondUserRolesServices, UserRolesServices, UserServives, PondsServices } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { ActionAssociateDatabase } from '../../common';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class PondUserRolesRoute extends BaseRoute {\r\n    public static path = '/pondUserRoles';\r\n    private static instance: PondUserRolesRoute;\r\n    private pondUserRolesServices: PondUserRolesServices = new PondUserRolesServices();\r\n    private userRolesServices: UserRolesServices = new UserRolesServices();\r\n    private userServives: UserServives = new UserServives();\r\n    private pondsServices: PondsServices = new PondsServices();\r\n    /**\r\n     * @class PondUserRolesRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!PondUserRolesRoute.instance) {\r\n            PondUserRolesRoute.instance = new PondUserRolesRoute();\r\n        }\r\n        return PondUserRolesRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[PondUserRolesRoute] Creating role pond of user route.');\r\n\r\n        // add route\r\n        this.router.post('/add', Authentication.isLogin, this.addPondRoles);\r\n        this.router.get('/gets', Authentication.isLogin, this.getUserManageWithPond);\r\n        this.router.put('/update', Authentication.isLogin, this.updateRoles);\r\n        this.router.put('/delete', Authentication.isLogin, this.deleteRoles);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, PondUserRolesRoute.path);\r\n    }\r\n\r\n    private addPondRoles = async (request: Request, response: Response, next: NextFunction) => {\r\n        const pondUserRole: PondUserRole = new PondUserRole();\r\n        const { userId, pondId } = request.body;\r\n        pondUserRole.setUserId = (userId as number) - 0;\r\n        pondUserRole.setPondId = pondId;\r\n        pondUserRole.pondUserRolesServices.models.create(pondUserRole.getFields(pondUserRole))\r\n        .then((res: any) => {\r\n            if(res) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: 'Thao tác thành công!',\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Người đã có quyền trên ao này.'\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            if(e) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Có lỗi xảy ra vui lòng kiểm tra và thử lại!'\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    private getUserManageWithPond = async (request: Request, response: Response, next: NextFunction) => {\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        if(!isBoss) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Dừng lại! Truy cập là trái phép.'\r\n            });\r\n        } else {\r\n            this.userRolesServices.models.findAll({\r\n                include: [\r\n                    {\r\n                        model: this.userServives.models,\r\n                        as: ActionAssociateDatabase.USER_ROLES_2_USER,\r\n                        include: [\r\n                            {\r\n                                model: this.pondUserRolesServices.models,\r\n                                as: ActionAssociateDatabase.USER_2_POND_USER_ROLE,\r\n                                required: false,\r\n                                include: [\r\n                                    {\r\n                                        model: this.pondsServices.models,\r\n                                        as: ActionAssociateDatabase.POND_USER_ROLE_2_POND,\r\n                                        required: false\r\n                                    }\r\n                                ]\r\n                            }\r\n                        ],\r\n                        attributes: ['userId', 'userUUId', 'lastname', 'firstname', 'username',  'createdDate', 'createdBy']\r\n                    }\r\n                ],\r\n                where: {\r\n                    bossId: userId,\r\n                    roles: 1\r\n                }\r\n            }).then((res: any) => {\r\n                if(!res.length) {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Bạn không có nhân viên vào.',\r\n                        employees: res\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: '',\r\n                        employees: res\r\n                    });\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    private updateRoles = async (request: Request, response: Response, next: NextFunction) => {\r\n        const pondUserRole: PondUserRole = new PondUserRole();\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const { pondUserRolesId, pondId } = request.body;\r\n        if(!pondId && !pondUserRolesId) {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Hành động không được phép, vui lòng thử lại sau!'\r\n            });\r\n        } else {\r\n            pondUserRole.setPondUserRolesId = pondUserRolesId;\r\n            pondUserRole.setPondId = pondId;\r\n            pondUserRole.pondUserRolesServices.models.update(pondUserRole.getFields(pondUserRole), {\r\n                where: {\r\n                    pondUserRolesId\r\n                }\r\n            }).then((res: any) => {\r\n                if(!res) {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã có lỗi xảy ra, xin vui lòng thử lại sau!'\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Cập nhật thành công!'\r\n                    });\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Nhân viên đã có quyền thao tác với ao này, vui lòng kiểm tra và thử lại sau!'\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    private deleteRoles = async (request: Request, response: Response, next: NextFunction) => {\r\n        const pondUserRole: PondUserRole = new PondUserRole();\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const { pondUserRolesId } = request.body;\r\n        pondUserRole.setIsDeleted = 1;\r\n        pondUserRole.pondUserRolesServices.models.destroy({\r\n            where: {\r\n                pondUserRolesId\r\n            }\r\n        }).then(res => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: 'Thao tác thành công!'\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi đường truyền, vui lòng thử lại sau!'\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './material.route';\r\n","import { NextFunction, Request, Response } from 'express';\r\nimport { logger } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { Material } from '../../components';\r\nimport { Transaction } from 'sequelize';\r\n/**\r\n * @api {get} /materials Material Request customer object\r\n * @apiName Material\r\n * @apiGroup Material\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class MaterialRoute extends BaseRoute {\r\n    public static path = '/materials';\r\n    private static instance: MaterialRoute;\r\n    /**\r\n     * @class MaterialRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!MaterialRoute.instance) {\r\n            MaterialRoute.instance = new MaterialRoute();\r\n        }\r\n        return MaterialRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[MaterialRoute] Creating materials route.');\r\n\r\n        // add index page route\r\n        this.router.get('/gets', this.getAll);\r\n    }\r\n\r\n    /**\r\n     * @class MaterialRoute\r\n     * @method get\r\n     * @param req {Request} The express Request object.\r\n     * @param res {Response} The express Response object.\r\n     * @param next {NextFunction} Execute the next method.\r\n     */\r\n    private getAll = async (request: Request, response: Response, next: NextFunction) => {\r\n        const material: Material = new Material();\r\n        material.materialServives.models.findAll().then(res => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                res\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './seasonAndPond.route';\r\n","import { NextFunction, Request, Response } from 'express';\r\nimport { logger, SeasonAndPondServices, SeasonServices, PondsServices } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { SeasonsAndPond } from '../../components';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport { Transaction } from 'sequelize';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { differenceWith, isEqual } from 'lodash';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class SeasonAndPondRoute extends BaseRoute {\r\n    public static path = '/seasonAndPond';\r\n    private static instance: SeasonAndPondRoute;\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private pondsServices: PondsServices = new PondsServices();\r\n    private seasonAndPondServices: SeasonAndPondServices = new SeasonAndPondServices();\r\n    /**\r\n     * @class SeasonAndPondRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!SeasonAndPondRoute.instance) {\r\n            SeasonAndPondRoute.instance = new SeasonAndPondRoute();\r\n        }\r\n        return SeasonAndPondRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[SeasonAndPondRoute] Creating season and pond associate route.');\r\n\r\n        // add route\r\n        this.router.post('/add', this.addSeasonAndPond);\r\n        this.router.put('/update', this.updateSeasonAndPond);\r\n        this.router.get('/count/pondWithSeason', this.countPondWithSeason);\r\n        this.router.get('/count/seasonWithPond', this.countSeasonOfPond);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, SeasonAndPondRoute.path);\r\n    }\r\n\r\n    /**\r\n     * @class SeasonAndPondRoute\r\n     * @method get\r\n     * @param req {Request} The express Request object.\r\n     * @param res {Response} The express Response object.\r\n     * @param next {NextFunction} Execute the next method.\r\n     */\r\n    private addSeasonAndPond = async (request: Request, response: Response) => {\r\n        const { seasonId, pondIdArr: pondArr } = request.body;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ponds: any = await this.pondsServices.models.findAll({\r\n            where: {\r\n                userId\r\n            },\r\n            attributes: ['pondId', 'userId']\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi xác thực người dùng.'\r\n            });\r\n        });\r\n        const diff: any = differenceWith(pondArr, ponds.map(e => {\r\n            return { pondId: e.pondId, userId: e.userId };\r\n        }), isEqual);\r\n        if(!!diff.length) {\r\n            return response.status(200).json({\r\n                success: false,\r\n                message: 'Ao không hợp lệ, vui lòng kiểm tra và thử lại.'\r\n            });\r\n        }\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            const result: any[] = [];\r\n            for (const pond of pondArr) {\r\n                const seasonsAndPond: SeasonsAndPond = new SeasonsAndPond();\r\n                seasonsAndPond.setSeasonsAndPond(null, seasonId, pond.pondId);\r\n                const snp: any = await seasonsAndPond.seasonAndPondServices.models.create(seasonsAndPond, {\r\n                    transaction: t\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã xảy ra lỗi vui lòng thử lại sau.',\r\n                    });\r\n                    t.rollback();\r\n                });\r\n                if (snp) {\r\n                    result.push(1);\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Thao tác bị lỗi, vui lòng thử lại sau.',\r\n                    });\r\n                    t.rollback();\r\n                }\r\n            }\r\n            if (pondArr.length !== 0 && pondArr.length === result.length) {\r\n                t.commit();\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: 'Thêm thành công!'\r\n                });\r\n            } else {\r\n                t.rollback();\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Thao tác bị lỗi, vui lòng thử lại sau.',\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.',\r\n            });\r\n        });\r\n        // if (Array.isArray(pondArr)) {\r\n        //     if(pondArr.length) {\r\n\r\n        //     } else {\r\n        //         response.status(200).json({\r\n        //             success: false,\r\n        //             message: 'Vui lòng cung cấp dữ liệu để tiếp tục.',\r\n        //         });\r\n        //     }\r\n        // } else {\r\n        //     const seasonsAndPond: SeasonsAndPond = new SeasonsAndPond();\r\n        //     seasonsAndPond.setSeasonsAndPond(null, seasonId, pondArr);\r\n        //     const snp: any = await seasonsAndPond.seasonAndPondServices.models.create(seasonsAndPond).catch(e => {\r\n        //         response.status(200).json({\r\n        //             success: false,\r\n        //             message: 'Đã xảy ra lỗi vui lòng thử lại sau.',\r\n        //         });\r\n        //     });\r\n        //     if(!snp) {\r\n        //         response.status(200).json({\r\n        //             success: false,\r\n        //             message: 'Lỗi đường truyền, vui lòng thử lại.'\r\n        //         });\r\n        //     } else {\r\n        //         response.status(200).json({\r\n        //             success: true,\r\n        //             message: 'Thêm thành công.'\r\n        //         });\r\n        //     }\r\n        // }\r\n    }\r\n\r\n    private updateSeasonAndPond = async (request: Request, response: Response) => {\r\n        const seasonsAndPond: SeasonsAndPond = new SeasonsAndPond();\r\n        const { seasonAndPondId, seasonId, pondId } = request.body;\r\n        seasonsAndPond.setSeasonAndPondId = seasonAndPondId;\r\n        seasonsAndPond.setSeasonId = seasonId;\r\n        seasonsAndPond.setPondId = pondId;\r\n\r\n        seasonsAndPond.update().then((res: any) => {\r\n            if (!res) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, không thể thực hiện yêu cầu, vui long thử lại sau!'\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: 'Phân quyền thành công.'\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * đếm số ao theo vụ\r\n     */\r\n    private countPondWithSeason = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { ownerid, seasonid } = request.headers;\r\n        this.seasonAndPondServices.models.findAndCountAll({\r\n            include: [\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerid\r\n                    }\r\n                }\r\n            ],\r\n            where: {\r\n                seasonId: seasonid\r\n            }\r\n        }).then(res => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                result: res\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Đếm số vụ của ao\r\n     */\r\n    private countSeasonOfPond = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { ownerid, pondid } = request.headers;\r\n        this.seasonAndPondServices.models.findAndCountAll({\r\n            include: [\r\n                {\r\n                    model: this.pondsServices.models,\r\n                    as: ActionAssociateDatabase.SEASON_AND_POND_2_POND,\r\n                    where: {\r\n                        userId: ownerid\r\n                    }\r\n                }\r\n            ],\r\n            where: {\r\n                pondId: pondid\r\n            }\r\n        }).then(res => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                result: res\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './usingFood.route';\r\n","import { UsingFood, TakeCare } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, TakeCareServices, SeasonAndPondServices, SeasonServices, PondsServices, UsingFoodsServices, StoregeServices } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { Transaction, FindOptions } from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport { DateUtil } from '../../lib';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class UsingFoodRoute extends BaseRoute {\r\n    public static path = '/usingFoods';\r\n    private static instance: UsingFoodRoute;\r\n    private takeCareServices: TakeCareServices = new TakeCareServices();\r\n    private seasonAndPondServices: SeasonAndPondServices = new SeasonAndPondServices();\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private usingFoodsServices: UsingFoodsServices = new UsingFoodsServices();\r\n    private storegeServices: StoregeServices = new StoregeServices();\r\n    private pondsServices: PondsServices = new PondsServices();\r\n    /**\r\n     * @class UsingFoodRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!UsingFoodRoute.instance) {\r\n            UsingFoodRoute.instance = new UsingFoodRoute();\r\n        }\r\n        return UsingFoodRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[UsingFoodRoute] Creating Using Food route.');\r\n\r\n        // add route\r\n        this.router.post('/add', Authentication.isLogin, this.addUsingFood);\r\n        this.router.post('/gets', Authentication.isLogin, this.getUsingFood);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, UsingFoodRoute.path);\r\n    }\r\n\r\n    /**\r\n     * usingFood - take care type is 0\r\n     * usingVeterinary - take care type is 1\r\n     */\r\n    private addUsingFood = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondId, takeCareName, massOfFishery, feedingRate, storageId, quantity } = request.body;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const seasonAndPond: any = await this.seasonAndPondServices.models.findOne({\r\n            include: [\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    },\r\n                    attributes: []\r\n                }\r\n            ],\r\n            where: {\r\n                pondId\r\n            },\r\n            attributes: ['seasonAndPondId']\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        });\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            const onUpdate: any = await this.storegeServices.models.update({\r\n                quantityStorages: this.sequeliz.literal(`quantityStorages - ${ quantity }`)\r\n            }, {\r\n                where: {\r\n                    storageId\r\n                },\r\n                transaction: t,\r\n                returning: true\r\n            }).catch(e => {\r\n                if(e.message === 'FailQuantity') {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Số lượng thức ăn trong kho không đủ.'\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                    });\r\n                }\r\n                t.rollback();\r\n            });\r\n            if(onUpdate) {\r\n                const takeCare: TakeCare = new TakeCare();\r\n                takeCare.setTakecare(null, uuidv4(), seasonAndPond.seasonAndPondId, 0, takeCareName);\r\n                const tk: any = await this.takeCareServices.models.create(takeCare, {\r\n                    transaction: t\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                    });\r\n                    t.rollback();\r\n                });\r\n                if (tk) {\r\n                    const usingFood: UsingFood = new UsingFood();\r\n                    usingFood.setUsingFoods(null, uuidv4(), storageId, tk.takeCareId, massOfFishery, feedingRate, quantity);\r\n                    usingFood.usingFoodsServices.models.create(usingFood, {\r\n                        transaction: t\r\n                    }).catch(e => {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                        });\r\n                        t.rollback();\r\n                    }).then(res => {\r\n                        this.pondsServices.models.update({\r\n                            isFed: 1\r\n                        }, {\r\n                            where: {\r\n                                pondId\r\n                            },\r\n                            transaction: t\r\n                        }).then(res$ => {\r\n                            if(!res$) {\r\n                                t.rollback();\r\n                                response.status(200).json({\r\n                                    success: false,\r\n                                    message: 'Thất bại.'\r\n                                });\r\n                            } else {\r\n                                response.status(200).json({\r\n                                    success: true,\r\n                                    message: 'Thêm thành công.',\r\n                                    res\r\n                                });\r\n                                t.commit();\r\n                            }\r\n                        }).catch(e => {\r\n                            t.rollback();\r\n                        });\r\n                    });\r\n                }\r\n            } else {\r\n                t.rollback();\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get Cho ăn\r\n     * @method POST\r\n     */\r\n    private getUsingFood = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondId, seasonId, options } = request.body;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        const query: FindOptions<any> = {\r\n            include: [\r\n                {\r\n                    model: this.usingFoodsServices.models,\r\n                    as: ActionAssociateDatabase.TAKE_CARE_2_USING_FOOD,\r\n                    where: {\r\n                        createdDate: {\r\n                            [this.sequeliz.Op.between]: [\r\n                                DateUtil.getUTCDateTime(DateUtil.startOf(DateUtil.parse(options.timeOut || new Date()), options.unitOfTime)),\r\n                                DateUtil.getUTCDateTime(DateUtil.endOf(DateUtil.parse(options.timeOut || new Date()), options.unitOfTime))\r\n                            ]\r\n                        }\r\n                    },\r\n                    include: [\r\n                        {\r\n                            model: this.storegeServices.models,\r\n                            as: ActionAssociateDatabase.USING_FOOD_2_STORAGE\r\n                        }\r\n                    ],\r\n                    required: false\r\n                }\r\n            ],\r\n            where: {\r\n                type: 0\r\n            }\r\n        };\r\n\r\n        if (isBoss) {\r\n            query.include.push({\r\n                model: this.seasonAndPondServices.models,\r\n                as: ActionAssociateDatabase.TAKE_CARE_2_SEASON_AND_POND,\r\n                where: {\r\n                    seasonId,\r\n                    pondId\r\n                },\r\n                attributes: []\r\n            });\r\n        } else {\r\n            query.include.push({\r\n                model: this.seasonAndPondServices.models,\r\n                as: ActionAssociateDatabase.TAKE_CARE_2_SEASON_AND_POND,\r\n                where: {\r\n                    seasonId,\r\n                    pondId\r\n                },\r\n                include: [\r\n                    {\r\n                        model: this.seasonServices.models,\r\n                        as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                        where: {\r\n                            status: 0\r\n                        }\r\n                    }\r\n                ],\r\n                attributes: []\r\n            });\r\n        }\r\n\r\n        this.takeCareServices.models.findAll(query).then(res => {\r\n            if (res) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    takeCare: res\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy nhật ký cho ăn của ao này'\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './pondDiary.route';\r\n","import { PondDiary } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, SeasonServices, SeasonAndPondServices, PondDiaryServices, PondsServices, UserServives, UserRolesServices } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\n// import { Transaction } from 'sequelize';\r\nimport { ActionAssociateDatabase, isUUId4 } from '../../common';\r\nimport { DateUtil } from '../../lib';\r\nimport { UpdateOptions } from 'sequelize';\r\nimport { updatePondDiariesSchema } from '../../schemas';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class PondDiaryRoute extends BaseRoute {\r\n    public static path = '/pondDiaries';\r\n    private static instance: PondDiaryRoute;\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private pondsServices: PondsServices = new PondsServices();\r\n    private seasonAndPondServices: SeasonAndPondServices = new SeasonAndPondServices();\r\n    private pondDiaryServices: PondDiaryServices = new PondDiaryServices();\r\n    private userServives: UserServives = new UserServives();\r\n    private userRolesServices: UserRolesServices = new UserRolesServices();\r\n    /**\r\n     * @class PondDiaryRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!PondDiaryRoute.instance) {\r\n            PondDiaryRoute.instance = new PondDiaryRoute();\r\n        }\r\n        return PondDiaryRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[PondDiaryRoute] Creating diary route.');\r\n\r\n        // add route\r\n        this.router.get('/gets', Authentication.isLogin, this.getPondDiaries);\r\n        this.router.get('/gets/:pondDiaryUUId', Authentication.isLogin, this.getPondDiariesByUUId);\r\n        this.router.post('/add', Authentication.isLogin, this.addPondDiary);\r\n        this.router.put('/update', Authentication.isLogin, this.updatePondDiary);\r\n        this.router.delete('/delete/:primary', Authentication.isLogin, this.deletePondDiary);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, PondDiaryRoute.path);\r\n    }\r\n\r\n    private addPondDiary = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondId, ownerId, fisheryQuantity, healthOfFishery, pondVolume, diedFishery, notes, diaryName } = request.body;\r\n        const seasonAndPond: any = await this.seasonAndPondServices.models.findOne({\r\n            include: [\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    },\r\n                    attributes: []\r\n                }\r\n            ],\r\n            where: {\r\n                pondId\r\n            },\r\n            attributes: ['seasonAndPondId']\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        });\r\n        if (seasonAndPond) {\r\n            const pondDiary: PondDiary = new PondDiary();\r\n            pondDiary.setPonddiary(null, uuidv4(), seasonAndPond.seasonAndPondId, diaryName, fisheryQuantity, healthOfFishery, pondVolume, diedFishery, notes);\r\n            pondDiary.insert().then((res: any) => {\r\n                if (res) {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: 'Thêm nhật ký thành công!'\r\n                    });\r\n                }\r\n            }).catch(e => {\r\n                if (e) {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Có lỗi xảy ra vui lòng kiểm tra lại!'\r\n                    });\r\n                }\r\n            });\r\n        } else {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Bạn không có quyền vui liên hệ với quản lý của bạn để được hỗ trợ.'\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get theo tháng, theo user join từ vự\r\n     * @param request\r\n     * @param response\r\n     * @param next\r\n     */\r\n    private getPondDiaries = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondId, seasonId, timeOut, unitOfTime } = request.query;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n\r\n        this.pondDiaryServices.models.findAll({\r\n            include: [\r\n                {\r\n                    model: this.seasonAndPondServices.models,\r\n                    as: ActionAssociateDatabase.POND_DIARY_2_SEASON_AND_POND,\r\n                    include: [\r\n                        {\r\n                            model: this.pondsServices.models,\r\n                            as: ActionAssociateDatabase.SEASON_AND_POND_2_POND,\r\n                            include: [\r\n                                {\r\n                                    model: this.userServives.models,\r\n                                    as: ActionAssociateDatabase.POND_2_USER,\r\n                                    include: [\r\n                                        {\r\n                                            model: this.userRolesServices.models,\r\n                                            as: ActionAssociateDatabase.USER_2_ROLES_GET_EMPLOYEES,\r\n                                            required: false,\r\n                                            where: {\r\n                                                [this.sequeliz.Op.or]: [\r\n                                                    {\r\n                                                        bossId: userId\r\n                                                    },\r\n                                                    {\r\n                                                        userId,\r\n                                                        roles: 2\r\n                                                    }\r\n                                                ]\r\n                                            }\r\n                                        }\r\n                                    ]\r\n                                }\r\n                            ],\r\n                            where: {\r\n                                userId: ownerId\r\n                            }\r\n                        },\r\n                        {\r\n                            model: this.seasonServices.models,\r\n                            as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                            include: [\r\n                                {\r\n                                    model: this.userServives.models,\r\n                                    as: ActionAssociateDatabase.SEASON_2_USER,\r\n                                    include: [\r\n                                        {\r\n                                            model: this.userRolesServices.models,\r\n                                            as: ActionAssociateDatabase.USER_2_ROLES_GET_EMPLOYEES,\r\n                                            required: false,\r\n                                            where: {\r\n                                                [this.sequeliz.Op.or]: [\r\n                                                    {\r\n                                                        bossId: userId\r\n                                                    },\r\n                                                    {\r\n                                                        userId,\r\n                                                        roles: 2\r\n                                                    }\r\n                                                ]\r\n                                            }\r\n                                        }\r\n                                    ]\r\n                                }\r\n                            ],\r\n                            where: {\r\n                                userId: ownerId\r\n                            }\r\n                        }\r\n                    ],\r\n                    where: {\r\n                        seasonId,\r\n                        pondId\r\n                    }\r\n                }\r\n            ],\r\n            where: {\r\n                createdDate: {\r\n                    [this.sequeliz.Op.between]: [\r\n                        DateUtil.getUTCDateTime(DateUtil.startOf(DateUtil.parse(timeOut || new Date()), unitOfTime)),\r\n                        DateUtil.getUTCDateTime(DateUtil.endOf(DateUtil.parse(timeOut || new Date()), unitOfTime))\r\n                    ]\r\n                }\r\n            }\r\n        }).then(res => {\r\n            if (res) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    diaries: res\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy nhật ký cho ăn của ao này'\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    private getPondDiariesByUUId = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondDiaryUUId } = request.params;\r\n        const g: RegExp = new RegExp(isUUId4);\r\n        if(g.test(pondDiaryUUId)) {\r\n            this.pondDiaryServices.models.findOne({\r\n                where: {\r\n                    pondDiaryUUId\r\n                }\r\n            }).then(res => {\r\n                if(!!Object.keys(res).length) {\r\n                    response.status(200).json({\r\n                        success: true,\r\n                        message: '',\r\n                        pondDiary: res\r\n                    });\r\n                } else {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Không tìm thấy nhật ký.'\r\n                    });\r\n                }\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, vui lòng thử lại sau!'\r\n                });\r\n            });\r\n        } else {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Hiện tại chúng tôi không hỗ trợ api này.'\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get theo ngày\r\n     */\r\n    private deletePondDiary = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { primary } = request.params;\r\n        const g: RegExp = new RegExp(isUUId4);\r\n        const query: UpdateOptions = {\r\n            where: {}\r\n        };\r\n        if (g.test(primary)) {\r\n            query.where = {\r\n                pondDiaryUUId: primary\r\n            };\r\n        } else {\r\n            query.where = {\r\n                pondDiaryId: primary\r\n            };\r\n        }\r\n        this.pondDiaryServices.models.update({\r\n            isDeleled: 1\r\n        }, query).then(res => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: 'Đã xoá!',\r\n                results: null\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau!'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sửa đổi\r\n     */\r\n    private updatePondDiary = async (request: Request, response: Response, next: NextFunction) => {\r\n        const validate: any = this.validator(updatePondDiariesSchema);\r\n        const isValid: any = validate({\r\n            ...request.body,\r\n            fisheryQuantity: Number(request.body.fisheryQuantity)\r\n        });\r\n\r\n        if (!isValid) {\r\n            if(validate.error.includes('pondDiaryUUId')) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Chúng tôi không hỗ trợ API này.'\r\n                });\r\n            }\r\n            if(validate.error.includes('diaryName')) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Tên gợi nhắc không hợp lệ.'\r\n                });\r\n            }\r\n            if(validate.error.includes('fisheryQuantity')) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Số lượng thuỷ sản không hợp lệ.'\r\n                });\r\n            }\r\n            if(validate.error.includes('healthOfFishery')) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Tình trạng sức khoẻ không hợp lệ.'\r\n                });\r\n            }\r\n            if(validate.error.includes('pondVolume')) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Thể tích ao không hợp lệ.'\r\n                });\r\n            }\r\n            if(validate.error.includes('diedFishery')) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Số lượng cá chết không hợp lệ.'\r\n                });\r\n            }\r\n            if(validate.error.includes('notes')) {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Ghi chú không hợp lệ.'\r\n                });\r\n            }\r\n        } else {\r\n            const { diaryName, fisheryQuantity, healthOfFishery, pondVolume, diedFishery, notes } = request.body;\r\n            this.pondDiaryServices.models.update({\r\n                diaryName, fisheryQuantity, healthOfFishery, pondVolume, diedFishery, notes\r\n            }).then(res => {\r\n                if (!res) {\r\n                    return response.status(200).json({\r\n                        success: false,\r\n                        message: 'Thất bại.'\r\n                    });\r\n                }\r\n                return response.status(200).json({\r\n                    success: true,\r\n                    message: 'Cập nhật thành công.',\r\n                    results: null\r\n                });\r\n            }).catch(e => {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã có lỗi xảy ra, vui lòng thử lại sau!'\r\n                });\r\n            });\r\n        }\r\n    }\r\n}\r\n","export * from './takeCare.route';\r\n","// import { UsingFood, TakeCare } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, TakeCareServices, SeasonAndPondServices, SeasonServices, PondsServices, PondUserRolesServices, UsingFoodsServices, UsingVeterinaryServices, StoregeServices } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { FindOptions } from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport { DateUtil } from '../../lib';\r\n\r\n/**\r\n * @api {get} /ping Ping Request customer object\r\n * @apiName Ping\r\n * @apiGroup Ping\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class TakeCareRoute extends BaseRoute {\r\n    public static path = '/takeCare';\r\n    private static instance: TakeCareRoute;\r\n    private takeCareServices: TakeCareServices = new TakeCareServices();\r\n    private seasonAndPondServices: SeasonAndPondServices = new SeasonAndPondServices();\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private pondsServices: PondsServices = new PondsServices();\r\n    private pondUserRolesServices: PondUserRolesServices = new PondUserRolesServices();\r\n    private usingFoodsServices: UsingFoodsServices = new UsingFoodsServices();\r\n    private usingVeterinaryServices: UsingVeterinaryServices = new UsingVeterinaryServices();\r\n    private storegeServices: StoregeServices = new StoregeServices();\r\n    /**\r\n     * @class TakeCareRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!TakeCareRoute.instance) {\r\n            TakeCareRoute.instance = new TakeCareRoute();\r\n        }\r\n        return TakeCareRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[TakeCareRoute] Creating Take Care route.');\r\n\r\n        // add route\r\n        this.router.post('/gets', Authentication.isLogin, this.getTakeCare);\r\n        this.router.get('/get', this.test);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, TakeCareRoute.path);\r\n    }\r\n\r\n    /**\r\n     * @method POST\r\n     *\r\n     * Get using food or using veterinay option\r\n     * ```\r\n     * {\r\n     *      seasonId: number, // required\r\n     *      pondId: number, // required\r\n     *      type: number<0 | 1> // required 0 = Food | 1 = Veterinary\r\n     *      options: {\r\n     *          timeOut: Date,\r\n     *          unitOfTime: string\r\n     *      }\r\n     * }\r\n     * ```\r\n     */\r\n    private getTakeCare = async (request: Request, response: Response, next: NextFunction) => {\r\n        // init search\r\n        const {\r\n            pondId, seasonId,\r\n            type, // type of take care\r\n            /**\r\n             * default (30 days from present)\r\n             * 'days' - get by days\r\n             * 'months' - get by months\r\n             * ```json\r\n             * {\r\n             *      \"timeOut\": \"Thời gian cần get\",\r\n             *      \"unitOfTime\": \"Đơn vị tính: days, months\"\r\n             * }\r\n             * ```\r\n             */\r\n            options // search options\r\n        } = request.body;\r\n\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        // create query\r\n        const query: FindOptions<any> = {\r\n            include: [],\r\n            where: {}\r\n        };\r\n\r\n        // tmp where\r\n        let where: any = {};\r\n\r\n        // init query\r\n        const init: any = {\r\n            model: this.seasonAndPondServices.models,\r\n            as: ActionAssociateDatabase.TAKE_CARE_2_SEASON_AND_POND,\r\n            where: {\r\n                pondId, seasonId\r\n            },\r\n            include: [\r\n                {\r\n                    model: this.pondsServices.models,\r\n                    as: ActionAssociateDatabase.SEASON_AND_POND_2_POND,\r\n                    include: [\r\n                        {\r\n                            model: this.pondUserRolesServices.models,\r\n                            as: ActionAssociateDatabase.POND_2_POND_USER_ROLE,\r\n                            where: {\r\n                                userId\r\n                            },\r\n                            attributes: []\r\n                        }\r\n                    ],\r\n                    where: {\r\n                        userId: ownerId\r\n                    },\r\n                    attributes: []\r\n                },\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId\r\n                    },\r\n                    attributes: []\r\n                }\r\n            ],\r\n            attributes: []\r\n        };\r\n        query.include.push(init);\r\n\r\n        // get using Food or veterinary\r\n        let getType: any = {};\r\n        if (type === 0) {\r\n            getType = {\r\n                model: this.usingFoodsServices.models,\r\n                as: ActionAssociateDatabase.TAKE_CARE_2_USING_FOOD,\r\n                required: false,\r\n                include: [\r\n                    {\r\n                        model: this.storegeServices.models,\r\n                        as: ActionAssociateDatabase.USING_FOOD_2_STORAGE,\r\n                        required: false\r\n                    }\r\n                ]\r\n            };\r\n\r\n            // options date\r\n            if (options ? options.unitOfTime : false) {\r\n                where = {\r\n                    ...{\r\n                        '$usingFoods.createdDate$': {\r\n                            [this.sequeliz.Op.between]: [\r\n                                DateUtil.getUTCDateTime(DateUtil.startOf(DateUtil.parse(options.timeOut ? options.timeOut : new Date()), options.unitOfTime)),\r\n                                DateUtil.getUTCDateTime(DateUtil.endOf(DateUtil.parse(options.timeOut ? options.timeOut : new Date()), options.unitOfTime))\r\n                            ]\r\n                        }\r\n                    }\r\n                };\r\n                query.where = {\r\n                    ...query.where,\r\n                    ...where\r\n                };\r\n            } else {\r\n                where = {\r\n                    '$usingFoods.createdDate$': {\r\n                        [this.sequeliz.Op.between]: [\r\n                            DateUtil.getUTCDateTime(DateUtil.startOf(DateUtil.subtract(DateUtil.parse(new Date()), 30, 'days'), 'days')),\r\n                            DateUtil.getUTCDateTime(DateUtil.parse(new Date()))\r\n                        ]\r\n                    }\r\n                };\r\n                query.where = {\r\n                    ...query.where,\r\n                    ...where\r\n                };\r\n            }\r\n        }\r\n        if (type === 1) {\r\n            getType = {\r\n                model: this.usingVeterinaryServices.models,\r\n                as: ActionAssociateDatabase.TAKE_CARE_2_USING_VETERINARY,\r\n                required: false,\r\n                include: [\r\n                    {\r\n                        model: this.storegeServices.models,\r\n                        as: ActionAssociateDatabase.USING_VETERINARY_2_STORAGE,\r\n                        required: false\r\n                    }\r\n                ]\r\n            };\r\n\r\n            // options date\r\n            if (options ? options.unitOfTime : false) {\r\n                where = {\r\n                    ...{\r\n                        '$usingVeterinary.createdDate$': {\r\n                            [this.sequeliz.Op.between]: [\r\n                                DateUtil.getUTCDateTime(DateUtil.startOf(DateUtil.parse(options.timeOut ? options.timeOut : new Date()), options.unitOfTime)),\r\n                                DateUtil.getUTCDateTime(DateUtil.endOf(DateUtil.parse(options.timeOut ? options.timeOut : new Date()), options.unitOfTime))\r\n                            ]\r\n                        }\r\n                    }\r\n                };\r\n                query.where = {\r\n                    ...query.where,\r\n                    ...where\r\n                };\r\n            } else {\r\n                where = {\r\n                    '$usingVeterinary.createdDate$': {\r\n                        [this.sequeliz.Op.between]: [\r\n                            DateUtil.getUTCDateTime(DateUtil.startOf(DateUtil.subtract(DateUtil.parse(new Date()), 30, 'days'), 'days')),\r\n                            DateUtil.getUTCDateTime(DateUtil.parse(new Date()))\r\n                        ]\r\n                    }\r\n                };\r\n                query.where = {\r\n                    ...query.where,\r\n                    ...where\r\n                };\r\n            }\r\n        }\r\n        query.include.push(getType);\r\n\r\n        // sure type\r\n        where = {\r\n            type\r\n        };\r\n        query.where = {\r\n            ...query.where,\r\n            ...where\r\n        };\r\n\r\n        // check isBoss\r\n        if (!isBoss) {\r\n            where = {\r\n                ...{\r\n                    '$seasonAndPond->ponds->pondUserRoles.userId$': userId,\r\n                    '$seasonAndPond->ponds->pondUserRoles.pondId$': pondId\r\n                }\r\n            };\r\n            query.where = {\r\n                ...query.where,\r\n                ...where\r\n            };\r\n        }\r\n\r\n        // execute\r\n        this.takeCareServices.models.findAll(query).then(res => {\r\n            if (!res.length) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: 'Không tìm thấy hoạt động chăm sóc.',\r\n                    takeCare: res\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    takeCare: res\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.',\r\n                e\r\n            });\r\n        });\r\n    }\r\n\r\n    private test = async (req, response, next) => {\r\n        const { date } = req.headers;\r\n        response.status(200).json({\r\n            'success': true,\r\n            'message': '',\r\n            'parse': DateUtil.parse(date ? date : null).toLocaleDateString() + ' ' + DateUtil.parse(date).toLocaleTimeString(),\r\n            'start-of-date': DateUtil.startOf(new Date(), 'day').toLocaleDateString() + ' ' + DateUtil.startOf(new Date(), 'day').toLocaleTimeString(),\r\n            'end-of-date': DateUtil.endOf(new Date(), 'day').toLocaleDateString() + ' ' + DateUtil.endOf(new Date(), 'day').toLocaleTimeString(),\r\n            'start-of-week': DateUtil.startOf(new Date(), 'week').toLocaleDateString() + ' ' + DateUtil.startOf(new Date(), 'day').toLocaleTimeString(),\r\n            'end-of-week': DateUtil.endOf(new Date(), 'week').toLocaleDateString() + ' ' + DateUtil.endOf(new Date(), 'day').toLocaleTimeString(),\r\n            'start-of-month': DateUtil.startOf(new Date(), 'month').toLocaleDateString() + ' ' + + ' ' + DateUtil.startOf(new Date(), 'month').toLocaleTimeString(),\r\n            'end-of-month': DateUtil.endOf(new Date(), 'month').toLocaleDateString() + ' ' + + ' ' + DateUtil.endOf(new Date(), 'month').toLocaleTimeString(),\r\n            'add-day': DateUtil.add(new Date(), 1, 'day').toLocaleDateString() + ' ' + DateUtil.add(new Date(), 1, 'day').toLocaleTimeString(),\r\n            'add-months': DateUtil.add(new Date(), 1, 'month').toLocaleDateString() + ' ' + DateUtil.add(new Date(), 1, 'month').toLocaleTimeString(),\r\n            'subtract-day': DateUtil.subtract(new Date(), 1, 'day').toLocaleDateString() + ' ' + DateUtil.subtract(new Date(), 1, 'day').toLocaleTimeString(),\r\n            'subtract-months': DateUtil.subtract(new Date(), 1, 'month').toLocaleDateString() + ' ' + DateUtil.subtract(new Date(), 1, 'month').toLocaleTimeString(),\r\n        });\r\n    }\r\n}\r\n","export * from './usingVeterinary.route';\r\n","import { UsingVeterinary, TakeCare } from '../../components';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { logger, TakeCareServices, SeasonAndPondServices, SeasonServices, UsingVeterinaryServices, StoregeServices } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport * as uuidv4 from 'uuid/v4';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { Transaction, FindOptions } from 'sequelize';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport { DateUtil } from '../../lib';\r\n\r\n/**\r\n * @api {all} /usingVeterinary UsingVeterinary Request customer object\r\n * @apiName UsingVeterinary\r\n * @apiGroup UsingVeterinary\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class UsingVeterinaryRoute extends BaseRoute {\r\n    public static path = '/usingVeterinary';\r\n    private static instance: UsingVeterinaryRoute;\r\n    private takeCareServices: TakeCareServices = new TakeCareServices();\r\n    private seasonAndPondServices: SeasonAndPondServices = new SeasonAndPondServices();\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private usingVeterinaryServices: UsingVeterinaryServices = new UsingVeterinaryServices();\r\n    private storegeServices: StoregeServices = new StoregeServices();\r\n    /**\r\n     * @class UsingVeterinaryRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!UsingVeterinaryRoute.instance) {\r\n            UsingVeterinaryRoute.instance = new UsingVeterinaryRoute();\r\n        }\r\n        return UsingVeterinaryRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[UsingVeterinaryRoute] Creating Using Veterinary route.');\r\n\r\n        // add route\r\n        this.router.post('/add', Authentication.isLogin, this.addUsingVeterinary);\r\n        this.router.post('/gets', Authentication.isLogin, this.getUsingVeterinary);\r\n\r\n        // log endpoints\r\n        this.logEndpoints(this.router, UsingVeterinaryRoute.path);\r\n    }\r\n\r\n    /**\r\n     * usingFood - take care type is 0\r\n     * usingVeterinary - take care type is 1\r\n     */\r\n    private addUsingVeterinary = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondId, takeCareName, causesNSymptoms, averageSize, totalBiomass, result, latestHarvestDate, mentor, storageId, quantity } = request.body;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const seasonAndPond: any = await this.seasonAndPondServices.models.findOne({\r\n            include: [\r\n                {\r\n                    model: this.seasonServices.models,\r\n                    as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                    where: {\r\n                        userId: ownerId,\r\n                        status: 0\r\n                    },\r\n                    attributes: []\r\n                }\r\n            ],\r\n            where: {\r\n                pondId\r\n            },\r\n            attributes: ['seasonAndPondId']\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        });\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            const onUpdate: any = await this.storegeServices.models.update({\r\n                quantityStorages: this.sequeliz.literal(`quantityStorages - ${quantity}`)\r\n            }, {\r\n                    where: {\r\n                        storageId\r\n                    },\r\n                    transaction: t,\r\n                    returning: true\r\n                }).catch(e => {\r\n                    if (e.message === 'FailQuantity') {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Số lượng thuốc & dược phẩm trong kho không đủ.'\r\n                        });\r\n                    } else {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                        });\r\n                    }\r\n                    t.rollback();\r\n                });\r\n            if (onUpdate) {\r\n                const takeCare: TakeCare = new TakeCare();\r\n                takeCare.setTakecare(null, uuidv4(), seasonAndPond.seasonAndPondId, 1, takeCareName);\r\n                const tk: any = await this.takeCareServices.models.create(takeCare, {\r\n                    transaction: t\r\n                }).catch(e => {\r\n                    response.status(200).json({\r\n                        success: false,\r\n                        message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                    });\r\n                    t.rollback();\r\n                });\r\n                if (tk) {\r\n                    const usingVeterinary: UsingVeterinary = new UsingVeterinary();\r\n                    usingVeterinary.setUsingveterinary(null, uuidv4(), tk.takeCareId, storageId, causesNSymptoms, averageSize, totalBiomass, quantity, result, latestHarvestDate, mentor);\r\n                    usingVeterinary.usingVeterinaryServices.models.create(usingVeterinary, {\r\n                        transaction: t\r\n                    }).catch(e => {\r\n                        response.status(200).json({\r\n                            success: false,\r\n                            message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                        });\r\n                        t.rollback();\r\n                    }).then(res => {\r\n                        response.status(200).json({\r\n                            success: true,\r\n                            message: 'Thêm thành công.'\r\n                        });\r\n                        t.commit();\r\n                    });\r\n                }\r\n            } else {\r\n                t.rollback();\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã xảy ra lỗi vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get Cho ăn\r\n     * @method POST\r\n     */\r\n    private getUsingVeterinary = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { pondId, seasonId, options } = request.body;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n        const isBoss: boolean = userId === ownerId;\r\n        const query: FindOptions<any> = {\r\n            include: [\r\n                {\r\n                    model: this.usingVeterinaryServices.models,\r\n                    as: ActionAssociateDatabase.TAKE_CARE_2_USING_VETERINARY,\r\n                    where: {\r\n                        createdDate: {\r\n                            [this.sequeliz.Op.between]: [\r\n                                DateUtil.getUTCDateTime(DateUtil.startOf(DateUtil.parse(options.timeOut || new Date()), options.unitOfTime)),\r\n                                DateUtil.getUTCDateTime(DateUtil.endOf(DateUtil.parse(options.timeOut || new Date()), options.unitOfTime))\r\n                            ]\r\n                        }\r\n                    },\r\n                    include: [\r\n                        {\r\n                            model: this.storegeServices.models,\r\n                            as: ActionAssociateDatabase.USING_VETERINARY_2_STORAGE\r\n                        }\r\n                    ],\r\n                    required: false\r\n                }\r\n            ],\r\n            where: {\r\n                type: 1\r\n            }\r\n        };\r\n\r\n        if (isBoss) {\r\n            query.include.push({\r\n                model: this.seasonAndPondServices.models,\r\n                as: ActionAssociateDatabase.TAKE_CARE_2_SEASON_AND_POND,\r\n                where: {\r\n                    seasonId,\r\n                    pondId\r\n                },\r\n                attributes: []\r\n            });\r\n        } else {\r\n            query.include.push({\r\n                model: this.seasonAndPondServices.models,\r\n                as: ActionAssociateDatabase.TAKE_CARE_2_SEASON_AND_POND,\r\n                where: {\r\n                    seasonId,\r\n                    pondId\r\n                },\r\n                include: [\r\n                    {\r\n                        model: this.seasonServices.models,\r\n                        as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                        where: {\r\n                            status: 0\r\n                        }\r\n                    }\r\n                ],\r\n                attributes: []\r\n            });\r\n        }\r\n\r\n        this.takeCareServices.models.findAll(query).then(res => {\r\n            if (res) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    takeCare: res\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy nhật ký cho ăn của ao này'\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n    }\r\n}\r\n","export * from './costs.route';\r\n","import { Request, Response, NextFunction } from 'express';\r\nimport { logger, MaterialServives, CouponServives, StoregeServices, BoughtBreedDetailsServives, BreedServives, HarvestDetailsServives, HarvestsServives, SeasonAndPondServices, SeasonServices, StockingServices, StockingDetailsServices, PondsServices } from '../../services';\r\nimport { BaseRoute } from '../BaseRoute';\r\nimport { Authentication } from '../../helpers/login-helpers';\r\nimport { ActionAssociateDatabase } from '../../common';\r\nimport { FindOptions, Transaction } from 'sequelize';\r\nimport { sumBy, groupBy, uniqBy } from 'lodash';\r\n\r\n/**\r\n * @api {get} /costs Cost Request customer object\r\n * @apiName Cost\r\n * @apiGroup Cost\r\n *\r\n * @apiSuccess {String} type Json Type.\r\n */\r\nexport class CostsRoute extends BaseRoute {\r\n    public static path = '/costs';\r\n    private static instance: CostsRoute;\r\n    private materialServives: MaterialServives = new MaterialServives();\r\n    private couponServives: CouponServives = new CouponServives();\r\n    private storegeServices: StoregeServices = new StoregeServices();\r\n    private boughtBreedDetailsServives: BoughtBreedDetailsServives = new BoughtBreedDetailsServives();\r\n    private breedServives: BreedServives = new BreedServives();\r\n    private harvestDetailsServives: HarvestDetailsServives = new HarvestDetailsServives();\r\n    private harvestsServives: HarvestsServives = new HarvestsServives();\r\n    private seasonAndPondServices: SeasonAndPondServices = new SeasonAndPondServices();\r\n    private seasonServices: SeasonServices = new SeasonServices();\r\n    private stockingServices: StockingServices = new StockingServices();\r\n    private stockingDetailsServices: StockingDetailsServices = new StockingDetailsServices();\r\n    private pondsServices: PondsServices = new PondsServices();\r\n    /**\r\n     * @class CostsRoute\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        super();\r\n        this.init();\r\n    }\r\n\r\n    static get router() {\r\n        if (!CostsRoute.instance) {\r\n            CostsRoute.instance = new CostsRoute();\r\n        }\r\n        return CostsRoute.instance.router;\r\n    }\r\n\r\n    private init() {\r\n        // log message\r\n        logger.info('[CostsRoute] Creating prices route.');\r\n\r\n        // add route\r\n        // this.router.get('/gets/:seasonId', this.getAllPrices);\r\n        this.router.get('/gets/storage/:seasonUUId', this.storageCost);\r\n        this.router.get('/gets/breed/:seasonUUId', this.breedCost);\r\n        this.router.get('/gets/harvest/:seasonUUId', this.harvestCalculator);\r\n\r\n        // log endpoint\r\n        this.logEndpoints(this.router, CostsRoute.path);\r\n    }\r\n\r\n    private getAllPrices = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonId } = request.params;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n        const ownerId: number = deToken.createdBy == null && deToken.roles.length === 0 ? deToken.userId : deToken.roles[0].bossId;\r\n\r\n        const mat: any = await this.materialServives.models.findAll({\r\n            attributes: [[this.sequeliz.literal('SUM(quantity*unitPrice)'), 'totalPrices']] as any,\r\n            include: [\r\n                {\r\n                    model: this.couponServives.models,\r\n                    as: ActionAssociateDatabase.MATERIAL_2_COUPON,\r\n                    include: [\r\n                        {\r\n                            model: this.seasonServices.models,\r\n                            as: ActionAssociateDatabase.COUPON_2_SEASON,\r\n                            where: {\r\n                                userId\r\n                            }\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    model: this.storegeServices.models,\r\n                    as: ActionAssociateDatabase.MATERIAL_2_STORAGE\r\n                }\r\n            ],\r\n            group: ['type']\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n\r\n        const bre: any = await this.boughtBreedDetailsServives.models.findAll({\r\n            attributes: [[this.sequeliz.literal('SUM(quantity*unitPrice)'), 'totalPrices']] as any,\r\n            include: [\r\n                {\r\n                    model: this.couponServives.models,\r\n                    as: ActionAssociateDatabase.BOUGHT_BREED_DETAIL_2_COUPON,\r\n                    include: [\r\n                        {\r\n                            model: this.seasonServices.models,\r\n                            as: ActionAssociateDatabase.COUPON_2_SEASON,\r\n                            where: {\r\n                                userId\r\n                            }\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    model: this.breedServives.models,\r\n                    as: ActionAssociateDatabase.BOUGHT_BREED_DETAIL_2_BREED\r\n                }\r\n            ]\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n\r\n        const har: any = await this.harvestDetailsServives.models.findAll({\r\n            attributes: [[this.sequeliz.literal('SUM(quantity*unitPrice)'), 'totalPrices']] as any,\r\n            include: [\r\n                {\r\n                    model: this.harvestsServives.models,\r\n                    as: ActionAssociateDatabase.HARVEST_DETAIL_2_HARVEST,\r\n                    include: [\r\n                        {\r\n                            model: this.seasonAndPondServices.models,\r\n                            as: ActionAssociateDatabase.HARVEST_2_SEASON_AND_POND,\r\n                            include: [\r\n                                {\r\n                                    model: this.seasonServices.models,\r\n                                    as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                                    where: {\r\n                                        userId\r\n                                    }\r\n                                }\r\n                            ]\r\n                        }\r\n                    ]\r\n                }\r\n            ],\r\n            group: ['harvest.seasonAndPondId']\r\n        }).catch(e => {\r\n            e;\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Có lỗi xảy ra, vui lòng thử lại sau.'\r\n            });\r\n        });\r\n\r\n        if(!!mat.length && !!bre.length && !!har.length) {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                storages: mat,\r\n                breeds: bre,\r\n                harvest: har\r\n            });\r\n        } else {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Không tìm thấy thông tin chi phí của vụ nuôi này.',\r\n                results: []\r\n            });\r\n        }\r\n    }\r\n\r\n    private storageCost = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonUUId } = request.params;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            const query: FindOptions<any> = {\r\n                include: [\r\n                    {\r\n                        model: this.materialServives.models,\r\n                        as: ActionAssociateDatabase.COUPON_2_MATERIAL,\r\n                        include: [\r\n                            {\r\n                                model: this.storegeServices.models,\r\n                                as: ActionAssociateDatabase.MATERIAL_2_STORAGE\r\n                            }\r\n                        ]\r\n                    },\r\n                    {\r\n                        model: this.seasonServices.models,\r\n                        as: ActionAssociateDatabase.COUPON_2_SEASON,\r\n                        where: {\r\n                            userId,\r\n                            seasonUUId\r\n                        }\r\n                    }\r\n                ],\r\n                transaction: t\r\n            };\r\n            const tables: any = await this.couponServives.models.findAll(query);\r\n\r\n            query.attributes =  [\r\n                [this.sequeliz.literal(`SUM(materials.quantity*materials.unitPrice)`), 'totals'],\r\n                'createdDate'\r\n            ];\r\n            query.group = [\r\n                this.sequeliz.fn('YEAR', this.sequeliz.fn('CONVERT_TZ',this.sequeliz.col('coupons.createdDate'),'UTC','vi-VN')),\r\n                this.sequeliz.fn('MONTH', this.sequeliz.fn('CONVERT_TZ',this.sequeliz.col('coupons.createdDate'),'UTC','vi-VN')),\r\n                this.sequeliz.fn('DAY', this.sequeliz.fn('CONVERT_TZ',this.sequeliz.col('coupons.createdDate'),'UTC','vi-VN')),\r\n                this.sequeliz.col('materials->storage.type')\r\n            ];\r\n\r\n            const charts: any = await this.couponServives.models.findAll(query);\r\n\r\n            const labels: any = uniqBy(charts, (u: any) => {\r\n                const d: Date = new Date(u.createdDate);\r\n                return d.getDate() + d.getMonth() + d.getFullYear();\r\n            });\r\n\r\n            return new Promise((resolve, reject) => {\r\n                t.commit();\r\n                if(!!tables.length && !!charts.length) {\r\n                    resolve({\r\n                        tables,\r\n                        charts,\r\n                        labels: labels.map(e => e.createdDate)\r\n                    });\r\n                } else {\r\n                    resolve({\r\n                        success: false,\r\n                        message: 'Không tìm thấy thông tin NHẬP KHO.',\r\n                        tables: [],\r\n                        charts: [],\r\n                        labels: []\r\n                    });\r\n                }\r\n            });\r\n        }).then(res => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                ...res\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau!'\r\n            });\r\n        });\r\n    }\r\n\r\n    private breedCost = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonUUId } = request.params;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            const query: FindOptions<any> = {\r\n                include: [\r\n                    {\r\n                        model: this.boughtBreedDetailsServives.models,\r\n                        as: ActionAssociateDatabase.COUPON_2_BOUGHT_BREED_DETAILS,\r\n                        include: [\r\n                            {\r\n                                model: this.breedServives.models,\r\n                                as: ActionAssociateDatabase.BOUGHT_BREED_DETAIL_2_BREED\r\n                            }\r\n                        ]\r\n                    },\r\n                    {\r\n                        model: this.seasonServices.models,\r\n                        as: ActionAssociateDatabase.COUPON_2_SEASON,\r\n                        where: {\r\n                            userId,\r\n                            seasonUUId\r\n                        }\r\n                    }\r\n                ],\r\n                transaction: t\r\n            };\r\n            const tables: any = await this.couponServives.models.findAll(query);\r\n\r\n            query.attributes =  [\r\n                [this.sequeliz.literal(`SUM(boughtBreedDetails.quantity*boughtBreedDetails.unitPrice)`), 'totals'],\r\n                'createdDate'\r\n            ];\r\n            query.group = [\r\n                this.sequeliz.fn('YEAR', this.sequeliz.fn('CONVERT_TZ',this.sequeliz.col('coupons.createdDate'),'UTC','vi-VN')),\r\n                this.sequeliz.fn('MONTH', this.sequeliz.fn('CONVERT_TZ',this.sequeliz.col('coupons.createdDate'),'UTC','vi-VN')),\r\n                this.sequeliz.fn('DAY', this.sequeliz.fn('CONVERT_TZ',this.sequeliz.col('coupons.createdDate'),'UTC','vi-VN'))\r\n            ];\r\n\r\n            const charts: any = await this.couponServives.models.findAll(query);\r\n\r\n            let labels: any = uniqBy(charts, (u: any) => {\r\n                const d: Date = new Date(u.createdDate);\r\n                return d.getDate() + d.getMonth() + d.getFullYear();\r\n            });\r\n\r\n            labels = labels.map(e => {\r\n                const dL: Date = new Date(e.createdDate);\r\n                const isDL: number = dL.getDate() + dL.getMonth() + dL.getFullYear();\r\n                const sum: number = sumBy(charts, (u: any) => {\r\n                    const dS: Date = new Date(u.createdDate);\r\n                    const isDS: number = dS.getDate() + dS.getMonth() + dS.getFullYear();\r\n                    if(isDL === isDS) {\r\n                        return u.quantity * u.unitPrice;\r\n                    } else {\r\n                        false;\r\n                    }\r\n                });\r\n                e[`totals`] = sum;\r\n                return e;\r\n            });\r\n\r\n            return new Promise((resolve, reject) => {\r\n                t.commit();\r\n                if(!!tables.length && !!charts.length) {\r\n                    resolve({\r\n                        tables,\r\n                        charts,\r\n                        labels\r\n                    });\r\n                } else {\r\n                    resolve({\r\n                        success: false,\r\n                        message: 'Không tìm thấy thông tin NHẬP GIỐNG.',\r\n                        tables: [],\r\n                        charts: [],\r\n                        labels: []\r\n                    });\r\n                }\r\n            });\r\n        }).then(res => {\r\n            response.status(200).json({\r\n                success: true,\r\n                message: '',\r\n                ...res\r\n            });\r\n        }).catch(e => {\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Lỗi đường truyền, vui lòng thử lại sau!'\r\n            });\r\n        });\r\n    }\r\n\r\n    /** 8da8abfa-bf60-4f9f-ada7-9fcbdf905ef5 */\r\n    private harvestCalculator = async (request: Request, response: Response, next: NextFunction) => {\r\n        const { seasonUUId } = request.params;\r\n        // start authozation info\r\n        const token: string = request.headers.authorization.split(' ')[1];\r\n        const deToken: any = Authentication.detoken(token);\r\n        const { userId } = deToken;\r\n\r\n        return this.sequeliz.transaction().then(async (t: Transaction) => {\r\n            let charts: any = await this.harvestsServives.models.findAll({\r\n                include: [\r\n                    {\r\n                        model: this.harvestDetailsServives.models,\r\n                        as: ActionAssociateDatabase.HARVEST_2_HARVEST_DETAILS\r\n                    },\r\n                    {\r\n                        model: this.seasonAndPondServices.models,\r\n                        as: ActionAssociateDatabase.HARVEST_2_SEASON_AND_POND,\r\n                        required: true,\r\n                        include: [\r\n                            {\r\n                                model: this.stockingServices.models,\r\n                                as: ActionAssociateDatabase.SEASON_AND_POND_2_STOCKING,\r\n                                include: [\r\n                                    {\r\n                                        model: this.stockingDetailsServices.models,\r\n                                        as: ActionAssociateDatabase.STOCKING_2_STOCKING_DETAILS,\r\n                                        include: [\r\n                                            {\r\n                                                model: this.breedServives.models,\r\n                                                as: ActionAssociateDatabase.STOCKING_DETAILS_2_BREED\r\n                                            }\r\n                                        ]\r\n                                    }\r\n                                ]\r\n                            },\r\n                            {\r\n                                model: this.seasonServices.models,\r\n                                as: ActionAssociateDatabase.SEASON_AND_POND_2_SEASON,\r\n                                required: true,\r\n                                where: {\r\n                                    userId,\r\n                                    seasonUUId\r\n                                }\r\n                            },\r\n                            {\r\n                                model: this.pondsServices.models,\r\n                                as: ActionAssociateDatabase.SEASON_AND_POND_2_POND\r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            });\r\n\r\n            return new Promise((resolve, reject) => {\r\n                t.commit();\r\n                charts = charts.map((e: any) => {\r\n                    const dL: Date = new Date(e.createdDate);\r\n                    const isDL: number = dL.getDate() + dL.getMonth() + dL.getFullYear();\r\n                    for(const e$ of charts) {\r\n                        const dS: Date = new Date(e$.createdDate);\r\n                        const isDS: number = dS.getDate() + dS.getMonth() + dS.getFullYear();\r\n                        if(isDL === isDS) {\r\n                            e.dataValues[`totals`] = e.details[0].quantity * e.details[0].unitPrice;\r\n                            return e.dataValues;\r\n                        }\r\n                    }\r\n                });\r\n                return resolve(charts);\r\n                // if(!!tables.length && !!charts.length) {\r\n                //     resolve({\r\n                //         tables,\r\n                //         charts\r\n                //     });\r\n                // } else {\r\n                //     resolve({\r\n                //         success: false,\r\n                //         message: 'Không tìm thấy thông tin NHẬP GIỐNG.'\r\n                //     });\r\n                // }\r\n            });\r\n        }).then((res: any) => {\r\n            if(!!res.length) {\r\n                response.status(200).json({\r\n                    success: true,\r\n                    message: '',\r\n                    charts: res\r\n                });\r\n            } else {\r\n                response.status(200).json({\r\n                    success: false,\r\n                    message: 'Không tìm thấy thông tin THU HOẠCH.',\r\n                    charts: []\r\n                });\r\n            }\r\n        }).catch(e => {\r\n            e;\r\n            response.status(200).json({\r\n                success: false,\r\n                message: 'Đã có lỗi xảy ra, vui lòng thử lại sau!'\r\n            });\r\n        });\r\n    }\r\n}\r\n","import * as SocketIO from 'socket.io';\r\nimport { BaseSocketServer } from './BaseSocket';\r\nimport { TaskScheduler } from './task-scheduler.socket';\r\n\r\nexport class SocketBuild extends BaseSocketServer {\r\n    constructor(protected io: SocketIO.Server) {\r\n        super(io);\r\n        new TaskScheduler(this.io);\r\n    }\r\n}\r\n","import * as SocketIO from 'socket.io';\r\nimport { BaseSocketServer } from './BaseSocket';\r\nimport { PondsServices } from '../services';\r\nimport * as schedule from 'node-schedule';\r\nimport { DateUtil } from '../lib';\r\n\r\nexport class TaskScheduler extends BaseSocketServer {\r\n\r\n    private pondsServices: PondsServices = new PondsServices();\r\n\r\n    constructor(protected io: SocketIO.Server) {\r\n        super(io);\r\n        // const timeToUpdate: any = DateUtil.endOf(new Date(2018,11,11,0,0,0), 'dates');\r\n        console.log();\r\n        const timeToUpdate: any = new Date(2018,11,11,0,0,0);\r\n\r\n        schedule.scheduleJob(timeToUpdate, async () => {\r\n            await this.pondsServices.models.update({\r\n                isFed: 0\r\n            });\r\n            this.io.sockets.emit('update-using-food-status', {\r\n                success: true\r\n            });\r\n        });\r\n    }\r\n}\r\n","module.exports = require(\"node-schedule\");","module.exports = require(\"greenlock-express\");","module.exports = require(\"debug\");"],"sourceRoot":""}